require.config({
    config: {
        'jsbuild':{"knockoutjs/knockout.js":"/*!\r\n * Knockout JavaScript library v3.3.0\r\n * (c) Steven Sanderson - http://knockoutjs.com/\r\n * License: MIT (http://www.opensource.org/licenses/mit-license.php)\r\n */\r\n\r\n(function(){\r\nvar DEBUG=true;\r\n(function(undefined){\r\n    // (0, eval)('this') is a robust way of getting a reference to the global object\r\n    // For details, see http://stackoverflow.com/questions/14119988/return-this-0-evalthis/14120023#14120023\r\n    var window = this || (0, eval)('this'),\r\n        document = window['document'],\r\n        navigator = window['navigator'],\r\n        jQueryInstance = window[\"jQuery\"],\r\n        JSON = window[\"JSON\"];\r\n(function(factory) {\r\n    // Support three module loading scenarios\r\n    if (typeof define === 'function' && define['amd']) {\r\n        // [1] AMD anonymous module\r\n        define(['exports', 'require'], factory);\r\n    } else if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\r\n        // [2] CommonJS/Node.js\r\n        factory(module['exports'] || exports);  // module.exports is for Node.js\r\n    } else {\r\n        // [3] No module loader (plain <script> tag) - put directly in global namespace\r\n        factory(window['ko'] = {});\r\n    }\r\n}(function(koExports, amdRequire){\r\n// Internally, all KO objects are attached to koExports (even the non-exported ones whose names will be minified by the closure compiler).\r\n// In the future, the following \"ko\" variable may be made distinct from \"koExports\" so that private objects are not externally reachable.\r\nvar ko = typeof koExports !== 'undefined' ? koExports : {};\r\n// Google Closure Compiler helpers (used only to make the minified file smaller)\r\nko.exportSymbol = function(koPath, object) {\r\n    var tokens = koPath.split(\".\");\r\n\r\n    // In the future, \"ko\" may become distinct from \"koExports\" (so that non-exported objects are not reachable)\r\n    // At that point, \"target\" would be set to: (typeof koExports !== \"undefined\" ? koExports : ko)\r\n    var target = ko;\r\n\r\n    for (var i = 0; i < tokens.length - 1; i++)\r\n        target = target[tokens[i]];\r\n    target[tokens[tokens.length - 1]] = object;\r\n};\r\nko.exportProperty = function(owner, publicName, object) {\r\n    owner[publicName] = object;\r\n};\r\nko.version = \"3.3.0\";\r\n\r\nko.exportSymbol('version', ko.version);\r\nko.utils = (function () {\r\n    function objectForEach(obj, action) {\r\n        for (var prop in obj) {\r\n            if (obj.hasOwnProperty(prop)) {\r\n                action(prop, obj[prop]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function extend(target, source) {\r\n        if (source) {\r\n            for(var prop in source) {\r\n                if(source.hasOwnProperty(prop)) {\r\n                    target[prop] = source[prop];\r\n                }\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n\r\n    function setPrototypeOf(obj, proto) {\r\n        obj.__proto__ = proto;\r\n        return obj;\r\n    }\r\n\r\n    var canSetPrototype = ({ __proto__: [] } instanceof Array);\r\n\r\n    // Represent the known event types in a compact way, then at runtime transform it into a hash with event name as key (for fast lookup)\r\n    var knownEvents = {}, knownEventTypesByEventName = {};\r\n    var keyEventTypeName = (navigator && /Firefox\\/2/i.test(navigator.userAgent)) ? 'KeyboardEvent' : 'UIEvents';\r\n    knownEvents[keyEventTypeName] = ['keyup', 'keydown', 'keypress'];\r\n    knownEvents['MouseEvents'] = ['click', 'dblclick', 'mousedown', 'mouseup', 'mousemove', 'mouseover', 'mouseout', 'mouseenter', 'mouseleave'];\r\n    objectForEach(knownEvents, function(eventType, knownEventsForType) {\r\n        if (knownEventsForType.length) {\r\n            for (var i = 0, j = knownEventsForType.length; i < j; i++)\r\n                knownEventTypesByEventName[knownEventsForType[i]] = eventType;\r\n        }\r\n    });\r\n    var eventsThatMustBeRegisteredUsingAttachEvent = { 'propertychange': true }; // Workaround for an IE9 issue - https://github.com/SteveSanderson/knockout/issues/406\r\n\r\n    // Detect IE versions for bug workarounds (uses IE conditionals, not UA string, for robustness)\r\n    // Note that, since IE 10 does not support conditional comments, the following logic only detects IE < 10.\r\n    // Currently this is by design, since IE 10+ behaves correctly when treated as a standard browser.\r\n    // If there is a future need to detect specific versions of IE10+, we will amend this.\r\n    var ieVersion = document && (function() {\r\n        var version = 3, div = document.createElement('div'), iElems = div.getElementsByTagName('i');\r\n\r\n        // Keep constructing conditional HTML blocks until we hit one that resolves to an empty fragment\r\n        while (\r\n            div.innerHTML = '<!--[if gt IE ' + (++version) + ']><i></i><![endif]-->',\r\n            iElems[0]\r\n        ) {}\r\n        return version > 4 ? version : undefined;\r\n    }());\r\n    var isIe6 = ieVersion === 6,\r\n        isIe7 = ieVersion === 7;\r\n\r\n    function isClickOnCheckableElement(element, eventType) {\r\n        if ((ko.utils.tagNameLower(element) !== \"input\") || !element.type) return false;\r\n        if (eventType.toLowerCase() != \"click\") return false;\r\n        var inputType = element.type;\r\n        return (inputType == \"checkbox\") || (inputType == \"radio\");\r\n    }\r\n\r\n    // For details on the pattern for changing node classes\r\n    // see: https://github.com/knockout/knockout/issues/1597\r\n    var cssClassNameRegex = /\\S+/g;\r\n\r\n    function toggleDomNodeCssClass(node, classNames, shouldHaveClass) {\r\n        var addOrRemoveFn;\r\n        if (classNames) {\r\n            if (typeof node.classList === 'object') {\r\n                addOrRemoveFn = node.classList[shouldHaveClass ? 'add' : 'remove'];\r\n                ko.utils.arrayForEach(classNames.match(cssClassNameRegex), function(className) {\r\n                    addOrRemoveFn.call(node.classList, className);\r\n                });\r\n            } else if (typeof node.className['baseVal'] === 'string') {\r\n                // SVG tag .classNames is an SVGAnimatedString instance\r\n                toggleObjectClassPropertyString(node.className, 'baseVal', classNames, shouldHaveClass);\r\n            } else {\r\n                // node.className ought to be a string.\r\n                toggleObjectClassPropertyString(node, 'className', classNames, shouldHaveClass);\r\n            }\r\n        }\r\n    }\r\n\r\n    function toggleObjectClassPropertyString(obj, prop, classNames, shouldHaveClass) {\r\n        // obj/prop is either a node/'className' or a SVGAnimatedString/'baseVal'.\r\n        var currentClassNames = obj[prop].match(cssClassNameRegex) || [];\r\n        ko.utils.arrayForEach(classNames.match(cssClassNameRegex), function(className) {\r\n            ko.utils.addOrRemoveItem(currentClassNames, className, shouldHaveClass);\r\n        });\r\n        obj[prop] = currentClassNames.join(\" \");\r\n    }\r\n\r\n    return {\r\n        fieldsIncludedWithJsonPost: ['authenticity_token', /^__RequestVerificationToken(_.*)?$/],\r\n\r\n        arrayForEach: function (array, action) {\r\n            for (var i = 0, j = array.length; i < j; i++)\r\n                action(array[i], i);\r\n        },\r\n\r\n        arrayIndexOf: function (array, item) {\r\n            if (typeof Array.prototype.indexOf == \"function\")\r\n                return Array.prototype.indexOf.call(array, item);\r\n            for (var i = 0, j = array.length; i < j; i++)\r\n                if (array[i] === item)\r\n                    return i;\r\n            return -1;\r\n        },\r\n\r\n        arrayFirst: function (array, predicate, predicateOwner) {\r\n            for (var i = 0, j = array.length; i < j; i++)\r\n                if (predicate.call(predicateOwner, array[i], i))\r\n                    return array[i];\r\n            return null;\r\n        },\r\n\r\n        arrayRemoveItem: function (array, itemToRemove) {\r\n            var index = ko.utils.arrayIndexOf(array, itemToRemove);\r\n            if (index > 0) {\r\n                array.splice(index, 1);\r\n            }\r\n            else if (index === 0) {\r\n                array.shift();\r\n            }\r\n        },\r\n\r\n        arrayGetDistinctValues: function (array) {\r\n            array = array || [];\r\n            var result = [];\r\n            for (var i = 0, j = array.length; i < j; i++) {\r\n                if (ko.utils.arrayIndexOf(result, array[i]) < 0)\r\n                    result.push(array[i]);\r\n            }\r\n            return result;\r\n        },\r\n\r\n        arrayMap: function (array, mapping) {\r\n            array = array || [];\r\n            var result = [];\r\n            for (var i = 0, j = array.length; i < j; i++)\r\n                result.push(mapping(array[i], i));\r\n            return result;\r\n        },\r\n\r\n        arrayFilter: function (array, predicate) {\r\n            array = array || [];\r\n            var result = [];\r\n            for (var i = 0, j = array.length; i < j; i++)\r\n                if (predicate(array[i], i))\r\n                    result.push(array[i]);\r\n            return result;\r\n        },\r\n\r\n        arrayPushAll: function (array, valuesToPush) {\r\n            if (valuesToPush instanceof Array)\r\n                array.push.apply(array, valuesToPush);\r\n            else\r\n                for (var i = 0, j = valuesToPush.length; i < j; i++)\r\n                    array.push(valuesToPush[i]);\r\n            return array;\r\n        },\r\n\r\n        addOrRemoveItem: function(array, value, included) {\r\n            var existingEntryIndex = ko.utils.arrayIndexOf(ko.utils.peekObservable(array), value);\r\n            if (existingEntryIndex < 0) {\r\n                if (included)\r\n                    array.push(value);\r\n            } else {\r\n                if (!included)\r\n                    array.splice(existingEntryIndex, 1);\r\n            }\r\n        },\r\n\r\n        canSetPrototype: canSetPrototype,\r\n\r\n        extend: extend,\r\n\r\n        setPrototypeOf: setPrototypeOf,\r\n\r\n        setPrototypeOfOrExtend: canSetPrototype ? setPrototypeOf : extend,\r\n\r\n        objectForEach: objectForEach,\r\n\r\n        objectMap: function(source, mapping) {\r\n            if (!source)\r\n                return source;\r\n            var target = {};\r\n            for (var prop in source) {\r\n                if (source.hasOwnProperty(prop)) {\r\n                    target[prop] = mapping(source[prop], prop, source);\r\n                }\r\n            }\r\n            return target;\r\n        },\r\n\r\n        emptyDomNode: function (domNode) {\r\n            while (domNode.firstChild) {\r\n                ko.removeNode(domNode.firstChild);\r\n            }\r\n        },\r\n\r\n        moveCleanedNodesToContainerElement: function(nodes) {\r\n            // Ensure it's a real array, as we're about to reparent the nodes and\r\n            // we don't want the underlying collection to change while we're doing that.\r\n            var nodesArray = ko.utils.makeArray(nodes);\r\n            var templateDocument = (nodesArray[0] && nodesArray[0].ownerDocument) || document;\r\n\r\n            var container = templateDocument.createElement('div');\r\n            for (var i = 0, j = nodesArray.length; i < j; i++) {\r\n                container.appendChild(ko.cleanNode(nodesArray[i]));\r\n            }\r\n            return container;\r\n        },\r\n\r\n        cloneNodes: function (nodesArray, shouldCleanNodes) {\r\n            for (var i = 0, j = nodesArray.length, newNodesArray = []; i < j; i++) {\r\n                var clonedNode = nodesArray[i].cloneNode(true);\r\n                newNodesArray.push(shouldCleanNodes ? ko.cleanNode(clonedNode) : clonedNode);\r\n            }\r\n            return newNodesArray;\r\n        },\r\n\r\n        setDomNodeChildren: function (domNode, childNodes) {\r\n            ko.utils.emptyDomNode(domNode);\r\n            if (childNodes) {\r\n                for (var i = 0, j = childNodes.length; i < j; i++)\r\n                    domNode.appendChild(childNodes[i]);\r\n            }\r\n        },\r\n\r\n        replaceDomNodes: function (nodeToReplaceOrNodeArray, newNodesArray) {\r\n            var nodesToReplaceArray = nodeToReplaceOrNodeArray.nodeType ? [nodeToReplaceOrNodeArray] : nodeToReplaceOrNodeArray;\r\n            if (nodesToReplaceArray.length > 0) {\r\n                var insertionPoint = nodesToReplaceArray[0];\r\n                var parent = insertionPoint.parentNode;\r\n                for (var i = 0, j = newNodesArray.length; i < j; i++)\r\n                    parent.insertBefore(newNodesArray[i], insertionPoint);\r\n                for (var i = 0, j = nodesToReplaceArray.length; i < j; i++) {\r\n                    ko.removeNode(nodesToReplaceArray[i]);\r\n                }\r\n            }\r\n        },\r\n\r\n        fixUpContinuousNodeArray: function(continuousNodeArray, parentNode) {\r\n            // Before acting on a set of nodes that were previously outputted by a template function, we have to reconcile\r\n            // them against what is in the DOM right now. It may be that some of the nodes have already been removed, or that\r\n            // new nodes might have been inserted in the middle, for example by a binding. Also, there may previously have been\r\n            // leading comment nodes (created by rewritten string-based templates) that have since been removed during binding.\r\n            // So, this function translates the old \"map\" output array into its best guess of the set of current DOM nodes.\r\n            //\r\n            // Rules:\r\n            //   [A] Any leading nodes that have been removed should be ignored\r\n            //       These most likely correspond to memoization nodes that were already removed during binding\r\n            //       See https://github.com/SteveSanderson/knockout/pull/440\r\n            //   [B] We want to output a continuous series of nodes. So, ignore any nodes that have already been removed,\r\n            //       and include any nodes that have been inserted among the previous collection\r\n\r\n            if (continuousNodeArray.length) {\r\n                // The parent node can be a virtual element; so get the real parent node\r\n                parentNode = (parentNode.nodeType === 8 && parentNode.parentNode) || parentNode;\r\n\r\n                // Rule [A]\r\n                while (continuousNodeArray.length && continuousNodeArray[0].parentNode !== parentNode)\r\n                    continuousNodeArray.splice(0, 1);\r\n\r\n                // Rule [B]\r\n                if (continuousNodeArray.length > 1) {\r\n                    var current = continuousNodeArray[0], last = continuousNodeArray[continuousNodeArray.length - 1];\r\n                    // Replace with the actual new continuous node set\r\n                    continuousNodeArray.length = 0;\r\n                    while (current !== last) {\r\n                        continuousNodeArray.push(current);\r\n                        current = current.nextSibling;\r\n                        if (!current) // Won't happen, except if the developer has manually removed some DOM elements (then we're in an undefined scenario)\r\n                            return;\r\n                    }\r\n                    continuousNodeArray.push(last);\r\n                }\r\n            }\r\n            return continuousNodeArray;\r\n        },\r\n\r\n        setOptionNodeSelectionState: function (optionNode, isSelected) {\r\n            // IE6 sometimes throws \"unknown error\" if you try to write to .selected directly, whereas Firefox struggles with setAttribute. Pick one based on browser.\r\n            if (ieVersion < 7)\r\n                optionNode.setAttribute(\"selected\", isSelected);\r\n            else\r\n                optionNode.selected = isSelected;\r\n        },\r\n\r\n        stringTrim: function (string) {\r\n            return string === null || string === undefined ? '' :\r\n                string.trim ?\r\n                    string.trim() :\r\n                    string.toString().replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g, '');\r\n        },\r\n\r\n        stringStartsWith: function (string, startsWith) {\r\n            string = string || \"\";\r\n            if (startsWith.length > string.length)\r\n                return false;\r\n            return string.substring(0, startsWith.length) === startsWith;\r\n        },\r\n\r\n        domNodeIsContainedBy: function (node, containedByNode) {\r\n            if (node === containedByNode)\r\n                return true;\r\n            if (node.nodeType === 11)\r\n                return false; // Fixes issue #1162 - can't use node.contains for document fragments on IE8\r\n            if (containedByNode.contains)\r\n                return containedByNode.contains(node.nodeType === 3 ? node.parentNode : node);\r\n            if (containedByNode.compareDocumentPosition)\r\n                return (containedByNode.compareDocumentPosition(node) & 16) == 16;\r\n            while (node && node != containedByNode) {\r\n                node = node.parentNode;\r\n            }\r\n            return !!node;\r\n        },\r\n\r\n        domNodeIsAttachedToDocument: function (node) {\r\n            return ko.utils.domNodeIsContainedBy(node, node.ownerDocument.documentElement);\r\n        },\r\n\r\n        anyDomNodeIsAttachedToDocument: function(nodes) {\r\n            return !!ko.utils.arrayFirst(nodes, ko.utils.domNodeIsAttachedToDocument);\r\n        },\r\n\r\n        tagNameLower: function(element) {\r\n            // For HTML elements, tagName will always be upper case; for XHTML elements, it'll be lower case.\r\n            // Possible future optimization: If we know it's an element from an XHTML document (not HTML),\r\n            // we don't need to do the .toLowerCase() as it will always be lower case anyway.\r\n            return element && element.tagName && element.tagName.toLowerCase();\r\n        },\r\n\r\n        registerEventHandler: function (element, eventType, handler) {\r\n            var mustUseAttachEvent = ieVersion && eventsThatMustBeRegisteredUsingAttachEvent[eventType];\r\n            if (!mustUseAttachEvent && jQueryInstance) {\r\n                jQueryInstance(element)['bind'](eventType, handler);\r\n            } else if (!mustUseAttachEvent && typeof element.addEventListener == \"function\")\r\n                element.addEventListener(eventType, handler, false);\r\n            else if (typeof element.attachEvent != \"undefined\") {\r\n                var attachEventHandler = function (event) { handler.call(element, event); },\r\n                    attachEventName = \"on\" + eventType;\r\n                element.attachEvent(attachEventName, attachEventHandler);\r\n\r\n                // IE does not dispose attachEvent handlers automatically (unlike with addEventListener)\r\n                // so to avoid leaks, we have to remove them manually. See bug #856\r\n                ko.utils.domNodeDisposal.addDisposeCallback(element, function() {\r\n                    element.detachEvent(attachEventName, attachEventHandler);\r\n                });\r\n            } else\r\n                throw new Error(\"Browser doesn't support addEventListener or attachEvent\");\r\n        },\r\n\r\n        triggerEvent: function (element, eventType) {\r\n            if (!(element && element.nodeType))\r\n                throw new Error(\"element must be a DOM node when calling triggerEvent\");\r\n\r\n            // For click events on checkboxes and radio buttons, jQuery toggles the element checked state *after* the\r\n            // event handler runs instead of *before*. (This was fixed in 1.9 for checkboxes but not for radio buttons.)\r\n            // IE doesn't change the checked state when you trigger the click event using \"fireEvent\".\r\n            // In both cases, we'll use the click method instead.\r\n            var useClickWorkaround = isClickOnCheckableElement(element, eventType);\r\n\r\n            if (jQueryInstance && !useClickWorkaround) {\r\n                jQueryInstance(element)['trigger'](eventType);\r\n            } else if (typeof document.createEvent == \"function\") {\r\n                if (typeof element.dispatchEvent == \"function\") {\r\n                    var eventCategory = knownEventTypesByEventName[eventType] || \"HTMLEvents\";\r\n                    var event = document.createEvent(eventCategory);\r\n                    event.initEvent(eventType, true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, element);\r\n                    element.dispatchEvent(event);\r\n                }\r\n                else\r\n                    throw new Error(\"The supplied element doesn't support dispatchEvent\");\r\n            } else if (useClickWorkaround && element.click) {\r\n                element.click();\r\n            } else if (typeof element.fireEvent != \"undefined\") {\r\n                element.fireEvent(\"on\" + eventType);\r\n            } else {\r\n                throw new Error(\"Browser doesn't support triggering events\");\r\n            }\r\n        },\r\n\r\n        unwrapObservable: function (value) {\r\n            return ko.isObservable(value) ? value() : value;\r\n        },\r\n\r\n        peekObservable: function (value) {\r\n            return ko.isObservable(value) ? value.peek() : value;\r\n        },\r\n\r\n        toggleDomNodeCssClass: toggleDomNodeCssClass,\r\n\r\n        setTextContent: function(element, textContent) {\r\n            var value = ko.utils.unwrapObservable(textContent);\r\n            if ((value === null) || (value === undefined))\r\n                value = \"\";\r\n\r\n            // We need there to be exactly one child: a text node.\r\n            // If there are no children, more than one, or if it's not a text node,\r\n            // we'll clear everything and create a single text node.\r\n            var innerTextNode = ko.virtualElements.firstChild(element);\r\n            if (!innerTextNode || innerTextNode.nodeType != 3 || ko.virtualElements.nextSibling(innerTextNode)) {\r\n                ko.virtualElements.setDomNodeChildren(element, [element.ownerDocument.createTextNode(value)]);\r\n            } else {\r\n                innerTextNode.data = value;\r\n            }\r\n\r\n            ko.utils.forceRefresh(element);\r\n        },\r\n\r\n        setElementName: function(element, name) {\r\n            element.name = name;\r\n\r\n            // Workaround IE 6/7 issue\r\n            // - https://github.com/SteveSanderson/knockout/issues/197\r\n            // - http://www.matts411.com/post/setting_the_name_attribute_in_ie_dom/\r\n            if (ieVersion <= 7) {\r\n                try {\r\n                    element.mergeAttributes(document.createElement(\"<input name='\" + element.name + \"'/>\"), false);\r\n                }\r\n                catch(e) {} // For IE9 with doc mode \"IE9 Standards\" and browser mode \"IE9 Compatibility View\"\r\n            }\r\n        },\r\n\r\n        forceRefresh: function(node) {\r\n            // Workaround for an IE9 rendering bug - https://github.com/SteveSanderson/knockout/issues/209\r\n            if (ieVersion >= 9) {\r\n                // For text nodes and comment nodes (most likely virtual elements), we will have to refresh the container\r\n                var elem = node.nodeType == 1 ? node : node.parentNode;\r\n                if (elem.style)\r\n                    elem.style.zoom = elem.style.zoom;\r\n            }\r\n        },\r\n\r\n        ensureSelectElementIsRenderedCorrectly: function(selectElement) {\r\n            // Workaround for IE9 rendering bug - it doesn't reliably display all the text in dynamically-added select boxes unless you force it to re-render by updating the width.\r\n            // (See https://github.com/SteveSanderson/knockout/issues/312, http://stackoverflow.com/questions/5908494/select-only-shows-first-char-of-selected-option)\r\n            // Also fixes IE7 and IE8 bug that causes selects to be zero width if enclosed by 'if' or 'with'. (See issue #839)\r\n            if (ieVersion) {\r\n                var originalWidth = selectElement.style.width;\r\n                selectElement.style.width = 0;\r\n                selectElement.style.width = originalWidth;\r\n            }\r\n        },\r\n\r\n        range: function (min, max) {\r\n            min = ko.utils.unwrapObservable(min);\r\n            max = ko.utils.unwrapObservable(max);\r\n            var result = [];\r\n            for (var i = min; i <= max; i++)\r\n                result.push(i);\r\n            return result;\r\n        },\r\n\r\n        makeArray: function(arrayLikeObject) {\r\n            var result = [];\r\n            for (var i = 0, j = arrayLikeObject.length; i < j; i++) {\r\n                result.push(arrayLikeObject[i]);\r\n            };\r\n            return result;\r\n        },\r\n\r\n        isIe6 : isIe6,\r\n        isIe7 : isIe7,\r\n        ieVersion : ieVersion,\r\n\r\n        getFormFields: function(form, fieldName) {\r\n            var fields = ko.utils.makeArray(form.getElementsByTagName(\"input\")).concat(ko.utils.makeArray(form.getElementsByTagName(\"textarea\")));\r\n            var isMatchingField = (typeof fieldName == 'string')\r\n                ? function(field) { return field.name === fieldName }\r\n                : function(field) { return fieldName.test(field.name) }; // Treat fieldName as regex or object containing predicate\r\n            var matches = [];\r\n            for (var i = fields.length - 1; i >= 0; i--) {\r\n                if (isMatchingField(fields[i]))\r\n                    matches.push(fields[i]);\r\n            };\r\n            return matches;\r\n        },\r\n\r\n        parseJson: function (jsonString) {\r\n            if (typeof jsonString == \"string\") {\r\n                jsonString = ko.utils.stringTrim(jsonString);\r\n                if (jsonString) {\r\n                    if (JSON && JSON.parse) // Use native parsing where available\r\n                        return JSON.parse(jsonString);\r\n                    return (new Function(\"return \" + jsonString))(); // Fallback on less safe parsing for older browsers\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n\r\n        stringifyJson: function (data, replacer, space) {   // replacer and space are optional\r\n            if (!JSON || !JSON.stringify)\r\n                throw new Error(\"Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js\");\r\n            return JSON.stringify(ko.utils.unwrapObservable(data), replacer, space);\r\n        },\r\n\r\n        postJson: function (urlOrForm, data, options) {\r\n            options = options || {};\r\n            var params = options['params'] || {};\r\n            var includeFields = options['includeFields'] || this.fieldsIncludedWithJsonPost;\r\n            var url = urlOrForm;\r\n\r\n            // If we were given a form, use its 'action' URL and pick out any requested field values\r\n            if((typeof urlOrForm == 'object') && (ko.utils.tagNameLower(urlOrForm) === \"form\")) {\r\n                var originalForm = urlOrForm;\r\n                url = originalForm.action;\r\n                for (var i = includeFields.length - 1; i >= 0; i--) {\r\n                    var fields = ko.utils.getFormFields(originalForm, includeFields[i]);\r\n                    for (var j = fields.length - 1; j >= 0; j--)\r\n                        params[fields[j].name] = fields[j].value;\r\n                }\r\n            }\r\n\r\n            data = ko.utils.unwrapObservable(data);\r\n            var form = document.createElement(\"form\");\r\n            form.style.display = \"none\";\r\n            form.action = url;\r\n            form.method = \"post\";\r\n            for (var key in data) {\r\n                // Since 'data' this is a model object, we include all properties including those inherited from its prototype\r\n                var input = document.createElement(\"input\");\r\n                input.type = \"hidden\";\r\n                input.name = key;\r\n                input.value = ko.utils.stringifyJson(ko.utils.unwrapObservable(data[key]));\r\n                form.appendChild(input);\r\n            }\r\n            objectForEach(params, function(key, value) {\r\n                var input = document.createElement(\"input\");\r\n                input.type = \"hidden\";\r\n                input.name = key;\r\n                input.value = value;\r\n                form.appendChild(input);\r\n            });\r\n            document.body.appendChild(form);\r\n            options['submitter'] ? options['submitter'](form) : form.submit();\r\n            setTimeout(function () { form.parentNode.removeChild(form); }, 0);\r\n        }\r\n    }\r\n}());\r\n\r\nko.exportSymbol('utils', ko.utils);\r\nko.exportSymbol('utils.arrayForEach', ko.utils.arrayForEach);\r\nko.exportSymbol('utils.arrayFirst', ko.utils.arrayFirst);\r\nko.exportSymbol('utils.arrayFilter', ko.utils.arrayFilter);\r\nko.exportSymbol('utils.arrayGetDistinctValues', ko.utils.arrayGetDistinctValues);\r\nko.exportSymbol('utils.arrayIndexOf', ko.utils.arrayIndexOf);\r\nko.exportSymbol('utils.arrayMap', ko.utils.arrayMap);\r\nko.exportSymbol('utils.arrayPushAll', ko.utils.arrayPushAll);\r\nko.exportSymbol('utils.arrayRemoveItem', ko.utils.arrayRemoveItem);\r\nko.exportSymbol('utils.extend', ko.utils.extend);\r\nko.exportSymbol('utils.fieldsIncludedWithJsonPost', ko.utils.fieldsIncludedWithJsonPost);\r\nko.exportSymbol('utils.getFormFields', ko.utils.getFormFields);\r\nko.exportSymbol('utils.peekObservable', ko.utils.peekObservable);\r\nko.exportSymbol('utils.postJson', ko.utils.postJson);\r\nko.exportSymbol('utils.parseJson', ko.utils.parseJson);\r\nko.exportSymbol('utils.registerEventHandler', ko.utils.registerEventHandler);\r\nko.exportSymbol('utils.stringifyJson', ko.utils.stringifyJson);\r\nko.exportSymbol('utils.range', ko.utils.range);\r\nko.exportSymbol('utils.toggleDomNodeCssClass', ko.utils.toggleDomNodeCssClass);\r\nko.exportSymbol('utils.triggerEvent', ko.utils.triggerEvent);\r\nko.exportSymbol('utils.unwrapObservable', ko.utils.unwrapObservable);\r\nko.exportSymbol('utils.objectForEach', ko.utils.objectForEach);\r\nko.exportSymbol('utils.addOrRemoveItem', ko.utils.addOrRemoveItem);\r\nko.exportSymbol('utils.setTextContent', ko.utils.setTextContent);\r\nko.exportSymbol('unwrap', ko.utils.unwrapObservable); // Convenient shorthand, because this is used so commonly\r\n\r\nif (!Function.prototype['bind']) {\r\n    // Function.prototype.bind is a standard part of ECMAScript 5th Edition (December 2009, http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf)\r\n    // In case the browser doesn't implement it natively, provide a JavaScript implementation. This implementation is based on the one in prototype.js\r\n    Function.prototype['bind'] = function (object) {\r\n        var originalFunction = this;\r\n        if (arguments.length === 1) {\r\n            return function () {\r\n                return originalFunction.apply(object, arguments);\r\n            };\r\n        } else {\r\n            var partialArgs = Array.prototype.slice.call(arguments, 1);\r\n            return function () {\r\n                var args = partialArgs.slice(0);\r\n                args.push.apply(args, arguments);\r\n                return originalFunction.apply(object, args);\r\n            };\r\n        }\r\n    };\r\n}\r\n\r\nko.utils.domData = new (function () {\r\n    var uniqueId = 0;\r\n    var dataStoreKeyExpandoPropertyName = \"__ko__\" + (new Date).getTime();\r\n    var dataStore = {};\r\n\r\n    function getAll(node, createIfNotFound) {\r\n        var dataStoreKey = node[dataStoreKeyExpandoPropertyName];\r\n        var hasExistingDataStore = dataStoreKey && (dataStoreKey !== \"null\") && dataStore[dataStoreKey];\r\n        if (!hasExistingDataStore) {\r\n            if (!createIfNotFound)\r\n                return undefined;\r\n            dataStoreKey = node[dataStoreKeyExpandoPropertyName] = \"ko\" + uniqueId++;\r\n            dataStore[dataStoreKey] = {};\r\n        }\r\n        return dataStore[dataStoreKey];\r\n    }\r\n\r\n    return {\r\n        get: function (node, key) {\r\n            var allDataForNode = getAll(node, false);\r\n            return allDataForNode === undefined ? undefined : allDataForNode[key];\r\n        },\r\n        set: function (node, key, value) {\r\n            if (value === undefined) {\r\n                // Make sure we don't actually create a new domData key if we are actually deleting a value\r\n                if (getAll(node, false) === undefined)\r\n                    return;\r\n            }\r\n            var allDataForNode = getAll(node, true);\r\n            allDataForNode[key] = value;\r\n        },\r\n        clear: function (node) {\r\n            var dataStoreKey = node[dataStoreKeyExpandoPropertyName];\r\n            if (dataStoreKey) {\r\n                delete dataStore[dataStoreKey];\r\n                node[dataStoreKeyExpandoPropertyName] = null;\r\n                return true; // Exposing \"did clean\" flag purely so specs can infer whether things have been cleaned up as intended\r\n            }\r\n            return false;\r\n        },\r\n\r\n        nextKey: function () {\r\n            return (uniqueId++) + dataStoreKeyExpandoPropertyName;\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol('utils.domData', ko.utils.domData);\r\nko.exportSymbol('utils.domData.clear', ko.utils.domData.clear); // Exporting only so specs can clear up after themselves fully\r\n\r\nko.utils.domNodeDisposal = new (function () {\r\n    var domDataKey = ko.utils.domData.nextKey();\r\n    var cleanableNodeTypes = { 1: true, 8: true, 9: true };       // Element, Comment, Document\r\n    var cleanableNodeTypesWithDescendants = { 1: true, 9: true }; // Element, Document\r\n\r\n    function getDisposeCallbacksCollection(node, createIfNotFound) {\r\n        var allDisposeCallbacks = ko.utils.domData.get(node, domDataKey);\r\n        if ((allDisposeCallbacks === undefined) && createIfNotFound) {\r\n            allDisposeCallbacks = [];\r\n            ko.utils.domData.set(node, domDataKey, allDisposeCallbacks);\r\n        }\r\n        return allDisposeCallbacks;\r\n    }\r\n    function destroyCallbacksCollection(node) {\r\n        ko.utils.domData.set(node, domDataKey, undefined);\r\n    }\r\n\r\n    function cleanSingleNode(node) {\r\n        // Run all the dispose callbacks\r\n        var callbacks = getDisposeCallbacksCollection(node, false);\r\n        if (callbacks) {\r\n            callbacks = callbacks.slice(0); // Clone, as the array may be modified during iteration (typically, callbacks will remove themselves)\r\n            for (var i = 0; i < callbacks.length; i++)\r\n                callbacks[i](node);\r\n        }\r\n\r\n        // Erase the DOM data\r\n        ko.utils.domData.clear(node);\r\n\r\n        // Perform cleanup needed by external libraries (currently only jQuery, but can be extended)\r\n        ko.utils.domNodeDisposal[\"cleanExternalData\"](node);\r\n\r\n        // Clear any immediate-child comment nodes, as these wouldn't have been found by\r\n        // node.getElementsByTagName(\"*\") in cleanNode() (comment nodes aren't elements)\r\n        if (cleanableNodeTypesWithDescendants[node.nodeType])\r\n            cleanImmediateCommentTypeChildren(node);\r\n    }\r\n\r\n    function cleanImmediateCommentTypeChildren(nodeWithChildren) {\r\n        var child, nextChild = nodeWithChildren.firstChild;\r\n        while (child = nextChild) {\r\n            nextChild = child.nextSibling;\r\n            if (child.nodeType === 8)\r\n                cleanSingleNode(child);\r\n        }\r\n    }\r\n\r\n    return {\r\n        addDisposeCallback : function(node, callback) {\r\n            if (typeof callback != \"function\")\r\n                throw new Error(\"Callback must be a function\");\r\n            getDisposeCallbacksCollection(node, true).push(callback);\r\n        },\r\n\r\n        removeDisposeCallback : function(node, callback) {\r\n            var callbacksCollection = getDisposeCallbacksCollection(node, false);\r\n            if (callbacksCollection) {\r\n                ko.utils.arrayRemoveItem(callbacksCollection, callback);\r\n                if (callbacksCollection.length == 0)\r\n                    destroyCallbacksCollection(node);\r\n            }\r\n        },\r\n\r\n        cleanNode : function(node) {\r\n            // First clean this node, where applicable\r\n            if (cleanableNodeTypes[node.nodeType]) {\r\n                cleanSingleNode(node);\r\n\r\n                // ... then its descendants, where applicable\r\n                if (cleanableNodeTypesWithDescendants[node.nodeType]) {\r\n                    // Clone the descendants list in case it changes during iteration\r\n                    var descendants = [];\r\n                    ko.utils.arrayPushAll(descendants, node.getElementsByTagName(\"*\"));\r\n                    for (var i = 0, j = descendants.length; i < j; i++)\r\n                        cleanSingleNode(descendants[i]);\r\n                }\r\n            }\r\n            return node;\r\n        },\r\n\r\n        removeNode : function(node) {\r\n            ko.cleanNode(node);\r\n            if (node.parentNode)\r\n                node.parentNode.removeChild(node);\r\n        },\r\n\r\n        \"cleanExternalData\" : function (node) {\r\n            // Special support for jQuery here because it's so commonly used.\r\n            // Many jQuery plugins (including jquery.tmpl) store data using jQuery's equivalent of domData\r\n            // so notify it to tear down any resources associated with the node & descendants here.\r\n            if (jQueryInstance && (typeof jQueryInstance['cleanData'] == \"function\"))\r\n                jQueryInstance['cleanData']([node]);\r\n        }\r\n    };\r\n})();\r\nko.cleanNode = ko.utils.domNodeDisposal.cleanNode; // Shorthand name for convenience\r\nko.removeNode = ko.utils.domNodeDisposal.removeNode; // Shorthand name for convenience\r\nko.exportSymbol('cleanNode', ko.cleanNode);\r\nko.exportSymbol('removeNode', ko.removeNode);\r\nko.exportSymbol('utils.domNodeDisposal', ko.utils.domNodeDisposal);\r\nko.exportSymbol('utils.domNodeDisposal.addDisposeCallback', ko.utils.domNodeDisposal.addDisposeCallback);\r\nko.exportSymbol('utils.domNodeDisposal.removeDisposeCallback', ko.utils.domNodeDisposal.removeDisposeCallback);\r\n(function () {\r\n    var leadingCommentRegex = /^(\\s*)<!--(.*?)-->/;\r\n\r\n    function simpleHtmlParse(html, documentContext) {\r\n        documentContext || (documentContext = document);\r\n        var windowContext = documentContext['parentWindow'] || documentContext['defaultView'] || window;\r\n\r\n        // Based on jQuery's \"clean\" function, but only accounting for table-related elements.\r\n        // If you have referenced jQuery, this won't be used anyway - KO will use jQuery's \"clean\" function directly\r\n\r\n        // Note that there's still an issue in IE < 9 whereby it will discard comment nodes that are the first child of\r\n        // a descendant node. For example: \"<div><!-- mycomment -->abc</div>\" will get parsed as \"<div>abc</div>\"\r\n        // This won't affect anyone who has referenced jQuery, and there's always the workaround of inserting a dummy node\r\n        // (possibly a text node) in front of the comment. So, KO does not attempt to workaround this IE issue automatically at present.\r\n\r\n        // Trim whitespace, otherwise indexOf won't work as expected\r\n        var tags = ko.utils.stringTrim(html).toLowerCase(), div = documentContext.createElement(\"div\");\r\n\r\n        // Finds the first match from the left column, and returns the corresponding \"wrap\" data from the right column\r\n        var wrap = tags.match(/^<(thead|tbody|tfoot)/)              && [1, \"<table>\", \"</table>\"] ||\r\n                   !tags.indexOf(\"<tr\")                             && [2, \"<table><tbody>\", \"</tbody></table>\"] ||\r\n                   (!tags.indexOf(\"<td\") || !tags.indexOf(\"<th\"))   && [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"] ||\r\n                   /* anything else */                                 [0, \"\", \"\"];\r\n\r\n        // Go to html and back, then peel off extra wrappers\r\n        // Note that we always prefix with some dummy text, because otherwise, IE<9 will strip out leading comment nodes in descendants. Total madness.\r\n        var markup = \"ignored<div>\" + wrap[1] + html + wrap[2] + \"</div>\";\r\n        if (typeof windowContext['innerShiv'] == \"function\") {\r\n            div.appendChild(windowContext['innerShiv'](markup));\r\n        } else {\r\n            div.innerHTML = markup;\r\n        }\r\n\r\n        // Move to the right depth\r\n        while (wrap[0]--)\r\n            div = div.lastChild;\r\n\r\n        return ko.utils.makeArray(div.lastChild.childNodes);\r\n    }\r\n\r\n    function jQueryHtmlParse(html, documentContext) {\r\n        // jQuery's \"parseHTML\" function was introduced in jQuery 1.8.0 and is a documented public API.\r\n        if (jQueryInstance['parseHTML']) {\r\n            return jQueryInstance['parseHTML'](html, documentContext) || []; // Ensure we always return an array and never null\r\n        } else {\r\n            // For jQuery < 1.8.0, we fall back on the undocumented internal \"clean\" function.\r\n            var elems = jQueryInstance['clean']([html], documentContext);\r\n\r\n            // As of jQuery 1.7.1, jQuery parses the HTML by appending it to some dummy parent nodes held in an in-memory document fragment.\r\n            // Unfortunately, it never clears the dummy parent nodes from the document fragment, so it leaks memory over time.\r\n            // Fix this by finding the top-most dummy parent element, and detaching it from its owner fragment.\r\n            if (elems && elems[0]) {\r\n                // Find the top-most parent element that's a direct child of a document fragment\r\n                var elem = elems[0];\r\n                while (elem.parentNode && elem.parentNode.nodeType !== 11 /* i.e., DocumentFragment */)\r\n                    elem = elem.parentNode;\r\n                // ... then detach it\r\n                if (elem.parentNode)\r\n                    elem.parentNode.removeChild(elem);\r\n            }\r\n\r\n            return elems;\r\n        }\r\n    }\r\n\r\n    ko.utils.parseHtmlFragment = function(html, documentContext) {\r\n        return jQueryInstance ? jQueryHtmlParse(html, documentContext)   // As below, benefit from jQuery's optimisations where possible\r\n                              : simpleHtmlParse(html, documentContext);  // ... otherwise, this simple logic will do in most common cases.\r\n    };\r\n\r\n    ko.utils.setHtml = function(node, html) {\r\n        ko.utils.emptyDomNode(node);\r\n\r\n        // There's no legitimate reason to display a stringified observable without unwrapping it, so we'll unwrap it\r\n        html = ko.utils.unwrapObservable(html);\r\n\r\n        if ((html !== null) && (html !== undefined)) {\r\n            if (typeof html != 'string')\r\n                html = html.toString();\r\n\r\n            // jQuery contains a lot of sophisticated code to parse arbitrary HTML fragments,\r\n            // for example <tr> elements which are not normally allowed to exist on their own.\r\n            // If you've referenced jQuery we'll use that rather than duplicating its code.\r\n            if (jQueryInstance) {\r\n                jQueryInstance(node)['html'](html);\r\n            } else {\r\n                // ... otherwise, use KO's own parsing logic.\r\n                var parsedNodes = ko.utils.parseHtmlFragment(html, node.ownerDocument);\r\n                for (var i = 0; i < parsedNodes.length; i++)\r\n                    node.appendChild(parsedNodes[i]);\r\n            }\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol('utils.parseHtmlFragment', ko.utils.parseHtmlFragment);\r\nko.exportSymbol('utils.setHtml', ko.utils.setHtml);\r\n\r\nko.memoization = (function () {\r\n    var memos = {};\r\n\r\n    function randomMax8HexChars() {\r\n        return (((1 + Math.random()) * 0x100000000) | 0).toString(16).substring(1);\r\n    }\r\n    function generateRandomId() {\r\n        return randomMax8HexChars() + randomMax8HexChars();\r\n    }\r\n    function findMemoNodes(rootNode, appendToArray) {\r\n        if (!rootNode)\r\n            return;\r\n        if (rootNode.nodeType == 8) {\r\n            var memoId = ko.memoization.parseMemoText(rootNode.nodeValue);\r\n            if (memoId != null)\r\n                appendToArray.push({ domNode: rootNode, memoId: memoId });\r\n        } else if (rootNode.nodeType == 1) {\r\n            for (var i = 0, childNodes = rootNode.childNodes, j = childNodes.length; i < j; i++)\r\n                findMemoNodes(childNodes[i], appendToArray);\r\n        }\r\n    }\r\n\r\n    return {\r\n        memoize: function (callback) {\r\n            if (typeof callback != \"function\")\r\n                throw new Error(\"You can only pass a function to ko.memoization.memoize()\");\r\n            var memoId = generateRandomId();\r\n            memos[memoId] = callback;\r\n            return \"<!--[ko_memo:\" + memoId + \"]-->\";\r\n        },\r\n\r\n        unmemoize: function (memoId, callbackParams) {\r\n            var callback = memos[memoId];\r\n            if (callback === undefined)\r\n                throw new Error(\"Couldn't find any memo with ID \" + memoId + \". Perhaps it's already been unmemoized.\");\r\n            try {\r\n                callback.apply(null, callbackParams || []);\r\n                return true;\r\n            }\r\n            finally { delete memos[memoId]; }\r\n        },\r\n\r\n        unmemoizeDomNodeAndDescendants: function (domNode, extraCallbackParamsArray) {\r\n            var memos = [];\r\n            findMemoNodes(domNode, memos);\r\n            for (var i = 0, j = memos.length; i < j; i++) {\r\n                var node = memos[i].domNode;\r\n                var combinedParams = [node];\r\n                if (extraCallbackParamsArray)\r\n                    ko.utils.arrayPushAll(combinedParams, extraCallbackParamsArray);\r\n                ko.memoization.unmemoize(memos[i].memoId, combinedParams);\r\n                node.nodeValue = \"\"; // Neuter this node so we don't try to unmemoize it again\r\n                if (node.parentNode)\r\n                    node.parentNode.removeChild(node); // If possible, erase it totally (not always possible - someone else might just hold a reference to it then call unmemoizeDomNodeAndDescendants again)\r\n            }\r\n        },\r\n\r\n        parseMemoText: function (memoText) {\r\n            var match = memoText.match(/^\\[ko_memo\\:(.*?)\\]$/);\r\n            return match ? match[1] : null;\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol('memoization', ko.memoization);\r\nko.exportSymbol('memoization.memoize', ko.memoization.memoize);\r\nko.exportSymbol('memoization.unmemoize', ko.memoization.unmemoize);\r\nko.exportSymbol('memoization.parseMemoText', ko.memoization.parseMemoText);\r\nko.exportSymbol('memoization.unmemoizeDomNodeAndDescendants', ko.memoization.unmemoizeDomNodeAndDescendants);\r\nko.extenders = {\r\n    'throttle': function(target, timeout) {\r\n        // Throttling means two things:\r\n\r\n        // (1) For dependent observables, we throttle *evaluations* so that, no matter how fast its dependencies\r\n        //     notify updates, the target doesn't re-evaluate (and hence doesn't notify) faster than a certain rate\r\n        target['throttleEvaluation'] = timeout;\r\n\r\n        // (2) For writable targets (observables, or writable dependent observables), we throttle *writes*\r\n        //     so the target cannot change value synchronously or faster than a certain rate\r\n        var writeTimeoutInstance = null;\r\n        return ko.dependentObservable({\r\n            'read': target,\r\n            'write': function(value) {\r\n                clearTimeout(writeTimeoutInstance);\r\n                writeTimeoutInstance = setTimeout(function() {\r\n                    target(value);\r\n                }, timeout);\r\n            }\r\n        });\r\n    },\r\n\r\n    'rateLimit': function(target, options) {\r\n        var timeout, method, limitFunction;\r\n\r\n        if (typeof options == 'number') {\r\n            timeout = options;\r\n        } else {\r\n            timeout = options['timeout'];\r\n            method = options['method'];\r\n        }\r\n\r\n        limitFunction = method == 'notifyWhenChangesStop' ?  debounce : throttle;\r\n        target.limit(function(callback) {\r\n            return limitFunction(callback, timeout);\r\n        });\r\n    },\r\n\r\n    'notify': function(target, notifyWhen) {\r\n        target[\"equalityComparer\"] = notifyWhen == \"always\" ?\r\n            null :  // null equalityComparer means to always notify\r\n            valuesArePrimitiveAndEqual;\r\n    }\r\n};\r\n\r\nvar primitiveTypes = { 'undefined':1, 'boolean':1, 'number':1, 'string':1 };\r\nfunction valuesArePrimitiveAndEqual(a, b) {\r\n    var oldValueIsPrimitive = (a === null) || (typeof(a) in primitiveTypes);\r\n    return oldValueIsPrimitive ? (a === b) : false;\r\n}\r\n\r\nfunction throttle(callback, timeout) {\r\n    var timeoutInstance;\r\n    return function () {\r\n        if (!timeoutInstance) {\r\n            timeoutInstance = setTimeout(function() {\r\n                timeoutInstance = undefined;\r\n                callback();\r\n            }, timeout);\r\n        }\r\n    };\r\n}\r\n\r\nfunction debounce(callback, timeout) {\r\n    var timeoutInstance;\r\n    return function () {\r\n        clearTimeout(timeoutInstance);\r\n        timeoutInstance = setTimeout(callback, timeout);\r\n    };\r\n}\r\n\r\nfunction applyExtenders(requestedExtenders) {\r\n    var target = this;\r\n    if (requestedExtenders) {\r\n        ko.utils.objectForEach(requestedExtenders, function(key, value) {\r\n            var extenderHandler = ko.extenders[key];\r\n            if (typeof extenderHandler == 'function') {\r\n                target = extenderHandler(target, value) || target;\r\n            }\r\n        });\r\n    }\r\n    return target;\r\n}\r\n\r\nko.exportSymbol('extenders', ko.extenders);\r\n\r\nko.subscription = function (target, callback, disposeCallback) {\r\n    this._target = target;\r\n    this.callback = callback;\r\n    this.disposeCallback = disposeCallback;\r\n    this.isDisposed = false;\r\n    ko.exportProperty(this, 'dispose', this.dispose);\r\n};\r\nko.subscription.prototype.dispose = function () {\r\n    this.isDisposed = true;\r\n    this.disposeCallback();\r\n};\r\n\r\nko.subscribable = function () {\r\n    ko.utils.setPrototypeOfOrExtend(this, ko.subscribable['fn']);\r\n    this._subscriptions = {};\r\n    this._versionNumber = 1;\r\n}\r\n\r\nvar defaultEvent = \"change\";\r\n\r\nvar ko_subscribable_fn = {\r\n    subscribe: function (callback, callbackTarget, event) {\r\n        var self = this;\r\n\r\n        event = event || defaultEvent;\r\n        var boundCallback = callbackTarget ? callback.bind(callbackTarget) : callback;\r\n\r\n        var subscription = new ko.subscription(self, boundCallback, function () {\r\n            ko.utils.arrayRemoveItem(self._subscriptions[event], subscription);\r\n            if (self.afterSubscriptionRemove)\r\n                self.afterSubscriptionRemove(event);\r\n        });\r\n\r\n        if (self.beforeSubscriptionAdd)\r\n            self.beforeSubscriptionAdd(event);\r\n\r\n        if (!self._subscriptions[event])\r\n            self._subscriptions[event] = [];\r\n        self._subscriptions[event].push(subscription);\r\n\r\n        return subscription;\r\n    },\r\n\r\n    \"notifySubscribers\": function (valueToNotify, event) {\r\n        event = event || defaultEvent;\r\n        if (event === defaultEvent) {\r\n            this.updateVersion();\r\n        }\r\n        if (this.hasSubscriptionsForEvent(event)) {\r\n            try {\r\n                ko.dependencyDetection.begin(); // Begin suppressing dependency detection (by setting the top frame to undefined)\r\n                for (var a = this._subscriptions[event].slice(0), i = 0, subscription; subscription = a[i]; ++i) {\r\n                    // In case a subscription was disposed during the arrayForEach cycle, check\r\n                    // for isDisposed on each subscription before invoking its callback\r\n                    if (!subscription.isDisposed)\r\n                        subscription.callback(valueToNotify);\r\n                }\r\n            } finally {\r\n                ko.dependencyDetection.end(); // End suppressing dependency detection\r\n            }\r\n        }\r\n    },\r\n\r\n    getVersion: function () {\r\n        return this._versionNumber;\r\n    },\r\n\r\n    hasChanged: function (versionToCheck) {\r\n        return this.getVersion() !== versionToCheck;\r\n    },\r\n\r\n    updateVersion: function () {\r\n        ++this._versionNumber;\r\n    },\r\n\r\n    limit: function(limitFunction) {\r\n        var self = this, selfIsObservable = ko.isObservable(self),\r\n            isPending, previousValue, pendingValue, beforeChange = 'beforeChange';\r\n\r\n        if (!self._origNotifySubscribers) {\r\n            self._origNotifySubscribers = self[\"notifySubscribers\"];\r\n            self[\"notifySubscribers\"] = function(value, event) {\r\n                if (!event || event === defaultEvent) {\r\n                    self._rateLimitedChange(value);\r\n                } else if (event === beforeChange) {\r\n                    self._rateLimitedBeforeChange(value);\r\n                } else {\r\n                    self._origNotifySubscribers(value, event);\r\n                }\r\n            };\r\n        }\r\n\r\n        var finish = limitFunction(function() {\r\n            // If an observable provided a reference to itself, access it to get the latest value.\r\n            // This allows computed observables to delay calculating their value until needed.\r\n            if (selfIsObservable && pendingValue === self) {\r\n                pendingValue = self();\r\n            }\r\n            isPending = false;\r\n            if (self.isDifferent(previousValue, pendingValue)) {\r\n                self._origNotifySubscribers(previousValue = pendingValue);\r\n            }\r\n        });\r\n\r\n        self._rateLimitedChange = function(value) {\r\n            isPending = true;\r\n            pendingValue = value;\r\n            finish();\r\n        };\r\n        self._rateLimitedBeforeChange = function(value) {\r\n            if (!isPending) {\r\n                previousValue = value;\r\n                self._origNotifySubscribers(value, beforeChange);\r\n            }\r\n        };\r\n    },\r\n\r\n    hasSubscriptionsForEvent: function(event) {\r\n        return this._subscriptions[event] && this._subscriptions[event].length;\r\n    },\r\n\r\n    getSubscriptionsCount: function (event) {\r\n        if (event) {\r\n            return this._subscriptions[event] && this._subscriptions[event].length || 0;\r\n        } else {\r\n            var total = 0;\r\n            ko.utils.objectForEach(this._subscriptions, function(eventName, subscriptions) {\r\n                total += subscriptions.length;\r\n            });\r\n            return total;\r\n        }\r\n    },\r\n\r\n    isDifferent: function(oldValue, newValue) {\r\n        return !this['equalityComparer'] || !this['equalityComparer'](oldValue, newValue);\r\n    },\r\n\r\n    extend: applyExtenders\r\n};\r\n\r\nko.exportProperty(ko_subscribable_fn, 'subscribe', ko_subscribable_fn.subscribe);\r\nko.exportProperty(ko_subscribable_fn, 'extend', ko_subscribable_fn.extend);\r\nko.exportProperty(ko_subscribable_fn, 'getSubscriptionsCount', ko_subscribable_fn.getSubscriptionsCount);\r\n\r\n// For browsers that support proto assignment, we overwrite the prototype of each\r\n// observable instance. Since observables are functions, we need Function.prototype\r\n// to still be in the prototype chain.\r\nif (ko.utils.canSetPrototype) {\r\n    ko.utils.setPrototypeOf(ko_subscribable_fn, Function.prototype);\r\n}\r\n\r\nko.subscribable['fn'] = ko_subscribable_fn;\r\n\r\n\r\nko.isSubscribable = function (instance) {\r\n    return instance != null && typeof instance.subscribe == \"function\" && typeof instance[\"notifySubscribers\"] == \"function\";\r\n};\r\n\r\nko.exportSymbol('subscribable', ko.subscribable);\r\nko.exportSymbol('isSubscribable', ko.isSubscribable);\r\n\r\nko.computedContext = ko.dependencyDetection = (function () {\r\n    var outerFrames = [],\r\n        currentFrame,\r\n        lastId = 0;\r\n\r\n    // Return a unique ID that can be assigned to an observable for dependency tracking.\r\n    // Theoretically, you could eventually overflow the number storage size, resulting\r\n    // in duplicate IDs. But in JavaScript, the largest exact integral value is 2^53\r\n    // or 9,007,199,254,740,992. If you created 1,000,000 IDs per second, it would\r\n    // take over 285 years to reach that number.\r\n    // Reference http://blog.vjeux.com/2010/javascript/javascript-max_int-number-limits.html\r\n    function getId() {\r\n        return ++lastId;\r\n    }\r\n\r\n    function begin(options) {\r\n        outerFrames.push(currentFrame);\r\n        currentFrame = options;\r\n    }\r\n\r\n    function end() {\r\n        currentFrame = outerFrames.pop();\r\n    }\r\n\r\n    return {\r\n        begin: begin,\r\n\r\n        end: end,\r\n\r\n        registerDependency: function (subscribable) {\r\n            if (currentFrame) {\r\n                if (!ko.isSubscribable(subscribable))\r\n                    throw new Error(\"Only subscribable things can act as dependencies\");\r\n                currentFrame.callback(subscribable, subscribable._id || (subscribable._id = getId()));\r\n            }\r\n        },\r\n\r\n        ignore: function (callback, callbackTarget, callbackArgs) {\r\n            try {\r\n                begin();\r\n                return callback.apply(callbackTarget, callbackArgs || []);\r\n            } finally {\r\n                end();\r\n            }\r\n        },\r\n\r\n        getDependenciesCount: function () {\r\n            if (currentFrame)\r\n                return currentFrame.computed.getDependenciesCount();\r\n        },\r\n\r\n        isInitial: function() {\r\n            if (currentFrame)\r\n                return currentFrame.isInitial;\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol('computedContext', ko.computedContext);\r\nko.exportSymbol('computedContext.getDependenciesCount', ko.computedContext.getDependenciesCount);\r\nko.exportSymbol('computedContext.isInitial', ko.computedContext.isInitial);\r\nko.exportSymbol('computedContext.isSleeping', ko.computedContext.isSleeping);\r\n\r\nko.exportSymbol('ignoreDependencies', ko.ignoreDependencies = ko.dependencyDetection.ignore);\r\nko.observable = function (initialValue) {\r\n    var _latestValue = initialValue;\r\n\r\n    function observable() {\r\n        if (arguments.length > 0) {\r\n            // Write\r\n\r\n            // Ignore writes if the value hasn't changed\r\n            if (observable.isDifferent(_latestValue, arguments[0])) {\r\n                observable.valueWillMutate();\r\n                _latestValue = arguments[0];\r\n                if (DEBUG) observable._latestValue = _latestValue;\r\n                observable.valueHasMutated();\r\n            }\r\n            return this; // Permits chained assignments\r\n        }\r\n        else {\r\n            // Read\r\n            ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation\r\n            return _latestValue;\r\n        }\r\n    }\r\n    ko.subscribable.call(observable);\r\n    ko.utils.setPrototypeOfOrExtend(observable, ko.observable['fn']);\r\n\r\n    if (DEBUG) observable._latestValue = _latestValue;\r\n    observable.peek = function() { return _latestValue };\r\n    observable.valueHasMutated = function () { observable[\"notifySubscribers\"](_latestValue); }\r\n    observable.valueWillMutate = function () { observable[\"notifySubscribers\"](_latestValue, \"beforeChange\"); }\r\n\r\n    ko.exportProperty(observable, 'peek', observable.peek);\r\n    ko.exportProperty(observable, \"valueHasMutated\", observable.valueHasMutated);\r\n    ko.exportProperty(observable, \"valueWillMutate\", observable.valueWillMutate);\r\n\r\n    return observable;\r\n}\r\n\r\nko.observable['fn'] = {\r\n    \"equalityComparer\": valuesArePrimitiveAndEqual\r\n};\r\n\r\nvar protoProperty = ko.observable.protoProperty = \"__ko_proto__\";\r\nko.observable['fn'][protoProperty] = ko.observable;\r\n\r\n// Note that for browsers that don't support proto assignment, the\r\n// inheritance chain is created manually in the ko.observable constructor\r\nif (ko.utils.canSetPrototype) {\r\n    ko.utils.setPrototypeOf(ko.observable['fn'], ko.subscribable['fn']);\r\n}\r\n\r\nko.hasPrototype = function(instance, prototype) {\r\n    if ((instance === null) || (instance === undefined) || (instance[protoProperty] === undefined)) return false;\r\n    if (instance[protoProperty] === prototype) return true;\r\n    return ko.hasPrototype(instance[protoProperty], prototype); // Walk the prototype chain\r\n};\r\n\r\nko.isObservable = function (instance) {\r\n    return ko.hasPrototype(instance, ko.observable);\r\n}\r\nko.isWriteableObservable = function (instance) {\r\n    // Observable\r\n    if ((typeof instance == \"function\") && instance[protoProperty] === ko.observable)\r\n        return true;\r\n    // Writeable dependent observable\r\n    if ((typeof instance == \"function\") && (instance[protoProperty] === ko.dependentObservable) && (instance.hasWriteFunction))\r\n        return true;\r\n    // Anything else\r\n    return false;\r\n}\r\n\r\n\r\nko.exportSymbol('observable', ko.observable);\r\nko.exportSymbol('isObservable', ko.isObservable);\r\nko.exportSymbol('isWriteableObservable', ko.isWriteableObservable);\r\nko.exportSymbol('isWritableObservable', ko.isWriteableObservable);\r\nko.observableArray = function (initialValues) {\r\n    initialValues = initialValues || [];\r\n\r\n    if (typeof initialValues != 'object' || !('length' in initialValues))\r\n        throw new Error(\"The argument passed when initializing an observable array must be an array, or null, or undefined.\");\r\n\r\n    var result = ko.observable(initialValues);\r\n    ko.utils.setPrototypeOfOrExtend(result, ko.observableArray['fn']);\r\n    return result.extend({'trackArrayChanges':true});\r\n};\r\n\r\nko.observableArray['fn'] = {\r\n    'remove': function (valueOrPredicate) {\r\n        var underlyingArray = this.peek();\r\n        var removedValues = [];\r\n        var predicate = typeof valueOrPredicate == \"function\" && !ko.isObservable(valueOrPredicate) ? valueOrPredicate : function (value) { return value === valueOrPredicate; };\r\n        for (var i = 0; i < underlyingArray.length; i++) {\r\n            var value = underlyingArray[i];\r\n            if (predicate(value)) {\r\n                if (removedValues.length === 0) {\r\n                    this.valueWillMutate();\r\n                }\r\n                removedValues.push(value);\r\n                underlyingArray.splice(i, 1);\r\n                i--;\r\n            }\r\n        }\r\n        if (removedValues.length) {\r\n            this.valueHasMutated();\r\n        }\r\n        return removedValues;\r\n    },\r\n\r\n    'removeAll': function (arrayOfValues) {\r\n        // If you passed zero args, we remove everything\r\n        if (arrayOfValues === undefined) {\r\n            var underlyingArray = this.peek();\r\n            var allValues = underlyingArray.slice(0);\r\n            this.valueWillMutate();\r\n            underlyingArray.splice(0, underlyingArray.length);\r\n            this.valueHasMutated();\r\n            return allValues;\r\n        }\r\n        // If you passed an arg, we interpret it as an array of entries to remove\r\n        if (!arrayOfValues)\r\n            return [];\r\n        return this['remove'](function (value) {\r\n            return ko.utils.arrayIndexOf(arrayOfValues, value) >= 0;\r\n        });\r\n    },\r\n\r\n    'destroy': function (valueOrPredicate) {\r\n        var underlyingArray = this.peek();\r\n        var predicate = typeof valueOrPredicate == \"function\" && !ko.isObservable(valueOrPredicate) ? valueOrPredicate : function (value) { return value === valueOrPredicate; };\r\n        this.valueWillMutate();\r\n        for (var i = underlyingArray.length - 1; i >= 0; i--) {\r\n            var value = underlyingArray[i];\r\n            if (predicate(value))\r\n                underlyingArray[i][\"_destroy\"] = true;\r\n        }\r\n        this.valueHasMutated();\r\n    },\r\n\r\n    'destroyAll': function (arrayOfValues) {\r\n        // If you passed zero args, we destroy everything\r\n        if (arrayOfValues === undefined)\r\n            return this['destroy'](function() { return true });\r\n\r\n        // If you passed an arg, we interpret it as an array of entries to destroy\r\n        if (!arrayOfValues)\r\n            return [];\r\n        return this['destroy'](function (value) {\r\n            return ko.utils.arrayIndexOf(arrayOfValues, value) >= 0;\r\n        });\r\n    },\r\n\r\n    'indexOf': function (item) {\r\n        var underlyingArray = this();\r\n        return ko.utils.arrayIndexOf(underlyingArray, item);\r\n    },\r\n\r\n    'replace': function(oldItem, newItem) {\r\n        var index = this['indexOf'](oldItem);\r\n        if (index >= 0) {\r\n            this.valueWillMutate();\r\n            this.peek()[index] = newItem;\r\n            this.valueHasMutated();\r\n        }\r\n    }\r\n};\r\n\r\n// Populate ko.observableArray.fn with read/write functions from native arrays\r\n// Important: Do not add any additional functions here that may reasonably be used to *read* data from the array\r\n// because we'll eval them without causing subscriptions, so ko.computed output could end up getting stale\r\nko.utils.arrayForEach([\"pop\", \"push\", \"reverse\", \"shift\", \"sort\", \"splice\", \"unshift\"], function (methodName) {\r\n    ko.observableArray['fn'][methodName] = function () {\r\n        // Use \"peek\" to avoid creating a subscription in any computed that we're executing in the context of\r\n        // (for consistency with mutating regular observables)\r\n        var underlyingArray = this.peek();\r\n        this.valueWillMutate();\r\n        this.cacheDiffForKnownOperation(underlyingArray, methodName, arguments);\r\n        var methodCallResult = underlyingArray[methodName].apply(underlyingArray, arguments);\r\n        this.valueHasMutated();\r\n        return methodCallResult;\r\n    };\r\n});\r\n\r\n// Populate ko.observableArray.fn with read-only functions from native arrays\r\nko.utils.arrayForEach([\"slice\"], function (methodName) {\r\n    ko.observableArray['fn'][methodName] = function () {\r\n        var underlyingArray = this();\r\n        return underlyingArray[methodName].apply(underlyingArray, arguments);\r\n    };\r\n});\r\n\r\n// Note that for browsers that don't support proto assignment, the\r\n// inheritance chain is created manually in the ko.observableArray constructor\r\nif (ko.utils.canSetPrototype) {\r\n    ko.utils.setPrototypeOf(ko.observableArray['fn'], ko.observable['fn']);\r\n}\r\n\r\nko.exportSymbol('observableArray', ko.observableArray);\r\nvar arrayChangeEventName = 'arrayChange';\r\nko.extenders['trackArrayChanges'] = function(target) {\r\n    // Only modify the target observable once\r\n    if (target.cacheDiffForKnownOperation) {\r\n        return;\r\n    }\r\n    var trackingChanges = false,\r\n        cachedDiff = null,\r\n        arrayChangeSubscription,\r\n        pendingNotifications = 0,\r\n        underlyingBeforeSubscriptionAddFunction = target.beforeSubscriptionAdd,\r\n        underlyingAfterSubscriptionRemoveFunction = target.afterSubscriptionRemove;\r\n\r\n    // Watch \"subscribe\" calls, and for array change events, ensure change tracking is enabled\r\n    target.beforeSubscriptionAdd = function (event) {\r\n        if (underlyingBeforeSubscriptionAddFunction)\r\n            underlyingBeforeSubscriptionAddFunction.call(target, event);\r\n        if (event === arrayChangeEventName) {\r\n            trackChanges();\r\n        }\r\n    };\r\n    // Watch \"dispose\" calls, and for array change events, ensure change tracking is disabled when all are disposed\r\n    target.afterSubscriptionRemove = function (event) {\r\n        if (underlyingAfterSubscriptionRemoveFunction)\r\n            underlyingAfterSubscriptionRemoveFunction.call(target, event);\r\n        if (event === arrayChangeEventName && !target.hasSubscriptionsForEvent(arrayChangeEventName)) {\r\n            arrayChangeSubscription.dispose();\r\n            trackingChanges = false;\r\n        }\r\n    };\r\n\r\n    function trackChanges() {\r\n        // Calling 'trackChanges' multiple times is the same as calling it once\r\n        if (trackingChanges) {\r\n            return;\r\n        }\r\n\r\n        trackingChanges = true;\r\n\r\n        // Intercept \"notifySubscribers\" to track how many times it was called.\r\n        var underlyingNotifySubscribersFunction = target['notifySubscribers'];\r\n        target['notifySubscribers'] = function(valueToNotify, event) {\r\n            if (!event || event === defaultEvent) {\r\n                ++pendingNotifications;\r\n            }\r\n            return underlyingNotifySubscribersFunction.apply(this, arguments);\r\n        };\r\n\r\n        // Each time the array changes value, capture a clone so that on the next\r\n        // change it's possible to produce a diff\r\n        var previousContents = [].concat(target.peek() || []);\r\n        cachedDiff = null;\r\n        arrayChangeSubscription = target.subscribe(function(currentContents) {\r\n            // Make a copy of the current contents and ensure it's an array\r\n            currentContents = [].concat(currentContents || []);\r\n\r\n            // Compute the diff and issue notifications, but only if someone is listening\r\n            if (target.hasSubscriptionsForEvent(arrayChangeEventName)) {\r\n                var changes = getChanges(previousContents, currentContents);\r\n            }\r\n\r\n            // Eliminate references to the old, removed items, so they can be GCed\r\n            previousContents = currentContents;\r\n            cachedDiff = null;\r\n            pendingNotifications = 0;\r\n\r\n            if (changes && changes.length) {\r\n                target['notifySubscribers'](changes, arrayChangeEventName);\r\n            }\r\n        });\r\n    }\r\n\r\n    function getChanges(previousContents, currentContents) {\r\n        // We try to re-use cached diffs.\r\n        // The scenarios where pendingNotifications > 1 are when using rate-limiting or the Deferred Updates\r\n        // plugin, which without this check would not be compatible with arrayChange notifications. Normally,\r\n        // notifications are issued immediately so we wouldn't be queueing up more than one.\r\n        if (!cachedDiff || pendingNotifications > 1) {\r\n            cachedDiff = ko.utils.compareArrays(previousContents, currentContents, { 'sparse': true });\r\n        }\r\n\r\n        return cachedDiff;\r\n    }\r\n\r\n    target.cacheDiffForKnownOperation = function(rawArray, operationName, args) {\r\n        // Only run if we're currently tracking changes for this observable array\r\n        // and there aren't any pending deferred notifications.\r\n        if (!trackingChanges || pendingNotifications) {\r\n            return;\r\n        }\r\n        var diff = [],\r\n            arrayLength = rawArray.length,\r\n            argsLength = args.length,\r\n            offset = 0;\r\n\r\n        function pushDiff(status, value, index) {\r\n            return diff[diff.length] = { 'status': status, 'value': value, 'index': index };\r\n        }\r\n        switch (operationName) {\r\n            case 'push':\r\n                offset = arrayLength;\r\n            case 'unshift':\r\n                for (var index = 0; index < argsLength; index++) {\r\n                    pushDiff('added', args[index], offset + index);\r\n                }\r\n                break;\r\n\r\n            case 'pop':\r\n                offset = arrayLength - 1;\r\n            case 'shift':\r\n                if (arrayLength) {\r\n                    pushDiff('deleted', rawArray[offset], offset);\r\n                }\r\n                break;\r\n\r\n            case 'splice':\r\n                // Negative start index means 'from end of array'. After that we clamp to [0...arrayLength].\r\n                // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\r\n                var startIndex = Math.min(Math.max(0, args[0] < 0 ? arrayLength + args[0] : args[0]), arrayLength),\r\n                    endDeleteIndex = argsLength === 1 ? arrayLength : Math.min(startIndex + (args[1] || 0), arrayLength),\r\n                    endAddIndex = startIndex + argsLength - 2,\r\n                    endIndex = Math.max(endDeleteIndex, endAddIndex),\r\n                    additions = [], deletions = [];\r\n                for (var index = startIndex, argsIndex = 2; index < endIndex; ++index, ++argsIndex) {\r\n                    if (index < endDeleteIndex)\r\n                        deletions.push(pushDiff('deleted', rawArray[index], index));\r\n                    if (index < endAddIndex)\r\n                        additions.push(pushDiff('added', args[argsIndex], index));\r\n                }\r\n                ko.utils.findMovesInArrayComparison(deletions, additions);\r\n                break;\r\n\r\n            default:\r\n                return;\r\n        }\r\n        cachedDiff = diff;\r\n    };\r\n};\r\nko.computed = ko.dependentObservable = function (evaluatorFunctionOrOptions, evaluatorFunctionTarget, options) {\r\n    var _latestValue,\r\n        _needsEvaluation = true,\r\n        _isBeingEvaluated = false,\r\n        _suppressDisposalUntilDisposeWhenReturnsFalse = false,\r\n        _isDisposed = false,\r\n        readFunction = evaluatorFunctionOrOptions,\r\n        pure = false,\r\n        isSleeping = false;\r\n\r\n    if (readFunction && typeof readFunction == \"object\") {\r\n        // Single-parameter syntax - everything is on this \"options\" param\r\n        options = readFunction;\r\n        readFunction = options[\"read\"];\r\n    } else {\r\n        // Multi-parameter syntax - construct the options according to the params passed\r\n        options = options || {};\r\n        if (!readFunction)\r\n            readFunction = options[\"read\"];\r\n    }\r\n    if (typeof readFunction != \"function\")\r\n        throw new Error(\"Pass a function that returns the value of the ko.computed\");\r\n\r\n    function addDependencyTracking(id, target, trackingObj) {\r\n        if (pure && target === dependentObservable) {\r\n            throw Error(\"A 'pure' computed must not be called recursively\");\r\n        }\r\n\r\n        dependencyTracking[id] = trackingObj;\r\n        trackingObj._order = _dependenciesCount++;\r\n        trackingObj._version = target.getVersion();\r\n    }\r\n\r\n    function haveDependenciesChanged() {\r\n        var id, dependency;\r\n        for (id in dependencyTracking) {\r\n            if (dependencyTracking.hasOwnProperty(id)) {\r\n                dependency = dependencyTracking[id];\r\n                if (dependency._target.hasChanged(dependency._version)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function disposeComputed() {\r\n        if (!isSleeping && dependencyTracking) {\r\n            ko.utils.objectForEach(dependencyTracking, function (id, dependency) {\r\n                if (dependency.dispose)\r\n                    dependency.dispose();\r\n            });\r\n        }\r\n        dependencyTracking = null;\r\n        _dependenciesCount = 0;\r\n        _isDisposed = true;\r\n        _needsEvaluation = false;\r\n        isSleeping = false;\r\n    }\r\n\r\n    function evaluatePossiblyAsync() {\r\n        var throttleEvaluationTimeout = dependentObservable['throttleEvaluation'];\r\n        if (throttleEvaluationTimeout && throttleEvaluationTimeout >= 0) {\r\n            clearTimeout(evaluationTimeoutInstance);\r\n            evaluationTimeoutInstance = setTimeout(function () {\r\n                evaluateImmediate(true /*notifyChange*/);\r\n            }, throttleEvaluationTimeout);\r\n        } else if (dependentObservable._evalRateLimited) {\r\n            dependentObservable._evalRateLimited();\r\n        } else {\r\n            evaluateImmediate(true /*notifyChange*/);\r\n        }\r\n    }\r\n\r\n    function evaluateImmediate(notifyChange) {\r\n        if (_isBeingEvaluated) {\r\n            // If the evaluation of a ko.computed causes side effects, it's possible that it will trigger its own re-evaluation.\r\n            // This is not desirable (it's hard for a developer to realise a chain of dependencies might cause this, and they almost\r\n            // certainly didn't intend infinite re-evaluations). So, for predictability, we simply prevent ko.computeds from causing\r\n            // their own re-evaluation. Further discussion at https://github.com/SteveSanderson/knockout/pull/387\r\n            return;\r\n        }\r\n\r\n        // Do not evaluate (and possibly capture new dependencies) if disposed\r\n        if (_isDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposeWhen && disposeWhen()) {\r\n            // See comment below about _suppressDisposalUntilDisposeWhenReturnsFalse\r\n            if (!_suppressDisposalUntilDisposeWhenReturnsFalse) {\r\n                dispose();\r\n                return;\r\n            }\r\n        } else {\r\n            // It just did return false, so we can stop suppressing now\r\n            _suppressDisposalUntilDisposeWhenReturnsFalse = false;\r\n        }\r\n\r\n        _isBeingEvaluated = true;\r\n\r\n        try {\r\n            // Initially, we assume that none of the subscriptions are still being used (i.e., all are candidates for disposal).\r\n            // Then, during evaluation, we cross off any that are in fact still being used.\r\n            var disposalCandidates = dependencyTracking,\r\n                disposalCount = _dependenciesCount,\r\n                isInitial = pure ? undefined : !_dependenciesCount;   // If we're evaluating when there are no previous dependencies, it must be the first time\r\n\r\n            ko.dependencyDetection.begin({\r\n                callback: function(subscribable, id) {\r\n                    if (!_isDisposed) {\r\n                        if (disposalCount && disposalCandidates[id]) {\r\n                            // Don't want to dispose this subscription, as it's still being used\r\n                            addDependencyTracking(id, subscribable, disposalCandidates[id]);\r\n                            delete disposalCandidates[id];\r\n                            --disposalCount;\r\n                        } else if (!dependencyTracking[id]) {\r\n                            // Brand new subscription - add it\r\n                            addDependencyTracking(id, subscribable, isSleeping ? { _target: subscribable } : subscribable.subscribe(evaluatePossiblyAsync));\r\n                        }\r\n                    }\r\n                },\r\n                computed: dependentObservable,\r\n                isInitial: isInitial\r\n            });\r\n\r\n            dependencyTracking = {};\r\n            _dependenciesCount = 0;\r\n\r\n            try {\r\n                var newValue = evaluatorFunctionTarget ? readFunction.call(evaluatorFunctionTarget) : readFunction();\r\n\r\n            } finally {\r\n                ko.dependencyDetection.end();\r\n\r\n                // For each subscription no longer being used, remove it from the active subscriptions list and dispose it\r\n                if (disposalCount && !isSleeping) {\r\n                    ko.utils.objectForEach(disposalCandidates, function(id, toDispose) {\r\n                        if (toDispose.dispose)\r\n                            toDispose.dispose();\r\n                    });\r\n                }\r\n\r\n                _needsEvaluation = false;\r\n            }\r\n\r\n            if (dependentObservable.isDifferent(_latestValue, newValue)) {\r\n                if (!isSleeping) {\r\n                    notify(_latestValue, \"beforeChange\");\r\n                }\r\n\r\n                _latestValue = newValue;\r\n                if (DEBUG) dependentObservable._latestValue = _latestValue;\r\n\r\n                if (isSleeping) {\r\n                    dependentObservable.updateVersion();\r\n                } else if (notifyChange) {\r\n                    notify(_latestValue);\r\n                }\r\n            }\r\n\r\n            if (isInitial) {\r\n                notify(_latestValue, \"awake\");\r\n            }\r\n        } finally {\r\n            _isBeingEvaluated = false;\r\n        }\r\n\r\n        if (!_dependenciesCount)\r\n            dispose();\r\n    }\r\n\r\n    function dependentObservable() {\r\n        if (arguments.length > 0) {\r\n            if (typeof writeFunction === \"function\") {\r\n                // Writing a value\r\n                writeFunction.apply(evaluatorFunctionTarget, arguments);\r\n            } else {\r\n                throw new Error(\"Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.\");\r\n            }\r\n            return this; // Permits chained assignments\r\n        } else {\r\n            // Reading the value\r\n            ko.dependencyDetection.registerDependency(dependentObservable);\r\n            if (_needsEvaluation || (isSleeping && haveDependenciesChanged())) {\r\n                evaluateImmediate();\r\n            }\r\n            return _latestValue;\r\n        }\r\n    }\r\n\r\n    function peek() {\r\n        // Peek won't re-evaluate, except while the computed is sleeping or to get the initial value when \"deferEvaluation\" is set.\r\n        if ((_needsEvaluation && !_dependenciesCount) || (isSleeping && haveDependenciesChanged())) {\r\n            evaluateImmediate();\r\n        }\r\n        return _latestValue;\r\n    }\r\n\r\n    function isActive() {\r\n        return _needsEvaluation || _dependenciesCount > 0;\r\n    }\r\n\r\n    function notify(value, event) {\r\n        dependentObservable[\"notifySubscribers\"](value, event);\r\n    }\r\n\r\n    // By here, \"options\" is always non-null\r\n    var writeFunction = options[\"write\"],\r\n        disposeWhenNodeIsRemoved = options[\"disposeWhenNodeIsRemoved\"] || options.disposeWhenNodeIsRemoved || null,\r\n        disposeWhenOption = options[\"disposeWhen\"] || options.disposeWhen,\r\n        disposeWhen = disposeWhenOption,\r\n        dispose = disposeComputed,\r\n        dependencyTracking = {},\r\n        _dependenciesCount = 0,\r\n        evaluationTimeoutInstance = null;\r\n\r\n    if (!evaluatorFunctionTarget)\r\n        evaluatorFunctionTarget = options[\"owner\"];\r\n\r\n    ko.subscribable.call(dependentObservable);\r\n    ko.utils.setPrototypeOfOrExtend(dependentObservable, ko.dependentObservable['fn']);\r\n\r\n    dependentObservable.peek = peek;\r\n    dependentObservable.getDependenciesCount = function () { return _dependenciesCount; };\r\n    dependentObservable.hasWriteFunction = typeof writeFunction === \"function\";\r\n    dependentObservable.dispose = function () { dispose(); };\r\n    dependentObservable.isActive = isActive;\r\n\r\n    // Replace the limit function with one that delays evaluation as well.\r\n    var originalLimit = dependentObservable.limit;\r\n    dependentObservable.limit = function(limitFunction) {\r\n        originalLimit.call(dependentObservable, limitFunction);\r\n        dependentObservable._evalRateLimited = function() {\r\n            dependentObservable._rateLimitedBeforeChange(_latestValue);\r\n\r\n            _needsEvaluation = true;    // Mark as dirty\r\n\r\n            // Pass the observable to the rate-limit code, which will access it when\r\n            // it's time to do the notification.\r\n            dependentObservable._rateLimitedChange(dependentObservable);\r\n        }\r\n    };\r\n\r\n    if (options['pure']) {\r\n        pure = true;\r\n        isSleeping = true;     // Starts off sleeping; will awake on the first subscription\r\n        dependentObservable.beforeSubscriptionAdd = function (event) {\r\n            // If asleep, wake up the computed by subscribing to any dependencies.\r\n            if (!_isDisposed && isSleeping && event == 'change') {\r\n                isSleeping = false;\r\n                if (_needsEvaluation || haveDependenciesChanged()) {\r\n                    dependencyTracking = null;\r\n                    _dependenciesCount = 0;\r\n                    _needsEvaluation = true;\r\n                    evaluateImmediate();\r\n                } else {\r\n                    // First put the dependencies in order\r\n                    var dependeciesOrder = [];\r\n                    ko.utils.objectForEach(dependencyTracking, function (id, dependency) {\r\n                        dependeciesOrder[dependency._order] = id;\r\n                    });\r\n                    // Next, subscribe to each one\r\n                    ko.utils.arrayForEach(dependeciesOrder, function(id, order) {\r\n                        var dependency = dependencyTracking[id],\r\n                            subscription = dependency._target.subscribe(evaluatePossiblyAsync);\r\n                        subscription._order = order;\r\n                        subscription._version = dependency._version;\r\n                        dependencyTracking[id] = subscription;\r\n                    });\r\n                }\r\n                if (!_isDisposed) {     // test since evaluating could trigger disposal\r\n                    notify(_latestValue, \"awake\");\r\n                }\r\n            }\r\n        };\r\n\r\n        dependentObservable.afterSubscriptionRemove = function (event) {\r\n            if (!_isDisposed && event == 'change' && !dependentObservable.hasSubscriptionsForEvent('change')) {\r\n                ko.utils.objectForEach(dependencyTracking, function (id, dependency) {\r\n                    if (dependency.dispose) {\r\n                        dependencyTracking[id] = {\r\n                            _target: dependency._target,\r\n                            _order: dependency._order,\r\n                            _version: dependency._version\r\n                        };\r\n                        dependency.dispose();\r\n                    }\r\n                });\r\n                isSleeping = true;\r\n                notify(undefined, \"asleep\");\r\n            }\r\n        };\r\n\r\n        // Because a pure computed is not automatically updated while it is sleeping, we can't\r\n        // simply return the version number. Instead, we check if any of the dependencies have\r\n        // changed and conditionally re-evaluate the computed observable.\r\n        dependentObservable._originalGetVersion = dependentObservable.getVersion;\r\n        dependentObservable.getVersion = function () {\r\n            if (isSleeping && (_needsEvaluation || haveDependenciesChanged())) {\r\n                evaluateImmediate();\r\n            }\r\n            return dependentObservable._originalGetVersion();\r\n        };\r\n    } else if (options['deferEvaluation']) {\r\n        // This will force a computed with deferEvaluation to evaluate when the first subscriptions is registered.\r\n        dependentObservable.beforeSubscriptionAdd = function (event) {\r\n            if (event == 'change' || event == 'beforeChange') {\r\n                peek();\r\n            }\r\n        }\r\n    }\r\n\r\n    ko.exportProperty(dependentObservable, 'peek', dependentObservable.peek);\r\n    ko.exportProperty(dependentObservable, 'dispose', dependentObservable.dispose);\r\n    ko.exportProperty(dependentObservable, 'isActive', dependentObservable.isActive);\r\n    ko.exportProperty(dependentObservable, 'getDependenciesCount', dependentObservable.getDependenciesCount);\r\n\r\n    // Add a \"disposeWhen\" callback that, on each evaluation, disposes if the node was removed without using ko.removeNode.\r\n    if (disposeWhenNodeIsRemoved) {\r\n        // Since this computed is associated with a DOM node, and we don't want to dispose the computed\r\n        // until the DOM node is *removed* from the document (as opposed to never having been in the document),\r\n        // we'll prevent disposal until \"disposeWhen\" first returns false.\r\n        _suppressDisposalUntilDisposeWhenReturnsFalse = true;\r\n\r\n        // Only watch for the node's disposal if the value really is a node. It might not be,\r\n        // e.g., { disposeWhenNodeIsRemoved: true } can be used to opt into the \"only dispose\r\n        // after first false result\" behaviour even if there's no specific node to watch. This\r\n        // technique is intended for KO's internal use only and shouldn't be documented or used\r\n        // by application code, as it's likely to change in a future version of KO.\r\n        if (disposeWhenNodeIsRemoved.nodeType) {\r\n            disposeWhen = function () {\r\n                return !ko.utils.domNodeIsAttachedToDocument(disposeWhenNodeIsRemoved) || (disposeWhenOption && disposeWhenOption());\r\n            };\r\n        }\r\n    }\r\n\r\n    // Evaluate, unless sleeping or deferEvaluation is true\r\n    if (!isSleeping && !options['deferEvaluation'])\r\n        evaluateImmediate();\r\n\r\n    // Attach a DOM node disposal callback so that the computed will be proactively disposed as soon as the node is\r\n    // removed using ko.removeNode. But skip if isActive is false (there will never be any dependencies to dispose).\r\n    if (disposeWhenNodeIsRemoved && isActive() && disposeWhenNodeIsRemoved.nodeType) {\r\n        dispose = function() {\r\n            ko.utils.domNodeDisposal.removeDisposeCallback(disposeWhenNodeIsRemoved, dispose);\r\n            disposeComputed();\r\n        };\r\n        ko.utils.domNodeDisposal.addDisposeCallback(disposeWhenNodeIsRemoved, dispose);\r\n    }\r\n\r\n    return dependentObservable;\r\n};\r\n\r\nko.isComputed = function(instance) {\r\n    return ko.hasPrototype(instance, ko.dependentObservable);\r\n};\r\n\r\nvar protoProp = ko.observable.protoProperty; // == \"__ko_proto__\"\r\nko.dependentObservable[protoProp] = ko.observable;\r\n\r\nko.dependentObservable['fn'] = {\r\n    \"equalityComparer\": valuesArePrimitiveAndEqual\r\n};\r\nko.dependentObservable['fn'][protoProp] = ko.dependentObservable;\r\n\r\n// Note that for browsers that don't support proto assignment, the\r\n// inheritance chain is created manually in the ko.dependentObservable constructor\r\nif (ko.utils.canSetPrototype) {\r\n    ko.utils.setPrototypeOf(ko.dependentObservable['fn'], ko.subscribable['fn']);\r\n}\r\n\r\nko.exportSymbol('dependentObservable', ko.dependentObservable);\r\nko.exportSymbol('computed', ko.dependentObservable); // Make \"ko.computed\" an alias for \"ko.dependentObservable\"\r\nko.exportSymbol('isComputed', ko.isComputed);\r\n\r\nko.pureComputed = function (evaluatorFunctionOrOptions, evaluatorFunctionTarget) {\r\n    if (typeof evaluatorFunctionOrOptions === 'function') {\r\n        return ko.computed(evaluatorFunctionOrOptions, evaluatorFunctionTarget, {'pure':true});\r\n    } else {\r\n        evaluatorFunctionOrOptions = ko.utils.extend({}, evaluatorFunctionOrOptions);   // make a copy of the parameter object\r\n        evaluatorFunctionOrOptions['pure'] = true;\r\n        return ko.computed(evaluatorFunctionOrOptions, evaluatorFunctionTarget);\r\n    }\r\n}\r\nko.exportSymbol('pureComputed', ko.pureComputed);\r\n\r\n(function() {\r\n    var maxNestedObservableDepth = 10; // Escape the (unlikely) pathalogical case where an observable's current value is itself (or similar reference cycle)\r\n\r\n    ko.toJS = function(rootObject) {\r\n        if (arguments.length == 0)\r\n            throw new Error(\"When calling ko.toJS, pass the object you want to convert.\");\r\n\r\n        // We just unwrap everything at every level in the object graph\r\n        return mapJsObjectGraph(rootObject, function(valueToMap) {\r\n            // Loop because an observable's value might in turn be another observable wrapper\r\n            for (var i = 0; ko.isObservable(valueToMap) && (i < maxNestedObservableDepth); i++)\r\n                valueToMap = valueToMap();\r\n            return valueToMap;\r\n        });\r\n    };\r\n\r\n    ko.toJSON = function(rootObject, replacer, space) {     // replacer and space are optional\r\n        var plainJavaScriptObject = ko.toJS(rootObject);\r\n        return ko.utils.stringifyJson(plainJavaScriptObject, replacer, space);\r\n    };\r\n\r\n    function mapJsObjectGraph(rootObject, mapInputCallback, visitedObjects) {\r\n        visitedObjects = visitedObjects || new objectLookup();\r\n\r\n        rootObject = mapInputCallback(rootObject);\r\n        var canHaveProperties = (typeof rootObject == \"object\") && (rootObject !== null) && (rootObject !== undefined) && (!(rootObject instanceof Date)) && (!(rootObject instanceof String)) && (!(rootObject instanceof Number)) && (!(rootObject instanceof Boolean));\r\n        if (!canHaveProperties)\r\n            return rootObject;\r\n\r\n        var outputProperties = rootObject instanceof Array ? [] : {};\r\n        visitedObjects.save(rootObject, outputProperties);\r\n\r\n        visitPropertiesOrArrayEntries(rootObject, function(indexer) {\r\n            var propertyValue = mapInputCallback(rootObject[indexer]);\r\n\r\n            switch (typeof propertyValue) {\r\n                case \"boolean\":\r\n                case \"number\":\r\n                case \"string\":\r\n                case \"function\":\r\n                    outputProperties[indexer] = propertyValue;\r\n                    break;\r\n                case \"object\":\r\n                case \"undefined\":\r\n                    var previouslyMappedValue = visitedObjects.get(propertyValue);\r\n                    outputProperties[indexer] = (previouslyMappedValue !== undefined)\r\n                        ? previouslyMappedValue\r\n                        : mapJsObjectGraph(propertyValue, mapInputCallback, visitedObjects);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return outputProperties;\r\n    }\r\n\r\n    function visitPropertiesOrArrayEntries(rootObject, visitorCallback) {\r\n        if (rootObject instanceof Array) {\r\n            for (var i = 0; i < rootObject.length; i++)\r\n                visitorCallback(i);\r\n\r\n            // For arrays, also respect toJSON property for custom mappings (fixes #278)\r\n            if (typeof rootObject['toJSON'] == 'function')\r\n                visitorCallback('toJSON');\r\n        } else {\r\n            for (var propertyName in rootObject) {\r\n                visitorCallback(propertyName);\r\n            }\r\n        }\r\n    };\r\n\r\n    function objectLookup() {\r\n        this.keys = [];\r\n        this.values = [];\r\n    };\r\n\r\n    objectLookup.prototype = {\r\n        constructor: objectLookup,\r\n        save: function(key, value) {\r\n            var existingIndex = ko.utils.arrayIndexOf(this.keys, key);\r\n            if (existingIndex >= 0)\r\n                this.values[existingIndex] = value;\r\n            else {\r\n                this.keys.push(key);\r\n                this.values.push(value);\r\n            }\r\n        },\r\n        get: function(key) {\r\n            var existingIndex = ko.utils.arrayIndexOf(this.keys, key);\r\n            return (existingIndex >= 0) ? this.values[existingIndex] : undefined;\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol('toJS', ko.toJS);\r\nko.exportSymbol('toJSON', ko.toJSON);\r\n(function () {\r\n    var hasDomDataExpandoProperty = '__ko__hasDomDataOptionValue__';\r\n\r\n    // Normally, SELECT elements and their OPTIONs can only take value of type 'string' (because the values\r\n    // are stored on DOM attributes). ko.selectExtensions provides a way for SELECTs/OPTIONs to have values\r\n    // that are arbitrary objects. This is very convenient when implementing things like cascading dropdowns.\r\n    ko.selectExtensions = {\r\n        readValue : function(element) {\r\n            switch (ko.utils.tagNameLower(element)) {\r\n                case 'option':\r\n                    if (element[hasDomDataExpandoProperty] === true)\r\n                        return ko.utils.domData.get(element, ko.bindingHandlers.options.optionValueDomDataKey);\r\n                    return ko.utils.ieVersion <= 7\r\n                        ? (element.getAttributeNode('value') && element.getAttributeNode('value').specified ? element.value : element.text)\r\n                        : element.value;\r\n                case 'select':\r\n                    return element.selectedIndex >= 0 ? ko.selectExtensions.readValue(element.options[element.selectedIndex]) : undefined;\r\n                default:\r\n                    return element.value;\r\n            }\r\n        },\r\n\r\n        writeValue: function(element, value, allowUnset) {\r\n            switch (ko.utils.tagNameLower(element)) {\r\n                case 'option':\r\n                    switch(typeof value) {\r\n                        case \"string\":\r\n                            ko.utils.domData.set(element, ko.bindingHandlers.options.optionValueDomDataKey, undefined);\r\n                            if (hasDomDataExpandoProperty in element) { // IE <= 8 throws errors if you delete non-existent properties from a DOM node\r\n                                delete element[hasDomDataExpandoProperty];\r\n                            }\r\n                            element.value = value;\r\n                            break;\r\n                        default:\r\n                            // Store arbitrary object using DomData\r\n                            ko.utils.domData.set(element, ko.bindingHandlers.options.optionValueDomDataKey, value);\r\n                            element[hasDomDataExpandoProperty] = true;\r\n\r\n                            // Special treatment of numbers is just for backward compatibility. KO 1.2.1 wrote numerical values to element.value.\r\n                            element.value = typeof value === \"number\" ? value : \"\";\r\n                            break;\r\n                    }\r\n                    break;\r\n                case 'select':\r\n                    if (value === \"\" || value === null)       // A blank string or null value will select the caption\r\n                        value = undefined;\r\n                    var selection = -1;\r\n                    for (var i = 0, n = element.options.length, optionValue; i < n; ++i) {\r\n                        optionValue = ko.selectExtensions.readValue(element.options[i]);\r\n                        // Include special check to handle selecting a caption with a blank string value\r\n                        if (optionValue == value || (optionValue == \"\" && value === undefined)) {\r\n                            selection = i;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (allowUnset || selection >= 0 || (value === undefined && element.size > 1)) {\r\n                        element.selectedIndex = selection;\r\n                    }\r\n                    break;\r\n                default:\r\n                    if ((value === null) || (value === undefined))\r\n                        value = \"\";\r\n                    element.value = value;\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol('selectExtensions', ko.selectExtensions);\r\nko.exportSymbol('selectExtensions.readValue', ko.selectExtensions.readValue);\r\nko.exportSymbol('selectExtensions.writeValue', ko.selectExtensions.writeValue);\r\nko.expressionRewriting = (function () {\r\n    var javaScriptReservedWords = [\"true\", \"false\", \"null\", \"undefined\"];\r\n\r\n    // Matches something that can be assigned to--either an isolated identifier or something ending with a property accessor\r\n    // This is designed to be simple and avoid false negatives, but could produce false positives (e.g., a+b.c).\r\n    // This also will not properly handle nested brackets (e.g., obj1[obj2['prop']]; see #911).\r\n    var javaScriptAssignmentTarget = /^(?:[$_a-z][$\\w]*|(.+)(\\.\\s*[$_a-z][$\\w]*|\\[.+\\]))$/i;\r\n\r\n    function getWriteableValue(expression) {\r\n        if (ko.utils.arrayIndexOf(javaScriptReservedWords, expression) >= 0)\r\n            return false;\r\n        var match = expression.match(javaScriptAssignmentTarget);\r\n        return match === null ? false : match[1] ? ('Object(' + match[1] + ')' + match[2]) : expression;\r\n    }\r\n\r\n    // The following regular expressions will be used to split an object-literal string into tokens\r\n\r\n        // These two match strings, either with double quotes or single quotes\r\n    var stringDouble = '\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"',\r\n        stringSingle = \"'(?:[^'\\\\\\\\]|\\\\\\\\.)*'\",\r\n        // Matches a regular expression (text enclosed by slashes), but will also match sets of divisions\r\n        // as a regular expression (this is handled by the parsing loop below).\r\n        stringRegexp = '/(?:[^/\\\\\\\\]|\\\\\\\\.)*/\\w*',\r\n        // These characters have special meaning to the parser and must not appear in the middle of a\r\n        // token, except as part of a string.\r\n        specials = ',\"\\'{}()/:[\\\\]',\r\n        // Match text (at least two characters) that does not contain any of the above special characters,\r\n        // although some of the special characters are allowed to start it (all but the colon and comma).\r\n        // The text can contain spaces, but leading or trailing spaces are skipped.\r\n        everyThingElse = '[^\\\\s:,/][^' + specials + ']*[^\\\\s' + specials + ']',\r\n        // Match any non-space character not matched already. This will match colons and commas, since they're\r\n        // not matched by \"everyThingElse\", but will also match any other single character that wasn't already\r\n        // matched (for example: in \"a: 1, b: 2\", each of the non-space characters will be matched by oneNotSpace).\r\n        oneNotSpace = '[^\\\\s]',\r\n\r\n        // Create the actual regular expression by or-ing the above strings. The order is important.\r\n        bindingToken = RegExp(stringDouble + '|' + stringSingle + '|' + stringRegexp + '|' + everyThingElse + '|' + oneNotSpace, 'g'),\r\n\r\n        // Match end of previous token to determine whether a slash is a division or regex.\r\n        divisionLookBehind = /[\\])\"'A-Za-z0-9_$]+$/,\r\n        keywordRegexLookBehind = {'in':1,'return':1,'typeof':1};\r\n\r\n    function parseObjectLiteral(objectLiteralString) {\r\n        // Trim leading and trailing spaces from the string\r\n        var str = ko.utils.stringTrim(objectLiteralString);\r\n\r\n        // Trim braces '{' surrounding the whole object literal\r\n        if (str.charCodeAt(0) === 123) str = str.slice(1, -1);\r\n\r\n        // Split into tokens\r\n        var result = [], toks = str.match(bindingToken), key, values = [], depth = 0;\r\n\r\n        if (toks) {\r\n            // Append a comma so that we don't need a separate code block to deal with the last item\r\n            toks.push(',');\r\n\r\n            for (var i = 0, tok; tok = toks[i]; ++i) {\r\n                var c = tok.charCodeAt(0);\r\n                // A comma signals the end of a key/value pair if depth is zero\r\n                if (c === 44) { // \",\"\r\n                    if (depth <= 0) {\r\n                        result.push((key && values.length) ? {key: key, value: values.join('')} : {'unknown': key || values.join('')});\r\n                        key = depth = 0;\r\n                        values = [];\r\n                        continue;\r\n                    }\r\n                // Simply skip the colon that separates the name and value\r\n                } else if (c === 58) { // \":\"\r\n                    if (!depth && !key && values.length === 1) {\r\n                        key = values.pop();\r\n                        continue;\r\n                    }\r\n                // A set of slashes is initially matched as a regular expression, but could be division\r\n                } else if (c === 47 && i && tok.length > 1) {  // \"/\"\r\n                    // Look at the end of the previous token to determine if the slash is actually division\r\n                    var match = toks[i-1].match(divisionLookBehind);\r\n                    if (match && !keywordRegexLookBehind[match[0]]) {\r\n                        // The slash is actually a division punctuator; re-parse the remainder of the string (not including the slash)\r\n                        str = str.substr(str.indexOf(tok) + 1);\r\n                        toks = str.match(bindingToken);\r\n                        toks.push(',');\r\n                        i = -1;\r\n                        // Continue with just the slash\r\n                        tok = '/';\r\n                    }\r\n                // Increment depth for parentheses, braces, and brackets so that interior commas are ignored\r\n                } else if (c === 40 || c === 123 || c === 91) { // '(', '{', '['\r\n                    ++depth;\r\n                } else if (c === 41 || c === 125 || c === 93) { // ')', '}', ']'\r\n                    --depth;\r\n                // The key will be the first token; if it's a string, trim the quotes\r\n                } else if (!key && !values.length && (c === 34 || c === 39)) { // '\"', \"'\"\r\n                    tok = tok.slice(1, -1);\r\n                }\r\n                values.push(tok);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Two-way bindings include a write function that allow the handler to update the value even if it's not an observable.\r\n    var twoWayBindings = {};\r\n\r\n    function preProcessBindings(bindingsStringOrKeyValueArray, bindingOptions) {\r\n        bindingOptions = bindingOptions || {};\r\n\r\n        function processKeyValue(key, val) {\r\n            var writableVal;\r\n            function callPreprocessHook(obj) {\r\n                return (obj && obj['preprocess']) ? (val = obj['preprocess'](val, key, processKeyValue)) : true;\r\n            }\r\n            if (!bindingParams) {\r\n                if (!callPreprocessHook(ko['getBindingHandler'](key)))\r\n                    return;\r\n\r\n                if (twoWayBindings[key] && (writableVal = getWriteableValue(val))) {\r\n                    // For two-way bindings, provide a write method in case the value\r\n                    // isn't a writable observable.\r\n                    propertyAccessorResultStrings.push(\"'\" + key + \"':function(_z){\" + writableVal + \"=_z}\");\r\n                }\r\n            }\r\n            // Values are wrapped in a function so that each value can be accessed independently\r\n            if (makeValueAccessors) {\r\n                val = 'function(){return ' + val + ' }';\r\n            }\r\n            resultStrings.push(\"'\" + key + \"':\" + val);\r\n        }\r\n\r\n        var resultStrings = [],\r\n            propertyAccessorResultStrings = [],\r\n            makeValueAccessors = bindingOptions['valueAccessors'],\r\n            bindingParams = bindingOptions['bindingParams'],\r\n            keyValueArray = typeof bindingsStringOrKeyValueArray === \"string\" ?\r\n                parseObjectLiteral(bindingsStringOrKeyValueArray) : bindingsStringOrKeyValueArray;\r\n\r\n        ko.utils.arrayForEach(keyValueArray, function(keyValue) {\r\n            processKeyValue(keyValue.key || keyValue['unknown'], keyValue.value);\r\n        });\r\n\r\n        if (propertyAccessorResultStrings.length)\r\n            processKeyValue('_ko_property_writers', \"{\" + propertyAccessorResultStrings.join(\",\") + \" }\");\r\n\r\n        return resultStrings.join(\",\");\r\n    }\r\n\r\n    return {\r\n        bindingRewriteValidators: [],\r\n\r\n        twoWayBindings: twoWayBindings,\r\n\r\n        parseObjectLiteral: parseObjectLiteral,\r\n\r\n        preProcessBindings: preProcessBindings,\r\n\r\n        keyValueArrayContainsKey: function(keyValueArray, key) {\r\n            for (var i = 0; i < keyValueArray.length; i++)\r\n                if (keyValueArray[i]['key'] == key)\r\n                    return true;\r\n            return false;\r\n        },\r\n\r\n        // Internal, private KO utility for updating model properties from within bindings\r\n        // property:            If the property being updated is (or might be) an observable, pass it here\r\n        //                      If it turns out to be a writable observable, it will be written to directly\r\n        // allBindings:         An object with a get method to retrieve bindings in the current execution context.\r\n        //                      This will be searched for a '_ko_property_writers' property in case you're writing to a non-observable\r\n        // key:                 The key identifying the property to be written. Example: for { hasFocus: myValue }, write to 'myValue' by specifying the key 'hasFocus'\r\n        // value:               The value to be written\r\n        // checkIfDifferent:    If true, and if the property being written is a writable observable, the value will only be written if\r\n        //                      it is !== existing value on that writable observable\r\n        writeValueToProperty: function(property, allBindings, key, value, checkIfDifferent) {\r\n            if (!property || !ko.isObservable(property)) {\r\n                var propWriters = allBindings.get('_ko_property_writers');\r\n                if (propWriters && propWriters[key])\r\n                    propWriters[key](value);\r\n            } else if (ko.isWriteableObservable(property) && (!checkIfDifferent || property.peek() !== value)) {\r\n                property(value);\r\n            }\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol('expressionRewriting', ko.expressionRewriting);\r\nko.exportSymbol('expressionRewriting.bindingRewriteValidators', ko.expressionRewriting.bindingRewriteValidators);\r\nko.exportSymbol('expressionRewriting.parseObjectLiteral', ko.expressionRewriting.parseObjectLiteral);\r\nko.exportSymbol('expressionRewriting.preProcessBindings', ko.expressionRewriting.preProcessBindings);\r\n\r\n// Making bindings explicitly declare themselves as \"two way\" isn't ideal in the long term (it would be better if\r\n// all bindings could use an official 'property writer' API without needing to declare that they might). However,\r\n// since this is not, and has never been, a public API (_ko_property_writers was never documented), it's acceptable\r\n// as an internal implementation detail in the short term.\r\n// For those developers who rely on _ko_property_writers in their custom bindings, we expose _twoWayBindings as an\r\n// undocumented feature that makes it relatively easy to upgrade to KO 3.0. However, this is still not an official\r\n// public API, and we reserve the right to remove it at any time if we create a real public property writers API.\r\nko.exportSymbol('expressionRewriting._twoWayBindings', ko.expressionRewriting.twoWayBindings);\r\n\r\n// For backward compatibility, define the following aliases. (Previously, these function names were misleading because\r\n// they referred to JSON specifically, even though they actually work with arbitrary JavaScript object literal expressions.)\r\nko.exportSymbol('jsonExpressionRewriting', ko.expressionRewriting);\r\nko.exportSymbol('jsonExpressionRewriting.insertPropertyAccessorsIntoJson', ko.expressionRewriting.preProcessBindings);\r\n(function() {\r\n    // \"Virtual elements\" is an abstraction on top of the usual DOM API which understands the notion that comment nodes\r\n    // may be used to represent hierarchy (in addition to the DOM's natural hierarchy).\r\n    // If you call the DOM-manipulating functions on ko.virtualElements, you will be able to read and write the state\r\n    // of that virtual hierarchy\r\n    //\r\n    // The point of all this is to support containerless templates (e.g., <!-- ko foreach:someCollection -->blah<!-- /ko -->)\r\n    // without having to scatter special cases all over the binding and templating code.\r\n\r\n    // IE 9 cannot reliably read the \"nodeValue\" property of a comment node (see https://github.com/SteveSanderson/knockout/issues/186)\r\n    // but it does give them a nonstandard alternative property called \"text\" that it can read reliably. Other browsers don't have that property.\r\n    // So, use node.text where available, and node.nodeValue elsewhere\r\n    var commentNodesHaveTextProperty = document && document.createComment(\"test\").text === \"<!--test-->\";\r\n\r\n    var startCommentRegex = commentNodesHaveTextProperty ? /^<!--\\s*ko(?:\\s+([\\s\\S]+))?\\s*-->$/ : /^\\s*ko(?:\\s+([\\s\\S]+))?\\s*$/;\r\n    var endCommentRegex =   commentNodesHaveTextProperty ? /^<!--\\s*\\/ko\\s*-->$/ : /^\\s*\\/ko\\s*$/;\r\n    var htmlTagsWithOptionallyClosingChildren = { 'ul': true, 'ol': true };\r\n\r\n    function isStartComment(node) {\r\n        return (node.nodeType == 8) && startCommentRegex.test(commentNodesHaveTextProperty ? node.text : node.nodeValue);\r\n    }\r\n\r\n    function isEndComment(node) {\r\n        return (node.nodeType == 8) && endCommentRegex.test(commentNodesHaveTextProperty ? node.text : node.nodeValue);\r\n    }\r\n\r\n    function getVirtualChildren(startComment, allowUnbalanced) {\r\n        var currentNode = startComment;\r\n        var depth = 1;\r\n        var children = [];\r\n        while (currentNode = currentNode.nextSibling) {\r\n            if (isEndComment(currentNode)) {\r\n                depth--;\r\n                if (depth === 0)\r\n                    return children;\r\n            }\r\n\r\n            children.push(currentNode);\r\n\r\n            if (isStartComment(currentNode))\r\n                depth++;\r\n        }\r\n        if (!allowUnbalanced)\r\n            throw new Error(\"Cannot find closing comment tag to match: \" + startComment.nodeValue);\r\n        return null;\r\n    }\r\n\r\n    function getMatchingEndComment(startComment, allowUnbalanced) {\r\n        var allVirtualChildren = getVirtualChildren(startComment, allowUnbalanced);\r\n        if (allVirtualChildren) {\r\n            if (allVirtualChildren.length > 0)\r\n                return allVirtualChildren[allVirtualChildren.length - 1].nextSibling;\r\n            return startComment.nextSibling;\r\n        } else\r\n            return null; // Must have no matching end comment, and allowUnbalanced is true\r\n    }\r\n\r\n    function getUnbalancedChildTags(node) {\r\n        // e.g., from <div>OK</div><!-- ko blah --><span>Another</span>, returns: <!-- ko blah --><span>Another</span>\r\n        //       from <div>OK</div><!-- /ko --><!-- /ko -->,             returns: <!-- /ko --><!-- /ko -->\r\n        var childNode = node.firstChild, captureRemaining = null;\r\n        if (childNode) {\r\n            do {\r\n                if (captureRemaining)                   // We already hit an unbalanced node and are now just scooping up all subsequent nodes\r\n                    captureRemaining.push(childNode);\r\n                else if (isStartComment(childNode)) {\r\n                    var matchingEndComment = getMatchingEndComment(childNode, /* allowUnbalanced: */ true);\r\n                    if (matchingEndComment)             // It's a balanced tag, so skip immediately to the end of this virtual set\r\n                        childNode = matchingEndComment;\r\n                    else\r\n                        captureRemaining = [childNode]; // It's unbalanced, so start capturing from this point\r\n                } else if (isEndComment(childNode)) {\r\n                    captureRemaining = [childNode];     // It's unbalanced (if it wasn't, we'd have skipped over it already), so start capturing\r\n                }\r\n            } while (childNode = childNode.nextSibling);\r\n        }\r\n        return captureRemaining;\r\n    }\r\n\r\n    ko.virtualElements = {\r\n        allowedBindings: {},\r\n\r\n        childNodes: function(node) {\r\n            return isStartComment(node) ? getVirtualChildren(node) : node.childNodes;\r\n        },\r\n\r\n        emptyNode: function(node) {\r\n            if (!isStartComment(node))\r\n                ko.utils.emptyDomNode(node);\r\n            else {\r\n                var virtualChildren = ko.virtualElements.childNodes(node);\r\n                for (var i = 0, j = virtualChildren.length; i < j; i++)\r\n                    ko.removeNode(virtualChildren[i]);\r\n            }\r\n        },\r\n\r\n        setDomNodeChildren: function(node, childNodes) {\r\n            if (!isStartComment(node))\r\n                ko.utils.setDomNodeChildren(node, childNodes);\r\n            else {\r\n                ko.virtualElements.emptyNode(node);\r\n                var endCommentNode = node.nextSibling; // Must be the next sibling, as we just emptied the children\r\n                for (var i = 0, j = childNodes.length; i < j; i++)\r\n                    endCommentNode.parentNode.insertBefore(childNodes[i], endCommentNode);\r\n            }\r\n        },\r\n\r\n        prepend: function(containerNode, nodeToPrepend) {\r\n            if (!isStartComment(containerNode)) {\r\n                if (containerNode.firstChild)\r\n                    containerNode.insertBefore(nodeToPrepend, containerNode.firstChild);\r\n                else\r\n                    containerNode.appendChild(nodeToPrepend);\r\n            } else {\r\n                // Start comments must always have a parent and at least one following sibling (the end comment)\r\n                containerNode.parentNode.insertBefore(nodeToPrepend, containerNode.nextSibling);\r\n            }\r\n        },\r\n\r\n        insertAfter: function(containerNode, nodeToInsert, insertAfterNode) {\r\n            if (!insertAfterNode) {\r\n                ko.virtualElements.prepend(containerNode, nodeToInsert);\r\n            } else if (!isStartComment(containerNode)) {\r\n                // Insert after insertion point\r\n                if (insertAfterNode.nextSibling)\r\n                    containerNode.insertBefore(nodeToInsert, insertAfterNode.nextSibling);\r\n                else\r\n                    containerNode.appendChild(nodeToInsert);\r\n            } else {\r\n                // Children of start comments must always have a parent and at least one following sibling (the end comment)\r\n                containerNode.parentNode.insertBefore(nodeToInsert, insertAfterNode.nextSibling);\r\n            }\r\n        },\r\n\r\n        firstChild: function(node) {\r\n            if (!isStartComment(node))\r\n                return node.firstChild;\r\n            if (!node.nextSibling || isEndComment(node.nextSibling))\r\n                return null;\r\n            return node.nextSibling;\r\n        },\r\n\r\n        nextSibling: function(node) {\r\n            if (isStartComment(node))\r\n                node = getMatchingEndComment(node);\r\n            if (node.nextSibling && isEndComment(node.nextSibling))\r\n                return null;\r\n            return node.nextSibling;\r\n        },\r\n\r\n        hasBindingValue: isStartComment,\r\n\r\n        virtualNodeBindingValue: function(node) {\r\n            var regexMatch = (commentNodesHaveTextProperty ? node.text : node.nodeValue).match(startCommentRegex);\r\n            return regexMatch ? regexMatch[1] : null;\r\n        },\r\n\r\n        normaliseVirtualElementDomStructure: function(elementVerified) {\r\n            // Workaround for https://github.com/SteveSanderson/knockout/issues/155\r\n            // (IE <= 8 or IE 9 quirks mode parses your HTML weirdly, treating closing </li> tags as if they don't exist, thereby moving comment nodes\r\n            // that are direct descendants of <ul> into the preceding <li>)\r\n            if (!htmlTagsWithOptionallyClosingChildren[ko.utils.tagNameLower(elementVerified)])\r\n                return;\r\n\r\n            // Scan immediate children to see if they contain unbalanced comment tags. If they do, those comment tags\r\n            // must be intended to appear *after* that child, so move them there.\r\n            var childNode = elementVerified.firstChild;\r\n            if (childNode) {\r\n                do {\r\n                    if (childNode.nodeType === 1) {\r\n                        var unbalancedTags = getUnbalancedChildTags(childNode);\r\n                        if (unbalancedTags) {\r\n                            // Fix up the DOM by moving the unbalanced tags to where they most likely were intended to be placed - *after* the child\r\n                            var nodeToInsertBefore = childNode.nextSibling;\r\n                            for (var i = 0; i < unbalancedTags.length; i++) {\r\n                                if (nodeToInsertBefore)\r\n                                    elementVerified.insertBefore(unbalancedTags[i], nodeToInsertBefore);\r\n                                else\r\n                                    elementVerified.appendChild(unbalancedTags[i]);\r\n                            }\r\n                        }\r\n                    }\r\n                } while (childNode = childNode.nextSibling);\r\n            }\r\n        }\r\n    };\r\n})();\r\nko.exportSymbol('virtualElements', ko.virtualElements);\r\nko.exportSymbol('virtualElements.allowedBindings', ko.virtualElements.allowedBindings);\r\nko.exportSymbol('virtualElements.emptyNode', ko.virtualElements.emptyNode);\r\n//ko.exportSymbol('virtualElements.firstChild', ko.virtualElements.firstChild);     // firstChild is not minified\r\nko.exportSymbol('virtualElements.insertAfter', ko.virtualElements.insertAfter);\r\n//ko.exportSymbol('virtualElements.nextSibling', ko.virtualElements.nextSibling);   // nextSibling is not minified\r\nko.exportSymbol('virtualElements.prepend', ko.virtualElements.prepend);\r\nko.exportSymbol('virtualElements.setDomNodeChildren', ko.virtualElements.setDomNodeChildren);\r\n(function() {\r\n    var defaultBindingAttributeName = \"data-bind\";\r\n\r\n    ko.bindingProvider = function() {\r\n        this.bindingCache = {};\r\n    };\r\n\r\n    ko.utils.extend(ko.bindingProvider.prototype, {\r\n        'nodeHasBindings': function(node) {\r\n            switch (node.nodeType) {\r\n                case 1: // Element\r\n                    return node.getAttribute(defaultBindingAttributeName) != null\r\n                        || ko.components['getComponentNameForNode'](node);\r\n                case 8: // Comment node\r\n                    return ko.virtualElements.hasBindingValue(node);\r\n                default: return false;\r\n            }\r\n        },\r\n\r\n        'getBindings': function(node, bindingContext) {\r\n            var bindingsString = this['getBindingsString'](node, bindingContext),\r\n                parsedBindings = bindingsString ? this['parseBindingsString'](bindingsString, bindingContext, node) : null;\r\n            return ko.components.addBindingsForCustomElement(parsedBindings, node, bindingContext, /* valueAccessors */ false);\r\n        },\r\n\r\n        'getBindingAccessors': function(node, bindingContext) {\r\n            var bindingsString = this['getBindingsString'](node, bindingContext),\r\n                parsedBindings = bindingsString ? this['parseBindingsString'](bindingsString, bindingContext, node, { 'valueAccessors': true }) : null;\r\n            return ko.components.addBindingsForCustomElement(parsedBindings, node, bindingContext, /* valueAccessors */ true);\r\n        },\r\n\r\n        // The following function is only used internally by this default provider.\r\n        // It's not part of the interface definition for a general binding provider.\r\n        'getBindingsString': function(node, bindingContext) {\r\n            switch (node.nodeType) {\r\n                case 1: return node.getAttribute(defaultBindingAttributeName);   // Element\r\n                case 8: return ko.virtualElements.virtualNodeBindingValue(node); // Comment node\r\n                default: return null;\r\n            }\r\n        },\r\n\r\n        // The following function is only used internally by this default provider.\r\n        // It's not part of the interface definition for a general binding provider.\r\n        'parseBindingsString': function(bindingsString, bindingContext, node, options) {\r\n            try {\r\n                var bindingFunction = createBindingsStringEvaluatorViaCache(bindingsString, this.bindingCache, options);\r\n                return bindingFunction(bindingContext, node);\r\n            } catch (ex) {\r\n                ex.message = \"Unable to parse bindings.\\nBindings value: \" + bindingsString + \"\\nMessage: \" + ex.message;\r\n                throw ex;\r\n            }\r\n        }\r\n    });\r\n\r\n    ko.bindingProvider['instance'] = new ko.bindingProvider();\r\n\r\n    function createBindingsStringEvaluatorViaCache(bindingsString, cache, options) {\r\n        var cacheKey = bindingsString + (options && options['valueAccessors'] || '');\r\n        return cache[cacheKey]\r\n            || (cache[cacheKey] = createBindingsStringEvaluator(bindingsString, options));\r\n    }\r\n\r\n    function createBindingsStringEvaluator(bindingsString, options) {\r\n        // Build the source for a function that evaluates \"expression\"\r\n        // For each scope variable, add an extra level of \"with\" nesting\r\n        // Example result: with(sc1) { with(sc0) { return (expression) } }\r\n        var rewrittenBindings = ko.expressionRewriting.preProcessBindings(bindingsString, options),\r\n            functionBody = \"with($context){with($data||{}){return{\" + rewrittenBindings + \"}}}\";\r\n        return new Function(\"$context\", \"$element\", functionBody);\r\n    }\r\n})();\r\n\r\nko.exportSymbol('bindingProvider', ko.bindingProvider);\r\n(function () {\r\n    ko.bindingHandlers = {};\r\n\r\n    // The following element types will not be recursed into during binding. In the future, we\r\n    // may consider adding <template> to this list, because such elements' contents are always\r\n    // intended to be bound in a different context from where they appear in the document.\r\n    var bindingDoesNotRecurseIntoElementTypes = {\r\n        // Don't want bindings that operate on text nodes to mutate <script> and <textarea> contents,\r\n        // because it's unexpected and a potential XSS issue\r\n        'script': true,\r\n        'textarea': true\r\n    };\r\n\r\n    // Use an overridable method for retrieving binding handlers so that a plugins may support dynamically created handlers\r\n    ko['getBindingHandler'] = function(bindingKey) {\r\n        return ko.bindingHandlers[bindingKey];\r\n    };\r\n\r\n    // The ko.bindingContext constructor is only called directly to create the root context. For child\r\n    // contexts, use bindingContext.createChildContext or bindingContext.extend.\r\n    ko.bindingContext = function(dataItemOrAccessor, parentContext, dataItemAlias, extendCallback) {\r\n\r\n        // The binding context object includes static properties for the current, parent, and root view models.\r\n        // If a view model is actually stored in an observable, the corresponding binding context object, and\r\n        // any child contexts, must be updated when the view model is changed.\r\n        function updateContext() {\r\n            // Most of the time, the context will directly get a view model object, but if a function is given,\r\n            // we call the function to retrieve the view model. If the function accesses any obsevables or returns\r\n            // an observable, the dependency is tracked, and those observables can later cause the binding\r\n            // context to be updated.\r\n            var dataItemOrObservable = isFunc ? dataItemOrAccessor() : dataItemOrAccessor,\r\n                dataItem = ko.utils.unwrapObservable(dataItemOrObservable);\r\n\r\n            if (parentContext) {\r\n                // When a \"parent\" context is given, register a dependency on the parent context. Thus whenever the\r\n                // parent context is updated, this context will also be updated.\r\n                if (parentContext._subscribable)\r\n                    parentContext._subscribable();\r\n\r\n                // Copy $root and any custom properties from the parent context\r\n                ko.utils.extend(self, parentContext);\r\n\r\n                // Because the above copy overwrites our own properties, we need to reset them.\r\n                // During the first execution, \"subscribable\" isn't set, so don't bother doing the update then.\r\n                if (subscribable) {\r\n                    self._subscribable = subscribable;\r\n                }\r\n            } else {\r\n                self['$parents'] = [];\r\n                self['$root'] = dataItem;\r\n\r\n                // Export 'ko' in the binding context so it will be available in bindings and templates\r\n                // even if 'ko' isn't exported as a global, such as when using an AMD loader.\r\n                // See https://github.com/SteveSanderson/knockout/issues/490\r\n                self['ko'] = ko;\r\n            }\r\n            self['$rawData'] = dataItemOrObservable;\r\n            self['$data'] = dataItem;\r\n            if (dataItemAlias)\r\n                self[dataItemAlias] = dataItem;\r\n\r\n            // The extendCallback function is provided when creating a child context or extending a context.\r\n            // It handles the specific actions needed to finish setting up the binding context. Actions in this\r\n            // function could also add dependencies to this binding context.\r\n            if (extendCallback)\r\n                extendCallback(self, parentContext, dataItem);\r\n\r\n            return self['$data'];\r\n        }\r\n        function disposeWhen() {\r\n            return nodes && !ko.utils.anyDomNodeIsAttachedToDocument(nodes);\r\n        }\r\n\r\n        var self = this,\r\n            isFunc = typeof(dataItemOrAccessor) == \"function\" && !ko.isObservable(dataItemOrAccessor),\r\n            nodes,\r\n            subscribable = ko.dependentObservable(updateContext, null, { disposeWhen: disposeWhen, disposeWhenNodeIsRemoved: true });\r\n\r\n        // At this point, the binding context has been initialized, and the \"subscribable\" computed observable is\r\n        // subscribed to any observables that were accessed in the process. If there is nothing to track, the\r\n        // computed will be inactive, and we can safely throw it away. If it's active, the computed is stored in\r\n        // the context object.\r\n        if (subscribable.isActive()) {\r\n            self._subscribable = subscribable;\r\n\r\n            // Always notify because even if the model ($data) hasn't changed, other context properties might have changed\r\n            subscribable['equalityComparer'] = null;\r\n\r\n            // We need to be able to dispose of this computed observable when it's no longer needed. This would be\r\n            // easy if we had a single node to watch, but binding contexts can be used by many different nodes, and\r\n            // we cannot assume that those nodes have any relation to each other. So instead we track any node that\r\n            // the context is attached to, and dispose the computed when all of those nodes have been cleaned.\r\n\r\n            // Add properties to *subscribable* instead of *self* because any properties added to *self* may be overwritten on updates\r\n            nodes = [];\r\n            subscribable._addNode = function(node) {\r\n                nodes.push(node);\r\n                ko.utils.domNodeDisposal.addDisposeCallback(node, function(node) {\r\n                    ko.utils.arrayRemoveItem(nodes, node);\r\n                    if (!nodes.length) {\r\n                        subscribable.dispose();\r\n                        self._subscribable = subscribable = undefined;\r\n                    }\r\n                });\r\n            };\r\n        }\r\n    }\r\n\r\n    // Extend the binding context hierarchy with a new view model object. If the parent context is watching\r\n    // any obsevables, the new child context will automatically get a dependency on the parent context.\r\n    // But this does not mean that the $data value of the child context will also get updated. If the child\r\n    // view model also depends on the parent view model, you must provide a function that returns the correct\r\n    // view model on each update.\r\n    ko.bindingContext.prototype['createChildContext'] = function (dataItemOrAccessor, dataItemAlias, extendCallback) {\r\n        return new ko.bindingContext(dataItemOrAccessor, this, dataItemAlias, function(self, parentContext) {\r\n            // Extend the context hierarchy by setting the appropriate pointers\r\n            self['$parentContext'] = parentContext;\r\n            self['$parent'] = parentContext['$data'];\r\n            self['$parents'] = (parentContext['$parents'] || []).slice(0);\r\n            self['$parents'].unshift(self['$parent']);\r\n            if (extendCallback)\r\n                extendCallback(self);\r\n        });\r\n    };\r\n\r\n    // Extend the binding context with new custom properties. This doesn't change the context hierarchy.\r\n    // Similarly to \"child\" contexts, provide a function here to make sure that the correct values are set\r\n    // when an observable view model is updated.\r\n    ko.bindingContext.prototype['extend'] = function(properties) {\r\n        // If the parent context references an observable view model, \"_subscribable\" will always be the\r\n        // latest view model object. If not, \"_subscribable\" isn't set, and we can use the static \"$data\" value.\r\n        return new ko.bindingContext(this._subscribable || this['$data'], this, null, function(self, parentContext) {\r\n            // This \"child\" context doesn't directly track a parent observable view model,\r\n            // so we need to manually set the $rawData value to match the parent.\r\n            self['$rawData'] = parentContext['$rawData'];\r\n            ko.utils.extend(self, typeof(properties) == \"function\" ? properties() : properties);\r\n        });\r\n    };\r\n\r\n    // Returns the valueAccesor function for a binding value\r\n    function makeValueAccessor(value) {\r\n        return function() {\r\n            return value;\r\n        };\r\n    }\r\n\r\n    // Returns the value of a valueAccessor function\r\n    function evaluateValueAccessor(valueAccessor) {\r\n        return valueAccessor();\r\n    }\r\n\r\n    // Given a function that returns bindings, create and return a new object that contains\r\n    // binding value-accessors functions. Each accessor function calls the original function\r\n    // so that it always gets the latest value and all dependencies are captured. This is used\r\n    // by ko.applyBindingsToNode and getBindingsAndMakeAccessors.\r\n    function makeAccessorsFromFunction(callback) {\r\n        return ko.utils.objectMap(ko.dependencyDetection.ignore(callback), function(value, key) {\r\n            return function() {\r\n                return callback()[key];\r\n            };\r\n        });\r\n    }\r\n\r\n    // Given a bindings function or object, create and return a new object that contains\r\n    // binding value-accessors functions. This is used by ko.applyBindingsToNode.\r\n    function makeBindingAccessors(bindings, context, node) {\r\n        if (typeof bindings === 'function') {\r\n            return makeAccessorsFromFunction(bindings.bind(null, context, node));\r\n        } else {\r\n            return ko.utils.objectMap(bindings, makeValueAccessor);\r\n        }\r\n    }\r\n\r\n    // This function is used if the binding provider doesn't include a getBindingAccessors function.\r\n    // It must be called with 'this' set to the provider instance.\r\n    function getBindingsAndMakeAccessors(node, context) {\r\n        return makeAccessorsFromFunction(this['getBindings'].bind(this, node, context));\r\n    }\r\n\r\n    function validateThatBindingIsAllowedForVirtualElements(bindingName) {\r\n        var validator = ko.virtualElements.allowedBindings[bindingName];\r\n        if (!validator)\r\n            throw new Error(\"The binding '\" + bindingName + \"' cannot be used with virtual elements\")\r\n    }\r\n\r\n    function applyBindingsToDescendantsInternal (bindingContext, elementOrVirtualElement, bindingContextsMayDifferFromDomParentElement) {\r\n        var currentChild,\r\n            nextInQueue = ko.virtualElements.firstChild(elementOrVirtualElement),\r\n            provider = ko.bindingProvider['instance'],\r\n            preprocessNode = provider['preprocessNode'];\r\n\r\n        // Preprocessing allows a binding provider to mutate a node before bindings are applied to it. For example it's\r\n        // possible to insert new siblings after it, and/or replace the node with a different one. This can be used to\r\n        // implement custom binding syntaxes, such as {{ value }} for string interpolation, or custom element types that\r\n        // trigger insertion of <template> contents at that point in the document.\r\n        if (preprocessNode) {\r\n            while (currentChild = nextInQueue) {\r\n                nextInQueue = ko.virtualElements.nextSibling(currentChild);\r\n                preprocessNode.call(provider, currentChild);\r\n            }\r\n            // Reset nextInQueue for the next loop\r\n            nextInQueue = ko.virtualElements.firstChild(elementOrVirtualElement);\r\n        }\r\n\r\n        while (currentChild = nextInQueue) {\r\n            // Keep a record of the next child *before* applying bindings, in case the binding removes the current child from its position\r\n            nextInQueue = ko.virtualElements.nextSibling(currentChild);\r\n            applyBindingsToNodeAndDescendantsInternal(bindingContext, currentChild, bindingContextsMayDifferFromDomParentElement);\r\n        }\r\n    }\r\n\r\n    function applyBindingsToNodeAndDescendantsInternal (bindingContext, nodeVerified, bindingContextMayDifferFromDomParentElement) {\r\n        var shouldBindDescendants = true;\r\n\r\n        // Perf optimisation: Apply bindings only if...\r\n        // (1) We need to store the binding context on this node (because it may differ from the DOM parent node's binding context)\r\n        //     Note that we can't store binding contexts on non-elements (e.g., text nodes), as IE doesn't allow expando properties for those\r\n        // (2) It might have bindings (e.g., it has a data-bind attribute, or it's a marker for a containerless template)\r\n        var isElement = (nodeVerified.nodeType === 1);\r\n        if (isElement) // Workaround IE <= 8 HTML parsing weirdness\r\n            ko.virtualElements.normaliseVirtualElementDomStructure(nodeVerified);\r\n\r\n        var shouldApplyBindings = (isElement && bindingContextMayDifferFromDomParentElement)             // Case (1)\r\n                               || ko.bindingProvider['instance']['nodeHasBindings'](nodeVerified);       // Case (2)\r\n        if (shouldApplyBindings)\r\n            shouldBindDescendants = applyBindingsToNodeInternal(nodeVerified, null, bindingContext, bindingContextMayDifferFromDomParentElement)['shouldBindDescendants'];\r\n\r\n        if (shouldBindDescendants && !bindingDoesNotRecurseIntoElementTypes[ko.utils.tagNameLower(nodeVerified)]) {\r\n            // We're recursing automatically into (real or virtual) child nodes without changing binding contexts. So,\r\n            //  * For children of a *real* element, the binding context is certainly the same as on their DOM .parentNode,\r\n            //    hence bindingContextsMayDifferFromDomParentElement is false\r\n            //  * For children of a *virtual* element, we can't be sure. Evaluating .parentNode on those children may\r\n            //    skip over any number of intermediate virtual elements, any of which might define a custom binding context,\r\n            //    hence bindingContextsMayDifferFromDomParentElement is true\r\n            applyBindingsToDescendantsInternal(bindingContext, nodeVerified, /* bindingContextsMayDifferFromDomParentElement: */ !isElement);\r\n        }\r\n    }\r\n\r\n    var boundElementDomDataKey = ko.utils.domData.nextKey();\r\n\r\n\r\n    function topologicalSortBindings(bindings) {\r\n        // Depth-first sort\r\n        var result = [],                // The list of key/handler pairs that we will return\r\n            bindingsConsidered = {},    // A temporary record of which bindings are already in 'result'\r\n            cyclicDependencyStack = []; // Keeps track of a depth-search so that, if there's a cycle, we know which bindings caused it\r\n        ko.utils.objectForEach(bindings, function pushBinding(bindingKey) {\r\n            if (!bindingsConsidered[bindingKey]) {\r\n                var binding = ko['getBindingHandler'](bindingKey);\r\n                if (binding) {\r\n                    // First add dependencies (if any) of the current binding\r\n                    if (binding['after']) {\r\n                        cyclicDependencyStack.push(bindingKey);\r\n                        ko.utils.arrayForEach(binding['after'], function(bindingDependencyKey) {\r\n                            if (bindings[bindingDependencyKey]) {\r\n                                if (ko.utils.arrayIndexOf(cyclicDependencyStack, bindingDependencyKey) !== -1) {\r\n                                    throw Error(\"Cannot combine the following bindings, because they have a cyclic dependency: \" + cyclicDependencyStack.join(\", \"));\r\n                                } else {\r\n                                    pushBinding(bindingDependencyKey);\r\n                                }\r\n                            }\r\n                        });\r\n                        cyclicDependencyStack.length--;\r\n                    }\r\n                    // Next add the current binding\r\n                    result.push({ key: bindingKey, handler: binding });\r\n                }\r\n                bindingsConsidered[bindingKey] = true;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    function applyBindingsToNodeInternal(node, sourceBindings, bindingContext, bindingContextMayDifferFromDomParentElement) {\r\n        // Prevent multiple applyBindings calls for the same node, except when a binding value is specified\r\n        var alreadyBound = ko.utils.domData.get(node, boundElementDomDataKey);\r\n        if (!sourceBindings) {\r\n            if (alreadyBound) {\r\n                throw Error(\"You cannot apply bindings multiple times to the same element.\");\r\n            }\r\n            ko.utils.domData.set(node, boundElementDomDataKey, true);\r\n        }\r\n\r\n        // Optimization: Don't store the binding context on this node if it's definitely the same as on node.parentNode, because\r\n        // we can easily recover it just by scanning up the node's ancestors in the DOM\r\n        // (note: here, parent node means \"real DOM parent\" not \"virtual parent\", as there's no O(1) way to find the virtual parent)\r\n        if (!alreadyBound && bindingContextMayDifferFromDomParentElement)\r\n            ko.storedBindingContextForNode(node, bindingContext);\r\n\r\n        // Use bindings if given, otherwise fall back on asking the bindings provider to give us some bindings\r\n        var bindings;\r\n        if (sourceBindings && typeof sourceBindings !== 'function') {\r\n            bindings = sourceBindings;\r\n        } else {\r\n            var provider = ko.bindingProvider['instance'],\r\n                getBindings = provider['getBindingAccessors'] || getBindingsAndMakeAccessors;\r\n\r\n            // Get the binding from the provider within a computed observable so that we can update the bindings whenever\r\n            // the binding context is updated or if the binding provider accesses observables.\r\n            var bindingsUpdater = ko.dependentObservable(\r\n                function() {\r\n                    bindings = sourceBindings ? sourceBindings(bindingContext, node) : getBindings.call(provider, node, bindingContext);\r\n                    // Register a dependency on the binding context to support obsevable view models.\r\n                    if (bindings && bindingContext._subscribable)\r\n                        bindingContext._subscribable();\r\n                    return bindings;\r\n                },\r\n                null, { disposeWhenNodeIsRemoved: node }\r\n            );\r\n\r\n            if (!bindings || !bindingsUpdater.isActive())\r\n                bindingsUpdater = null;\r\n        }\r\n\r\n        var bindingHandlerThatControlsDescendantBindings;\r\n        if (bindings) {\r\n            // Return the value accessor for a given binding. When bindings are static (won't be updated because of a binding\r\n            // context update), just return the value accessor from the binding. Otherwise, return a function that always gets\r\n            // the latest binding value and registers a dependency on the binding updater.\r\n            var getValueAccessor = bindingsUpdater\r\n                ? function(bindingKey) {\r\n                    return function() {\r\n                        return evaluateValueAccessor(bindingsUpdater()[bindingKey]);\r\n                    };\r\n                } : function(bindingKey) {\r\n                    return bindings[bindingKey];\r\n                };\r\n\r\n            // Use of allBindings as a function is maintained for backwards compatibility, but its use is deprecated\r\n            function allBindings() {\r\n                return ko.utils.objectMap(bindingsUpdater ? bindingsUpdater() : bindings, evaluateValueAccessor);\r\n            }\r\n            // The following is the 3.x allBindings API\r\n            allBindings['get'] = function(key) {\r\n                return bindings[key] && evaluateValueAccessor(getValueAccessor(key));\r\n            };\r\n            allBindings['has'] = function(key) {\r\n                return key in bindings;\r\n            };\r\n\r\n            // First put the bindings into the right order\r\n            var orderedBindings = topologicalSortBindings(bindings);\r\n\r\n            // Go through the sorted bindings, calling init and update for each\r\n            ko.utils.arrayForEach(orderedBindings, function(bindingKeyAndHandler) {\r\n                // Note that topologicalSortBindings has already filtered out any nonexistent binding handlers,\r\n                // so bindingKeyAndHandler.handler will always be nonnull.\r\n                var handlerInitFn = bindingKeyAndHandler.handler[\"init\"],\r\n                    handlerUpdateFn = bindingKeyAndHandler.handler[\"update\"],\r\n                    bindingKey = bindingKeyAndHandler.key;\r\n\r\n                if (node.nodeType === 8) {\r\n                    validateThatBindingIsAllowedForVirtualElements(bindingKey);\r\n                }\r\n\r\n                try {\r\n                    // Run init, ignoring any dependencies\r\n                    if (typeof handlerInitFn == \"function\") {\r\n                        ko.dependencyDetection.ignore(function() {\r\n                            var initResult = handlerInitFn(node, getValueAccessor(bindingKey), allBindings, bindingContext['$data'], bindingContext);\r\n\r\n                            // If this binding handler claims to control descendant bindings, make a note of this\r\n                            if (initResult && initResult['controlsDescendantBindings']) {\r\n                                if (bindingHandlerThatControlsDescendantBindings !== undefined)\r\n                                    throw new Error(\"Multiple bindings (\" + bindingHandlerThatControlsDescendantBindings + \" and \" + bindingKey + \") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.\");\r\n                                bindingHandlerThatControlsDescendantBindings = bindingKey;\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    // Run update in its own computed wrapper\r\n                    if (typeof handlerUpdateFn == \"function\") {\r\n                        ko.dependentObservable(\r\n                            function() {\r\n                                handlerUpdateFn(node, getValueAccessor(bindingKey), allBindings, bindingContext['$data'], bindingContext);\r\n                            },\r\n                            null,\r\n                            { disposeWhenNodeIsRemoved: node }\r\n                        );\r\n                    }\r\n                } catch (ex) {\r\n                    ex.message = \"Unable to process binding \\\"\" + bindingKey + \": \" + bindings[bindingKey] + \"\\\"\\nMessage: \" + ex.message;\r\n                    throw ex;\r\n                }\r\n            });\r\n        }\r\n\r\n        return {\r\n            'shouldBindDescendants': bindingHandlerThatControlsDescendantBindings === undefined\r\n        };\r\n    };\r\n\r\n    var storedBindingContextDomDataKey = ko.utils.domData.nextKey();\r\n    ko.storedBindingContextForNode = function (node, bindingContext) {\r\n        if (arguments.length == 2) {\r\n            ko.utils.domData.set(node, storedBindingContextDomDataKey, bindingContext);\r\n            if (bindingContext._subscribable)\r\n                bindingContext._subscribable._addNode(node);\r\n        } else {\r\n            return ko.utils.domData.get(node, storedBindingContextDomDataKey);\r\n        }\r\n    }\r\n\r\n    function getBindingContext(viewModelOrBindingContext) {\r\n        return viewModelOrBindingContext && (viewModelOrBindingContext instanceof ko.bindingContext)\r\n            ? viewModelOrBindingContext\r\n            : new ko.bindingContext(viewModelOrBindingContext);\r\n    }\r\n\r\n    ko.applyBindingAccessorsToNode = function (node, bindings, viewModelOrBindingContext) {\r\n        if (node.nodeType === 1) // If it's an element, workaround IE <= 8 HTML parsing weirdness\r\n            ko.virtualElements.normaliseVirtualElementDomStructure(node);\r\n        return applyBindingsToNodeInternal(node, bindings, getBindingContext(viewModelOrBindingContext), true);\r\n    };\r\n\r\n    ko.applyBindingsToNode = function (node, bindings, viewModelOrBindingContext) {\r\n        var context = getBindingContext(viewModelOrBindingContext);\r\n        return ko.applyBindingAccessorsToNode(node, makeBindingAccessors(bindings, context, node), context);\r\n    };\r\n\r\n    ko.applyBindingsToDescendants = function(viewModelOrBindingContext, rootNode) {\r\n        if (rootNode.nodeType === 1 || rootNode.nodeType === 8)\r\n            applyBindingsToDescendantsInternal(getBindingContext(viewModelOrBindingContext), rootNode, true);\r\n    };\r\n\r\n    ko.applyBindings = function (viewModelOrBindingContext, rootNode) {\r\n        // If jQuery is loaded after Knockout, we won't initially have access to it. So save it here.\r\n        if (!jQueryInstance && window['jQuery']) {\r\n            jQueryInstance = window['jQuery'];\r\n        }\r\n\r\n        if (rootNode && (rootNode.nodeType !== 1) && (rootNode.nodeType !== 8))\r\n            throw new Error(\"ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node\");\r\n        rootNode = rootNode || window.document.body; // Make \"rootNode\" parameter optional\r\n\r\n        applyBindingsToNodeAndDescendantsInternal(getBindingContext(viewModelOrBindingContext), rootNode, true);\r\n    };\r\n\r\n    // Retrieving binding context from arbitrary nodes\r\n    ko.contextFor = function(node) {\r\n        // We can only do something meaningful for elements and comment nodes (in particular, not text nodes, as IE can't store domdata for them)\r\n        switch (node.nodeType) {\r\n            case 1:\r\n            case 8:\r\n                var context = ko.storedBindingContextForNode(node);\r\n                if (context) return context;\r\n                if (node.parentNode) return ko.contextFor(node.parentNode);\r\n                break;\r\n        }\r\n        return undefined;\r\n    };\r\n    ko.dataFor = function(node) {\r\n        var context = ko.contextFor(node);\r\n        return context ? context['$data'] : undefined;\r\n    };\r\n\r\n    ko.exportSymbol('bindingHandlers', ko.bindingHandlers);\r\n    ko.exportSymbol('applyBindings', ko.applyBindings);\r\n    ko.exportSymbol('applyBindingsToDescendants', ko.applyBindingsToDescendants);\r\n    ko.exportSymbol('applyBindingAccessorsToNode', ko.applyBindingAccessorsToNode);\r\n    ko.exportSymbol('applyBindingsToNode', ko.applyBindingsToNode);\r\n    ko.exportSymbol('contextFor', ko.contextFor);\r\n    ko.exportSymbol('dataFor', ko.dataFor);\r\n})();\r\n(function(undefined) {\r\n    var loadingSubscribablesCache = {}, // Tracks component loads that are currently in flight\r\n        loadedDefinitionsCache = {};    // Tracks component loads that have already completed\r\n\r\n    ko.components = {\r\n        get: function(componentName, callback) {\r\n            var cachedDefinition = getObjectOwnProperty(loadedDefinitionsCache, componentName);\r\n            if (cachedDefinition) {\r\n                // It's already loaded and cached. Reuse the same definition object.\r\n                // Note that for API consistency, even cache hits complete asynchronously by default.\r\n                // You can bypass this by putting synchronous:true on your component config.\r\n                if (cachedDefinition.isSynchronousComponent) {\r\n                    ko.dependencyDetection.ignore(function() { // See comment in loaderRegistryBehaviors.js for reasoning\r\n                        callback(cachedDefinition.definition);\r\n                    });\r\n                } else {\r\n                    setTimeout(function() { callback(cachedDefinition.definition); }, 0);\r\n                }\r\n            } else {\r\n                // Join the loading process that is already underway, or start a new one.\r\n                loadComponentAndNotify(componentName, callback);\r\n            }\r\n        },\r\n\r\n        clearCachedDefinition: function(componentName) {\r\n            delete loadedDefinitionsCache[componentName];\r\n        },\r\n\r\n        _getFirstResultFromLoaders: getFirstResultFromLoaders\r\n    };\r\n\r\n    function getObjectOwnProperty(obj, propName) {\r\n        return obj.hasOwnProperty(propName) ? obj[propName] : undefined;\r\n    }\r\n\r\n    function loadComponentAndNotify(componentName, callback) {\r\n        var subscribable = getObjectOwnProperty(loadingSubscribablesCache, componentName),\r\n            completedAsync;\r\n        if (!subscribable) {\r\n            // It's not started loading yet. Start loading, and when it's done, move it to loadedDefinitionsCache.\r\n            subscribable = loadingSubscribablesCache[componentName] = new ko.subscribable();\r\n            subscribable.subscribe(callback);\r\n\r\n            beginLoadingComponent(componentName, function(definition, config) {\r\n                var isSynchronousComponent = !!(config && config['synchronous']);\r\n                loadedDefinitionsCache[componentName] = { definition: definition, isSynchronousComponent: isSynchronousComponent };\r\n                delete loadingSubscribablesCache[componentName];\r\n\r\n                // For API consistency, all loads complete asynchronously. However we want to avoid\r\n                // adding an extra setTimeout if it's unnecessary (i.e., the completion is already\r\n                // async) since setTimeout(..., 0) still takes about 16ms or more on most browsers.\r\n                //\r\n                // You can bypass the 'always synchronous' feature by putting the synchronous:true\r\n                // flag on your component configuration when you register it.\r\n                if (completedAsync || isSynchronousComponent) {\r\n                    // Note that notifySubscribers ignores any dependencies read within the callback.\r\n                    // See comment in loaderRegistryBehaviors.js for reasoning\r\n                    subscribable['notifySubscribers'](definition);\r\n                } else {\r\n                    setTimeout(function() {\r\n                        subscribable['notifySubscribers'](definition);\r\n                    }, 0);\r\n                }\r\n            });\r\n            completedAsync = true;\r\n        } else {\r\n            subscribable.subscribe(callback);\r\n        }\r\n    }\r\n\r\n    function beginLoadingComponent(componentName, callback) {\r\n        getFirstResultFromLoaders('getConfig', [componentName], function(config) {\r\n            if (config) {\r\n                // We have a config, so now load its definition\r\n                getFirstResultFromLoaders('loadComponent', [componentName, config], function(definition) {\r\n                    callback(definition, config);\r\n                });\r\n            } else {\r\n                // The component has no config - it's unknown to all the loaders.\r\n                // Note that this is not an error (e.g., a module loading error) - that would abort the\r\n                // process and this callback would not run. For this callback to run, all loaders must\r\n                // have confirmed they don't know about this component.\r\n                callback(null, null);\r\n            }\r\n        });\r\n    }\r\n\r\n    function getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders) {\r\n        // On the first call in the stack, start with the full set of loaders\r\n        if (!candidateLoaders) {\r\n            candidateLoaders = ko.components['loaders'].slice(0); // Use a copy, because we'll be mutating this array\r\n        }\r\n\r\n        // Try the next candidate\r\n        var currentCandidateLoader = candidateLoaders.shift();\r\n        if (currentCandidateLoader) {\r\n            var methodInstance = currentCandidateLoader[methodName];\r\n            if (methodInstance) {\r\n                var wasAborted = false,\r\n                    synchronousReturnValue = methodInstance.apply(currentCandidateLoader, argsExceptCallback.concat(function(result) {\r\n                        if (wasAborted) {\r\n                            callback(null);\r\n                        } else if (result !== null) {\r\n                            // This candidate returned a value. Use it.\r\n                            callback(result);\r\n                        } else {\r\n                            // Try the next candidate\r\n                            getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders);\r\n                        }\r\n                    }));\r\n\r\n                // Currently, loaders may not return anything synchronously. This leaves open the possibility\r\n                // that we'll extend the API to support synchronous return values in the future. It won't be\r\n                // a breaking change, because currently no loader is allowed to return anything except undefined.\r\n                if (synchronousReturnValue !== undefined) {\r\n                    wasAborted = true;\r\n\r\n                    // Method to suppress exceptions will remain undocumented. This is only to keep\r\n                    // KO's specs running tidily, since we can observe the loading got aborted without\r\n                    // having exceptions cluttering up the console too.\r\n                    if (!currentCandidateLoader['suppressLoaderExceptions']) {\r\n                        throw new Error('Component loaders must supply values by invoking the callback, not by returning values synchronously.');\r\n                    }\r\n                }\r\n            } else {\r\n                // This candidate doesn't have the relevant handler. Synchronously move on to the next one.\r\n                getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders);\r\n            }\r\n        } else {\r\n            // No candidates returned a value\r\n            callback(null);\r\n        }\r\n    }\r\n\r\n    // Reference the loaders via string name so it's possible for developers\r\n    // to replace the whole array by assigning to ko.components.loaders\r\n    ko.components['loaders'] = [];\r\n\r\n    ko.exportSymbol('components', ko.components);\r\n    ko.exportSymbol('components.get', ko.components.get);\r\n    ko.exportSymbol('components.clearCachedDefinition', ko.components.clearCachedDefinition);\r\n})();\r\n(function(undefined) {\r\n\r\n    // The default loader is responsible for two things:\r\n    // 1. Maintaining the default in-memory registry of component configuration objects\r\n    //    (i.e., the thing you're writing to when you call ko.components.register(someName, ...))\r\n    // 2. Answering requests for components by fetching configuration objects\r\n    //    from that default in-memory registry and resolving them into standard\r\n    //    component definition objects (of the form { createViewModel: ..., template: ... })\r\n    // Custom loaders may override either of these facilities, i.e.,\r\n    // 1. To supply configuration objects from some other source (e.g., conventions)\r\n    // 2. Or, to resolve configuration objects by loading viewmodels/templates via arbitrary logic.\r\n\r\n    var defaultConfigRegistry = {};\r\n\r\n    ko.components.register = function(componentName, config) {\r\n        if (!config) {\r\n            throw new Error('Invalid configuration for ' + componentName);\r\n        }\r\n\r\n        if (ko.components.isRegistered(componentName)) {\r\n            throw new Error('Component ' + componentName + ' is already registered');\r\n        }\r\n\r\n        defaultConfigRegistry[componentName] = config;\r\n    }\r\n\r\n    ko.components.isRegistered = function(componentName) {\r\n        return componentName in defaultConfigRegistry;\r\n    }\r\n\r\n    ko.components.unregister = function(componentName) {\r\n        delete defaultConfigRegistry[componentName];\r\n        ko.components.clearCachedDefinition(componentName);\r\n    }\r\n\r\n    ko.components.defaultLoader = {\r\n        'getConfig': function(componentName, callback) {\r\n            var result = defaultConfigRegistry.hasOwnProperty(componentName)\r\n                ? defaultConfigRegistry[componentName]\r\n                : null;\r\n            callback(result);\r\n        },\r\n\r\n        'loadComponent': function(componentName, config, callback) {\r\n            var errorCallback = makeErrorCallback(componentName);\r\n            possiblyGetConfigFromAmd(errorCallback, config, function(loadedConfig) {\r\n                resolveConfig(componentName, errorCallback, loadedConfig, callback);\r\n            });\r\n        },\r\n\r\n        'loadTemplate': function(componentName, templateConfig, callback) {\r\n            resolveTemplate(makeErrorCallback(componentName), templateConfig, callback);\r\n        },\r\n\r\n        'loadViewModel': function(componentName, viewModelConfig, callback) {\r\n            resolveViewModel(makeErrorCallback(componentName), viewModelConfig, callback);\r\n        }\r\n    };\r\n\r\n    var createViewModelKey = 'createViewModel';\r\n\r\n    // Takes a config object of the form { template: ..., viewModel: ... }, and asynchronously convert it\r\n    // into the standard component definition format:\r\n    //    { template: <ArrayOfDomNodes>, createViewModel: function(params, componentInfo) { ... } }.\r\n    // Since both template and viewModel may need to be resolved asynchronously, both tasks are performed\r\n    // in parallel, and the results joined when both are ready. We don't depend on any promises infrastructure,\r\n    // so this is implemented manually below.\r\n    function resolveConfig(componentName, errorCallback, config, callback) {\r\n        var result = {},\r\n            makeCallBackWhenZero = 2,\r\n            tryIssueCallback = function() {\r\n                if (--makeCallBackWhenZero === 0) {\r\n                    callback(result);\r\n                }\r\n            },\r\n            templateConfig = config['template'],\r\n            viewModelConfig = config['viewModel'];\r\n\r\n        if (templateConfig) {\r\n            possiblyGetConfigFromAmd(errorCallback, templateConfig, function(loadedConfig) {\r\n                ko.components._getFirstResultFromLoaders('loadTemplate', [componentName, loadedConfig], function(resolvedTemplate) {\r\n                    result['template'] = resolvedTemplate;\r\n                    tryIssueCallback();\r\n                });\r\n            });\r\n        } else {\r\n            tryIssueCallback();\r\n        }\r\n\r\n        if (viewModelConfig) {\r\n            possiblyGetConfigFromAmd(errorCallback, viewModelConfig, function(loadedConfig) {\r\n                ko.components._getFirstResultFromLoaders('loadViewModel', [componentName, loadedConfig], function(resolvedViewModel) {\r\n                    result[createViewModelKey] = resolvedViewModel;\r\n                    tryIssueCallback();\r\n                });\r\n            });\r\n        } else {\r\n            tryIssueCallback();\r\n        }\r\n    }\r\n\r\n    function resolveTemplate(errorCallback, templateConfig, callback) {\r\n        if (typeof templateConfig === 'string') {\r\n            // Markup - parse it\r\n            callback(ko.utils.parseHtmlFragment(templateConfig));\r\n        } else if (templateConfig instanceof Array) {\r\n            // Assume already an array of DOM nodes - pass through unchanged\r\n            callback(templateConfig);\r\n        } else if (isDocumentFragment(templateConfig)) {\r\n            // Document fragment - use its child nodes\r\n            callback(ko.utils.makeArray(templateConfig.childNodes));\r\n        } else if (templateConfig['element']) {\r\n            var element = templateConfig['element'];\r\n            if (isDomElement(element)) {\r\n                // Element instance - copy its child nodes\r\n                callback(cloneNodesFromTemplateSourceElement(element));\r\n            } else if (typeof element === 'string') {\r\n                // Element ID - find it, then copy its child nodes\r\n                var elemInstance = document.getElementById(element);\r\n                if (elemInstance) {\r\n                    callback(cloneNodesFromTemplateSourceElement(elemInstance));\r\n                } else {\r\n                    errorCallback('Cannot find element with ID ' + element);\r\n                }\r\n            } else {\r\n                errorCallback('Unknown element type: ' + element);\r\n            }\r\n        } else {\r\n            errorCallback('Unknown template value: ' + templateConfig);\r\n        }\r\n    }\r\n\r\n    function resolveViewModel(errorCallback, viewModelConfig, callback) {\r\n        if (typeof viewModelConfig === 'function') {\r\n            // Constructor - convert to standard factory function format\r\n            // By design, this does *not* supply componentInfo to the constructor, as the intent is that\r\n            // componentInfo contains non-viewmodel data (e.g., the component's element) that should only\r\n            // be used in factory functions, not viewmodel constructors.\r\n            callback(function (params /*, componentInfo */) {\r\n                return new viewModelConfig(params);\r\n            });\r\n        } else if (typeof viewModelConfig[createViewModelKey] === 'function') {\r\n            // Already a factory function - use it as-is\r\n            callback(viewModelConfig[createViewModelKey]);\r\n        } else if ('instance' in viewModelConfig) {\r\n            // Fixed object instance - promote to createViewModel format for API consistency\r\n            var fixedInstance = viewModelConfig['instance'];\r\n            callback(function (params, componentInfo) {\r\n                return fixedInstance;\r\n            });\r\n        } else if ('viewModel' in viewModelConfig) {\r\n            // Resolved AMD module whose value is of the form { viewModel: ... }\r\n            resolveViewModel(errorCallback, viewModelConfig['viewModel'], callback);\r\n        } else {\r\n            errorCallback('Unknown viewModel value: ' + viewModelConfig);\r\n        }\r\n    }\r\n\r\n    function cloneNodesFromTemplateSourceElement(elemInstance) {\r\n        switch (ko.utils.tagNameLower(elemInstance)) {\r\n            case 'script':\r\n                return ko.utils.parseHtmlFragment(elemInstance.text);\r\n            case 'textarea':\r\n                return ko.utils.parseHtmlFragment(elemInstance.value);\r\n            case 'template':\r\n                // For browsers with proper <template> element support (i.e., where the .content property\r\n                // gives a document fragment), use that document fragment.\r\n                if (isDocumentFragment(elemInstance.content)) {\r\n                    return ko.utils.cloneNodes(elemInstance.content.childNodes);\r\n                }\r\n        }\r\n\r\n        // Regular elements such as <div>, and <template> elements on old browsers that don't really\r\n        // understand <template> and just treat it as a regular container\r\n        return ko.utils.cloneNodes(elemInstance.childNodes);\r\n    }\r\n\r\n    function isDomElement(obj) {\r\n        if (window['HTMLElement']) {\r\n            return obj instanceof HTMLElement;\r\n        } else {\r\n            return obj && obj.tagName && obj.nodeType === 1;\r\n        }\r\n    }\r\n\r\n    function isDocumentFragment(obj) {\r\n        if (window['DocumentFragment']) {\r\n            return obj instanceof DocumentFragment;\r\n        } else {\r\n            return obj && obj.nodeType === 11;\r\n        }\r\n    }\r\n\r\n    function possiblyGetConfigFromAmd(errorCallback, config, callback) {\r\n        if (typeof config['require'] === 'string') {\r\n            // The config is the value of an AMD module\r\n            if (amdRequire || window['require']) {\r\n                (amdRequire || window['require'])([config['require']], callback);\r\n            } else {\r\n                errorCallback('Uses require, but no AMD loader is present');\r\n            }\r\n        } else {\r\n            callback(config);\r\n        }\r\n    }\r\n\r\n    function makeErrorCallback(componentName) {\r\n        return function (message) {\r\n            throw new Error('Component \\'' + componentName + '\\': ' + message);\r\n        };\r\n    }\r\n\r\n    ko.exportSymbol('components.register', ko.components.register);\r\n    ko.exportSymbol('components.isRegistered', ko.components.isRegistered);\r\n    ko.exportSymbol('components.unregister', ko.components.unregister);\r\n\r\n    // Expose the default loader so that developers can directly ask it for configuration\r\n    // or to resolve configuration\r\n    ko.exportSymbol('components.defaultLoader', ko.components.defaultLoader);\r\n\r\n    // By default, the default loader is the only registered component loader\r\n    ko.components['loaders'].push(ko.components.defaultLoader);\r\n\r\n    // Privately expose the underlying config registry for use in old-IE shim\r\n    ko.components._allRegisteredComponents = defaultConfigRegistry;\r\n})();\r\n(function (undefined) {\r\n    // Overridable API for determining which component name applies to a given node. By overriding this,\r\n    // you can for example map specific tagNames to components that are not preregistered.\r\n    ko.components['getComponentNameForNode'] = function(node) {\r\n        var tagNameLower = ko.utils.tagNameLower(node);\r\n        return ko.components.isRegistered(tagNameLower) && tagNameLower;\r\n    };\r\n\r\n    ko.components.addBindingsForCustomElement = function(allBindings, node, bindingContext, valueAccessors) {\r\n        // Determine if it's really a custom element matching a component\r\n        if (node.nodeType === 1) {\r\n            var componentName = ko.components['getComponentNameForNode'](node);\r\n            if (componentName) {\r\n                // It does represent a component, so add a component binding for it\r\n                allBindings = allBindings || {};\r\n\r\n                if (allBindings['component']) {\r\n                    // Avoid silently overwriting some other 'component' binding that may already be on the element\r\n                    throw new Error('Cannot use the \"component\" binding on a custom element matching a component');\r\n                }\r\n\r\n                var componentBindingValue = { 'name': componentName, 'params': getComponentParamsFromCustomElement(node, bindingContext) };\r\n\r\n                allBindings['component'] = valueAccessors\r\n                    ? function() { return componentBindingValue; }\r\n                    : componentBindingValue;\r\n            }\r\n        }\r\n\r\n        return allBindings;\r\n    }\r\n\r\n    var nativeBindingProviderInstance = new ko.bindingProvider();\r\n\r\n    function getComponentParamsFromCustomElement(elem, bindingContext) {\r\n        var paramsAttribute = elem.getAttribute('params');\r\n\r\n        if (paramsAttribute) {\r\n            var params = nativeBindingProviderInstance['parseBindingsString'](paramsAttribute, bindingContext, elem, { 'valueAccessors': true, 'bindingParams': true }),\r\n                rawParamComputedValues = ko.utils.objectMap(params, function(paramValue, paramName) {\r\n                    return ko.computed(paramValue, null, { disposeWhenNodeIsRemoved: elem });\r\n                }),\r\n                result = ko.utils.objectMap(rawParamComputedValues, function(paramValueComputed, paramName) {\r\n                    var paramValue = paramValueComputed.peek();\r\n                    // Does the evaluation of the parameter value unwrap any observables?\r\n                    if (!paramValueComputed.isActive()) {\r\n                        // No it doesn't, so there's no need for any computed wrapper. Just pass through the supplied value directly.\r\n                        // Example: \"someVal: firstName, age: 123\" (whether or not firstName is an observable/computed)\r\n                        return paramValue;\r\n                    } else {\r\n                        // Yes it does. Supply a computed property that unwraps both the outer (binding expression)\r\n                        // level of observability, and any inner (resulting model value) level of observability.\r\n                        // This means the component doesn't have to worry about multiple unwrapping. If the value is a\r\n                        // writable observable, the computed will also be writable and pass the value on to the observable.\r\n                        return ko.computed({\r\n                            'read': function() {\r\n                                return ko.utils.unwrapObservable(paramValueComputed());\r\n                            },\r\n                            'write': ko.isWriteableObservable(paramValue) && function(value) {\r\n                                paramValueComputed()(value);\r\n                            },\r\n                            disposeWhenNodeIsRemoved: elem\r\n                        });\r\n                    }\r\n                });\r\n\r\n            // Give access to the raw computeds, as long as that wouldn't overwrite any custom param also called '$raw'\r\n            // This is in case the developer wants to react to outer (binding) observability separately from inner\r\n            // (model value) observability, or in case the model value observable has subobservables.\r\n            if (!result.hasOwnProperty('$raw')) {\r\n                result['$raw'] = rawParamComputedValues;\r\n            }\r\n\r\n            return result;\r\n        } else {\r\n            // For consistency, absence of a \"params\" attribute is treated the same as the presence of\r\n            // any empty one. Otherwise component viewmodels need special code to check whether or not\r\n            // 'params' or 'params.$raw' is null/undefined before reading subproperties, which is annoying.\r\n            return { '$raw': {} };\r\n        }\r\n    }\r\n\r\n    // --------------------------------------------------------------------------------\r\n    // Compatibility code for older (pre-HTML5) IE browsers\r\n\r\n    if (ko.utils.ieVersion < 9) {\r\n        // Whenever you preregister a component, enable it as a custom element in the current document\r\n        ko.components['register'] = (function(originalFunction) {\r\n            return function(componentName) {\r\n                document.createElement(componentName); // Allows IE<9 to parse markup containing the custom element\r\n                return originalFunction.apply(this, arguments);\r\n            }\r\n        })(ko.components['register']);\r\n\r\n        // Whenever you create a document fragment, enable all preregistered component names as custom elements\r\n        // This is needed to make innerShiv/jQuery HTML parsing correctly handle the custom elements\r\n        document.createDocumentFragment = (function(originalFunction) {\r\n            return function() {\r\n                var newDocFrag = originalFunction(),\r\n                    allComponents = ko.components._allRegisteredComponents;\r\n                for (var componentName in allComponents) {\r\n                    if (allComponents.hasOwnProperty(componentName)) {\r\n                        newDocFrag.createElement(componentName);\r\n                    }\r\n                }\r\n                return newDocFrag;\r\n            };\r\n        })(document.createDocumentFragment);\r\n    }\r\n})();(function(undefined) {\r\n\r\n    var componentLoadingOperationUniqueId = 0;\r\n\r\n    ko.bindingHandlers['component'] = {\r\n        'init': function(element, valueAccessor, ignored1, ignored2, bindingContext) {\r\n            var currentViewModel,\r\n                currentLoadingOperationId,\r\n                disposeAssociatedComponentViewModel = function () {\r\n                    var currentViewModelDispose = currentViewModel && currentViewModel['dispose'];\r\n                    if (typeof currentViewModelDispose === 'function') {\r\n                        currentViewModelDispose.call(currentViewModel);\r\n                    }\r\n\r\n                    // Any in-flight loading operation is no longer relevant, so make sure we ignore its completion\r\n                    currentLoadingOperationId = null;\r\n                },\r\n                originalChildNodes = ko.utils.makeArray(ko.virtualElements.childNodes(element));\r\n\r\n            ko.utils.domNodeDisposal.addDisposeCallback(element, disposeAssociatedComponentViewModel);\r\n\r\n            ko.computed(function () {\r\n                var value = ko.utils.unwrapObservable(valueAccessor()),\r\n                    componentName, componentParams;\r\n\r\n                if (typeof value === 'string') {\r\n                    componentName = value;\r\n                } else {\r\n                    componentName = ko.utils.unwrapObservable(value['name']);\r\n                    componentParams = ko.utils.unwrapObservable(value['params']);\r\n                }\r\n\r\n                if (!componentName) {\r\n                    throw new Error('No component name specified');\r\n                }\r\n\r\n                var loadingOperationId = currentLoadingOperationId = ++componentLoadingOperationUniqueId;\r\n                ko.components.get(componentName, function(componentDefinition) {\r\n                    // If this is not the current load operation for this element, ignore it.\r\n                    if (currentLoadingOperationId !== loadingOperationId) {\r\n                        return;\r\n                    }\r\n\r\n                    // Clean up previous state\r\n                    disposeAssociatedComponentViewModel();\r\n\r\n                    // Instantiate and bind new component. Implicitly this cleans any old DOM nodes.\r\n                    if (!componentDefinition) {\r\n                        throw new Error('Unknown component \\'' + componentName + '\\'');\r\n                    }\r\n                    cloneTemplateIntoElement(componentName, componentDefinition, element);\r\n                    var componentViewModel = createViewModel(componentDefinition, element, originalChildNodes, componentParams),\r\n                        childBindingContext = bindingContext['createChildContext'](componentViewModel, /* dataItemAlias */ undefined, function(ctx) {\r\n                            ctx['$component'] = componentViewModel;\r\n                            ctx['$componentTemplateNodes'] = originalChildNodes;\r\n                        });\r\n                    currentViewModel = componentViewModel;\r\n                    ko.applyBindingsToDescendants(childBindingContext, element);\r\n                });\r\n            }, null, { disposeWhenNodeIsRemoved: element });\r\n\r\n            return { 'controlsDescendantBindings': true };\r\n        }\r\n    };\r\n\r\n    ko.virtualElements.allowedBindings['component'] = true;\r\n\r\n    function cloneTemplateIntoElement(componentName, componentDefinition, element) {\r\n        var template = componentDefinition['template'];\r\n        if (!template) {\r\n            throw new Error('Component \\'' + componentName + '\\' has no template');\r\n        }\r\n\r\n        var clonedNodesArray = ko.utils.cloneNodes(template);\r\n        ko.virtualElements.setDomNodeChildren(element, clonedNodesArray);\r\n    }\r\n\r\n    function createViewModel(componentDefinition, element, originalChildNodes, componentParams) {\r\n        var componentViewModelFactory = componentDefinition['createViewModel'];\r\n        return componentViewModelFactory\r\n            ? componentViewModelFactory.call(componentDefinition, componentParams, { 'element': element, 'templateNodes': originalChildNodes })\r\n            : componentParams; // Template-only component\r\n    }\r\n\r\n})();\r\nvar attrHtmlToJavascriptMap = { 'class': 'className', 'for': 'htmlFor' };\r\nko.bindingHandlers['attr'] = {\r\n    'update': function(element, valueAccessor, allBindings) {\r\n        var value = ko.utils.unwrapObservable(valueAccessor()) || {};\r\n        ko.utils.objectForEach(value, function(attrName, attrValue) {\r\n            attrValue = ko.utils.unwrapObservable(attrValue);\r\n\r\n            // To cover cases like \"attr: { checked:someProp }\", we want to remove the attribute entirely\r\n            // when someProp is a \"no value\"-like value (strictly null, false, or undefined)\r\n            // (because the absence of the \"checked\" attr is how to mark an element as not checked, etc.)\r\n            var toRemove = (attrValue === false) || (attrValue === null) || (attrValue === undefined);\r\n            if (toRemove)\r\n                element.removeAttribute(attrName);\r\n\r\n            // In IE <= 7 and IE8 Quirks Mode, you have to use the Javascript property name instead of the\r\n            // HTML attribute name for certain attributes. IE8 Standards Mode supports the correct behavior,\r\n            // but instead of figuring out the mode, we'll just set the attribute through the Javascript\r\n            // property for IE <= 8.\r\n            if (ko.utils.ieVersion <= 8 && attrName in attrHtmlToJavascriptMap) {\r\n                attrName = attrHtmlToJavascriptMap[attrName];\r\n                if (toRemove)\r\n                    element.removeAttribute(attrName);\r\n                else\r\n                    element[attrName] = attrValue;\r\n            } else if (!toRemove) {\r\n                element.setAttribute(attrName, attrValue.toString());\r\n            }\r\n\r\n            // Treat \"name\" specially - although you can think of it as an attribute, it also needs\r\n            // special handling on older versions of IE (https://github.com/SteveSanderson/knockout/pull/333)\r\n            // Deliberately being case-sensitive here because XHTML would regard \"Name\" as a different thing\r\n            // entirely, and there's no strong reason to allow for such casing in HTML.\r\n            if (attrName === \"name\") {\r\n                ko.utils.setElementName(element, toRemove ? \"\" : attrValue.toString());\r\n            }\r\n        });\r\n    }\r\n};\r\n(function() {\r\n\r\nko.bindingHandlers['checked'] = {\r\n    'after': ['value', 'attr'],\r\n    'init': function (element, valueAccessor, allBindings) {\r\n        var checkedValue = ko.pureComputed(function() {\r\n            // Treat \"value\" like \"checkedValue\" when it is included with \"checked\" binding\r\n            if (allBindings['has']('checkedValue')) {\r\n                return ko.utils.unwrapObservable(allBindings.get('checkedValue'));\r\n            } else if (allBindings['has']('value')) {\r\n                return ko.utils.unwrapObservable(allBindings.get('value'));\r\n            }\r\n\r\n            return element.value;\r\n        });\r\n\r\n        function updateModel() {\r\n            // This updates the model value from the view value.\r\n            // It runs in response to DOM events (click) and changes in checkedValue.\r\n            var isChecked = element.checked,\r\n                elemValue = useCheckedValue ? checkedValue() : isChecked;\r\n\r\n            // When we're first setting up this computed, don't change any model state.\r\n            if (ko.computedContext.isInitial()) {\r\n                return;\r\n            }\r\n\r\n            // We can ignore unchecked radio buttons, because some other radio\r\n            // button will be getting checked, and that one can take care of updating state.\r\n            if (isRadio && !isChecked) {\r\n                return;\r\n            }\r\n\r\n            var modelValue = ko.dependencyDetection.ignore(valueAccessor);\r\n            if (isValueArray) {\r\n                if (oldElemValue !== elemValue) {\r\n                    // When we're responding to the checkedValue changing, and the element is\r\n                    // currently checked, replace the old elem value with the new elem value\r\n                    // in the model array.\r\n                    if (isChecked) {\r\n                        ko.utils.addOrRemoveItem(modelValue, elemValue, true);\r\n                        ko.utils.addOrRemoveItem(modelValue, oldElemValue, false);\r\n                    }\r\n\r\n                    oldElemValue = elemValue;\r\n                } else {\r\n                    // When we're responding to the user having checked/unchecked a checkbox,\r\n                    // add/remove the element value to the model array.\r\n                    ko.utils.addOrRemoveItem(modelValue, elemValue, isChecked);\r\n                }\r\n            } else {\r\n                ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'checked', elemValue, true);\r\n            }\r\n        };\r\n\r\n        function updateView() {\r\n            // This updates the view value from the model value.\r\n            // It runs in response to changes in the bound (checked) value.\r\n            var modelValue = ko.utils.unwrapObservable(valueAccessor());\r\n\r\n            if (isValueArray) {\r\n                // When a checkbox is bound to an array, being checked represents its value being present in that array\r\n                element.checked = ko.utils.arrayIndexOf(modelValue, checkedValue()) >= 0;\r\n            } else if (isCheckbox) {\r\n                // When a checkbox is bound to any other value (not an array), being checked represents the value being trueish\r\n                element.checked = modelValue;\r\n            } else {\r\n                // For radio buttons, being checked means that the radio button's value corresponds to the model value\r\n                element.checked = (checkedValue() === modelValue);\r\n            }\r\n        };\r\n\r\n        var isCheckbox = element.type == \"checkbox\",\r\n            isRadio = element.type == \"radio\";\r\n\r\n        // Only bind to check boxes and radio buttons\r\n        if (!isCheckbox && !isRadio) {\r\n            return;\r\n        }\r\n\r\n        var isValueArray = isCheckbox && (ko.utils.unwrapObservable(valueAccessor()) instanceof Array),\r\n            oldElemValue = isValueArray ? checkedValue() : undefined,\r\n            useCheckedValue = isRadio || isValueArray;\r\n\r\n        // IE 6 won't allow radio buttons to be selected unless they have a name\r\n        if (isRadio && !element.name)\r\n            ko.bindingHandlers['uniqueName']['init'](element, function() { return true });\r\n\r\n        // Set up two computeds to update the binding:\r\n\r\n        // The first responds to changes in the checkedValue value and to element clicks\r\n        ko.computed(updateModel, null, { disposeWhenNodeIsRemoved: element });\r\n        ko.utils.registerEventHandler(element, \"click\", updateModel);\r\n\r\n        // The second responds to changes in the model value (the one associated with the checked binding)\r\n        ko.computed(updateView, null, { disposeWhenNodeIsRemoved: element });\r\n    }\r\n};\r\nko.expressionRewriting.twoWayBindings['checked'] = true;\r\n\r\nko.bindingHandlers['checkedValue'] = {\r\n    'update': function (element, valueAccessor) {\r\n        element.value = ko.utils.unwrapObservable(valueAccessor());\r\n    }\r\n};\r\n\r\n})();var classesWrittenByBindingKey = '__ko__cssValue';\r\nko.bindingHandlers['css'] = {\r\n    'update': function (element, valueAccessor) {\r\n        var value = ko.utils.unwrapObservable(valueAccessor());\r\n        if (value !== null && typeof value == \"object\") {\r\n            ko.utils.objectForEach(value, function(className, shouldHaveClass) {\r\n                shouldHaveClass = ko.utils.unwrapObservable(shouldHaveClass);\r\n                ko.utils.toggleDomNodeCssClass(element, className, shouldHaveClass);\r\n            });\r\n        } else {\r\n            value = String(value || ''); // Make sure we don't try to store or set a non-string value\r\n            ko.utils.toggleDomNodeCssClass(element, element[classesWrittenByBindingKey], false);\r\n            element[classesWrittenByBindingKey] = value;\r\n            ko.utils.toggleDomNodeCssClass(element, value, true);\r\n        }\r\n    }\r\n};\r\nko.bindingHandlers['enable'] = {\r\n    'update': function (element, valueAccessor) {\r\n        var value = ko.utils.unwrapObservable(valueAccessor());\r\n        if (value && element.disabled)\r\n            element.removeAttribute(\"disabled\");\r\n        else if ((!value) && (!element.disabled))\r\n            element.disabled = true;\r\n    }\r\n};\r\n\r\nko.bindingHandlers['disable'] = {\r\n    'update': function (element, valueAccessor) {\r\n        ko.bindingHandlers['enable']['update'](element, function() { return !ko.utils.unwrapObservable(valueAccessor()) });\r\n    }\r\n};\r\n// For certain common events (currently just 'click'), allow a simplified data-binding syntax\r\n// e.g. click:handler instead of the usual full-length event:{click:handler}\r\nfunction makeEventHandlerShortcut(eventName) {\r\n    ko.bindingHandlers[eventName] = {\r\n        'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            var newValueAccessor = function () {\r\n                var result = {};\r\n                result[eventName] = valueAccessor();\r\n                return result;\r\n            };\r\n            return ko.bindingHandlers['event']['init'].call(this, element, newValueAccessor, allBindings, viewModel, bindingContext);\r\n        }\r\n    }\r\n}\r\n\r\nko.bindingHandlers['event'] = {\r\n    'init' : function (element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n        var eventsToHandle = valueAccessor() || {};\r\n        ko.utils.objectForEach(eventsToHandle, function(eventName) {\r\n            if (typeof eventName == \"string\") {\r\n                ko.utils.registerEventHandler(element, eventName, function (event) {\r\n                    var handlerReturnValue;\r\n                    var handlerFunction = valueAccessor()[eventName];\r\n                    if (!handlerFunction)\r\n                        return;\r\n\r\n                    try {\r\n                        // Take all the event args, and prefix with the viewmodel\r\n                        var argsForHandler = ko.utils.makeArray(arguments);\r\n                        viewModel = bindingContext['$data'];\r\n                        argsForHandler.unshift(viewModel);\r\n                        handlerReturnValue = handlerFunction.apply(viewModel, argsForHandler);\r\n                    } finally {\r\n                        if (handlerReturnValue !== true) { // Normally we want to prevent default action. Developer can override this be explicitly returning true.\r\n                            if (event.preventDefault)\r\n                                event.preventDefault();\r\n                            else\r\n                                event.returnValue = false;\r\n                        }\r\n                    }\r\n\r\n                    var bubble = allBindings.get(eventName + 'Bubble') !== false;\r\n                    if (!bubble) {\r\n                        event.cancelBubble = true;\r\n                        if (event.stopPropagation)\r\n                            event.stopPropagation();\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n};\r\n// \"foreach: someExpression\" is equivalent to \"template: { foreach: someExpression }\"\r\n// \"foreach: { data: someExpression, afterAdd: myfn }\" is equivalent to \"template: { foreach: someExpression, afterAdd: myfn }\"\r\nko.bindingHandlers['foreach'] = {\r\n    makeTemplateValueAccessor: function(valueAccessor) {\r\n        return function() {\r\n            var modelValue = valueAccessor(),\r\n                unwrappedValue = ko.utils.peekObservable(modelValue);    // Unwrap without setting a dependency here\r\n\r\n            // If unwrappedValue is the array, pass in the wrapped value on its own\r\n            // The value will be unwrapped and tracked within the template binding\r\n            // (See https://github.com/SteveSanderson/knockout/issues/523)\r\n            if ((!unwrappedValue) || typeof unwrappedValue.length == \"number\")\r\n                return { 'foreach': modelValue, 'templateEngine': ko.nativeTemplateEngine.instance };\r\n\r\n            // If unwrappedValue.data is the array, preserve all relevant options and unwrap again value so we get updates\r\n            ko.utils.unwrapObservable(modelValue);\r\n            return {\r\n                'foreach': unwrappedValue['data'],\r\n                'as': unwrappedValue['as'],\r\n                'includeDestroyed': unwrappedValue['includeDestroyed'],\r\n                'afterAdd': unwrappedValue['afterAdd'],\r\n                'beforeRemove': unwrappedValue['beforeRemove'],\r\n                'afterRender': unwrappedValue['afterRender'],\r\n                'beforeMove': unwrappedValue['beforeMove'],\r\n                'afterMove': unwrappedValue['afterMove'],\r\n                'templateEngine': ko.nativeTemplateEngine.instance\r\n            };\r\n        };\r\n    },\r\n    'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n        return ko.bindingHandlers['template']['init'](element, ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor));\r\n    },\r\n    'update': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n        return ko.bindingHandlers['template']['update'](element, ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor), allBindings, viewModel, bindingContext);\r\n    }\r\n};\r\nko.expressionRewriting.bindingRewriteValidators['foreach'] = false; // Can't rewrite control flow bindings\r\nko.virtualElements.allowedBindings['foreach'] = true;\r\nvar hasfocusUpdatingProperty = '__ko_hasfocusUpdating';\r\nvar hasfocusLastValue = '__ko_hasfocusLastValue';\r\nko.bindingHandlers['hasfocus'] = {\r\n    'init': function(element, valueAccessor, allBindings) {\r\n        var handleElementFocusChange = function(isFocused) {\r\n            // Where possible, ignore which event was raised and determine focus state using activeElement,\r\n            // as this avoids phantom focus/blur events raised when changing tabs in modern browsers.\r\n            // However, not all KO-targeted browsers (Firefox 2) support activeElement. For those browsers,\r\n            // prevent a loss of focus when changing tabs/windows by setting a flag that prevents hasfocus\r\n            // from calling 'blur()' on the element when it loses focus.\r\n            // Discussion at https://github.com/SteveSanderson/knockout/pull/352\r\n            element[hasfocusUpdatingProperty] = true;\r\n            var ownerDoc = element.ownerDocument;\r\n            if (\"activeElement\" in ownerDoc) {\r\n                var active;\r\n                try {\r\n                    active = ownerDoc.activeElement;\r\n                } catch(e) {\r\n                    // IE9 throws if you access activeElement during page load (see issue #703)\r\n                    active = ownerDoc.body;\r\n                }\r\n                isFocused = (active === element);\r\n            }\r\n            var modelValue = valueAccessor();\r\n            ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'hasfocus', isFocused, true);\r\n\r\n            //cache the latest value, so we can avoid unnecessarily calling focus/blur in the update function\r\n            element[hasfocusLastValue] = isFocused;\r\n            element[hasfocusUpdatingProperty] = false;\r\n        };\r\n        var handleElementFocusIn = handleElementFocusChange.bind(null, true);\r\n        var handleElementFocusOut = handleElementFocusChange.bind(null, false);\r\n\r\n        ko.utils.registerEventHandler(element, \"focus\", handleElementFocusIn);\r\n        ko.utils.registerEventHandler(element, \"focusin\", handleElementFocusIn); // For IE\r\n        ko.utils.registerEventHandler(element, \"blur\",  handleElementFocusOut);\r\n        ko.utils.registerEventHandler(element, \"focusout\",  handleElementFocusOut); // For IE\r\n    },\r\n    'update': function(element, valueAccessor) {\r\n        var value = !!ko.utils.unwrapObservable(valueAccessor()); //force boolean to compare with last value\r\n        if (!element[hasfocusUpdatingProperty] && element[hasfocusLastValue] !== value) {\r\n            value ? element.focus() : element.blur();\r\n            ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, value ? \"focusin\" : \"focusout\"]); // For IE, which doesn't reliably fire \"focus\" or \"blur\" events synchronously\r\n        }\r\n    }\r\n};\r\nko.expressionRewriting.twoWayBindings['hasfocus'] = true;\r\n\r\nko.bindingHandlers['hasFocus'] = ko.bindingHandlers['hasfocus']; // Make \"hasFocus\" an alias\r\nko.expressionRewriting.twoWayBindings['hasFocus'] = true;\r\nko.bindingHandlers['html'] = {\r\n    'init': function() {\r\n        // Prevent binding on the dynamically-injected HTML (as developers are unlikely to expect that, and it has security implications)\r\n        return { 'controlsDescendantBindings': true };\r\n    },\r\n    'update': function (element, valueAccessor) {\r\n        // setHtml will unwrap the value if needed\r\n        ko.utils.setHtml(element, valueAccessor());\r\n    }\r\n};\r\n// Makes a binding like with or if\r\nfunction makeWithIfBinding(bindingKey, isWith, isNot, makeContextCallback) {\r\n    ko.bindingHandlers[bindingKey] = {\r\n        'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            var didDisplayOnLastUpdate,\r\n                savedNodes;\r\n            ko.computed(function() {\r\n                var dataValue = ko.utils.unwrapObservable(valueAccessor()),\r\n                    shouldDisplay = !isNot !== !dataValue, // equivalent to isNot ? !dataValue : !!dataValue\r\n                    isFirstRender = !savedNodes,\r\n                    needsRefresh = isFirstRender || isWith || (shouldDisplay !== didDisplayOnLastUpdate);\r\n\r\n                if (needsRefresh) {\r\n                    // Save a copy of the inner nodes on the initial update, but only if we have dependencies.\r\n                    if (isFirstRender && ko.computedContext.getDependenciesCount()) {\r\n                        savedNodes = ko.utils.cloneNodes(ko.virtualElements.childNodes(element), true /* shouldCleanNodes */);\r\n                    }\r\n\r\n                    if (shouldDisplay) {\r\n                        if (!isFirstRender) {\r\n                            ko.virtualElements.setDomNodeChildren(element, ko.utils.cloneNodes(savedNodes));\r\n                        }\r\n                        ko.applyBindingsToDescendants(makeContextCallback ? makeContextCallback(bindingContext, dataValue) : bindingContext, element);\r\n                    } else {\r\n                        ko.virtualElements.emptyNode(element);\r\n                    }\r\n\r\n                    didDisplayOnLastUpdate = shouldDisplay;\r\n                }\r\n            }, null, { disposeWhenNodeIsRemoved: element });\r\n            return { 'controlsDescendantBindings': true };\r\n        }\r\n    };\r\n    ko.expressionRewriting.bindingRewriteValidators[bindingKey] = false; // Can't rewrite control flow bindings\r\n    ko.virtualElements.allowedBindings[bindingKey] = true;\r\n}\r\n\r\n// Construct the actual binding handlers\r\nmakeWithIfBinding('if');\r\nmakeWithIfBinding('ifnot', false /* isWith */, true /* isNot */);\r\nmakeWithIfBinding('with', true /* isWith */, false /* isNot */,\r\n    function(bindingContext, dataValue) {\r\n        return bindingContext['createChildContext'](dataValue);\r\n    }\r\n);\r\nvar captionPlaceholder = {};\r\nko.bindingHandlers['options'] = {\r\n    'init': function(element) {\r\n        if (ko.utils.tagNameLower(element) !== \"select\")\r\n            throw new Error(\"options binding applies only to SELECT elements\");\r\n\r\n        // Remove all existing <option>s.\r\n        while (element.length > 0) {\r\n            element.remove(0);\r\n        }\r\n\r\n        // Ensures that the binding processor doesn't try to bind the options\r\n        return { 'controlsDescendantBindings': true };\r\n    },\r\n    'update': function (element, valueAccessor, allBindings) {\r\n        function selectedOptions() {\r\n            return ko.utils.arrayFilter(element.options, function (node) { return node.selected; });\r\n        }\r\n\r\n        var selectWasPreviouslyEmpty = element.length == 0,\r\n            multiple = element.multiple,\r\n            previousScrollTop = (!selectWasPreviouslyEmpty && multiple) ? element.scrollTop : null,\r\n            unwrappedArray = ko.utils.unwrapObservable(valueAccessor()),\r\n            valueAllowUnset = allBindings.get('valueAllowUnset') && allBindings['has']('value'),\r\n            includeDestroyed = allBindings.get('optionsIncludeDestroyed'),\r\n            arrayToDomNodeChildrenOptions = {},\r\n            captionValue,\r\n            filteredArray,\r\n            previousSelectedValues = [];\r\n\r\n        if (!valueAllowUnset) {\r\n            if (multiple) {\r\n                previousSelectedValues = ko.utils.arrayMap(selectedOptions(), ko.selectExtensions.readValue);\r\n            } else if (element.selectedIndex >= 0) {\r\n                previousSelectedValues.push(ko.selectExtensions.readValue(element.options[element.selectedIndex]));\r\n            }\r\n        }\r\n\r\n        if (unwrappedArray) {\r\n            if (typeof unwrappedArray.length == \"undefined\") // Coerce single value into array\r\n                unwrappedArray = [unwrappedArray];\r\n\r\n            // Filter out any entries marked as destroyed\r\n            filteredArray = ko.utils.arrayFilter(unwrappedArray, function(item) {\r\n                return includeDestroyed || item === undefined || item === null || !ko.utils.unwrapObservable(item['_destroy']);\r\n            });\r\n\r\n            // If caption is included, add it to the array\r\n            if (allBindings['has']('optionsCaption')) {\r\n                captionValue = ko.utils.unwrapObservable(allBindings.get('optionsCaption'));\r\n                // If caption value is null or undefined, don't show a caption\r\n                if (captionValue !== null && captionValue !== undefined) {\r\n                    filteredArray.unshift(captionPlaceholder);\r\n                }\r\n            }\r\n        } else {\r\n            // If a falsy value is provided (e.g. null), we'll simply empty the select element\r\n        }\r\n\r\n        function applyToObject(object, predicate, defaultValue) {\r\n            var predicateType = typeof predicate;\r\n            if (predicateType == \"function\")    // Given a function; run it against the data value\r\n                return predicate(object);\r\n            else if (predicateType == \"string\") // Given a string; treat it as a property name on the data value\r\n                return object[predicate];\r\n            else                                // Given no optionsText arg; use the data value itself\r\n                return defaultValue;\r\n        }\r\n\r\n        // The following functions can run at two different times:\r\n        // The first is when the whole array is being updated directly from this binding handler.\r\n        // The second is when an observable value for a specific array entry is updated.\r\n        // oldOptions will be empty in the first case, but will be filled with the previously generated option in the second.\r\n        var itemUpdate = false;\r\n        function optionForArrayItem(arrayEntry, index, oldOptions) {\r\n            if (oldOptions.length) {\r\n                previousSelectedValues = !valueAllowUnset && oldOptions[0].selected ? [ ko.selectExtensions.readValue(oldOptions[0]) ] : [];\r\n                itemUpdate = true;\r\n            }\r\n            var option = element.ownerDocument.createElement(\"option\");\r\n            if (arrayEntry === captionPlaceholder) {\r\n                ko.utils.setTextContent(option, allBindings.get('optionsCaption'));\r\n                ko.selectExtensions.writeValue(option, undefined);\r\n            } else {\r\n                // Apply a value to the option element\r\n                var optionValue = applyToObject(arrayEntry, allBindings.get('optionsValue'), arrayEntry);\r\n                ko.selectExtensions.writeValue(option, ko.utils.unwrapObservable(optionValue));\r\n\r\n                // Apply some text to the option element\r\n                var optionText = applyToObject(arrayEntry, allBindings.get('optionsText'), optionValue);\r\n                ko.utils.setTextContent(option, optionText);\r\n            }\r\n            return [option];\r\n        }\r\n\r\n        // By using a beforeRemove callback, we delay the removal until after new items are added. This fixes a selection\r\n        // problem in IE<=8 and Firefox. See https://github.com/knockout/knockout/issues/1208\r\n        arrayToDomNodeChildrenOptions['beforeRemove'] =\r\n            function (option) {\r\n                element.removeChild(option);\r\n            };\r\n\r\n        function setSelectionCallback(arrayEntry, newOptions) {\r\n            if (itemUpdate && valueAllowUnset) {\r\n                // The model value is authoritative, so make sure its value is the one selected\r\n                // There is no need to use dependencyDetection.ignore since setDomNodeChildrenFromArrayMapping does so already.\r\n                ko.selectExtensions.writeValue(element, ko.utils.unwrapObservable(allBindings.get('value')), true /* allowUnset */);\r\n            } else if (previousSelectedValues.length) {\r\n                // IE6 doesn't like us to assign selection to OPTION nodes before they're added to the document.\r\n                // That's why we first added them without selection. Now it's time to set the selection.\r\n                var isSelected = ko.utils.arrayIndexOf(previousSelectedValues, ko.selectExtensions.readValue(newOptions[0])) >= 0;\r\n                ko.utils.setOptionNodeSelectionState(newOptions[0], isSelected);\r\n\r\n                // If this option was changed from being selected during a single-item update, notify the change\r\n                if (itemUpdate && !isSelected) {\r\n                    ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, \"change\"]);\r\n                }\r\n            }\r\n        }\r\n\r\n        var callback = setSelectionCallback;\r\n        if (allBindings['has']('optionsAfterRender') && typeof allBindings.get('optionsAfterRender') == \"function\") {\r\n            callback = function(arrayEntry, newOptions) {\r\n                setSelectionCallback(arrayEntry, newOptions);\r\n                ko.dependencyDetection.ignore(allBindings.get('optionsAfterRender'), null, [newOptions[0], arrayEntry !== captionPlaceholder ? arrayEntry : undefined]);\r\n            }\r\n        }\r\n\r\n        ko.utils.setDomNodeChildrenFromArrayMapping(element, filteredArray, optionForArrayItem, arrayToDomNodeChildrenOptions, callback);\r\n\r\n        ko.dependencyDetection.ignore(function () {\r\n            if (valueAllowUnset) {\r\n                // The model value is authoritative, so make sure its value is the one selected\r\n                ko.selectExtensions.writeValue(element, ko.utils.unwrapObservable(allBindings.get('value')), true /* allowUnset */);\r\n            } else {\r\n                // Determine if the selection has changed as a result of updating the options list\r\n                var selectionChanged;\r\n                if (multiple) {\r\n                    // For a multiple-select box, compare the new selection count to the previous one\r\n                    // But if nothing was selected before, the selection can't have changed\r\n                    selectionChanged = previousSelectedValues.length && selectedOptions().length < previousSelectedValues.length;\r\n                } else {\r\n                    // For a single-select box, compare the current value to the previous value\r\n                    // But if nothing was selected before or nothing is selected now, just look for a change in selection\r\n                    selectionChanged = (previousSelectedValues.length && element.selectedIndex >= 0)\r\n                        ? (ko.selectExtensions.readValue(element.options[element.selectedIndex]) !== previousSelectedValues[0])\r\n                        : (previousSelectedValues.length || element.selectedIndex >= 0);\r\n                }\r\n\r\n                // Ensure consistency between model value and selected option.\r\n                // If the dropdown was changed so that selection is no longer the same,\r\n                // notify the value or selectedOptions binding.\r\n                if (selectionChanged) {\r\n                    ko.utils.triggerEvent(element, \"change\");\r\n                }\r\n            }\r\n        });\r\n\r\n        // Workaround for IE bug\r\n        ko.utils.ensureSelectElementIsRenderedCorrectly(element);\r\n\r\n        if (previousScrollTop && Math.abs(previousScrollTop - element.scrollTop) > 20)\r\n            element.scrollTop = previousScrollTop;\r\n    }\r\n};\r\nko.bindingHandlers['options'].optionValueDomDataKey = ko.utils.domData.nextKey();\r\nko.bindingHandlers['selectedOptions'] = {\r\n    'after': ['options', 'foreach'],\r\n    'init': function (element, valueAccessor, allBindings) {\r\n        ko.utils.registerEventHandler(element, \"change\", function () {\r\n            var value = valueAccessor(), valueToWrite = [];\r\n            ko.utils.arrayForEach(element.getElementsByTagName(\"option\"), function(node) {\r\n                if (node.selected)\r\n                    valueToWrite.push(ko.selectExtensions.readValue(node));\r\n            });\r\n            ko.expressionRewriting.writeValueToProperty(value, allBindings, 'selectedOptions', valueToWrite);\r\n        });\r\n    },\r\n    'update': function (element, valueAccessor) {\r\n        if (ko.utils.tagNameLower(element) != \"select\")\r\n            throw new Error(\"values binding applies only to SELECT elements\");\r\n\r\n        var newValue = ko.utils.unwrapObservable(valueAccessor());\r\n        if (newValue && typeof newValue.length == \"number\") {\r\n            ko.utils.arrayForEach(element.getElementsByTagName(\"option\"), function(node) {\r\n                var isSelected = ko.utils.arrayIndexOf(newValue, ko.selectExtensions.readValue(node)) >= 0;\r\n                ko.utils.setOptionNodeSelectionState(node, isSelected);\r\n            });\r\n        }\r\n    }\r\n};\r\nko.expressionRewriting.twoWayBindings['selectedOptions'] = true;\r\nko.bindingHandlers['style'] = {\r\n    'update': function (element, valueAccessor) {\r\n        var value = ko.utils.unwrapObservable(valueAccessor() || {});\r\n        ko.utils.objectForEach(value, function(styleName, styleValue) {\r\n            styleValue = ko.utils.unwrapObservable(styleValue);\r\n\r\n            if (styleValue === null || styleValue === undefined || styleValue === false) {\r\n                // Empty string removes the value, whereas null/undefined have no effect\r\n                styleValue = \"\";\r\n            }\r\n\r\n            element.style[styleName] = styleValue;\r\n        });\r\n    }\r\n};\r\nko.bindingHandlers['submit'] = {\r\n    'init': function (element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n        if (typeof valueAccessor() != \"function\")\r\n            throw new Error(\"The value for a submit binding must be a function\");\r\n        ko.utils.registerEventHandler(element, \"submit\", function (event) {\r\n            var handlerReturnValue;\r\n            var value = valueAccessor();\r\n            try { handlerReturnValue = value.call(bindingContext['$data'], element); }\r\n            finally {\r\n                if (handlerReturnValue !== true) { // Normally we want to prevent default action. Developer can override this be explicitly returning true.\r\n                    if (event.preventDefault)\r\n                        event.preventDefault();\r\n                    else\r\n                        event.returnValue = false;\r\n                }\r\n            }\r\n        });\r\n    }\r\n};\r\nko.bindingHandlers['text'] = {\r\n    'init': function() {\r\n        // Prevent binding on the dynamically-injected text node (as developers are unlikely to expect that, and it has security implications).\r\n        // It should also make things faster, as we no longer have to consider whether the text node might be bindable.\r\n        return { 'controlsDescendantBindings': true };\r\n    },\r\n    'update': function (element, valueAccessor) {\r\n        ko.utils.setTextContent(element, valueAccessor());\r\n    }\r\n};\r\nko.virtualElements.allowedBindings['text'] = true;\r\n(function () {\r\n\r\nif (window && window.navigator) {\r\n    var parseVersion = function (matches) {\r\n        if (matches) {\r\n            return parseFloat(matches[1]);\r\n        }\r\n    };\r\n\r\n    // Detect various browser versions because some old versions don't fully support the 'input' event\r\n    var operaVersion = window.opera && window.opera.version && parseInt(window.opera.version()),\r\n        userAgent = window.navigator.userAgent,\r\n        safariVersion = parseVersion(userAgent.match(/^(?:(?!chrome).)*version\\/([^ ]*) safari/i)),\r\n        firefoxVersion = parseVersion(userAgent.match(/Firefox\\/([^ ]*)/));\r\n}\r\n\r\n// IE 8 and 9 have bugs that prevent the normal events from firing when the value changes.\r\n// But it does fire the 'selectionchange' event on many of those, presumably because the\r\n// cursor is moving and that counts as the selection changing. The 'selectionchange' event is\r\n// fired at the document level only and doesn't directly indicate which element changed. We\r\n// set up just one event handler for the document and use 'activeElement' to determine which\r\n// element was changed.\r\nif (ko.utils.ieVersion < 10) {\r\n    var selectionChangeRegisteredName = ko.utils.domData.nextKey(),\r\n        selectionChangeHandlerName = ko.utils.domData.nextKey();\r\n    var selectionChangeHandler = function(event) {\r\n        var target = this.activeElement,\r\n            handler = target && ko.utils.domData.get(target, selectionChangeHandlerName);\r\n        if (handler) {\r\n            handler(event);\r\n        }\r\n    };\r\n    var registerForSelectionChangeEvent = function (element, handler) {\r\n        var ownerDoc = element.ownerDocument;\r\n        if (!ko.utils.domData.get(ownerDoc, selectionChangeRegisteredName)) {\r\n            ko.utils.domData.set(ownerDoc, selectionChangeRegisteredName, true);\r\n            ko.utils.registerEventHandler(ownerDoc, 'selectionchange', selectionChangeHandler);\r\n        }\r\n        ko.utils.domData.set(element, selectionChangeHandlerName, handler);\r\n    };\r\n}\r\n\r\nko.bindingHandlers['textInput'] = {\r\n    'init': function (element, valueAccessor, allBindings) {\r\n\r\n        var previousElementValue = element.value,\r\n            timeoutHandle,\r\n            elementValueBeforeEvent;\r\n\r\n        var updateModel = function (event) {\r\n            clearTimeout(timeoutHandle);\r\n            elementValueBeforeEvent = timeoutHandle = undefined;\r\n\r\n            var elementValue = element.value;\r\n            if (previousElementValue !== elementValue) {\r\n                // Provide a way for tests to know exactly which event was processed\r\n                if (DEBUG && event) element['_ko_textInputProcessedEvent'] = event.type;\r\n                previousElementValue = elementValue;\r\n                ko.expressionRewriting.writeValueToProperty(valueAccessor(), allBindings, 'textInput', elementValue);\r\n            }\r\n        };\r\n\r\n        var deferUpdateModel = function (event) {\r\n            if (!timeoutHandle) {\r\n                // The elementValueBeforeEvent variable is set *only* during the brief gap between an\r\n                // event firing and the updateModel function running. This allows us to ignore model\r\n                // updates that are from the previous state of the element, usually due to techniques\r\n                // such as rateLimit. Such updates, if not ignored, can cause keystrokes to be lost.\r\n                elementValueBeforeEvent = element.value;\r\n                var handler = DEBUG ? updateModel.bind(element, {type: event.type}) : updateModel;\r\n                timeoutHandle = setTimeout(handler, 4);\r\n            }\r\n        };\r\n\r\n        var updateView = function () {\r\n            var modelValue = ko.utils.unwrapObservable(valueAccessor());\r\n\r\n            if (modelValue === null || modelValue === undefined) {\r\n                modelValue = '';\r\n            }\r\n\r\n            if (elementValueBeforeEvent !== undefined && modelValue === elementValueBeforeEvent) {\r\n                setTimeout(updateView, 4);\r\n                return;\r\n            }\r\n\r\n            // Update the element only if the element and model are different. On some browsers, updating the value\r\n            // will move the cursor to the end of the input, which would be bad while the user is typing.\r\n            if (element.value !== modelValue) {\r\n                previousElementValue = modelValue;  // Make sure we ignore events (propertychange) that result from updating the value\r\n                element.value = modelValue;\r\n            }\r\n        };\r\n\r\n        var onEvent = function (event, handler) {\r\n            ko.utils.registerEventHandler(element, event, handler);\r\n        };\r\n\r\n        if (DEBUG && ko.bindingHandlers['textInput']['_forceUpdateOn']) {\r\n            // Provide a way for tests to specify exactly which events are bound\r\n            ko.utils.arrayForEach(ko.bindingHandlers['textInput']['_forceUpdateOn'], function(eventName) {\r\n                if (eventName.slice(0,5) == 'after') {\r\n                    onEvent(eventName.slice(5), deferUpdateModel);\r\n                } else {\r\n                    onEvent(eventName, updateModel);\r\n                }\r\n            });\r\n        } else {\r\n            if (ko.utils.ieVersion < 10) {\r\n                // Internet Explorer <= 8 doesn't support the 'input' event, but does include 'propertychange' that fires whenever\r\n                // any property of an element changes. Unlike 'input', it also fires if a property is changed from JavaScript code,\r\n                // but that's an acceptable compromise for this binding. IE 9 does support 'input', but since it doesn't fire it\r\n                // when using autocomplete, we'll use 'propertychange' for it also.\r\n                onEvent('propertychange', function(event) {\r\n                    if (event.propertyName === 'value') {\r\n                        updateModel(event);\r\n                    }\r\n                });\r\n\r\n                if (ko.utils.ieVersion == 8) {\r\n                    // IE 8 has a bug where it fails to fire 'propertychange' on the first update following a value change from\r\n                    // JavaScript code. It also doesn't fire if you clear the entire value. To fix this, we bind to the following\r\n                    // events too.\r\n                    onEvent('keyup', updateModel);      // A single keystoke\r\n                    onEvent('keydown', updateModel);    // The first character when a key is held down\r\n                }\r\n                if (ko.utils.ieVersion >= 8) {\r\n                    // Internet Explorer 9 doesn't fire the 'input' event when deleting text, including using\r\n                    // the backspace, delete, or ctrl-x keys, clicking the 'x' to clear the input, dragging text\r\n                    // out of the field, and cutting or deleting text using the context menu. 'selectionchange'\r\n                    // can detect all of those except dragging text out of the field, for which we use 'dragend'.\r\n                    // These are also needed in IE8 because of the bug described above.\r\n                    registerForSelectionChangeEvent(element, updateModel);  // 'selectionchange' covers cut, paste, drop, delete, etc.\r\n                    onEvent('dragend', deferUpdateModel);\r\n                }\r\n            } else {\r\n                // All other supported browsers support the 'input' event, which fires whenever the content of the element is changed\r\n                // through the user interface.\r\n                onEvent('input', updateModel);\r\n\r\n                if (safariVersion < 5 && ko.utils.tagNameLower(element) === \"textarea\") {\r\n                    // Safari <5 doesn't fire the 'input' event for <textarea> elements (it does fire 'textInput'\r\n                    // but only when typing). So we'll just catch as much as we can with keydown, cut, and paste.\r\n                    onEvent('keydown', deferUpdateModel);\r\n                    onEvent('paste', deferUpdateModel);\r\n                    onEvent('cut', deferUpdateModel);\r\n                } else if (operaVersion < 11) {\r\n                    // Opera 10 doesn't always fire the 'input' event for cut, paste, undo & drop operations.\r\n                    // We can try to catch some of those using 'keydown'.\r\n                    onEvent('keydown', deferUpdateModel);\r\n                } else if (firefoxVersion < 4.0) {\r\n                    // Firefox <= 3.6 doesn't fire the 'input' event when text is filled in through autocomplete\r\n                    onEvent('DOMAutoComplete', updateModel);\r\n\r\n                    // Firefox <=3.5 doesn't fire the 'input' event when text is dropped into the input.\r\n                    onEvent('dragdrop', updateModel);       // <3.5\r\n                    onEvent('drop', updateModel);           // 3.5\r\n                }\r\n            }\r\n        }\r\n\r\n        // Bind to the change event so that we can catch programmatic updates of the value that fire this event.\r\n        onEvent('change', updateModel);\r\n\r\n        ko.computed(updateView, null, { disposeWhenNodeIsRemoved: element });\r\n    }\r\n};\r\nko.expressionRewriting.twoWayBindings['textInput'] = true;\r\n\r\n// textinput is an alias for textInput\r\nko.bindingHandlers['textinput'] = {\r\n    // preprocess is the only way to set up a full alias\r\n    'preprocess': function (value, name, addBinding) {\r\n        addBinding('textInput', value);\r\n    }\r\n};\r\n\r\n})();ko.bindingHandlers['uniqueName'] = {\r\n    'init': function (element, valueAccessor) {\r\n        if (valueAccessor()) {\r\n            var name = \"ko_unique_\" + (++ko.bindingHandlers['uniqueName'].currentIndex);\r\n            ko.utils.setElementName(element, name);\r\n        }\r\n    }\r\n};\r\nko.bindingHandlers['uniqueName'].currentIndex = 0;\r\nko.bindingHandlers['value'] = {\r\n    'after': ['options', 'foreach'],\r\n    'init': function (element, valueAccessor, allBindings) {\r\n        // If the value binding is placed on a radio/checkbox, then just pass through to checkedValue and quit\r\n        if (element.tagName.toLowerCase() == \"input\" && (element.type == \"checkbox\" || element.type == \"radio\")) {\r\n            ko.applyBindingAccessorsToNode(element, { 'checkedValue': valueAccessor });\r\n            return;\r\n        }\r\n\r\n        // Always catch \"change\" event; possibly other events too if asked\r\n        var eventsToCatch = [\"change\"];\r\n        var requestedEventsToCatch = allBindings.get(\"valueUpdate\");\r\n        var propertyChangedFired = false;\r\n        var elementValueBeforeEvent = null;\r\n\r\n        if (requestedEventsToCatch) {\r\n            if (typeof requestedEventsToCatch == \"string\") // Allow both individual event names, and arrays of event names\r\n                requestedEventsToCatch = [requestedEventsToCatch];\r\n            ko.utils.arrayPushAll(eventsToCatch, requestedEventsToCatch);\r\n            eventsToCatch = ko.utils.arrayGetDistinctValues(eventsToCatch);\r\n        }\r\n\r\n        var valueUpdateHandler = function() {\r\n            elementValueBeforeEvent = null;\r\n            propertyChangedFired = false;\r\n            var modelValue = valueAccessor();\r\n            var elementValue = ko.selectExtensions.readValue(element);\r\n            ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'value', elementValue);\r\n        }\r\n\r\n        // Workaround for https://github.com/SteveSanderson/knockout/issues/122\r\n        // IE doesn't fire \"change\" events on textboxes if the user selects a value from its autocomplete list\r\n        var ieAutoCompleteHackNeeded = ko.utils.ieVersion && element.tagName.toLowerCase() == \"input\" && element.type == \"text\"\r\n                                       && element.autocomplete != \"off\" && (!element.form || element.form.autocomplete != \"off\");\r\n        if (ieAutoCompleteHackNeeded && ko.utils.arrayIndexOf(eventsToCatch, \"propertychange\") == -1) {\r\n            ko.utils.registerEventHandler(element, \"propertychange\", function () { propertyChangedFired = true });\r\n            ko.utils.registerEventHandler(element, \"focus\", function () { propertyChangedFired = false });\r\n            ko.utils.registerEventHandler(element, \"blur\", function() {\r\n                if (propertyChangedFired) {\r\n                    valueUpdateHandler();\r\n                }\r\n            });\r\n        }\r\n\r\n        ko.utils.arrayForEach(eventsToCatch, function(eventName) {\r\n            // The syntax \"after<eventname>\" means \"run the handler asynchronously after the event\"\r\n            // This is useful, for example, to catch \"keydown\" events after the browser has updated the control\r\n            // (otherwise, ko.selectExtensions.readValue(this) will receive the control's value *before* the key event)\r\n            var handler = valueUpdateHandler;\r\n            if (ko.utils.stringStartsWith(eventName, \"after\")) {\r\n                handler = function() {\r\n                    // The elementValueBeforeEvent variable is non-null *only* during the brief gap between\r\n                    // a keyX event firing and the valueUpdateHandler running, which is scheduled to happen\r\n                    // at the earliest asynchronous opportunity. We store this temporary information so that\r\n                    // if, between keyX and valueUpdateHandler, the underlying model value changes separately,\r\n                    // we can overwrite that model value change with the value the user just typed. Otherwise,\r\n                    // techniques like rateLimit can trigger model changes at critical moments that will\r\n                    // override the user's inputs, causing keystrokes to be lost.\r\n                    elementValueBeforeEvent = ko.selectExtensions.readValue(element);\r\n                    setTimeout(valueUpdateHandler, 0);\r\n                };\r\n                eventName = eventName.substring(\"after\".length);\r\n            }\r\n            ko.utils.registerEventHandler(element, eventName, handler);\r\n        });\r\n\r\n        var updateFromModel = function () {\r\n            var newValue = ko.utils.unwrapObservable(valueAccessor());\r\n            var elementValue = ko.selectExtensions.readValue(element);\r\n\r\n            if (elementValueBeforeEvent !== null && newValue === elementValueBeforeEvent) {\r\n                setTimeout(updateFromModel, 0);\r\n                return;\r\n            }\r\n\r\n            var valueHasChanged = (newValue !== elementValue);\r\n\r\n            if (valueHasChanged) {\r\n                if (ko.utils.tagNameLower(element) === \"select\") {\r\n                    var allowUnset = allBindings.get('valueAllowUnset');\r\n                    var applyValueAction = function () {\r\n                        ko.selectExtensions.writeValue(element, newValue, allowUnset);\r\n                    };\r\n                    applyValueAction();\r\n\r\n                    if (!allowUnset && newValue !== ko.selectExtensions.readValue(element)) {\r\n                        // If you try to set a model value that can't be represented in an already-populated dropdown, reject that change,\r\n                        // because you're not allowed to have a model value that disagrees with a visible UI selection.\r\n                        ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, \"change\"]);\r\n                    } else {\r\n                        // Workaround for IE6 bug: It won't reliably apply values to SELECT nodes during the same execution thread\r\n                        // right after you've changed the set of OPTION nodes on it. So for that node type, we'll schedule a second thread\r\n                        // to apply the value as well.\r\n                        setTimeout(applyValueAction, 0);\r\n                    }\r\n                } else {\r\n                    ko.selectExtensions.writeValue(element, newValue);\r\n                }\r\n            }\r\n        };\r\n\r\n        ko.computed(updateFromModel, null, { disposeWhenNodeIsRemoved: element });\r\n    },\r\n    'update': function() {} // Keep for backwards compatibility with code that may have wrapped value binding\r\n};\r\nko.expressionRewriting.twoWayBindings['value'] = true;\r\nko.bindingHandlers['visible'] = {\r\n    'update': function (element, valueAccessor) {\r\n        var value = ko.utils.unwrapObservable(valueAccessor());\r\n        var isCurrentlyVisible = !(element.style.display == \"none\");\r\n        if (value && !isCurrentlyVisible)\r\n            element.style.display = \"\";\r\n        else if ((!value) && isCurrentlyVisible)\r\n            element.style.display = \"none\";\r\n    }\r\n};\r\n// 'click' is just a shorthand for the usual full-length event:{click:handler}\r\nmakeEventHandlerShortcut('click');\r\n// If you want to make a custom template engine,\r\n//\r\n// [1] Inherit from this class (like ko.nativeTemplateEngine does)\r\n// [2] Override 'renderTemplateSource', supplying a function with this signature:\r\n//\r\n//        function (templateSource, bindingContext, options) {\r\n//            // - templateSource.text() is the text of the template you should render\r\n//            // - bindingContext.$data is the data you should pass into the template\r\n//            //   - you might also want to make bindingContext.$parent, bindingContext.$parents,\r\n//            //     and bindingContext.$root available in the template too\r\n//            // - options gives you access to any other properties set on \"data-bind: { template: options }\"\r\n//            // - templateDocument is the document object of the template\r\n//            //\r\n//            // Return value: an array of DOM nodes\r\n//        }\r\n//\r\n// [3] Override 'createJavaScriptEvaluatorBlock', supplying a function with this signature:\r\n//\r\n//        function (script) {\r\n//            // Return value: Whatever syntax means \"Evaluate the JavaScript statement 'script' and output the result\"\r\n//            //               For example, the jquery.tmpl template engine converts 'someScript' to '${ someScript }'\r\n//        }\r\n//\r\n//     This is only necessary if you want to allow data-bind attributes to reference arbitrary template variables.\r\n//     If you don't want to allow that, you can set the property 'allowTemplateRewriting' to false (like ko.nativeTemplateEngine does)\r\n//     and then you don't need to override 'createJavaScriptEvaluatorBlock'.\r\n\r\nko.templateEngine = function () { };\r\n\r\nko.templateEngine.prototype['renderTemplateSource'] = function (templateSource, bindingContext, options, templateDocument) {\r\n    throw new Error(\"Override renderTemplateSource\");\r\n};\r\n\r\nko.templateEngine.prototype['createJavaScriptEvaluatorBlock'] = function (script) {\r\n    throw new Error(\"Override createJavaScriptEvaluatorBlock\");\r\n};\r\n\r\nko.templateEngine.prototype['makeTemplateSource'] = function(template, templateDocument) {\r\n    // Named template\r\n    if (typeof template == \"string\") {\r\n        templateDocument = templateDocument || document;\r\n        var elem = templateDocument.getElementById(template);\r\n        if (!elem)\r\n            throw new Error(\"Cannot find template with ID \" + template);\r\n        return new ko.templateSources.domElement(elem);\r\n    } else if ((template.nodeType == 1) || (template.nodeType == 8)) {\r\n        // Anonymous template\r\n        return new ko.templateSources.anonymousTemplate(template);\r\n    } else\r\n        throw new Error(\"Unknown template type: \" + template);\r\n};\r\n\r\nko.templateEngine.prototype['renderTemplate'] = function (template, bindingContext, options, templateDocument) {\r\n    var templateSource = this['makeTemplateSource'](template, templateDocument);\r\n    return this['renderTemplateSource'](templateSource, bindingContext, options, templateDocument);\r\n};\r\n\r\nko.templateEngine.prototype['isTemplateRewritten'] = function (template, templateDocument) {\r\n    // Skip rewriting if requested\r\n    if (this['allowTemplateRewriting'] === false)\r\n        return true;\r\n    return this['makeTemplateSource'](template, templateDocument)['data'](\"isRewritten\");\r\n};\r\n\r\nko.templateEngine.prototype['rewriteTemplate'] = function (template, rewriterCallback, templateDocument) {\r\n    var templateSource = this['makeTemplateSource'](template, templateDocument);\r\n    var rewritten = rewriterCallback(templateSource['text']());\r\n    templateSource['text'](rewritten);\r\n    templateSource['data'](\"isRewritten\", true);\r\n};\r\n\r\nko.exportSymbol('templateEngine', ko.templateEngine);\r\n\r\nko.templateRewriting = (function () {\r\n    var memoizeDataBindingAttributeSyntaxRegex = /(<([a-z]+\\d*)(?:\\s+(?!data-bind\\s*=\\s*)[a-z0-9\\-]+(?:=(?:\\\"[^\\\"]*\\\"|\\'[^\\']*\\'|[^>]*))?)*\\s+)data-bind\\s*=\\s*([\"'])([\\s\\S]*?)\\3/gi;\r\n    var memoizeVirtualContainerBindingSyntaxRegex = /<!--\\s*ko\\b\\s*([\\s\\S]*?)\\s*-->/g;\r\n\r\n    function validateDataBindValuesForRewriting(keyValueArray) {\r\n        var allValidators = ko.expressionRewriting.bindingRewriteValidators;\r\n        for (var i = 0; i < keyValueArray.length; i++) {\r\n            var key = keyValueArray[i]['key'];\r\n            if (allValidators.hasOwnProperty(key)) {\r\n                var validator = allValidators[key];\r\n\r\n                if (typeof validator === \"function\") {\r\n                    var possibleErrorMessage = validator(keyValueArray[i]['value']);\r\n                    if (possibleErrorMessage)\r\n                        throw new Error(possibleErrorMessage);\r\n                } else if (!validator) {\r\n                    throw new Error(\"This template engine does not support the '\" + key + \"' binding within its templates\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function constructMemoizedTagReplacement(dataBindAttributeValue, tagToRetain, nodeName, templateEngine) {\r\n        var dataBindKeyValueArray = ko.expressionRewriting.parseObjectLiteral(dataBindAttributeValue);\r\n        validateDataBindValuesForRewriting(dataBindKeyValueArray);\r\n        var rewrittenDataBindAttributeValue = ko.expressionRewriting.preProcessBindings(dataBindKeyValueArray, {'valueAccessors':true});\r\n\r\n        // For no obvious reason, Opera fails to evaluate rewrittenDataBindAttributeValue unless it's wrapped in an additional\r\n        // anonymous function, even though Opera's built-in debugger can evaluate it anyway. No other browser requires this\r\n        // extra indirection.\r\n        var applyBindingsToNextSiblingScript =\r\n            \"ko.__tr_ambtns(function($context,$element){return(function(){return{ \" + rewrittenDataBindAttributeValue + \" } })()},'\" + nodeName.toLowerCase() + \"')\";\r\n        return templateEngine['createJavaScriptEvaluatorBlock'](applyBindingsToNextSiblingScript) + tagToRetain;\r\n    }\r\n\r\n    return {\r\n        ensureTemplateIsRewritten: function (template, templateEngine, templateDocument) {\r\n            if (!templateEngine['isTemplateRewritten'](template, templateDocument))\r\n                templateEngine['rewriteTemplate'](template, function (htmlString) {\r\n                    return ko.templateRewriting.memoizeBindingAttributeSyntax(htmlString, templateEngine);\r\n                }, templateDocument);\r\n        },\r\n\r\n        memoizeBindingAttributeSyntax: function (htmlString, templateEngine) {\r\n            return htmlString.replace(memoizeDataBindingAttributeSyntaxRegex, function () {\r\n                return constructMemoizedTagReplacement(/* dataBindAttributeValue: */ arguments[4], /* tagToRetain: */ arguments[1], /* nodeName: */ arguments[2], templateEngine);\r\n            }).replace(memoizeVirtualContainerBindingSyntaxRegex, function() {\r\n                return constructMemoizedTagReplacement(/* dataBindAttributeValue: */ arguments[1], /* tagToRetain: */ \"<!-- ko -->\", /* nodeName: */ \"#comment\", templateEngine);\r\n            });\r\n        },\r\n\r\n        applyMemoizedBindingsToNextSibling: function (bindings, nodeName) {\r\n            return ko.memoization.memoize(function (domNode, bindingContext) {\r\n                var nodeToBind = domNode.nextSibling;\r\n                if (nodeToBind && nodeToBind.nodeName.toLowerCase() === nodeName) {\r\n                    ko.applyBindingAccessorsToNode(nodeToBind, bindings, bindingContext);\r\n                }\r\n            });\r\n        }\r\n    }\r\n})();\r\n\r\n\r\n// Exported only because it has to be referenced by string lookup from within rewritten template\r\nko.exportSymbol('__tr_ambtns', ko.templateRewriting.applyMemoizedBindingsToNextSibling);\r\n(function() {\r\n    // A template source represents a read/write way of accessing a template. This is to eliminate the need for template loading/saving\r\n    // logic to be duplicated in every template engine (and means they can all work with anonymous templates, etc.)\r\n    //\r\n    // Two are provided by default:\r\n    //  1. ko.templateSources.domElement       - reads/writes the text content of an arbitrary DOM element\r\n    //  2. ko.templateSources.anonymousElement - uses ko.utils.domData to read/write text *associated* with the DOM element, but\r\n    //                                           without reading/writing the actual element text content, since it will be overwritten\r\n    //                                           with the rendered template output.\r\n    // You can implement your own template source if you want to fetch/store templates somewhere other than in DOM elements.\r\n    // Template sources need to have the following functions:\r\n    //   text()             - returns the template text from your storage location\r\n    //   text(value)        - writes the supplied template text to your storage location\r\n    //   data(key)          - reads values stored using data(key, value) - see below\r\n    //   data(key, value)   - associates \"value\" with this template and the key \"key\". Is used to store information like \"isRewritten\".\r\n    //\r\n    // Optionally, template sources can also have the following functions:\r\n    //   nodes()            - returns a DOM element containing the nodes of this template, where available\r\n    //   nodes(value)       - writes the given DOM element to your storage location\r\n    // If a DOM element is available for a given template source, template engines are encouraged to use it in preference over text()\r\n    // for improved speed. However, all templateSources must supply text() even if they don't supply nodes().\r\n    //\r\n    // Once you've implemented a templateSource, make your template engine use it by subclassing whatever template engine you were\r\n    // using and overriding \"makeTemplateSource\" to return an instance of your custom template source.\r\n\r\n    ko.templateSources = {};\r\n\r\n    // ---- ko.templateSources.domElement -----\r\n\r\n    ko.templateSources.domElement = function(element) {\r\n        this.domElement = element;\r\n    }\r\n\r\n    ko.templateSources.domElement.prototype['text'] = function(/* valueToWrite */) {\r\n        var tagNameLower = ko.utils.tagNameLower(this.domElement),\r\n            elemContentsProperty = tagNameLower === \"script\" ? \"text\"\r\n                                 : tagNameLower === \"textarea\" ? \"value\"\r\n                                 : \"innerHTML\";\r\n\r\n        if (arguments.length == 0) {\r\n            return this.domElement[elemContentsProperty];\r\n        } else {\r\n            var valueToWrite = arguments[0];\r\n            if (elemContentsProperty === \"innerHTML\")\r\n                ko.utils.setHtml(this.domElement, valueToWrite);\r\n            else\r\n                this.domElement[elemContentsProperty] = valueToWrite;\r\n        }\r\n    };\r\n\r\n    var dataDomDataPrefix = ko.utils.domData.nextKey() + \"_\";\r\n    ko.templateSources.domElement.prototype['data'] = function(key /*, valueToWrite */) {\r\n        if (arguments.length === 1) {\r\n            return ko.utils.domData.get(this.domElement, dataDomDataPrefix + key);\r\n        } else {\r\n            ko.utils.domData.set(this.domElement, dataDomDataPrefix + key, arguments[1]);\r\n        }\r\n    };\r\n\r\n    // ---- ko.templateSources.anonymousTemplate -----\r\n    // Anonymous templates are normally saved/retrieved as DOM nodes through \"nodes\".\r\n    // For compatibility, you can also read \"text\"; it will be serialized from the nodes on demand.\r\n    // Writing to \"text\" is still supported, but then the template data will not be available as DOM nodes.\r\n\r\n    var anonymousTemplatesDomDataKey = ko.utils.domData.nextKey();\r\n    ko.templateSources.anonymousTemplate = function(element) {\r\n        this.domElement = element;\r\n    }\r\n    ko.templateSources.anonymousTemplate.prototype = new ko.templateSources.domElement();\r\n    ko.templateSources.anonymousTemplate.prototype.constructor = ko.templateSources.anonymousTemplate;\r\n    ko.templateSources.anonymousTemplate.prototype['text'] = function(/* valueToWrite */) {\r\n        if (arguments.length == 0) {\r\n            var templateData = ko.utils.domData.get(this.domElement, anonymousTemplatesDomDataKey) || {};\r\n            if (templateData.textData === undefined && templateData.containerData)\r\n                templateData.textData = templateData.containerData.innerHTML;\r\n            return templateData.textData;\r\n        } else {\r\n            var valueToWrite = arguments[0];\r\n            ko.utils.domData.set(this.domElement, anonymousTemplatesDomDataKey, {textData: valueToWrite});\r\n        }\r\n    };\r\n    ko.templateSources.domElement.prototype['nodes'] = function(/* valueToWrite */) {\r\n        if (arguments.length == 0) {\r\n            var templateData = ko.utils.domData.get(this.domElement, anonymousTemplatesDomDataKey) || {};\r\n            return templateData.containerData;\r\n        } else {\r\n            var valueToWrite = arguments[0];\r\n            ko.utils.domData.set(this.domElement, anonymousTemplatesDomDataKey, {containerData: valueToWrite});\r\n        }\r\n    };\r\n\r\n    ko.exportSymbol('templateSources', ko.templateSources);\r\n    ko.exportSymbol('templateSources.domElement', ko.templateSources.domElement);\r\n    ko.exportSymbol('templateSources.anonymousTemplate', ko.templateSources.anonymousTemplate);\r\n})();\r\n(function () {\r\n    var _templateEngine;\r\n    ko.setTemplateEngine = function (templateEngine) {\r\n        if ((templateEngine != undefined) && !(templateEngine instanceof ko.templateEngine))\r\n            throw new Error(\"templateEngine must inherit from ko.templateEngine\");\r\n        _templateEngine = templateEngine;\r\n    }\r\n\r\n    function invokeForEachNodeInContinuousRange(firstNode, lastNode, action) {\r\n        var node, nextInQueue = firstNode, firstOutOfRangeNode = ko.virtualElements.nextSibling(lastNode);\r\n        while (nextInQueue && ((node = nextInQueue) !== firstOutOfRangeNode)) {\r\n            nextInQueue = ko.virtualElements.nextSibling(node);\r\n            action(node, nextInQueue);\r\n        }\r\n    }\r\n\r\n    function activateBindingsOnContinuousNodeArray(continuousNodeArray, bindingContext) {\r\n        // To be used on any nodes that have been rendered by a template and have been inserted into some parent element\r\n        // Walks through continuousNodeArray (which *must* be continuous, i.e., an uninterrupted sequence of sibling nodes, because\r\n        // the algorithm for walking them relies on this), and for each top-level item in the virtual-element sense,\r\n        // (1) Does a regular \"applyBindings\" to associate bindingContext with this node and to activate any non-memoized bindings\r\n        // (2) Unmemoizes any memos in the DOM subtree (e.g., to activate bindings that had been memoized during template rewriting)\r\n\r\n        if (continuousNodeArray.length) {\r\n            var firstNode = continuousNodeArray[0],\r\n                lastNode = continuousNodeArray[continuousNodeArray.length - 1],\r\n                parentNode = firstNode.parentNode,\r\n                provider = ko.bindingProvider['instance'],\r\n                preprocessNode = provider['preprocessNode'];\r\n\r\n            if (preprocessNode) {\r\n                invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node, nextNodeInRange) {\r\n                    var nodePreviousSibling = node.previousSibling;\r\n                    var newNodes = preprocessNode.call(provider, node);\r\n                    if (newNodes) {\r\n                        if (node === firstNode)\r\n                            firstNode = newNodes[0] || nextNodeInRange;\r\n                        if (node === lastNode)\r\n                            lastNode = newNodes[newNodes.length - 1] || nodePreviousSibling;\r\n                    }\r\n                });\r\n\r\n                // Because preprocessNode can change the nodes, including the first and last nodes, update continuousNodeArray to match.\r\n                // We need the full set, including inner nodes, because the unmemoize step might remove the first node (and so the real\r\n                // first node needs to be in the array).\r\n                continuousNodeArray.length = 0;\r\n                if (!firstNode) { // preprocessNode might have removed all the nodes, in which case there's nothing left to do\r\n                    return;\r\n                }\r\n                if (firstNode === lastNode) {\r\n                    continuousNodeArray.push(firstNode);\r\n                } else {\r\n                    continuousNodeArray.push(firstNode, lastNode);\r\n                    ko.utils.fixUpContinuousNodeArray(continuousNodeArray, parentNode);\r\n                }\r\n            }\r\n\r\n            // Need to applyBindings *before* unmemoziation, because unmemoization might introduce extra nodes (that we don't want to re-bind)\r\n            // whereas a regular applyBindings won't introduce new memoized nodes\r\n            invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node) {\r\n                if (node.nodeType === 1 || node.nodeType === 8)\r\n                    ko.applyBindings(bindingContext, node);\r\n            });\r\n            invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node) {\r\n                if (node.nodeType === 1 || node.nodeType === 8)\r\n                    ko.memoization.unmemoizeDomNodeAndDescendants(node, [bindingContext]);\r\n            });\r\n\r\n            // Make sure any changes done by applyBindings or unmemoize are reflected in the array\r\n            ko.utils.fixUpContinuousNodeArray(continuousNodeArray, parentNode);\r\n        }\r\n    }\r\n\r\n    function getFirstNodeFromPossibleArray(nodeOrNodeArray) {\r\n        return nodeOrNodeArray.nodeType ? nodeOrNodeArray\r\n                                        : nodeOrNodeArray.length > 0 ? nodeOrNodeArray[0]\r\n                                        : null;\r\n    }\r\n\r\n    function executeTemplate(targetNodeOrNodeArray, renderMode, template, bindingContext, options) {\r\n        options = options || {};\r\n        var firstTargetNode = targetNodeOrNodeArray && getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\r\n        var templateDocument = (firstTargetNode || template || {}).ownerDocument;\r\n        var templateEngineToUse = (options['templateEngine'] || _templateEngine);\r\n        ko.templateRewriting.ensureTemplateIsRewritten(template, templateEngineToUse, templateDocument);\r\n        var renderedNodesArray = templateEngineToUse['renderTemplate'](template, bindingContext, options, templateDocument);\r\n\r\n        // Loosely check result is an array of DOM nodes\r\n        if ((typeof renderedNodesArray.length != \"number\") || (renderedNodesArray.length > 0 && typeof renderedNodesArray[0].nodeType != \"number\"))\r\n            throw new Error(\"Template engine must return an array of DOM nodes\");\r\n\r\n        var haveAddedNodesToParent = false;\r\n        switch (renderMode) {\r\n            case \"replaceChildren\":\r\n                ko.virtualElements.setDomNodeChildren(targetNodeOrNodeArray, renderedNodesArray);\r\n                haveAddedNodesToParent = true;\r\n                break;\r\n            case \"replaceNode\":\r\n                ko.utils.replaceDomNodes(targetNodeOrNodeArray, renderedNodesArray);\r\n                haveAddedNodesToParent = true;\r\n                break;\r\n            case \"ignoreTargetNode\": break;\r\n            default:\r\n                throw new Error(\"Unknown renderMode: \" + renderMode);\r\n        }\r\n\r\n        if (haveAddedNodesToParent) {\r\n            activateBindingsOnContinuousNodeArray(renderedNodesArray, bindingContext);\r\n            if (options['afterRender'])\r\n                ko.dependencyDetection.ignore(options['afterRender'], null, [renderedNodesArray, bindingContext['$data']]);\r\n        }\r\n\r\n        return renderedNodesArray;\r\n    }\r\n\r\n    function resolveTemplateName(template, data, context) {\r\n        // The template can be specified as:\r\n        if (ko.isObservable(template)) {\r\n            // 1. An observable, with string value\r\n            return template();\r\n        } else if (typeof template === 'function') {\r\n            // 2. A function of (data, context) returning a string\r\n            return template(data, context);\r\n        } else {\r\n            // 3. A string\r\n            return template;\r\n        }\r\n    }\r\n\r\n    ko.renderTemplate = function (template, dataOrBindingContext, options, targetNodeOrNodeArray, renderMode) {\r\n        options = options || {};\r\n        if ((options['templateEngine'] || _templateEngine) == undefined)\r\n            throw new Error(\"Set a template engine before calling renderTemplate\");\r\n        renderMode = renderMode || \"replaceChildren\";\r\n\r\n        if (targetNodeOrNodeArray) {\r\n            var firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\r\n\r\n            var whenToDispose = function () { return (!firstTargetNode) || !ko.utils.domNodeIsAttachedToDocument(firstTargetNode); }; // Passive disposal (on next evaluation)\r\n            var activelyDisposeWhenNodeIsRemoved = (firstTargetNode && renderMode == \"replaceNode\") ? firstTargetNode.parentNode : firstTargetNode;\r\n\r\n            return ko.dependentObservable( // So the DOM is automatically updated when any dependency changes\r\n                function () {\r\n                    // Ensure we've got a proper binding context to work with\r\n                    var bindingContext = (dataOrBindingContext && (dataOrBindingContext instanceof ko.bindingContext))\r\n                        ? dataOrBindingContext\r\n                        : new ko.bindingContext(ko.utils.unwrapObservable(dataOrBindingContext));\r\n\r\n                    var templateName = resolveTemplateName(template, bindingContext['$data'], bindingContext),\r\n                        renderedNodesArray = executeTemplate(targetNodeOrNodeArray, renderMode, templateName, bindingContext, options);\r\n\r\n                    if (renderMode == \"replaceNode\") {\r\n                        targetNodeOrNodeArray = renderedNodesArray;\r\n                        firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\r\n                    }\r\n                },\r\n                null,\r\n                { disposeWhen: whenToDispose, disposeWhenNodeIsRemoved: activelyDisposeWhenNodeIsRemoved }\r\n            );\r\n        } else {\r\n            // We don't yet have a DOM node to evaluate, so use a memo and render the template later when there is a DOM node\r\n            return ko.memoization.memoize(function (domNode) {\r\n                ko.renderTemplate(template, dataOrBindingContext, options, domNode, \"replaceNode\");\r\n            });\r\n        }\r\n    };\r\n\r\n    ko.renderTemplateForEach = function (template, arrayOrObservableArray, options, targetNode, parentBindingContext) {\r\n        // Since setDomNodeChildrenFromArrayMapping always calls executeTemplateForArrayItem and then\r\n        // activateBindingsCallback for added items, we can store the binding context in the former to use in the latter.\r\n        var arrayItemContext;\r\n\r\n        // This will be called by setDomNodeChildrenFromArrayMapping to get the nodes to add to targetNode\r\n        var executeTemplateForArrayItem = function (arrayValue, index) {\r\n            // Support selecting template as a function of the data being rendered\r\n            arrayItemContext = parentBindingContext['createChildContext'](arrayValue, options['as'], function(context) {\r\n                context['$index'] = index;\r\n            });\r\n\r\n            var templateName = resolveTemplateName(template, arrayValue, arrayItemContext);\r\n            return executeTemplate(null, \"ignoreTargetNode\", templateName, arrayItemContext, options);\r\n        }\r\n\r\n        // This will be called whenever setDomNodeChildrenFromArrayMapping has added nodes to targetNode\r\n        var activateBindingsCallback = function(arrayValue, addedNodesArray, index) {\r\n            activateBindingsOnContinuousNodeArray(addedNodesArray, arrayItemContext);\r\n            if (options['afterRender'])\r\n                options['afterRender'](addedNodesArray, arrayValue);\r\n\r\n            // release the \"cache\" variable, so that it can be collected by\r\n            // the GC when its value isn't used from within the bindings anymore.\r\n            arrayItemContext = null;\r\n        };\r\n\r\n        return ko.dependentObservable(function () {\r\n            var unwrappedArray = ko.utils.unwrapObservable(arrayOrObservableArray) || [];\r\n            if (typeof unwrappedArray.length == \"undefined\") // Coerce single value into array\r\n                unwrappedArray = [unwrappedArray];\r\n\r\n            // Filter out any entries marked as destroyed\r\n            var filteredArray = ko.utils.arrayFilter(unwrappedArray, function(item) {\r\n                return options['includeDestroyed'] || item === undefined || item === null || !ko.utils.unwrapObservable(item['_destroy']);\r\n            });\r\n\r\n            // Call setDomNodeChildrenFromArrayMapping, ignoring any observables unwrapped within (most likely from a callback function).\r\n            // If the array items are observables, though, they will be unwrapped in executeTemplateForArrayItem and managed within setDomNodeChildrenFromArrayMapping.\r\n            ko.dependencyDetection.ignore(ko.utils.setDomNodeChildrenFromArrayMapping, null, [targetNode, filteredArray, executeTemplateForArrayItem, options, activateBindingsCallback]);\r\n\r\n        }, null, { disposeWhenNodeIsRemoved: targetNode });\r\n    };\r\n\r\n    var templateComputedDomDataKey = ko.utils.domData.nextKey();\r\n    function disposeOldComputedAndStoreNewOne(element, newComputed) {\r\n        var oldComputed = ko.utils.domData.get(element, templateComputedDomDataKey);\r\n        if (oldComputed && (typeof(oldComputed.dispose) == 'function'))\r\n            oldComputed.dispose();\r\n        ko.utils.domData.set(element, templateComputedDomDataKey, (newComputed && newComputed.isActive()) ? newComputed : undefined);\r\n    }\r\n\r\n    ko.bindingHandlers['template'] = {\r\n        'init': function(element, valueAccessor) {\r\n            // Support anonymous templates\r\n            var bindingValue = ko.utils.unwrapObservable(valueAccessor());\r\n            if (typeof bindingValue == \"string\" || bindingValue['name']) {\r\n                // It's a named template - clear the element\r\n                ko.virtualElements.emptyNode(element);\r\n            } else if ('nodes' in bindingValue) {\r\n                // We've been given an array of DOM nodes. Save them as the template source.\r\n                // There is no known use case for the node array being an observable array (if the output\r\n                // varies, put that behavior *into* your template - that's what templates are for), and\r\n                // the implementation would be a mess, so assert that it's not observable.\r\n                var nodes = bindingValue['nodes'] || [];\r\n                if (ko.isObservable(nodes)) {\r\n                    throw new Error('The \"nodes\" option must be a plain, non-observable array.');\r\n                }\r\n                var container = ko.utils.moveCleanedNodesToContainerElement(nodes); // This also removes the nodes from their current parent\r\n                new ko.templateSources.anonymousTemplate(element)['nodes'](container);\r\n            } else {\r\n                // It's an anonymous template - store the element contents, then clear the element\r\n                var templateNodes = ko.virtualElements.childNodes(element),\r\n                    container = ko.utils.moveCleanedNodesToContainerElement(templateNodes); // This also removes the nodes from their current parent\r\n                new ko.templateSources.anonymousTemplate(element)['nodes'](container);\r\n            }\r\n            return { 'controlsDescendantBindings': true };\r\n        },\r\n        'update': function (element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            var value = valueAccessor(),\r\n                dataValue,\r\n                options = ko.utils.unwrapObservable(value),\r\n                shouldDisplay = true,\r\n                templateComputed = null,\r\n                templateName;\r\n\r\n            if (typeof options == \"string\") {\r\n                templateName = value;\r\n                options = {};\r\n            } else {\r\n                templateName = options['name'];\r\n\r\n                // Support \"if\"/\"ifnot\" conditions\r\n                if ('if' in options)\r\n                    shouldDisplay = ko.utils.unwrapObservable(options['if']);\r\n                if (shouldDisplay && 'ifnot' in options)\r\n                    shouldDisplay = !ko.utils.unwrapObservable(options['ifnot']);\r\n\r\n                dataValue = ko.utils.unwrapObservable(options['data']);\r\n            }\r\n\r\n            if ('foreach' in options) {\r\n                // Render once for each data point (treating data set as empty if shouldDisplay==false)\r\n                var dataArray = (shouldDisplay && options['foreach']) || [];\r\n                templateComputed = ko.renderTemplateForEach(templateName || element, dataArray, options, element, bindingContext);\r\n            } else if (!shouldDisplay) {\r\n                ko.virtualElements.emptyNode(element);\r\n            } else {\r\n                // Render once for this single data point (or use the viewModel if no data was provided)\r\n                var innerBindingContext = ('data' in options) ?\r\n                    bindingContext['createChildContext'](dataValue, options['as']) :  // Given an explitit 'data' value, we create a child binding context for it\r\n                    bindingContext;                                                        // Given no explicit 'data' value, we retain the same binding context\r\n                templateComputed = ko.renderTemplate(templateName || element, innerBindingContext, options, element);\r\n            }\r\n\r\n            // It only makes sense to have a single template computed per element (otherwise which one should have its output displayed?)\r\n            disposeOldComputedAndStoreNewOne(element, templateComputed);\r\n        }\r\n    };\r\n\r\n    // Anonymous templates can't be rewritten. Give a nice error message if you try to do it.\r\n    ko.expressionRewriting.bindingRewriteValidators['template'] = function(bindingValue) {\r\n        var parsedBindingValue = ko.expressionRewriting.parseObjectLiteral(bindingValue);\r\n\r\n        if ((parsedBindingValue.length == 1) && parsedBindingValue[0]['unknown'])\r\n            return null; // It looks like a string literal, not an object literal, so treat it as a named template (which is allowed for rewriting)\r\n\r\n        if (ko.expressionRewriting.keyValueArrayContainsKey(parsedBindingValue, \"name\"))\r\n            return null; // Named templates can be rewritten, so return \"no error\"\r\n        return \"This template engine does not support anonymous templates nested within its templates\";\r\n    };\r\n\r\n    ko.virtualElements.allowedBindings['template'] = true;\r\n})();\r\n\r\nko.exportSymbol('setTemplateEngine', ko.setTemplateEngine);\r\nko.exportSymbol('renderTemplate', ko.renderTemplate);\r\n// Go through the items that have been added and deleted and try to find matches between them.\r\nko.utils.findMovesInArrayComparison = function (left, right, limitFailedCompares) {\r\n    if (left.length && right.length) {\r\n        var failedCompares, l, r, leftItem, rightItem;\r\n        for (failedCompares = l = 0; (!limitFailedCompares || failedCompares < limitFailedCompares) && (leftItem = left[l]); ++l) {\r\n            for (r = 0; rightItem = right[r]; ++r) {\r\n                if (leftItem['value'] === rightItem['value']) {\r\n                    leftItem['moved'] = rightItem['index'];\r\n                    rightItem['moved'] = leftItem['index'];\r\n                    right.splice(r, 1);         // This item is marked as moved; so remove it from right list\r\n                    failedCompares = r = 0;     // Reset failed compares count because we're checking for consecutive failures\r\n                    break;\r\n                }\r\n            }\r\n            failedCompares += r;\r\n        }\r\n    }\r\n};\r\n\r\nko.utils.compareArrays = (function () {\r\n    var statusNotInOld = 'added', statusNotInNew = 'deleted';\r\n\r\n    // Simple calculation based on Levenshtein distance.\r\n    function compareArrays(oldArray, newArray, options) {\r\n        // For backward compatibility, if the third arg is actually a bool, interpret\r\n        // it as the old parameter 'dontLimitMoves'. Newer code should use { dontLimitMoves: true }.\r\n        options = (typeof options === 'boolean') ? { 'dontLimitMoves': options } : (options || {});\r\n        oldArray = oldArray || [];\r\n        newArray = newArray || [];\r\n\r\n        if (oldArray.length <= newArray.length)\r\n            return compareSmallArrayToBigArray(oldArray, newArray, statusNotInOld, statusNotInNew, options);\r\n        else\r\n            return compareSmallArrayToBigArray(newArray, oldArray, statusNotInNew, statusNotInOld, options);\r\n    }\r\n\r\n    function compareSmallArrayToBigArray(smlArray, bigArray, statusNotInSml, statusNotInBig, options) {\r\n        var myMin = Math.min,\r\n            myMax = Math.max,\r\n            editDistanceMatrix = [],\r\n            smlIndex, smlIndexMax = smlArray.length,\r\n            bigIndex, bigIndexMax = bigArray.length,\r\n            compareRange = (bigIndexMax - smlIndexMax) || 1,\r\n            maxDistance = smlIndexMax + bigIndexMax + 1,\r\n            thisRow, lastRow,\r\n            bigIndexMaxForRow, bigIndexMinForRow;\r\n\r\n        for (smlIndex = 0; smlIndex <= smlIndexMax; smlIndex++) {\r\n            lastRow = thisRow;\r\n            editDistanceMatrix.push(thisRow = []);\r\n            bigIndexMaxForRow = myMin(bigIndexMax, smlIndex + compareRange);\r\n            bigIndexMinForRow = myMax(0, smlIndex - 1);\r\n            for (bigIndex = bigIndexMinForRow; bigIndex <= bigIndexMaxForRow; bigIndex++) {\r\n                if (!bigIndex)\r\n                    thisRow[bigIndex] = smlIndex + 1;\r\n                else if (!smlIndex)  // Top row - transform empty array into new array via additions\r\n                    thisRow[bigIndex] = bigIndex + 1;\r\n                else if (smlArray[smlIndex - 1] === bigArray[bigIndex - 1])\r\n                    thisRow[bigIndex] = lastRow[bigIndex - 1];                  // copy value (no edit)\r\n                else {\r\n                    var northDistance = lastRow[bigIndex] || maxDistance;       // not in big (deletion)\r\n                    var westDistance = thisRow[bigIndex - 1] || maxDistance;    // not in small (addition)\r\n                    thisRow[bigIndex] = myMin(northDistance, westDistance) + 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        var editScript = [], meMinusOne, notInSml = [], notInBig = [];\r\n        for (smlIndex = smlIndexMax, bigIndex = bigIndexMax; smlIndex || bigIndex;) {\r\n            meMinusOne = editDistanceMatrix[smlIndex][bigIndex] - 1;\r\n            if (bigIndex && meMinusOne === editDistanceMatrix[smlIndex][bigIndex-1]) {\r\n                notInSml.push(editScript[editScript.length] = {     // added\r\n                    'status': statusNotInSml,\r\n                    'value': bigArray[--bigIndex],\r\n                    'index': bigIndex });\r\n            } else if (smlIndex && meMinusOne === editDistanceMatrix[smlIndex - 1][bigIndex]) {\r\n                notInBig.push(editScript[editScript.length] = {     // deleted\r\n                    'status': statusNotInBig,\r\n                    'value': smlArray[--smlIndex],\r\n                    'index': smlIndex });\r\n            } else {\r\n                --bigIndex;\r\n                --smlIndex;\r\n                if (!options['sparse']) {\r\n                    editScript.push({\r\n                        'status': \"retained\",\r\n                        'value': bigArray[bigIndex] });\r\n                }\r\n            }\r\n        }\r\n\r\n        // Set a limit on the number of consecutive non-matching comparisons; having it a multiple of\r\n        // smlIndexMax keeps the time complexity of this algorithm linear.\r\n        ko.utils.findMovesInArrayComparison(notInSml, notInBig, smlIndexMax * 10);\r\n\r\n        return editScript.reverse();\r\n    }\r\n\r\n    return compareArrays;\r\n})();\r\n\r\nko.exportSymbol('utils.compareArrays', ko.utils.compareArrays);\r\n(function () {\r\n    // Objective:\r\n    // * Given an input array, a container DOM node, and a function from array elements to arrays of DOM nodes,\r\n    //   map the array elements to arrays of DOM nodes, concatenate together all these arrays, and use them to populate the container DOM node\r\n    // * Next time we're given the same combination of things (with the array possibly having mutated), update the container DOM node\r\n    //   so that its children is again the concatenation of the mappings of the array elements, but don't re-map any array elements that we\r\n    //   previously mapped - retain those nodes, and just insert/delete other ones\r\n\r\n    // \"callbackAfterAddingNodes\" will be invoked after any \"mapping\"-generated nodes are inserted into the container node\r\n    // You can use this, for example, to activate bindings on those nodes.\r\n\r\n    function mapNodeAndRefreshWhenChanged(containerNode, mapping, valueToMap, callbackAfterAddingNodes, index) {\r\n        // Map this array value inside a dependentObservable so we re-map when any dependency changes\r\n        var mappedNodes = [];\r\n        var dependentObservable = ko.dependentObservable(function() {\r\n            var newMappedNodes = mapping(valueToMap, index, ko.utils.fixUpContinuousNodeArray(mappedNodes, containerNode)) || [];\r\n\r\n            // On subsequent evaluations, just replace the previously-inserted DOM nodes\r\n            if (mappedNodes.length > 0) {\r\n                ko.utils.replaceDomNodes(mappedNodes, newMappedNodes);\r\n                if (callbackAfterAddingNodes)\r\n                    ko.dependencyDetection.ignore(callbackAfterAddingNodes, null, [valueToMap, newMappedNodes, index]);\r\n            }\r\n\r\n            // Replace the contents of the mappedNodes array, thereby updating the record\r\n            // of which nodes would be deleted if valueToMap was itself later removed\r\n            mappedNodes.length = 0;\r\n            ko.utils.arrayPushAll(mappedNodes, newMappedNodes);\r\n        }, null, { disposeWhenNodeIsRemoved: containerNode, disposeWhen: function() { return !ko.utils.anyDomNodeIsAttachedToDocument(mappedNodes); } });\r\n        return { mappedNodes : mappedNodes, dependentObservable : (dependentObservable.isActive() ? dependentObservable : undefined) };\r\n    }\r\n\r\n    var lastMappingResultDomDataKey = ko.utils.domData.nextKey();\r\n\r\n    ko.utils.setDomNodeChildrenFromArrayMapping = function (domNode, array, mapping, options, callbackAfterAddingNodes) {\r\n        // Compare the provided array against the previous one\r\n        array = array || [];\r\n        options = options || {};\r\n        var isFirstExecution = ko.utils.domData.get(domNode, lastMappingResultDomDataKey) === undefined;\r\n        var lastMappingResult = ko.utils.domData.get(domNode, lastMappingResultDomDataKey) || [];\r\n        var lastArray = ko.utils.arrayMap(lastMappingResult, function (x) { return x.arrayEntry; });\r\n        var editScript = ko.utils.compareArrays(lastArray, array, options['dontLimitMoves']);\r\n\r\n        // Build the new mapping result\r\n        var newMappingResult = [];\r\n        var lastMappingResultIndex = 0;\r\n        var newMappingResultIndex = 0;\r\n\r\n        var nodesToDelete = [];\r\n        var itemsToProcess = [];\r\n        var itemsForBeforeRemoveCallbacks = [];\r\n        var itemsForMoveCallbacks = [];\r\n        var itemsForAfterAddCallbacks = [];\r\n        var mapData;\r\n\r\n        function itemMovedOrRetained(editScriptIndex, oldPosition) {\r\n            mapData = lastMappingResult[oldPosition];\r\n            if (newMappingResultIndex !== oldPosition)\r\n                itemsForMoveCallbacks[editScriptIndex] = mapData;\r\n            // Since updating the index might change the nodes, do so before calling fixUpContinuousNodeArray\r\n            mapData.indexObservable(newMappingResultIndex++);\r\n            ko.utils.fixUpContinuousNodeArray(mapData.mappedNodes, domNode);\r\n            newMappingResult.push(mapData);\r\n            itemsToProcess.push(mapData);\r\n        }\r\n\r\n        function callCallback(callback, items) {\r\n            if (callback) {\r\n                for (var i = 0, n = items.length; i < n; i++) {\r\n                    if (items[i]) {\r\n                        ko.utils.arrayForEach(items[i].mappedNodes, function(node) {\r\n                            callback(node, i, items[i].arrayEntry);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (var i = 0, editScriptItem, movedIndex; editScriptItem = editScript[i]; i++) {\r\n            movedIndex = editScriptItem['moved'];\r\n            switch (editScriptItem['status']) {\r\n                case \"deleted\":\r\n                    if (movedIndex === undefined) {\r\n                        mapData = lastMappingResult[lastMappingResultIndex];\r\n\r\n                        // Stop tracking changes to the mapping for these nodes\r\n                        if (mapData.dependentObservable)\r\n                            mapData.dependentObservable.dispose();\r\n\r\n                        // Queue these nodes for later removal\r\n                        nodesToDelete.push.apply(nodesToDelete, ko.utils.fixUpContinuousNodeArray(mapData.mappedNodes, domNode));\r\n                        if (options['beforeRemove']) {\r\n                            itemsForBeforeRemoveCallbacks[i] = mapData;\r\n                            itemsToProcess.push(mapData);\r\n                        }\r\n                    }\r\n                    lastMappingResultIndex++;\r\n                    break;\r\n\r\n                case \"retained\":\r\n                    itemMovedOrRetained(i, lastMappingResultIndex++);\r\n                    break;\r\n\r\n                case \"added\":\r\n                    if (movedIndex !== undefined) {\r\n                        itemMovedOrRetained(i, movedIndex);\r\n                    } else {\r\n                        mapData = { arrayEntry: editScriptItem['value'], indexObservable: ko.observable(newMappingResultIndex++) };\r\n                        newMappingResult.push(mapData);\r\n                        itemsToProcess.push(mapData);\r\n                        if (!isFirstExecution)\r\n                            itemsForAfterAddCallbacks[i] = mapData;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // Call beforeMove first before any changes have been made to the DOM\r\n        callCallback(options['beforeMove'], itemsForMoveCallbacks);\r\n\r\n        // Next remove nodes for deleted items (or just clean if there's a beforeRemove callback)\r\n        ko.utils.arrayForEach(nodesToDelete, options['beforeRemove'] ? ko.cleanNode : ko.removeNode);\r\n\r\n        // Next add/reorder the remaining items (will include deleted items if there's a beforeRemove callback)\r\n        for (var i = 0, nextNode = ko.virtualElements.firstChild(domNode), lastNode, node; mapData = itemsToProcess[i]; i++) {\r\n            // Get nodes for newly added items\r\n            if (!mapData.mappedNodes)\r\n                ko.utils.extend(mapData, mapNodeAndRefreshWhenChanged(domNode, mapping, mapData.arrayEntry, callbackAfterAddingNodes, mapData.indexObservable));\r\n\r\n            // Put nodes in the right place if they aren't there already\r\n            for (var j = 0; node = mapData.mappedNodes[j]; nextNode = node.nextSibling, lastNode = node, j++) {\r\n                if (node !== nextNode)\r\n                    ko.virtualElements.insertAfter(domNode, node, lastNode);\r\n            }\r\n\r\n            // Run the callbacks for newly added nodes (for example, to apply bindings, etc.)\r\n            if (!mapData.initialized && callbackAfterAddingNodes) {\r\n                callbackAfterAddingNodes(mapData.arrayEntry, mapData.mappedNodes, mapData.indexObservable);\r\n                mapData.initialized = true;\r\n            }\r\n        }\r\n\r\n        // If there's a beforeRemove callback, call it after reordering.\r\n        // Note that we assume that the beforeRemove callback will usually be used to remove the nodes using\r\n        // some sort of animation, which is why we first reorder the nodes that will be removed. If the\r\n        // callback instead removes the nodes right away, it would be more efficient to skip reordering them.\r\n        // Perhaps we'll make that change in the future if this scenario becomes more common.\r\n        callCallback(options['beforeRemove'], itemsForBeforeRemoveCallbacks);\r\n\r\n        // Finally call afterMove and afterAdd callbacks\r\n        callCallback(options['afterMove'], itemsForMoveCallbacks);\r\n        callCallback(options['afterAdd'], itemsForAfterAddCallbacks);\r\n\r\n        // Store a copy of the array items we just considered so we can difference it next time\r\n        ko.utils.domData.set(domNode, lastMappingResultDomDataKey, newMappingResult);\r\n    }\r\n})();\r\n\r\nko.exportSymbol('utils.setDomNodeChildrenFromArrayMapping', ko.utils.setDomNodeChildrenFromArrayMapping);\r\nko.nativeTemplateEngine = function () {\r\n    this['allowTemplateRewriting'] = false;\r\n}\r\n\r\nko.nativeTemplateEngine.prototype = new ko.templateEngine();\r\nko.nativeTemplateEngine.prototype.constructor = ko.nativeTemplateEngine;\r\nko.nativeTemplateEngine.prototype['renderTemplateSource'] = function (templateSource, bindingContext, options, templateDocument) {\r\n    var useNodesIfAvailable = !(ko.utils.ieVersion < 9), // IE<9 cloneNode doesn't work properly\r\n        templateNodesFunc = useNodesIfAvailable ? templateSource['nodes'] : null,\r\n        templateNodes = templateNodesFunc ? templateSource['nodes']() : null;\r\n\r\n    if (templateNodes) {\r\n        return ko.utils.makeArray(templateNodes.cloneNode(true).childNodes);\r\n    } else {\r\n        var templateText = templateSource['text']();\r\n        return ko.utils.parseHtmlFragment(templateText, templateDocument);\r\n    }\r\n};\r\n\r\nko.nativeTemplateEngine.instance = new ko.nativeTemplateEngine();\r\nko.setTemplateEngine(ko.nativeTemplateEngine.instance);\r\n\r\nko.exportSymbol('nativeTemplateEngine', ko.nativeTemplateEngine);\r\n(function() {\r\n    ko.jqueryTmplTemplateEngine = function () {\r\n        // Detect which version of jquery-tmpl you're using. Unfortunately jquery-tmpl\r\n        // doesn't expose a version number, so we have to infer it.\r\n        // Note that as of Knockout 1.3, we only support jQuery.tmpl 1.0.0pre and later,\r\n        // which KO internally refers to as version \"2\", so older versions are no longer detected.\r\n        var jQueryTmplVersion = this.jQueryTmplVersion = (function() {\r\n            if (!jQueryInstance || !(jQueryInstance['tmpl']))\r\n                return 0;\r\n            // Since it exposes no official version number, we use our own numbering system. To be updated as jquery-tmpl evolves.\r\n            try {\r\n                if (jQueryInstance['tmpl']['tag']['tmpl']['open'].toString().indexOf('__') >= 0) {\r\n                    // Since 1.0.0pre, custom tags should append markup to an array called \"__\"\r\n                    return 2; // Final version of jquery.tmpl\r\n                }\r\n            } catch(ex) { /* Apparently not the version we were looking for */ }\r\n\r\n            return 1; // Any older version that we don't support\r\n        })();\r\n\r\n        function ensureHasReferencedJQueryTemplates() {\r\n            if (jQueryTmplVersion < 2)\r\n                throw new Error(\"Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.\");\r\n        }\r\n\r\n        function executeTemplate(compiledTemplate, data, jQueryTemplateOptions) {\r\n            return jQueryInstance['tmpl'](compiledTemplate, data, jQueryTemplateOptions);\r\n        }\r\n\r\n        this['renderTemplateSource'] = function(templateSource, bindingContext, options, templateDocument) {\r\n            templateDocument = templateDocument || document;\r\n            options = options || {};\r\n            ensureHasReferencedJQueryTemplates();\r\n\r\n            // Ensure we have stored a precompiled version of this template (don't want to reparse on every render)\r\n            var precompiled = templateSource['data']('precompiled');\r\n            if (!precompiled) {\r\n                var templateText = templateSource['text']() || \"\";\r\n                // Wrap in \"with($whatever.koBindingContext) { ... }\"\r\n                templateText = \"{{ko_with $item.koBindingContext}}\" + templateText + \"{{/ko_with}}\";\r\n\r\n                precompiled = jQueryInstance['template'](null, templateText);\r\n                templateSource['data']('precompiled', precompiled);\r\n            }\r\n\r\n            var data = [bindingContext['$data']]; // Prewrap the data in an array to stop jquery.tmpl from trying to unwrap any arrays\r\n            var jQueryTemplateOptions = jQueryInstance['extend']({ 'koBindingContext': bindingContext }, options['templateOptions']);\r\n\r\n            var resultNodes = executeTemplate(precompiled, data, jQueryTemplateOptions);\r\n            resultNodes['appendTo'](templateDocument.createElement(\"div\")); // Using \"appendTo\" forces jQuery/jQuery.tmpl to perform necessary cleanup work\r\n\r\n            jQueryInstance['fragments'] = {}; // Clear jQuery's fragment cache to avoid a memory leak after a large number of template renders\r\n            return resultNodes;\r\n        };\r\n\r\n        this['createJavaScriptEvaluatorBlock'] = function(script) {\r\n            return \"{{ko_code ((function() { return \" + script + \" })()) }}\";\r\n        };\r\n\r\n        this['addTemplate'] = function(templateName, templateMarkup) {\r\n            document.write(\"<script type='text/html' id='\" + templateName + \"'>\" + templateMarkup + \"<\" + \"/script>\");\r\n        };\r\n\r\n        if (jQueryTmplVersion > 0) {\r\n            jQueryInstance['tmpl']['tag']['ko_code'] = {\r\n                open: \"__.push($1 || '');\"\r\n            };\r\n            jQueryInstance['tmpl']['tag']['ko_with'] = {\r\n                open: \"with($1) {\",\r\n                close: \"} \"\r\n            };\r\n        }\r\n    };\r\n\r\n    ko.jqueryTmplTemplateEngine.prototype = new ko.templateEngine();\r\n    ko.jqueryTmplTemplateEngine.prototype.constructor = ko.jqueryTmplTemplateEngine;\r\n\r\n    // Use this one by default *only if jquery.tmpl is referenced*\r\n    var jqueryTmplTemplateEngineInstance = new ko.jqueryTmplTemplateEngine();\r\n    if (jqueryTmplTemplateEngineInstance.jQueryTmplVersion > 0)\r\n        ko.setTemplateEngine(jqueryTmplTemplateEngineInstance);\r\n\r\n    ko.exportSymbol('jqueryTmplTemplateEngine', ko.jqueryTmplTemplateEngine);\r\n})();\r\n}));\r\n}());\r\n})();\r\n","mage/validation.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint regexdash:true eqnull:true browser:true jquery:true*/\r\n(function (factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define([\r\n            'jquery',\r\n            'jquery/ui',\r\n            'jquery/validate',\r\n            'mage/translate'\r\n        ], factory);\r\n    } else {\r\n        factory(jQuery);\r\n    }\r\n}(function ($) {\r\n    \"use strict\";\r\n    $.extend(true, $, {\r\n        // @TODO: Move methods 'isEmpty', 'isEmptyNoTrim', 'parseNumber', 'stripHtml' in file with utility functions\r\n        mage: {\r\n            /**\r\n             * Check if string is empty with trim\r\n             * @param {string} value\r\n             */\r\n            isEmpty: function (value) {\r\n                return (value === '' || value === undefined || (value == null) || (value.length === 0) || /^\\s+$/.test(value));\r\n            },\r\n\r\n            /**\r\n             * Check if string is empty no trim\r\n             * @param {string} value\r\n             */\r\n            isEmptyNoTrim: function (value) {\r\n                return (value === '' || (value == null) || (value.length === 0));\r\n            },\r\n\r\n\r\n            /**\r\n             * Checks if {value} is between numbers {from} and {to}\r\n             * @param {string} value\r\n             * @param {string} from\r\n             * @param {string} to\r\n             * @returns {boolean}\r\n             */\r\n            isBetween: function (value, from, to) {\r\n                return ($.mage.isEmpty(from) || value >= $.mage.parseNumber(from)) &&\r\n                    ($.mage.isEmpty(to) || value <= $.mage.parseNumber(to));\r\n            },\r\n\r\n            /**\r\n             * Parse price string\r\n             * @param {string} value\r\n             */\r\n            parseNumber: function (value) {\r\n                if (typeof value !== 'string') {\r\n                    return parseFloat(value);\r\n                }\r\n                var isDot = value.indexOf('.');\r\n                var isComa = value.indexOf(',');\r\n                if (isDot !== -1 && isComa !== -1) {\r\n                    if (isComa > isDot) {\r\n                        value = value.replace('.', '').replace(',', '.');\r\n                    } else {\r\n                        value = value.replace(',', '');\r\n                    }\r\n                } else if (isComa !== -1) {\r\n                    value = value.replace(',', '.');\r\n                }\r\n                return parseFloat(value);\r\n            },\r\n\r\n            /**\r\n             * Removes HTML tags and space characters, numbers and punctuation.\r\n             * @param value Value being stripped.\r\n             * @return {*}\r\n             */\r\n            stripHtml: function (value) {\r\n                return value.replace(/<.[^<>]*?>/g, ' ').replace(/&nbsp;|&#160;/gi, ' ')\r\n                    .replace(/[0-9.(),;:!?%#$'\"_+=\\/-]*/g, '');\r\n            }\r\n        }\r\n    });\r\n\r\n    $.validator.addMethod = function (name, method, message, dontSkip) {\r\n        $.validator.methods[name] = method;\r\n        $.validator.messages[name] = message !== undefined ? message : $.validator.messages[name];\r\n\r\n        if (method.length < 3 || dontSkip) {\r\n            $.validator.addClassRules(name, $.validator.normalizeRule(name));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Javascript object with credit card types\r\n     * 0 - regexp for card number\r\n     * 1 - regexp for cvn\r\n     * 2 - check or not credit card number trough Luhn algorithm by\r\n     */\r\n    var creditCartTypes = {\r\n        'SO': [new RegExp('^(6334[5-9]([0-9]{11}|[0-9]{13,14}))|(6767([0-9]{12}|[0-9]{14,15}))$'), new RegExp('^([0-9]{3}|[0-9]{4})?$'), true],\r\n        'SM': [new RegExp('(^(5[0678])[0-9]{11,18}$)|(^(6[^05])[0-9]{11,18}$)|(^(601)[^1][0-9]{9,16}$)|(^(6011)[0-9]{9,11}$)|(^(6011)[0-9]{13,16}$)|(^(65)[0-9]{11,13}$)|(^(65)[0-9]{15,18}$)|(^(49030)[2-9]([0-9]{10}$|[0-9]{12,13}$))|(^(49033)[5-9]([0-9]{10}$|[0-9]{12,13}$))|(^(49110)[1-2]([0-9]{10}$|[0-9]{12,13}$))|(^(49117)[4-9]([0-9]{10}$|[0-9]{12,13}$))|(^(49118)[0-2]([0-9]{10}$|[0-9]{12,13}$))|(^(4936)([0-9]{12}$|[0-9]{14,15}$))'), new RegExp('^([0-9]{3}|[0-9]{4})?$'), true],\r\n        'VI': [new RegExp('^4[0-9]{12}([0-9]{3})?$'), new RegExp('^[0-9]{3}$'), true],\r\n        'MC': [new RegExp('^(?:5[1-5][0-9]{2}|222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}$'), new RegExp('^[0-9]{3}$'), true],\r\n        'AE': [new RegExp('^3[47][0-9]{13}$'), new RegExp('^[0-9]{4}$'), true],\r\n        'DI': [new RegExp('^(6011(0|[2-4]|74|7[7-9]|8[6-9]|9)|6(4[4-9]|5))\\\\d*$'), new RegExp('^[0-9]{3}$'), true],\r\n        'JCB': [new RegExp('^35(2[8-9]|[3-8])\\\\d*$'), new RegExp('^[0-9]{3}$'), true],\r\n        'DN': [new RegExp('^(3(0[0-5]|095|6|[8-9]))\\\\d*$'), new RegExp('^[0-9]{3}$'), true],\r\n        'UN': [new RegExp('^(622(1(2[6-9]|[3-9])|[3-8]|9([[0-1]|2[0-5]))|62[4-6]|628([2-8]))\\\\d*?$'), new RegExp('^[0-9]{3}$'), true],\r\n        'MI': [new RegExp('^(5(0|[6-9])|63|67(?!59|6770|6774))\\\\d*$'), new RegExp('^[0-9]{3}$'), true],\r\n        'MD': [new RegExp('^6759(?!24|38|40|6[3-9]|70|76)|676770|676774\\\\d*$'), new RegExp('^[0-9]{3}$'), true]\r\n    };\r\n\r\n    /**\r\n     * validate credit card number using mod10\r\n     * @param s\r\n     * @return {Boolean}\r\n     */\r\n    function validateCreditCard(s) {\r\n        // remove non-numerics\r\n        var v = \"0123456789\",\r\n            w = \"\", i, j, k, m, c, a, x;\r\n        for (i = 0; i < s.length; i++) {\r\n            x = s.charAt(i);\r\n            if (v.indexOf(x, 0) != -1)\r\n                w += x;\r\n        }\r\n        // validate number\r\n        j = w.length / 2;\r\n        k = Math.floor(j);\r\n        m = Math.ceil(j) - k;\r\n        c = 0;\r\n        for (i = 0; i < k; i++) {\r\n            a = w.charAt(i * 2 + m) * 2;\r\n            c += a > 9 ? Math.floor(a / 10 + a % 10) : a;\r\n        }\r\n        for (i = 0; i < k + m; i++) {\r\n            c += w.charAt(i * 2 + 1 - m) * 1;\r\n        }\r\n        return (c % 10 === 0);\r\n    }\r\n\r\n    /**\r\n     * validate all table required inputs at once, using single hidden input\r\n     * @param {String} value\r\n     * @param {HTMLElement} element\r\n     *\r\n     * @return {Boolean}\r\n     */\r\n    function tableSingleValidation(value, element) {\r\n        var empty = $(element).closest('table')\r\n            .find('input.required-option:visible')\r\n            .filter(function (i, el) {\r\n                return $.mage.isEmpty(el.value);\r\n            })\r\n            .length;\r\n        return empty === 0;\r\n    }\r\n\r\n    /**\r\n     * Collection of validation rules including rules from additional-methods.js\r\n     * @type {Object}\r\n     */\r\n    var rules = {\r\n        \"max-words\": [\r\n            function (value, element, params) {\r\n                return this.optional(element) || $.mage.stripHtml(value).match(/\\b\\w+\\b/g).length < params;\r\n            },\r\n            $.mage.__('Please enter {0} words or less.')\r\n        ],\r\n        \"min-words\": [\r\n            function (value, element, params) {\r\n                return this.optional(element) || $.mage.stripHtml(value).match(/\\b\\w+\\b/g).length >= params;\r\n            },\r\n            $.mage.__('Please enter at least {0} words.')\r\n        ],\r\n        \"range-words\": [\r\n            function (value, element, params) {\r\n                return this.optional(element) ||\r\n                    $.mage.stripHtml(value).match(/\\b\\w+\\b/g).length >= params[0] &&\r\n                    value.match(/bw+b/g).length < params[1];\r\n            },\r\n            $.mage.__('Please enter between {0} and {1} words.')\r\n        ],\r\n        \"letters-with-basic-punc\": [\r\n            function (value, element) {\r\n                return this.optional(element) || /^[a-z\\-.,()'\\\"\\s]+$/i.test(value);\r\n            },\r\n            $.mage.__('Letters or punctuation only please')\r\n        ],\r\n        \"alphanumeric\": [\r\n            function (value, element) {\r\n                return this.optional(element) || /^\\w+$/i.test(value);\r\n            },\r\n            $.mage.__('Letters, numbers, spaces or underscores only please')\r\n        ],\r\n        \"letters-only\": [\r\n            function (value, element) {\r\n                return this.optional(element) || /^[a-z]+$/i.test(value);\r\n            },\r\n            $.mage.__('Letters only please')\r\n        ],\r\n        \"no-whitespace\": [\r\n            function (value, element) {\r\n                return this.optional(element) || /^\\S+$/i.test(value);\r\n            },\r\n            $.mage.__('No white space please')\r\n        ],\r\n        \"zip-range\": [\r\n            function (value, element) {\r\n                return this.optional(element) || /^90[2-5]-\\d{2}-\\d{4}$/.test(value);\r\n            },\r\n            $.mage.__('Your ZIP-code must be in the range 902xx-xxxx to 905-xx-xxxx')\r\n        ],\r\n        \"integer\": [\r\n            function (value, element) {\r\n                return this.optional(element) || /^-?\\d+$/.test(value);\r\n            },\r\n            $.mage.__('A positive or negative non-decimal number please')\r\n        ],\r\n        \"vinUS\": [\r\n            function (v) {\r\n                if (v.length !== 17) {\r\n                    return false;\r\n                }\r\n                var i, n, d, f, cd, cdv;\r\n                var LL = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"P\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\r\n                var VL = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 7, 9, 2, 3, 4, 5, 6, 7, 8, 9];\r\n                var FL = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2];\r\n                var rs = 0;\r\n                for (i = 0; i < 17; i++) {\r\n                    f = FL[i];\r\n                    d = v.slice(i, i + 1);\r\n                    if (i === 8) {\r\n                        cdv = d;\r\n                    }\r\n                    if (!isNaN(d)) {\r\n                        d *= f;\r\n                    } else {\r\n                        for (n = 0; n < LL.length; n++) {\r\n                            if (d.toUpperCase() === LL[n]) {\r\n                                d = VL[n];\r\n                                d *= f;\r\n                                if (isNaN(cdv) && n === 8) {\r\n                                    cdv = LL[n];\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    rs += d;\r\n                }\r\n                cd = rs % 11;\r\n                if (cd === 10) {\r\n                    cd = \"X\";\r\n                }\r\n                if (cd === cdv) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            $.mage.__('The specified vehicle identification number (VIN) is invalid.')\r\n        ],\r\n        \"dateITA\": [\r\n            function (value, element) {\r\n                var check = false;\r\n                var re = /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/;\r\n                if (re.test(value)) {\r\n                    var adata = value.split('/');\r\n                    var gg = parseInt(adata[0], 10);\r\n                    var mm = parseInt(adata[1], 10);\r\n                    var aaaa = parseInt(adata[2], 10);\r\n                    var xdata = new Date(aaaa, mm - 1, gg);\r\n                    if ((xdata.getFullYear() === aaaa) &&\r\n                        (xdata.getMonth() === mm - 1) && (xdata.getDate() === gg )) {\r\n                        check = true;\r\n                    } else {\r\n                        check = false;\r\n                    }\r\n                } else {\r\n                    check = false;\r\n                }\r\n                return this.optional(element) || check;\r\n            },\r\n            $.mage.__('Please enter a correct date')\r\n        ],\r\n        \"dateNL\": [\r\n            function (value, element) {\r\n                return this.optional(element) || /^\\d\\d?[\\.\\/-]\\d\\d?[\\.\\/-]\\d\\d\\d?\\d?$/.test(value);\r\n            },\r\n            'Vul hier een geldige datum in.'\r\n        ],\r\n        \"time\": [\r\n            function (value, element) {\r\n                return this.optional(element) || /^([01]\\d|2[0-3])(:[0-5]\\d){0,2}$/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid time, between 00:00 and 23:59')\r\n        ],\r\n        \"time12h\": [\r\n            function (value, element) {\r\n                return this.optional(element) || /^((0?[1-9]|1[012])(:[0-5]\\d){0,2}(\\ [AP]M))$/i.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid time, between 00:00 am and 12:00 pm')\r\n        ],\r\n        \"phoneUS\": [\r\n            function (phone_number, element) {\r\n                phone_number = phone_number.replace(/\\s+/g, \"\");\r\n                return this.optional(element) || phone_number.length > 9 &&\r\n                    phone_number.match(/^(1-?)?(\\([2-9]\\d{2}\\)|[2-9]\\d{2})-?[2-9]\\d{2}-?\\d{4}$/);\r\n            },\r\n            $.mage.__('Please specify a valid phone number')\r\n        ],\r\n        \"phoneUK\": [\r\n            function (phone_number, element) {\r\n                return this.optional(element) || phone_number.length > 9 &&\r\n                    phone_number.match(/^(\\(?(0|\\+44)[1-9]{1}\\d{1,4}?\\)?\\s?\\d{3,4}\\s?\\d{3,4})$/);\r\n            },\r\n            $.mage.__('Please specify a valid phone number')\r\n        ],\r\n        \"mobileUK\": [\r\n            function (phone_number, element) {\r\n                return this.optional(element) || phone_number.length > 9 &&\r\n                    phone_number.match(/^((0|\\+44)7\\d{3}\\s?\\d{6})$/);\r\n            },\r\n            $.mage.__('Please specify a valid mobile number')\r\n        ],\r\n        \"stripped-min-length\": [\r\n            function (value, element, param) {\r\n                return $(value).text().length >= param;\r\n            },\r\n            $.mage.__('Please enter at least {0} characters')\r\n        ],\r\n        \"email2\": [\r\n            function (value, element) {\r\n                return this.optional(element) || /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)*(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?$/i.test(value);\r\n            },\r\n            $.validator.messages.email\r\n        ],\r\n        \"url2\": [\r\n            function (value, element) {\r\n                return this.optional(element) || /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)*(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i.test(value);\r\n            },\r\n            $.validator.messages.url\r\n        ],\r\n        \"credit-card-types\": [\r\n            function (value, element, param) {\r\n                if (/[^0-9-]+/.test(value)) {\r\n                    return false;\r\n                }\r\n                value = value.replace(/\\D/g, \"\");\r\n\r\n                var validTypes = 0x0000;\r\n\r\n                if (param.mastercard) {\r\n                    validTypes |= 0x0001;\r\n                }\r\n                if (param.visa) {\r\n                    validTypes |= 0x0002;\r\n                }\r\n                if (param.amex) {\r\n                    validTypes |= 0x0004;\r\n                }\r\n                if (param.dinersclub) {\r\n                    validTypes |= 0x0008;\r\n                }\r\n                if (param.enroute) {\r\n                    validTypes |= 0x0010;\r\n                }\r\n                if (param.discover) {\r\n                    validTypes |= 0x0020;\r\n                }\r\n                if (param.jcb) {\r\n                    validTypes |= 0x0040;\r\n                }\r\n                if (param.unknown) {\r\n                    validTypes |= 0x0080;\r\n                }\r\n                if (param.all) {\r\n                    validTypes = 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040 | 0x0080;\r\n                }\r\n                if (validTypes & 0x0001 && /^(51|52|53|54|55)/.test(value)) { //mastercard\r\n                    return value.length === 16;\r\n                }\r\n                if (validTypes & 0x0002 && /^(4)/.test(value)) { //visa\r\n                    return value.length === 16;\r\n                }\r\n                if (validTypes & 0x0004 && /^(34|37)/.test(value)) { //amex\r\n                    return value.length === 15;\r\n                }\r\n                if (validTypes & 0x0008 && /^(300|301|302|303|304|305|36|38)/.test(value)) { //dinersclub\r\n                    return value.length === 14;\r\n                }\r\n                if (validTypes & 0x0010 && /^(2014|2149)/.test(value)) { //enroute\r\n                    return value.length === 15;\r\n                }\r\n                if (validTypes & 0x0020 && /^(6011)/.test(value)) { //discover\r\n                    return value.length === 16;\r\n                }\r\n                if (validTypes & 0x0040 && /^(3)/.test(value)) { //jcb\r\n                    return value.length === 16;\r\n                }\r\n                if (validTypes & 0x0040 && /^(2131|1800)/.test(value)) { //jcb\r\n                    return value.length === 15;\r\n                }\r\n                if (validTypes & 0x0080) { //unknown\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            $.mage.__('Please enter a valid credit card number.')\r\n        ],\r\n        \"ipv4\": [\r\n            function (value, element) {\r\n                return this.optional(element) || /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/i.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid IP v4 address.')\r\n        ],\r\n        \"ipv6\": [\r\n            function (value, element) {\r\n                return this.optional(element) || /^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$/i.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid IP v6 address.')\r\n        ],\r\n        \"pattern\": [\r\n            function (value, element, param) {\r\n                return this.optional(element) || param.test(value);\r\n            },\r\n            $.mage.__('Invalid format.')\r\n        ],\r\n        \"allow-container-className\": [\r\n            function (element) {\r\n                if (element.type === 'radio' || element.type === 'checkbox') {\r\n                    return $(element).hasClass('change-container-classname');\r\n                }\r\n            },\r\n            ''\r\n        ],\r\n        \"validate-no-html-tags\": [\r\n            function (value) {\r\n                return !/<(\\/)?\\w+/.test(value);\r\n            },\r\n            $.mage.__('HTML tags are not allowed.')\r\n        ],\r\n        \"validate-select\": [\r\n            function (value) {\r\n                return ((value !== \"none\") && (value != null) && (value.length !== 0));\r\n            },\r\n            $.mage.__('Please select an option.')\r\n        ],\r\n        \"validate-no-empty\": [\r\n            function (value) {\r\n                return !$.mage.isEmpty(value);\r\n            },\r\n            $.mage.__('Empty Value.')\r\n        ],\r\n        \"validate-alphanum-with-spaces\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[a-zA-Z0-9 ]+$/.test(v);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9) or spaces only in this field.')\r\n        ],\r\n        \"validate-data\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[A-Za-z]+[A-Za-z0-9_]+$/.test(v);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9) or underscore (_) in this field, and the first character should be a letter.')\r\n        ],\r\n        \"validate-street\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[ \\w]{3,}([A-Za-z]\\.)?([ \\w]*\\#\\d+)?(\\r\\n| )[ \\w]{3,}/.test(v);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9), spaces and \"#\" in this field.')\r\n        ],\r\n        \"validate-phoneStrict\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^(\\()?\\d{3}(\\))?(-|\\s)?\\d{3}(-|\\s)\\d{4}$/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid phone number. For example (123) 456-7890 or 123-456-7890.')\r\n        ],\r\n        \"validate-phoneLax\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^((\\d[\\-. ]?)?((\\(\\d{3}\\))|\\d{3}))?[\\-. ]?\\d{3}[\\-. ]?\\d{4}$/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid phone number. For example (123) 456-7890 or 123-456-7890.')\r\n        ],\r\n        \"validate-fax\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^(\\()?\\d{3}(\\))?(-|\\s)?\\d{3}(-|\\s)\\d{4}$/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid fax number (Ex: 123-456-7890).')\r\n        ],\r\n        \"validate-email\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^([a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*@([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*\\.(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]){2,})$/i.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid email address (Ex: johndoe@domain.com).')\r\n        ],\r\n        \"validate-emailSender\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[\\S ]+$/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid email address (Ex: johndoe@domain.com).')\r\n        ],\r\n        \"validate-password\": [\r\n            function (v) {\r\n                if (v == null) {\r\n                    return false;\r\n                }\r\n                /*strip leading and trailing spaces*/\r\n                var pass = $.trim(v);\r\n                if (!pass.length) {\r\n                    return true;\r\n                }\r\n                return !(pass.length > 0 && pass.length < 6);\r\n            },\r\n            $.mage.__('Please enter 6 or more characters. Leading and trailing spaces will be ignored.')\r\n        ],\r\n        \"validate-admin-password\": [\r\n            function (v) {\r\n                if (v == null) {\r\n                    return false;\r\n                }\r\n                var pass = $.trim(v);\r\n                /*strip leading and trailing spaces*/\r\n                if (0 === pass.length) {\r\n                    return true;\r\n                }\r\n                if (!(/[a-z]/i.test(v)) || !(/[0-9]/.test(v))) {\r\n                    return false;\r\n                }\r\n                if (pass.length < 7) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter 7 or more characters, using both numeric and alphabetic.')\r\n        ],\r\n        \"validate-customer-password\": [\r\n            function (v, elm) {\r\n                var validator = this,\r\n                    length = 0,\r\n                    counter = 0;\r\n                var passwordMinLength = $(elm).data('password-min-length');\r\n                var passwordMinCharacterSets = $(elm).data('password-min-character-sets');\r\n                var pass = $.trim(v);\r\n                var result = pass.length >= passwordMinLength;\r\n                if (result == false) {\r\n                    /*eslint-disable max-len*/\r\n                    validator.passwordErrorMessage = $.mage.__('Minimum length of this field must be equal or greater than %1 symbols. Leading and trailing spaces will be ignored.').replace('%1', passwordMinLength);\r\n\r\n                    /*eslint-enable max-len*/\r\n                    return result;\r\n                }\r\n                if (pass.match(/\\d+/)) {\r\n                    counter ++;\r\n                }\r\n                if (pass.match(/[a-z]+/)) {\r\n                    counter ++;\r\n                }\r\n                if (pass.match(/[A-Z]+/)) {\r\n                    counter ++;\r\n                }\r\n                if (pass.match(/[^a-zA-Z0-9]+/)) {\r\n                    counter ++;\r\n                }\r\n                if (counter < passwordMinCharacterSets) {\r\n                    result = false;\r\n\r\n                    /*eslint-disable max-len*/\r\n                    validator.passwordErrorMessage = $.mage.__('Minimum of different classes of characters in password is %1. Classes of characters: Lower Case, Upper Case, Digits, Special Characters.').replace('%1', passwordMinCharacterSets);\r\n\r\n                    /*eslint-enable max-len*/\r\n                }\r\n                return result;\r\n            }, function () {\r\n                return this.passwordErrorMessage;\r\n            }\r\n        ],\r\n        \"validate-url\": [\r\n            function (v) {\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n                v = (v || '').replace(/^\\s+/, '').replace(/\\s+$/, '');\r\n                return (/^(http|https|ftp):\\/\\/(([A-Z0-9]([A-Z0-9_-]*[A-Z0-9]|))(\\.[A-Z0-9]([A-Z0-9_-]*[A-Z0-9]|))*)(:(\\d+))?(\\/[A-Z0-9~](([A-Z0-9_~-]|\\.)*[A-Z0-9~]|))*\\/?(.*)?$/i).test(v);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid URL. Protocol is required (http://, https:// or ftp://).')\r\n        ],\r\n        \"validate-clean-url\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^(http|https|ftp):\\/\\/(([A-Z0-9][A-Z0-9_-]*)(\\.[A-Z0-9][A-Z0-9_-]*)+.(com|org|net|dk|at|us|tv|info|uk|co.uk|biz|se)$)(:(\\d+))?\\/?/i.test(v) || /^(www)((\\.[A-Z0-9][A-Z0-9_-]*)+.(com|org|net|dk|at|us|tv|info|uk|co.uk|biz|se)$)(:(\\d+))?\\/?/i.test(v);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid URL. For example http://www.example.com or www.example.com.')\r\n        ],\r\n        \"validate-xml-identifier\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[A-Z][A-Z0-9_\\/-]*$/i.test(v);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid XML-identifier (Ex: something_1, block5, id-4).')\r\n        ],\r\n        \"validate-ssn\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^\\d{3}-?\\d{2}-?\\d{4}$/.test(v);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid social security number (Ex: 123-45-6789).')\r\n        ],\r\n        \"validate-zip-us\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /(^\\d{5}$)|(^\\d{5}-\\d{4}$)/.test(v);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid zip code (Ex: 90602 or 90602-1234).')\r\n        ],\r\n        \"validate-date-au\": [\r\n            function (v) {\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n                var regex = /^(\\d{2})\\/(\\d{2})\\/(\\d{4})$/;\r\n                if ($.mage.isEmpty(v) || !regex.test(v)) {\r\n                    return false;\r\n                }\r\n                var d = new Date(v.replace(regex, '$2/$1/$3'));\r\n                return parseInt(RegExp.$2, 10) === (1 + d.getMonth()) &&\r\n                    parseInt(RegExp.$1, 10) === d.getDate() &&\r\n                    parseInt(RegExp.$3, 10) === d.getFullYear();\r\n\r\n            },\r\n            $.mage.__('Please use this date format: dd/mm/yyyy. For example 17/03/2006 for the 17th of March, 2006.')\r\n        ],\r\n        \"validate-currency-dollar\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^\\$?\\-?([1-9]{1}[0-9]{0,2}(\\,[0-9]{3})*(\\.[0-9]{0,2})?|[1-9]{1}\\d*(\\.[0-9]{0,2})?|0(\\.[0-9]{0,2})?|(\\.[0-9]{1,2})?)$/.test(v);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid $ amount. For example $100.00.')\r\n        ],\r\n        \"validate-not-negative-number\": [\r\n            function (v) {\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n                v = $.mage.parseNumber(v);\r\n                return !isNaN(v) && v >= 0;\r\n\r\n            },\r\n            $.mage.__('Please enter a number 0 or greater in this field.')\r\n        ],\r\n        // validate-not-negative-number should be replaced in all places with this one and then removed\r\n        \"validate-zero-or-greater\": [\r\n            function (v) {\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n                v = $.mage.parseNumber(v);\r\n                return !isNaN(v) && v >= 0;\r\n\r\n            },\r\n            $.mage.__('Please enter a number 0 or greater in this field.')\r\n        ],\r\n        \"validate-greater-than-zero\": [\r\n            function (v) {\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n                v = $.mage.parseNumber(v);\r\n                return !isNaN(v) && v > 0;\r\n            },\r\n            $.mage.__('Please enter a number greater than 0 in this field.')\r\n        ],\r\n        \"validate-css-length\": [\r\n            function (v) {\r\n                if (v !== '') {\r\n                    return (/^[0-9]*\\.*[0-9]+(px|pc|pt|ex|em|mm|cm|in|%)?$/).test(v);\r\n                }\r\n                return true;\r\n            },\r\n            $.mage.__('Please input a valid CSS-length (Ex: 100px, 77pt, 20em, .5ex or 50%).')\r\n        ],\r\n        /** @description Additional methods */\r\n        \"validate-number\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || (!isNaN($.mage.parseNumber(v)) && /^\\s*-?\\d*(\\.\\d*)?\\s*$/.test(v));\r\n            },\r\n            $.mage.__('Please enter a valid number in this field.')\r\n        ],\r\n        \"required-number\": [\r\n            function (v) {\r\n                return !!v.length;\r\n            },\r\n            $.mage.__('Please enter a valid number in this field.')\r\n        ],\r\n        \"validate-number-range\": [\r\n            function (v, elm, param) {\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n\r\n                var numValue = $.mage.parseNumber(v);\r\n                if (isNaN(numValue)) {\r\n                    return false;\r\n                }\r\n\r\n                var dataAttrRange = /^(-?[\\d.,]+)?-(-?[\\d.,]+)?$/,\r\n                    classNameRange = /^number-range-(-?[\\d.,]+)?-(-?[\\d.,]+)?$/,\r\n                    result = true,\r\n                    range, m, classes, ii;\r\n\r\n                range = param;\r\n                if (typeof range === 'object') {\r\n                    m = dataAttrRange.exec(range);\r\n                    if (m) {\r\n                        result = result && $.mage.isBetween(numValue, m[1], m[2]);\r\n                    }\r\n                } else if (elm && elm.className) {\r\n                    classes = elm.className.split(\" \");\r\n                    ii = classes.length;\r\n\r\n                    while (ii--) {\r\n                        range = classes[ii];\r\n                        m = classNameRange.exec(range);\r\n                        if (m) {\r\n                            result = result && $.mage.isBetween(numValue, m[1], m[2]);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            },\r\n            $.mage.__('The value is not within the specified range.'),\r\n            true\r\n        ],\r\n        \"validate-digits\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || !/[^\\d]/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid number in this field.')\r\n        ],\r\n        \"validate-digits-range\": [\r\n            function (v, elm, param) {\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n\r\n                var numValue = $.mage.parseNumber(v);\r\n                if (isNaN(numValue)) {\r\n                    return false;\r\n                }\r\n\r\n                var dataAttrRange = /^(-?\\d+)?-(-?\\d+)?$/,\r\n                    classNameRange = /^digits-range-(-?\\d+)?-(-?\\d+)?$/,\r\n                    result = true,\r\n                    range, m, classes, ii;\r\n                range = param;\r\n\r\n                if (typeof range === 'object') {\r\n                    m = dataAttrRange.exec(range);\r\n                    if (m) {\r\n                        result = result && $.mage.isBetween(numValue, m[1], m[2]);\r\n                    }\r\n                } else if (elm && elm.className) {\r\n                    classes = elm.className.split(\" \");\r\n                    ii = classes.length;\r\n\r\n                    while (ii--) {\r\n                        range = classes[ii];\r\n                        m = classNameRange.exec(range);\r\n                        if (m) {\r\n                            result = result && $.mage.isBetween(numValue, m[1], m[2]);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            },\r\n            $.mage.__('The value is not within the specified range.'),\r\n            true\r\n        ],\r\n        'validate-range': [\r\n            function (v, elm) {\r\n                var minValue, maxValue;\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                } else if ($.validator.methods['validate-digits'] && $.validator.methods['validate-digits'](v)) {\r\n                    minValue = maxValue = $.mage.parseNumber(v);\r\n                } else {\r\n                    var ranges = /^(-?\\d+)?-(-?\\d+)?$/.exec(v);\r\n\r\n                    if (ranges) {\r\n                        minValue = $.mage.parseNumber(ranges[1]);\r\n                        maxValue = $.mage.parseNumber(ranges[2]);\r\n                        if (minValue > maxValue) {\r\n                            return false;\r\n                        }\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                }\r\n                var reRange = /^range-(-?\\d+)?-(-?\\d+)?$/,\r\n                    result = true;\r\n\r\n                var values = $(elm).prop('class').split(\" \");\r\n\r\n                for (var i = values.length - 1; i >= 0; i--) {\r\n                    var name = values[i];\r\n                    var validRange = reRange.exec(name);\r\n                    if (validRange) {\r\n                        var minValidRange = $.mage.parseNumber(validRange[1]);\r\n                        var maxValidRange = $.mage.parseNumber(validRange[2]);\r\n                        result = result &&\r\n                        (isNaN(minValidRange) || minValue >= minValidRange) &&\r\n                        (isNaN(maxValidRange) || maxValue <= maxValidRange);\r\n                    }\r\n                }\r\n                return result;\r\n            },\r\n            $.mage.__('The value is not within the specified range.')\r\n        ],\r\n        \"validate-alpha\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[a-zA-Z]+$/.test(v);\r\n            },\r\n            $.mage.__('Please use letters only (a-z or A-Z) in this field.')\r\n        ],\r\n        \"validate-code\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[a-z]+[a-z0-9_]+$/.test(v);\r\n            },\r\n            $.mage.__('Please use only letters (a-z), numbers (0-9) or underscore (_) in this field, and the first character should be a letter.')\r\n        ],\r\n        \"validate-alphanum\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[a-zA-Z0-9]+$/.test(v);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z) or numbers (0-9) in this field. No spaces or other characters are allowed.')\r\n        ],\r\n        \"validate-date\": [\r\n            function (v) {\r\n                var test = new Date(v);\r\n                return $.mage.isEmptyNoTrim(v) || !isNaN(test);\r\n            },\r\n            $.mage.__('Please enter a valid date.')\r\n\r\n        ],\r\n        \"validate-date-range\": [\r\n            function (v, elm) {\r\n                var m = /\\bdate-range-(\\w+)-(\\w+)\\b/.exec(elm.className);\r\n                if (!m || m[2] === 'to' || $.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n\r\n                var currentYear = new Date().getFullYear() + '';\r\n                var normalizedTime = function (v) {\r\n                    v = v.split(/[.\\/]/);\r\n                    if (v[2] && v[2].length < 4) {\r\n                        v[2] = currentYear.substr(0, v[2].length) + v[2];\r\n                    }\r\n                    return new Date(v.join('/')).getTime();\r\n                };\r\n\r\n                var dependentElements = $(elm.form).find('.validate-date-range.date-range-' + m[1] + '-to');\r\n                return !dependentElements.length || $.mage.isEmptyNoTrim(dependentElements[0].value) ||\r\n                    normalizedTime(v) <= normalizedTime(dependentElements[0].value);\r\n            },\r\n            $.mage.__('Make sure the To Date is later than or the same as the From Date.')\r\n        ],\r\n        \"validate-cpassword\": [\r\n            function () {\r\n                var conf = $('#confirmation').length > 0 ? $('#confirmation') : $($('.validate-cpassword')[0]);\r\n                var pass = false;\r\n                if ($('#password')) {\r\n                    pass = $('#password');\r\n                }\r\n                var passwordElements = $('.validate-password');\r\n                for (var i = 0; i < passwordElements.length; i++) {\r\n                    var passwordElement = $(passwordElements[i]);\r\n                    if (passwordElement.closest('form').attr('id') === conf.closest('form').attr('id')) {\r\n                        pass = passwordElement;\r\n                    }\r\n                }\r\n                if ($('.validate-admin-password').length) {\r\n                    pass = $($('.validate-admin-password')[0]);\r\n                }\r\n                return (pass.val() === conf.val());\r\n            },\r\n            $.mage.__('Please make sure your passwords match.')\r\n        ],\r\n        \"validate-identifier\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[a-z0-9][a-z0-9_\\/-]+(\\.[a-z0-9_-]+)?$/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid URL Key (Ex: \"example-page\", \"example-page.html\" or \"anotherlevel/example-page\").')\r\n        ],\r\n        \"validate-zip-international\": [\r\n            /*function(v) {\r\n             // @TODO: Cleanup\r\n             return Validation.get('IsEmpty').test(v) || /(^[A-z0-9]{2,10}([\\s]{0,1}|[\\-]{0,1})[A-z0-9]{2,10}$)/.test(v);\r\n             }*/\r\n            function () {\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter a valid zip code.')\r\n        ],\r\n        \"validate-one-required\": [\r\n            function (v, elm) {\r\n                var p = $(elm).parent();\r\n                var options = p.find('input');\r\n                return options.map(function (elm) {\r\n                        return $(elm).val();\r\n                    }).length > 0;\r\n            },\r\n            $.mage.__('Please select one of the options above.')\r\n        ],\r\n        \"validate-state\": [\r\n            function (v) {\r\n                return (v !== 0 || v === '');\r\n            },\r\n            $.mage.__('Please select State/Province.')\r\n        ],\r\n        \"required-file\": [\r\n            function (v, elm) {\r\n                var result = !$.mage.isEmptyNoTrim(v);\r\n                if (!result) {\r\n                    var ovId = $(elm).attr('id') + '_value';\r\n                    if ($(ovId)) {\r\n                        result = !$.mage.isEmptyNoTrim($(ovId).val());\r\n                    }\r\n                }\r\n                return result;\r\n            },\r\n            $.mage.__('Please select a file.')\r\n        ],\r\n        \"validate-ajax-error\": [\r\n            function (v, element) {\r\n                element = $(element);\r\n                element.on('change.ajaxError', function () {\r\n                    element.removeClass('validate-ajax-error');\r\n                    element.off('change.ajaxError');\r\n                });\r\n                return !element.hasClass('validate-ajax-error');\r\n            },\r\n            ''\r\n        ],\r\n        \"validate-optional-datetime\": [\r\n            function (v, elm, param) {\r\n                var dateTimeParts = $('.datetime-picker[id^=\"options_' + param + '\"]'),\r\n                    hasWithValue = false, hasWithNoValue = false,\r\n                    pattern = /day_part$/i;\r\n                for (var i = 0; i < dateTimeParts.length; i++) {\r\n                    if (!pattern.test($(dateTimeParts[i]).attr('id'))) {\r\n                        if ($(dateTimeParts[i]).val() === \"\") {\r\n                            hasWithValue = true;\r\n                        } else {\r\n                            hasWithNoValue = true;\r\n                        }\r\n                    }\r\n                }\r\n                return hasWithValue ^ hasWithNoValue;\r\n            },\r\n            $.mage.__('The field isn\\'t complete.')\r\n        ],\r\n        \"validate-required-datetime\": [\r\n            function (v, elm, param) {\r\n                var dateTimeParts = $('.datetime-picker[id^=\"options_' + param + '\"]');\r\n                for (var i = 0; i < dateTimeParts.length; i++) {\r\n                    if (dateTimeParts[i].value === \"\") {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            },\r\n            $.mage.__('This is a required field.')\r\n        ],\r\n        \"validate-one-required-by-name\": [\r\n            function (v, elm, selector) {\r\n                var name = elm.name.replace(/([\\\\\"])/g, '\\\\$1'),\r\n                    container = this.currentForm,\r\n                    selector = selector === true ? 'input[name=\"' + name + '\"]:checked' : selector;\r\n\r\n                return !!container.querySelectorAll(selector).length;\r\n            },\r\n            $.mage.__('Please select one of the options.')\r\n        ],\r\n        \"less-than-equals-to\": [\r\n            function (value, element, params) {\r\n                if ($.isNumeric($(params).val()) && $.isNumeric(value)) {\r\n                    this.lteToVal = $(params).val();\r\n                    return parseFloat(value) <= parseFloat($(params).val());\r\n                }\r\n                return true;\r\n            },\r\n            function () {\r\n                var message = $.mage.__('Please enter a value less than or equal to %s.');\r\n                return message.replace('%s', this.lteToVal);\r\n            }\r\n        ],\r\n        \"greater-than-equals-to\": [\r\n            function (value, element, params) {\r\n                if ($.isNumeric($(params).val()) && $.isNumeric(value)) {\r\n                    this.gteToVal = $(params).val();\r\n                    return parseFloat(value) >= parseFloat($(params).val());\r\n                }\r\n                return true;\r\n            },\r\n            function () {\r\n                var message = $.mage.__('Please enter a value greater than or equal to %s.');\r\n                return message.replace('%s', this.gteToVal);\r\n            }\r\n        ],\r\n        \"validate-emails\": [\r\n            function (value) {\r\n                if ($.mage.isEmpty(value)) {\r\n                    return true;\r\n                }\r\n                var valid_regexp = /^([a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*@([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*\\.(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]){2,})$/i,\r\n                    emails = value.split(/[\\s\\n\\,]+/g);\r\n                for (var i = 0; i < emails.length; i++) {\r\n                    if (!valid_regexp.test(emails[i].trim())) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            },\r\n            $.mage.__(\"Please enter valid email addresses, separated by commas. For example, johndoe@domain.com, johnsmith@domain.com.\")\r\n        ],\r\n\r\n        \"validate-cc-type-select\": [\r\n            /**\r\n             * Validate credit card type matches credit card number\r\n             * @param value - select credit card type\r\n             * @param element - element contains the select box for credit card types\r\n             * @param params - selector for credit card number\r\n             * @return {boolean}\r\n             */\r\n                function (value, element, params) {\r\n                if (value && params && creditCartTypes[value]) {\r\n                    return creditCartTypes[value][0].test($(params).val().replace(/\\s+/g, ''));\r\n                }\r\n                return false;\r\n            },\r\n            $.mage.__('Card type does not match credit card number.')\r\n        ],\r\n        \"validate-cc-number\": [\r\n            /**\r\n             * Validate credit card number based on mod 10\r\n             * @param value - credit card number\r\n             * @return {boolean}\r\n             */\r\n                function (value) {\r\n                if (value) {\r\n                    return validateCreditCard(value);\r\n                }\r\n                return false;\r\n            },\r\n            $.mage.__('Please enter a valid credit card number.')\r\n        ],\r\n        \"validate-cc-type\": [\r\n            /**\r\n             * Validate credit card number is for the correct credit card type\r\n             * @param value - credit card number\r\n             * @param element - element contains credit card number\r\n             * @param params - selector for credit card type\r\n             * @return {boolean}\r\n             */\r\n                function (value, element, params) {\r\n                if (value && params) {\r\n                    var ccType = $(params).val();\r\n                    value = value.replace(/\\s/g, '').replace(/\\-/g, '');\r\n                    if (creditCartTypes[ccType] && creditCartTypes[ccType][0]) {\r\n                        return creditCartTypes[ccType][0].test(value);\r\n                    } else if (creditCartTypes[ccType] && !creditCartTypes[ccType][0]) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            },\r\n            $.mage.__('Credit card number does not match credit card type.')\r\n        ],\r\n        \"validate-cc-exp\": [\r\n            /**\r\n             * Validate credit card expiration date, make sure it's within the year and not before current month\r\n             * @param value - month\r\n             * @param element - element contains month\r\n             * @param params - year selector\r\n             * @return {Boolean}\r\n             */\r\n                function (value, element, params) {\r\n                var isValid = false;\r\n                if (value && params) {\r\n                    var month = value,\r\n                        year = $(params).val(),\r\n                        currentTime = new Date(),\r\n                        currentMonth = currentTime.getMonth() + 1,\r\n                        currentYear = currentTime.getFullYear();\r\n                    isValid = !year || year > currentYear || (year == currentYear && month >= currentMonth);\r\n                }\r\n                return isValid;\r\n            },\r\n            $.mage.__('Incorrect credit card expiration date.')\r\n        ],\r\n        \"validate-cc-cvn\": [\r\n            /**\r\n             * Validate credit card cvn based on credit card type\r\n             * @param value - credit card cvn\r\n             * @param element - element contains credit card cvn\r\n             * @param params - credit card type selector\r\n             * @return {*}\r\n             */\r\n                function (value, element, params) {\r\n                if (value && params) {\r\n                    var ccType = $(params).val();\r\n                    if (creditCartTypes[ccType] && creditCartTypes[ccType][0]) {\r\n                        return creditCartTypes[ccType][1].test(value);\r\n                    }\r\n                }\r\n                return false;\r\n            },\r\n            $.mage.__('Please enter a valid credit card verification number.')\r\n        ],\r\n        \"validate-cc-ukss\": [\r\n            /**\r\n             * Validate Switch/Solo/Maestro issue number and start date is filled\r\n             * @param value - input field value\r\n             * @return {*}\r\n             */\r\n                function (value) {\r\n                return value;\r\n            },\r\n            $.mage.__('Please enter issue number or start date for switch/solo card type.')\r\n        ],\r\n\r\n        \"validate-length\": [\r\n            function (v, elm) {\r\n                var reMax = new RegExp(/^maximum-length-[0-9]+$/),\r\n                    reMin = new RegExp(/^minimum-length-[0-9]+$/),\r\n                    validator = this,\r\n                    result = true,\r\n                    length = 0;\r\n                $.each(elm.className.split(' '), function (index, name) {\r\n                    if (name.match(reMax) && result) {\r\n                        length = name.split('-')[2];\r\n                        validator.attrLength = length;\r\n                        result = (v.length <= length);\r\n                    }\r\n                    if (name.match(reMin) && result && $.mage.isEmpty(v)) {\r\n                        length = name.split('-')[2];\r\n                        result = v.length >= length;\r\n                    }\r\n                });\r\n                return result;\r\n            }, function () {\r\n                return $.mage.__(\"Maximum length of this field must be equal or less than %1 symbols.\")\r\n                    .replace('%1', this.attrLength);\r\n            }\r\n        ],\r\n        'required-entry': [\r\n            function (value) {\r\n                return !$.mage.isEmpty(value);\r\n            }, $.mage.__('This is a required field.')\r\n        ],\r\n        'not-negative-amount': [\r\n            function (v) {\r\n                if (v.length)\r\n                    return (/^\\s*\\d+([,.]\\d+)*\\s*%?\\s*$/).test(v);\r\n                else\r\n                    return true;\r\n            },\r\n            $.mage.__('Please enter positive number in this field.')\r\n        ],\r\n        'validate-per-page-value-list': [\r\n            function (v) {\r\n                var isValid = !$.mage.isEmpty(v);\r\n                var values = v.split(',');\r\n                for (var i = 0; i < values.length; i++) {\r\n                    if (!/^[0-9]+$/.test(values[i])) {\r\n                        isValid = false;\r\n                    }\r\n                }\r\n                return isValid;\r\n            },\r\n            $.mage.__('Please enter a valid value, ex: 10,20,30')\r\n        ],\r\n        'validate-per-page-value': [\r\n            function (v, elm) {\r\n                if ($.mage.isEmpty(v)) {\r\n                    return false;\r\n                }\r\n                var values = $('#' + elm.id + '_values').val().split(',');\r\n                return values.indexOf(v) != -1;\r\n            },\r\n            $.mage.__('Please enter a valid value from list')\r\n        ],\r\n        'validate-new-password': [\r\n            function (v) {\r\n\r\n                if ($.validator.methods['validate-password'] && !$.validator.methods['validate-password'](v)) {\r\n                    return false;\r\n                }\r\n                if ($.mage.isEmpty(v) && v !== '') {\r\n                    return false;\r\n                }\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter 6 or more characters. Leading and trailing spaces will be ignored.')\r\n        ],\r\n        'required-if-not-specified': [\r\n            function (value, element, params) {\r\n                var valid = false;\r\n\r\n                // if there is an alternate, determine its validity\r\n                var alternate = $(params);\r\n                if (alternate.length > 0) {\r\n                    valid = this.check(alternate);\r\n                    // if valid, it may be blank, so check for that\r\n                    if (valid) {\r\n                        var alternateValue = alternate.val();\r\n                        if (typeof alternateValue == 'undefined' || alternateValue.length === 0) {\r\n                            valid = false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!valid)\r\n                    valid = !this.optional(element);\r\n\r\n                return valid;\r\n            },\r\n            $.mage.__('This is a required field.')\r\n        ],\r\n        'required-if-all-sku-empty-and-file-not-loaded': [\r\n            function (value, element, params) {\r\n                var valid = false;\r\n                var alternate = $(params.specifiedId);\r\n\r\n                if (alternate.length > 0) {\r\n                    valid = this.check(alternate);\r\n                    // if valid, it may be blank, so check for that\r\n                    if (valid) {\r\n                        var alternateValue = alternate.val();\r\n                        if (typeof alternateValue == 'undefined' || alternateValue.length === 0) {\r\n                            valid = false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!valid)\r\n                    valid = !this.optional(element);\r\n\r\n                $('input[' + params.dataSku + '=true]').each(function () {\r\n                    if ($(this).val() !== '') {\r\n                        valid = true;\r\n                    }\r\n                });\r\n\r\n                return valid;\r\n            },\r\n            $.mage.__('Please enter valid SKU key.')\r\n        ],\r\n        'required-if-specified': [\r\n            function (value, element, params) {\r\n                var valid = true;\r\n\r\n                // if there is an dependent, determine its validity\r\n                var dependent = $(params);\r\n                if (dependent.length > 0) {\r\n                    valid = this.check(dependent);\r\n                    // if valid, it may be blank, so check for that\r\n                    if (valid) {\r\n                        var dependentValue = dependent.val();\r\n                        valid = typeof dependentValue != 'undefined' && dependentValue.length > 0;\r\n                    }\r\n                }\r\n\r\n                if (valid) {\r\n                    valid = !this.optional(element);\r\n                } else {\r\n                    valid = true; // dependent was not valid, so don't even check\r\n                }\r\n\r\n                return valid;\r\n            },\r\n            $.mage.__('This is a required field.')\r\n        ],\r\n        'required-number-if-specified': [\r\n            function (value, element, params) {\r\n                var valid = true,\r\n                    dependent = $(params),\r\n                    depeValue;\r\n\r\n                if (dependent.length) {\r\n                    valid = this.check(dependent);\r\n\r\n                    if (valid) {\r\n                        depeValue = dependent[0].value;\r\n                        valid = !!(depeValue && depeValue.length);\r\n                    }\r\n                }\r\n\r\n                return valid ? !!value.length : true;\r\n            },\r\n            $.mage.__('Please enter a valid number.')\r\n        ],\r\n        'datetime-validation': [\r\n            function (value, element) {\r\n                var isValid = true;\r\n\r\n                if ($(element).val().length === 0) {\r\n                    isValid = false;\r\n                    $(element).addClass('mage-error');\r\n                }\r\n\r\n                return isValid;\r\n            },\r\n            $.mage.__('This is required field')\r\n        ],\r\n        'required-text-swatch-entry': [\r\n            tableSingleValidation,\r\n            $.mage.__('Admin is a required field in the each row.')\r\n        ],\r\n        'required-visual-swatch-entry': [\r\n            tableSingleValidation,\r\n            $.mage.__('Admin is a required field in the each row.')\r\n        ],\r\n        'required-dropdown-attribute-entry': [\r\n            tableSingleValidation,\r\n            $.mage.__('Admin is a required field in the each row.')\r\n        ],\r\n        'validate-item-quantity': [\r\n            function (value, element, params) {\r\n                // obtain values for validation\r\n                var qty = $.mage.parseNumber(value);\r\n\r\n                // validate quantity\r\n                var isMinAllowedValid = typeof params.minAllowed === 'undefined' || (qty >= $.mage.parseNumber(params.minAllowed));\r\n                var isMaxAllowedValid = typeof params.maxAllowed === 'undefined' || (qty <= $.mage.parseNumber(params.maxAllowed));\r\n                var isQtyIncrementsValid = typeof params.qtyIncrements === 'undefined' || (qty % $.mage.parseNumber(params.qtyIncrements) === 0);\r\n\r\n                return isMaxAllowedValid && isMinAllowedValid && isQtyIncrementsValid && qty > 0;\r\n            },\r\n            ''\r\n        ]\r\n    };\r\n\r\n    $.each(rules, function (i, rule) {\r\n        rule.unshift(i);\r\n        $.validator.addMethod.apply($.validator, rule);\r\n    });\r\n    $.validator.addClassRules({\r\n        \"required-option\": {\r\n            required: true\r\n        },\r\n        \"required-options-count\": {\r\n            required: true\r\n        },\r\n        \"validate-both-passwords\": {\r\n            'validate-cpassword': true\r\n        }\r\n    });\r\n    $.validator.messages = $.extend($.validator.messages, {\r\n        required: $.mage.__('This is a required field.'),\r\n        remote: $.mage.__('Please fix this field.'),\r\n        email: $.mage.__('Please enter a valid email address.'),\r\n        url: $.mage.__('Please enter a valid URL.'),\r\n        date: $.mage.__('Please enter a valid date.'),\r\n        dateISO: $.mage.__('Please enter a valid date (ISO).'),\r\n        number: $.mage.__('Please enter a valid number.'),\r\n        digits: $.mage.__('Please enter only digits.'),\r\n        creditcard: $.mage.__('Please enter a valid credit card number.'),\r\n        equalTo: $.mage.__('Please enter the same value again.'),\r\n        maxlength: $.validator.format($.mage.__('Please enter no more than {0} characters.')),\r\n        minlength: $.validator.format($.mage.__('Please enter at least {0} characters.')),\r\n        rangelength: $.validator.format($.mage.__('Please enter a value between {0} and {1} characters long.')),\r\n        range: $.validator.format($.mage.__('Please enter a value between {0} and {1}.')),\r\n        max: $.validator.format($.mage.__('Please enter a value less than or equal to {0}.')),\r\n        min: $.validator.format($.mage.__('Please enter a value greater than or equal to {0}.'))\r\n    });\r\n\r\n    if ($.metadata) {\r\n        // Setting the type as html5 to enable data-validate attribute\r\n        $.metadata.setType(\"html5\");\r\n    }\r\n\r\n    var showLabel = $.validator.prototype.showLabel;\r\n    $.extend(true, $.validator.prototype, {\r\n        showLabel: function (element, message) {\r\n            showLabel.call(this, element, message);\r\n\r\n            // ARIA (adding aria-invalid & aria-describedby)\r\n            var label = this.errorsFor(element),\r\n                elem = $(element);\r\n\r\n            if (!label.attr('id')) {\r\n                label.attr('id', this.idOrName(element) + '-error');\r\n            }\r\n            elem.attr('aria-invalid', 'true')\r\n                .attr('aria-describedby', label.attr('id'));\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Validate form field without instantiating validate plug-in\r\n     * @param {Element||String} element - DOM element or selector\r\n     * @return {Boolean} validation result\r\n     */\r\n    $.validator.validateElement = function (element) {\r\n        element = $(element);\r\n        var form = element.get(0).form,\r\n            validator = form ? $(form).data('validator') : null;\r\n        if (validator) {\r\n            return validator.element(element.get(0));\r\n        } else {\r\n            var valid = true,\r\n                classes = element.prop('class').split(' ');\r\n            $.each(classes, $.proxy(function (i, className) {\r\n                if (this.methods[className] && !this.methods[className](element.val(), element.get(0))) {\r\n                    valid = false;\r\n                    return valid;\r\n                }\r\n            }, this));\r\n            return valid;\r\n        }\r\n    };\r\n\r\n    var originValidateDelegate = $.fn.validateDelegate;\r\n\r\n    $.fn.validateDelegate = function () {\r\n        if (!this[0].form) {\r\n            return this;\r\n        }\r\n\r\n        return originValidateDelegate.apply(this, arguments);\r\n    };\r\n\r\n    /**\r\n     * Validate single element.\r\n     *\r\n     * @param {Element} element\r\n     * @param {Object} config\r\n     * @returns {*}\r\n     */\r\n    $.validator.validateSingleElement = function (element, config) {\r\n        var errors = {},\r\n            valid = true,\r\n            validateConfig = {\r\n                errorElement: 'label',\r\n                ignore: '.ignore-validate'\r\n            },\r\n            form, validator, classes, elementValue;\r\n\r\n        $.extend(validateConfig, config);\r\n        element = $(element).not(validateConfig.ignore);\r\n\r\n        if (!element.length) {\r\n            return true;\r\n        }\r\n\r\n        form = element.get(0).form;\r\n        validator = form ? $(form).data('validator') : null;\r\n\r\n        if (validator) {\r\n            return validator.element(element.get(0));\r\n        }\r\n\r\n        classes = element.prop('class').split(' ');\r\n        validator = element.parent().data('validator') ||\r\n            $.mage.validation(validateConfig, element.parent()).validate;\r\n\r\n        element.removeClass(validator.settings.errorClass);\r\n        validator.toHide = validator.toShow;\r\n        validator.hideErrors();\r\n        validator.toShow = validator.toHide = $([]);\r\n\r\n        $.each(classes, $.proxy(function (i, className) {\r\n            elementValue = element.val();\r\n            if (element.is(':checkbox') || element.is(':radio')) {\r\n                elementValue = element.is(':checked') || null;\r\n            }\r\n            if (this.methods[className] && !this.methods[className](elementValue, element.get(0))) {\r\n                valid = false;\r\n                errors[element.get(0).name] = this.messages[className];\r\n                validator.invalid[element.get(0).name] = true;\r\n                validator.showErrors(errors);\r\n\r\n                return valid;\r\n            }\r\n        }, this));\r\n\r\n        return valid;\r\n    };\r\n\r\n    $.widget(\"mage.validation\", {\r\n        options: {\r\n            meta: \"validate\",\r\n            onfocusout: false,\r\n            onkeyup: false,\r\n            onclick: false,\r\n            ignoreTitle: true,\r\n            errorClass: 'mage-error',\r\n            errorElement: 'div',\r\n            errorPlacement: function (error, element) {\r\n                var errorPlacement = element;\r\n                // logic for date-picker error placement\r\n                if (element.hasClass('hasDatepicker')) {\r\n                    errorPlacement = element.siblings('img');\r\n                }\r\n                // logic for field wrapper\r\n                var fieldWrapper = element.closest('.addon');\r\n                if (fieldWrapper.length) {\r\n                    errorPlacement = fieldWrapper.after(error);\r\n                }\r\n                //logic for checkboxes/radio\r\n                if (element.is(':checkbox') || element.is(':radio')) {\r\n                    errorPlacement = element.siblings('label').last();\r\n                }\r\n                errorPlacement.after(error);\r\n            }\r\n        },\r\n        /**\r\n         * Check if form pass validation rules without submit\r\n         * @return boolean\r\n         */\r\n        isValid: function () {\r\n            return this.element.valid();\r\n        },\r\n\r\n        /**\r\n         * Remove validation error messages\r\n         */\r\n        clearError: function () {\r\n            if (arguments.length) {\r\n                $.each(arguments, $.proxy(function (index, item) {\r\n                    this.validate.prepareElement(item);\r\n                    this.validate.hideErrors();\r\n                }, this));\r\n            } else {\r\n                this.validate.resetForm();\r\n            }\r\n        },\r\n        /**\r\n         * Validation creation\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this.validate = this.element.validate(this.options);\r\n\r\n            // ARIA (adding aria-required attribute)\r\n            this.element\r\n                .find('.field.required')\r\n                .find('.control')\r\n                .find('input, select, textarea')\r\n                .attr('aria-required', 'true');\r\n\r\n            this._listenFormValidate();\r\n        },\r\n        /**\r\n         * Validation listening\r\n         * @protected\r\n         */\r\n        _listenFormValidate: function () {\r\n            $('form').on('invalid-form.validate', function (event, validation) {\r\n                var firstActive = $(validation.errorList[0].element || []),\r\n                    lastActive = $(validation.findLastActive() || validation.errorList.length && validation.errorList[0].element || []);\r\n\r\n                if (lastActive.is(':hidden')) {\r\n                    var parent = lastActive.parent();\r\n                    var windowHeight = $(window).height();\r\n                    $('html, body').animate({\r\n                        scrollTop: parent.offset().top - windowHeight / 2\r\n                    });\r\n                }\r\n\r\n                // ARIA (removing aria attributes if success)\r\n                var successList = validation.successList;\r\n                if (successList.length) {\r\n                    $.each(successList, function () {\r\n                        $(this)\r\n                            .removeAttr('aria-describedby')\r\n                            .removeAttr('aria-invalid');\r\n                    })\r\n                }\r\n                if (firstActive.length) {\r\n                    firstActive.focus();\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.validation;\r\n}));\r\n","mage/adminhtml/form.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    \"jquery\",\r\n    \"prototype\",\r\n    \"mage/adminhtml/events\"\r\n], function(jQuery){\r\n/*\r\n * @TODO Need to be removed after refactoring all dependent of the form the components\r\n */\r\n(function($) {\r\n    $(document).ready(function() {\r\n        $(document).on(\"beforeSubmit\", function(e) {\r\n            if (typeof varienGlobalEvents !== 'undefined') {\r\n                varienGlobalEvents.fireEvent(\"formSubmit\", $(e.target).attr('id'));\r\n            }\r\n        });\r\n    });\r\n})(jQuery);\r\n\r\n\r\n/**\r\n *  Additional elements methods\r\n */\r\nvar varienElementMethods = {\r\n    setHasChanges : function(element, event){\r\n        if($(element) && $(element).hasClassName('no-changes')) return;\r\n        var elm = element;\r\n        while(elm && elm.tagName != 'BODY') {\r\n            if(elm.statusBar)\r\n                Element.addClassName($(elm.statusBar), 'changed')\r\n            elm = elm.parentNode;\r\n        }\r\n    },\r\n    setHasError : function(element, flag, form){\r\n        var elm = element;\r\n        while(elm && elm.tagName != 'BODY') {\r\n            if(elm.statusBar){\r\n                if(form.errorSections.keys().indexOf(elm.statusBar.id)<0)\r\n                    form.errorSections.set(elm.statusBar.id, flag);\r\n                if(flag){\r\n                    Element.addClassName($(elm.statusBar), 'error');\r\n                    if(form.canShowError && $(elm.statusBar).show){\r\n                        form.canShowError = false;\r\n                        $(elm.statusBar).show();\r\n                    }\r\n                    form.errorSections.set(elm.statusBar.id, flag);\r\n                }\r\n                else if(!form.errorSections.get(elm.statusBar.id)){\r\n                    Element.removeClassName($(elm.statusBar), 'error')\r\n                }\r\n            }\r\n            elm = elm.parentNode;\r\n        }\r\n        this.canShowElement = false;\r\n    }\r\n}\r\n\r\nElement.addMethods(varienElementMethods);\r\n\r\n// Global bind changes\r\nvarienWindowOnloadCache = {};\r\nfunction varienWindowOnload(useCache){\r\n    var dataElements = $$('input', 'select', 'textarea');\r\n    for(var i=0; i<dataElements.length;i++){\r\n        if(dataElements[i] && dataElements[i].id){\r\n            if ((!useCache) || (!varienWindowOnloadCache[dataElements[i].id])) {\r\n                Event.observe(dataElements[i], 'change', dataElements[i].setHasChanges.bind(dataElements[i]));\r\n                if (useCache) {\r\n                    varienWindowOnloadCache[dataElements[i].id] = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nEvent.observe(window, 'load', varienWindowOnload);\r\n\r\nRegionUpdater = Class.create();\r\nRegionUpdater.prototype = {\r\n    initialize: function (countryEl, regionTextEl, regionSelectEl, regions, disableAction, clearRegionValueOnDisable)\r\n    {\r\n        this.isRegionRequired = true;\r\n        this.countryEl = $(countryEl);\r\n        this.regionTextEl = $(regionTextEl);\r\n        this.regionSelectEl = $(regionSelectEl);\r\n        this.config = regions['config'];\r\n        delete regions.config;\r\n        this.regions = regions;\r\n        this.disableAction = (typeof disableAction=='undefined') ? 'hide' : disableAction;\r\n        this.clearRegionValueOnDisable = (typeof clearRegionValueOnDisable == 'undefined') ? false : clearRegionValueOnDisable;\r\n\r\n        if (this.regionSelectEl.options.length<=1) {\r\n            this.update();\r\n        }\r\n        else {\r\n            this.lastCountryId = this.countryEl.value;\r\n        }\r\n\r\n        this.countryEl.changeUpdater = this.update.bind(this);\r\n\r\n        Event.observe(this.countryEl, 'change', this.update.bind(this));\r\n    },\r\n\r\n    _checkRegionRequired: function()\r\n    {\r\n        if (!this.isRegionRequired) {\r\n            return;\r\n        }\r\n\r\n        var label, wildCard;\r\n        var elements = [this.regionTextEl, this.regionSelectEl];\r\n        var that = this;\r\n        if (typeof this.config == 'undefined') {\r\n            return;\r\n        }\r\n        var regionRequired = this.config.regions_required.indexOf(this.countryEl.value) >= 0;\r\n\r\n        elements.each(function(currentElement) {\r\n            if(!currentElement) {\r\n                return;\r\n            }\r\n            var form = currentElement.form,\r\n                validationInstance = form ? jQuery(form).data('validation') : null,\r\n                field = currentElement.up('.field') || new Element('div');\r\n\r\n            if (validationInstance) {\r\n                validationInstance.clearError(currentElement);\r\n            }\r\n            label = $$('label[for=\"' + currentElement.id + '\"]')[0];\r\n            if (label) {\r\n                wildCard = label.down('em') || label.down('span.required');\r\n                var topElement = label.up('tr') || label.up('li');\r\n                if (!that.config.show_all_regions && topElement) {\r\n                    if (regionRequired) {\r\n                        topElement.show();\r\n                    } else {\r\n                        topElement.hide();\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (label && wildCard) {\r\n                if (!regionRequired) {\r\n                    wildCard.hide();\r\n                } else {\r\n                    wildCard.show();\r\n                }\r\n            }\r\n\r\n            //compute the need for the required fields\r\n            if (!regionRequired || !currentElement.visible()) {\r\n                if (field.hasClassName('required')) {\r\n                    field.removeClassName('required');\r\n                }\r\n                if (currentElement.hasClassName('required-entry')) {\r\n                    currentElement.removeClassName('required-entry');\r\n                }\r\n                if ('select' == currentElement.tagName.toLowerCase() &&\r\n                    currentElement.hasClassName('validate-select')\r\n                ) {\r\n                    currentElement.removeClassName('validate-select');\r\n                }\r\n            } else {\r\n                if (!field.hasClassName('required')) {\r\n                    field.addClassName('required');\r\n                }\r\n                if (!currentElement.hasClassName('required-entry')) {\r\n                    currentElement.addClassName('required-entry');\r\n                }\r\n                if ('select' == currentElement.tagName.toLowerCase() &&\r\n                    !currentElement.hasClassName('validate-select')\r\n                ) {\r\n                    currentElement.addClassName('validate-select');\r\n                }\r\n            }\r\n        });\r\n    },\r\n\r\n    disableRegionValidation: function()\r\n    {\r\n        this.isRegionRequired = false;\r\n    },\r\n\r\n    update: function()\r\n    {\r\n        if (this.regions[this.countryEl.value]) {\r\n\r\n            if (this.lastCountryId!=this.countryEl.value) {\r\n                var i, option, region, def;\r\n\r\n                def = this.regionSelectEl.getAttribute('defaultValue');\r\n                if (this.regionTextEl) {\r\n                    if (!def) {\r\n                        def = this.regionTextEl.value.toLowerCase();\r\n                    }\r\n                    this.regionTextEl.value = '';\r\n                }\r\n\r\n                this.regionSelectEl.options.length = 1;\r\n                for (regionId in this.regions[this.countryEl.value]) {\r\n                    region = this.regions[this.countryEl.value][regionId];\r\n\r\n                    option = document.createElement('OPTION');\r\n                    option.value = regionId;\r\n                    option.text = region.name.stripTags();\r\n                    option.title = region.name;\r\n\r\n                    if (this.regionSelectEl.options.add) {\r\n                        this.regionSelectEl.options.add(option);\r\n                    } else {\r\n                        this.regionSelectEl.appendChild(option);\r\n                    }\r\n\r\n                    if (regionId==def || region.name.toLowerCase()==def || region.code.toLowerCase()==def) {\r\n                        this.regionSelectEl.value = regionId;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.disableAction=='hide') {\r\n                if (this.regionTextEl) {\r\n                    this.regionTextEl.style.display = 'none';\r\n                    this.regionTextEl.style.disabled = true;\r\n                }\r\n                this.regionSelectEl.style.display = '';\r\n                this.regionSelectEl.disabled = false;\r\n            } else if (this.disableAction=='disable') {\r\n                if (this.regionTextEl) {\r\n                    this.regionTextEl.disabled = true;\r\n                }\r\n                this.regionSelectEl.disabled = false;\r\n            }\r\n            this.setMarkDisplay(this.regionSelectEl, true);\r\n\r\n            this.lastCountryId = this.countryEl.value;\r\n        } else {\r\n            if (this.disableAction=='hide') {\r\n                if (this.regionTextEl) {\r\n                    this.regionTextEl.style.display = '';\r\n                    this.regionTextEl.style.disabled = false;\r\n                }\r\n                this.regionSelectEl.style.display = 'none';\r\n                this.regionSelectEl.disabled = true;\r\n            } else if (this.disableAction=='disable') {\r\n                if (this.regionTextEl) {\r\n                    this.regionTextEl.disabled = false;\r\n                }\r\n                this.regionSelectEl.disabled = true;\r\n                if (this.clearRegionValueOnDisable) {\r\n                    this.regionSelectEl.value = '';\r\n                }\r\n            } else if (this.disableAction=='nullify') {\r\n                this.regionSelectEl.options.length = 1;\r\n                this.regionSelectEl.value = '';\r\n                this.regionSelectEl.selectedIndex = 0;\r\n                this.lastCountryId = '';\r\n            }\r\n            this.setMarkDisplay(this.regionSelectEl, false);\r\n\r\n//            // clone required stuff from select element and then remove it\r\n//            this._regionSelectEl.className = this.regionSelectEl.className;\r\n//            this._regionSelectEl.name      = this.regionSelectEl.name;\r\n//            this._regionSelectEl.id        = this.regionSelectEl.id;\r\n//            this._regionSelectEl.innerHTML = this.regionSelectEl.innerHTML;\r\n//            Element.remove(this.regionSelectEl);\r\n//            this.regionSelectEl = null;\r\n        }\r\n        varienGlobalEvents.fireEvent(\"address_country_changed\", this.countryEl);\r\n        this._checkRegionRequired();\r\n    },\r\n\r\n    setMarkDisplay: function(elem, display){\r\n        if(elem.parentNode.parentNode){\r\n            var marks = Element.select(elem.parentNode.parentNode, '.required');\r\n            if(marks[0]){\r\n                display ? marks[0].show() : marks[0].hide();\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nregionUpdater = RegionUpdater;\r\n\r\n/**\r\n * Fix errorrs in IE\r\n */\r\nEvent.pointerX = function(event){\r\n    try{\r\n        return event.pageX || (event.clientX +(document.documentElement.scrollLeft || document.body.scrollLeft));\r\n    }\r\n    catch(e){\r\n\r\n    }\r\n}\r\nEvent.pointerY = function(event){\r\n    try{\r\n        return event.pageY || (event.clientY +(document.documentElement.scrollTop || document.body.scrollTop));\r\n    }\r\n    catch(e){\r\n\r\n    }\r\n}\r\n\r\n/**\r\n * Observer that watches for dependent form elements\r\n * If an element depends on 1 or more of other elements, it should show up only when all of them gain specified values\r\n */\r\nFormElementDependenceController = Class.create();\r\nFormElementDependenceController.prototype = {\r\n    /**\r\n     * Structure of elements: {\r\n     *     'id_of_dependent_element' : {\r\n     *         'id_of_master_element_1' : 'reference_value',\r\n     *         'id_of_master_element_2' : 'reference_value'\r\n     *         'id_of_master_element_3' : ['reference_value1', 'reference_value2']\r\n     *         ...\r\n     *     }\r\n     * }\r\n     * @param object elementsMap\r\n     * @param object config\r\n     */\r\n    initialize : function (elementsMap, config)\r\n    {\r\n        if (config) {\r\n            this._config = config;\r\n        }\r\n        for (var idTo in elementsMap) {\r\n            for (var idFrom in elementsMap[idTo]) {\r\n                if ($(idFrom)) {\r\n                    Event.observe($(idFrom), 'change', this.trackChange.bindAsEventListener(this, idTo, elementsMap[idTo]));\r\n                    this.trackChange(null, idTo, elementsMap[idTo]);\r\n                } else {\r\n                    this.trackChange(null, idTo, elementsMap[idTo]);\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Misc. config options\r\n     * Keys are underscored intentionally\r\n     */\r\n    _config : {\r\n        levels_up : 1 // how many levels up to travel when toggling element\r\n    },\r\n\r\n    /**\r\n     * Define whether target element should be toggled and show/hide its row\r\n     *\r\n     * @param object e - event\r\n     * @param string idTo - id of target element\r\n     * @param valuesFrom - ids of master elements and reference values\r\n     * @return\r\n     */\r\n    trackChange : function(e, idTo, valuesFrom)\r\n    {\r\n        // define whether the target should show up\r\n        var shouldShowUp = true;\r\n        for (var idFrom in valuesFrom) {\r\n            var from = $(idFrom);\r\n            if (from) {\r\n                var values = valuesFrom[idFrom]['values'];\r\n                var isInArray = values.indexOf(from.value) != -1;\r\n                var isNegative = valuesFrom[idFrom]['negative'];\r\n                if (!from || isInArray && isNegative || !isInArray && !isNegative) {\r\n                    shouldShowUp = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // toggle target row\r\n        var headElement = $(idTo + '-head'),\r\n            isInheritCheckboxChecked = $(idTo + '_inherit') && $(idTo + '_inherit').checked,\r\n            target = $(idTo);\r\n\r\n        // Target won't always exist (for example, if field type is \"label\")\r\n        if (target) {\r\n            var inputs = target.up(this._config.levels_up).select('input', 'select', 'td'),\r\n                isAnInputOrSelect = ['input', 'select'].indexOf(target.tagName.toLowerCase()) != -1;\r\n        } else {\r\n            var inputs = false,\r\n                isAnInputOrSelect = false;\r\n        }\r\n        if (shouldShowUp) {\r\n            var currentConfig = this._config;\r\n            if (inputs) {\r\n                inputs.each(function (item) {\r\n                    // don't touch hidden inputs (and Use Default inputs too), bc they may have custom logic\r\n                    if ((!item.type || item.type != 'hidden') && !($(item.id+'_inherit') && $(item.id+'_inherit').checked)\r\n                        && !(currentConfig.can_edit_price != undefined && !currentConfig.can_edit_price)) {\r\n                        item.disabled = false;\r\n                        jQuery(item).removeClass('ignore-validate');\r\n                    }\r\n                });\r\n            }\r\n            if (headElement) {\r\n                headElement.show();\r\n                if (headElement.hasClassName('open') && target) {\r\n                    target.show();\r\n                } else if (target) {\r\n                    target.hide();\r\n                }\r\n            } else {\r\n                if (target) {\r\n                    target.show();\r\n                }\r\n                if (isAnInputOrSelect && !isInheritCheckboxChecked) {\r\n                    if (target) {\r\n                        target.disabled = false;\r\n                    }\r\n                    jQuery('#' + idTo).removeClass('ignore-validate');\r\n                }\r\n            }\r\n        } else {\r\n            if (inputs) {\r\n                inputs.each(function (item){\r\n                    // don't touch hidden inputs (and Use Default inputs too), bc they may have custom logic\r\n                    if ((!item.type || item.type != 'hidden') && !($(item.id+'_inherit') && $(item.id+'_inherit').checked)) {\r\n                        item.disabled = true;\r\n                        jQuery(item).addClass('ignore-validate');\r\n                    }\r\n                });\r\n            }\r\n            if (headElement) {\r\n                headElement.hide();\r\n            }\r\n            if (target) {\r\n                target.hide();\r\n            }\r\n            if (isAnInputOrSelect && !isInheritCheckboxChecked) {\r\n                if (target) {\r\n                    target.disabled = true;\r\n                }\r\n                jQuery('#' + idTo).addClass('ignore-validate');\r\n            }\r\n\r\n        }\r\n        var rowElement = $('row_' + idTo);\r\n        if (rowElement == undefined && target) {\r\n            rowElement = target.up(this._config.levels_up);\r\n        }\r\n        if (rowElement) {\r\n            if (shouldShowUp) {\r\n                rowElement.show();\r\n            } else {\r\n                rowElement.hide();\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n\r\n    window.varienWindowOnload = varienWindowOnload;\r\n    window.varienElementMethods = varienElementMethods;\r\n});\r\n","mage/adminhtml/grid.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n// also depends on a mage/adminhtml/tools.js for Base64 encoding\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'Magento_Ui/js/modal/alert',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'mage/mage',\r\n    'prototype',\r\n    'mage/adminhtml/form',\r\n    'mage/adminhtml/events'\r\n], function (jQuery, mageTemplate, alert, confirm) {\r\n\r\nwindow.varienGrid = new Class.create();\r\n\r\nvarienGrid.prototype = {\r\n    initialize:function (containerId, url, pageVar, sortVar, dirVar, filterVar) {\r\n        this.containerId = containerId;\r\n        jQuery('#' + containerId).data('gridObject', this);\r\n        this.url = url;\r\n        this.pageVar = pageVar || false;\r\n        this.sortVar = sortVar || false;\r\n        this.dirVar = dirVar || false;\r\n        this.filterVar = filterVar || false;\r\n        this.tableSufix = '_table';\r\n        this.useAjax = false;\r\n        this.rowClickCallback = false;\r\n        this.checkboxCheckCallback = false;\r\n        this.preInitCallback = false;\r\n        this.initCallback = false;\r\n        this.initRowCallback = false;\r\n        this.doFilterCallback = false;\r\n        this.sortableUpdateCallback = false;\r\n\r\n        this.reloadParams = false;\r\n\r\n        this.trOnMouseOver = this.rowMouseOver.bindAsEventListener(this);\r\n        this.trOnMouseOut = this.rowMouseOut.bindAsEventListener(this);\r\n        this.trOnClick = this.rowMouseClick.bindAsEventListener(this);\r\n        this.trOnDblClick = this.rowMouseDblClick.bindAsEventListener(this);\r\n        this.trOnKeyPress = this.keyPress.bindAsEventListener(this);\r\n\r\n        this.thLinkOnClick = this.doSort.bindAsEventListener(this);\r\n        this.initGrid();\r\n    },\r\n    initGrid:function () {\r\n        if (this.preInitCallback) {\r\n            this.preInitCallback(this);\r\n        }\r\n        if ($(this.containerId + this.tableSufix)) {\r\n            this.rows = $$('#' + this.containerId + this.tableSufix + ' tbody tr');\r\n            for (var row = 0; row < this.rows.length; row++) {\r\n                if (row % 2 == 0) {\r\n                    Element.addClassName(this.rows[row], 'even');\r\n                }\r\n\r\n                Event.observe(this.rows[row], 'mouseover', this.trOnMouseOver);\r\n                Event.observe(this.rows[row], 'mouseout', this.trOnMouseOut);\r\n                Event.observe(this.rows[row], 'click', this.trOnClick);\r\n                Event.observe(this.rows[row], 'dblclick', this.trOnDblClick);\r\n            }\r\n        }\r\n        if (this.sortVar && this.dirVar) {\r\n            var columns = $$('#' + this.containerId + this.tableSufix + ' thead [data-sort]');\r\n\r\n            for (var col = 0; col < columns.length; col++) {\r\n                Event.observe(columns[col], 'click', this.thLinkOnClick);\r\n            }\r\n        }\r\n        this.bindFilterFields();\r\n        this.bindFieldsChange();\r\n        if (this.initCallback) {\r\n            try {\r\n                this.initCallback(this);\r\n            }\r\n            catch (e) {\r\n                if (window.console) {\r\n                    console.log(e);\r\n                }\r\n            }\r\n        }\r\n        jQuery('#' + this.containerId).trigger('gridinit', this)\r\n    },\r\n    initGridAjax:function () {\r\n        this.initGrid();\r\n        this.initGridRows();\r\n    },\r\n    initGridRows:function () {\r\n        if (this.initRowCallback) {\r\n            for (var row = 0; row < this.rows.length; row++) {\r\n                try {\r\n                    this.initRowCallback(this, this.rows[row]);\r\n                } catch (e) {\r\n                    if (window.console) {\r\n                        console.log(e);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    rowMouseOver:function (event) {\r\n        var element = Event.findElement(event, 'tr');\r\n\r\n        if (!element.title) return;\r\n\r\n        Element.addClassName(element, 'on-mouse');\r\n\r\n        if (!Element.hasClassName('_clickable')\r\n            && (this.rowClickCallback !== openGridRow || element.title)) {\r\n            if (element.title) {\r\n                Element.addClassName(element, '_clickable');\r\n            }\r\n        }\r\n    },\r\n    rowMouseOut:function (event) {\r\n        var element = Event.findElement(event, 'tr');\r\n        Element.removeClassName(element, 'on-mouse');\r\n    },\r\n    rowMouseClick:function (event) {\r\n        if (this.rowClickCallback) {\r\n            try {\r\n                this.rowClickCallback(this, event);\r\n            }\r\n            catch (e) {\r\n            }\r\n        }\r\n        varienGlobalEvents.fireEvent('gridRowClick', event);\r\n    },\r\n    rowMouseDblClick:function (event) {\r\n        varienGlobalEvents.fireEvent('gridRowDblClick', event);\r\n    },\r\n    keyPress:function (event) {\r\n\r\n    },\r\n    doSort:function (event) {\r\n        var element = Event.findElement(event, 'th');\r\n\r\n        if (element.readAttribute('data-sort') && element.readAttribute('data-direction')) {\r\n            this.addVarToUrl(this.sortVar, element.readAttribute('data-sort'));\r\n            this.addVarToUrl(this.dirVar, element.readAttribute('data-direction'));\r\n            this.reload(this.url);\r\n        }\r\n        Event.stop(event);\r\n        return false;\r\n    },\r\n    loadByElement:function (element) {\r\n        if (element && element.name) {\r\n            this.reload(this.addVarToUrl(element.name, element.value));\r\n        }\r\n    },\r\n\r\n    _onAjaxSeccess: function(data, textStatus, transport) {\r\n        try {\r\n            var responseText = transport.responseText;\r\n\r\n            if (transport.responseText.isJSON()) {\r\n                var response = transport.responseText.evalJSON()\r\n                if (response.error) {\r\n                    alert({\r\n                        content: response.message\r\n                    });\r\n                }\r\n                if (response.ajaxExpired && response.ajaxRedirect) {\r\n                    setLocation(response.ajaxRedirect);\r\n                }\r\n            } else {\r\n                /**\r\n                 * For IE <= 7.\r\n                 * If there are two elements, and first has name, that equals id of second.\r\n                 * In this case, IE will choose one that is above\r\n                 *\r\n                 * @see https://prototype.lighthouseapp.com/projects/8886/tickets/994-id-selector-finds-elements-by-name-attribute-in-ie7\r\n                 */\r\n                var divId = $(this.containerId);\r\n                if (divId.id == this.containerId) {\r\n                    divId.update(responseText);\r\n                } else {\r\n                    $$('div[id=\"' + this.containerId + '\"]')[0].update(responseText);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            var divId = $(this.containerId);\r\n            if (divId.id == this.containerId) {\r\n                divId.update(responseText);\r\n            } else {\r\n                $$('div[id=\"' + this.containerId + '\"]')[0].update(responseText);\r\n            }\r\n        }\r\n        jQuery('#' + this.containerId).trigger('contentUpdated');\r\n    },\r\n\r\n    reload:function (url, onSuccessCallback) {\r\n        this.reloadParams = this.reloadParams || {};\r\n        this.reloadParams.form_key = FORM_KEY;\r\n        url = url || this.url;\r\n        if (this.useAjax) {\r\n            var ajaxSettings = {\r\n                url: url + (url.match(new RegExp('\\\\?')) ? '&ajax=true' : '?ajax=true' ),\r\n                showLoader: true,\r\n                method: 'post',\r\n                context: jQuery('#' + this.containerId),\r\n                data: this.reloadParams,\r\n                error: this._processFailure.bind(this),\r\n                complete: this.initGridAjax.bind(this),\r\n                dataType: 'html',\r\n                success: function(data, textStatus, transport) {\r\n                    this._onAjaxSeccess(data, textStatus, transport);\r\n                    if (onSuccessCallback && typeof(onSuccessCallback) === \"function\") {\r\n                        // execute the callback, passing parameters as necessary\r\n                        onSuccessCallback();\r\n                    }\r\n                }.bind(this)\r\n            };\r\n            jQuery('#' + this.containerId).trigger('gridajaxsettings', ajaxSettings);\r\n            var ajaxRequest = jQuery.ajax(ajaxSettings);\r\n            jQuery('#' + this.containerId).trigger('gridajax', ajaxRequest);\r\n            return ajaxRequest;\r\n        } else {\r\n            if (this.reloadParams) {\r\n                $H(this.reloadParams).each(function(pair) {\r\n                    url = this.addVarToUrl(pair.key, pair.value);\r\n                }.bind(this));\r\n            }\r\n            location.href = url;\r\n        }\r\n    },\r\n    /*_processComplete : function(transport){\r\n        console.log(transport);\r\n        if (transport && transport.responseText){\r\n            try{\r\n                response = eval('(' + transport.responseText + ')');\r\n            }\r\n            catch (e) {\r\n                response = {};\r\n            }\r\n        }\r\n        if (response.ajaxExpired && response.ajaxRedirect) {\r\n            location.href = response.ajaxRedirect;\r\n            return false;\r\n        }\r\n        this.initGrid();\r\n    },*/\r\n    _processFailure:function (transport) {\r\n        location.href = BASE_URL;\r\n    },\r\n    _addVarToUrl:function (url, varName, varValue) {\r\n        var re = new RegExp('\\/(' + varName + '\\/.*?\\/)');\r\n        var parts = url.split(new RegExp('\\\\?'));\r\n        url = parts[0].replace(re, '/');\r\n        url += varName + '/' + varValue + '/';\r\n        if (parts.size() > 1) {\r\n            url += '?' + parts[1];\r\n        }\r\n        return url;\r\n    },\r\n    addVarToUrl:function (varName, varValue) {\r\n        this.url = this._addVarToUrl(this.url, varName, varValue);\r\n        return this.url;\r\n    },\r\n    doExport : function(){\r\n        if($(this.containerId+'_export')){\r\n            var exportUrl = $(this.containerId+'_export').value;\r\n            if(this.massaction && this.massaction.checkedString) {\r\n                exportUrl = this._addVarToUrl(exportUrl, this.massaction.formFieldNameInternal, this.massaction.checkedString);\r\n            }\r\n            location.href = exportUrl;\r\n        }\r\n    },\r\n    bindFilterFields : function(){\r\n        var filters = $$('#'+this.containerId+' [data-role=\"filter-form\"] input', '#'+this.containerId+' [data-role=\"filter-form\"] select');\r\n        for (var i=0; i<filters.length; i++) {\r\n            Event.observe(filters[i],'keypress',this.filterKeyPress.bind(this));\r\n        }\r\n    },\r\n    bindFieldsChange : function(){\r\n        if (!$(this.containerId)) {\r\n            return;\r\n        }\r\n//        var dataElements = $(this.containerId+this.tableSufix).down('.data tbody').select('input', 'select');\r\n        var dataElements = $(this.containerId+this.tableSufix).down('tbody').select('input', 'select');\r\n        for(var i=0; i<dataElements.length;i++){\r\n            Event.observe(dataElements[i], 'change', dataElements[i].setHasChanges.bind(dataElements[i]));\r\n        }\r\n    },\r\n    bindSortable: function(){\r\n        if (jQuery('#' + this.containerId).find('.draggable-handle').length) {\r\n            jQuery('#' + this.containerId).find('tbody').sortable({\r\n                axis: 'y',\r\n                handle: '.draggable-handle',\r\n                helper: function(event, ui) {\r\n                    ui.children().each(function() {\r\n                        jQuery(this).width(jQuery(this).width());\r\n                    });\r\n                    return ui;\r\n                },\r\n                update: this.sortableUpdateCallback ? this.sortableUpdateCallback : function(){},\r\n                tolerance: 'pointer'\r\n            });\r\n        }\r\n    },\r\n    filterKeyPress:function (event) {\r\n        if (event.keyCode == Event.KEY_RETURN) {\r\n            this.doFilter();\r\n        }\r\n    },\r\n    doFilter:function (callback) {\r\n        var filters = $$('#' + this.containerId + ' [data-role=\"filter-form\"] input', '#' + this.containerId + ' [data-role=\"filter-form\"] select');\r\n        var elements = [];\r\n        for (var i in filters) {\r\n            if (filters[i].value && filters[i].value.length) elements.push(filters[i]);\r\n        }\r\n        if (!this.doFilterCallback || (this.doFilterCallback && this.doFilterCallback())) {\r\n            this.reload(this.addVarToUrl(this.filterVar, Base64.encode(Form.serializeElements(elements))), callback);\r\n        }\r\n    },\r\n    resetFilter:function (callback) {\r\n        this.reload(this.addVarToUrl(this.filterVar, ''), callback);\r\n    },\r\n    checkCheckboxes:function (element) {\r\n        elements = Element.select($(this.containerId), 'input[name=\"' + element.name + '\"]');\r\n        for (var i = 0; i < elements.length; i++) {\r\n            this.setCheckboxChecked(elements[i], element.checked);\r\n        }\r\n    },\r\n    setCheckboxChecked:function (element, checked) {\r\n        element.checked = checked;\r\n        jQuery(element).trigger('change');\r\n        element.setHasChanges({});\r\n        if (this.checkboxCheckCallback) {\r\n            this.checkboxCheckCallback(this, element, checked);\r\n        }\r\n    },\r\n    inputPage:function (event, maxNum) {\r\n        var element = Event.element(event);\r\n        var keyCode = event.keyCode || event.which;\r\n        if (keyCode == Event.KEY_RETURN) {\r\n            this.setPage(element.value);\r\n        }\r\n        /*if(keyCode>47 && keyCode<58){\r\n\r\n         }\r\n         else{\r\n         Event.stop(event);\r\n         }*/\r\n    },\r\n    setPage:function (pageNumber) {\r\n        this.reload(this.addVarToUrl(this.pageVar, pageNumber));\r\n    }\r\n};\r\n\r\nfunction openGridRow(grid, event){\r\n    var element = Event.findElement(event, 'tr');\r\n    if(['a', 'input', 'select', 'option'].indexOf(Event.element(event).tagName.toLowerCase())!=-1) {\r\n        return;\r\n    }\r\n\r\n    if(element.title){\r\n        setLocation(element.title);\r\n    }\r\n}\r\nwindow.openGridRow = openGridRow;\r\n\r\nwindow.varienGridMassaction = Class.create();\r\nvarienGridMassaction.prototype = {\r\n    /* Predefined vars */\r\n    checkedValues: $H({}),\r\n    checkedString: '',\r\n    oldCallbacks: {},\r\n    errorText:'',\r\n    items: {},\r\n    gridIds: [],\r\n    useSelectAll: false,\r\n    currentItem: false,\r\n    lastChecked: { left: false, top: false, checkbox: false },\r\n    fieldTemplate: mageTemplate('<input type=\"hidden\" name=\"<%- name %>\" value=\"<%- value %>\" />'),\r\n    initialize: function (containerId, grid, checkedValues, formFieldNameInternal, formFieldName) {\r\n        this.setOldCallback('row_click', grid.rowClickCallback);\r\n        this.setOldCallback('init',      grid.initCallback);\r\n        this.setOldCallback('init_row',  grid.initRowCallback);\r\n        this.setOldCallback('pre_init',  grid.preInitCallback);\r\n\r\n        this.useAjax        = false;\r\n        this.grid           = grid;\r\n        this.grid.massaction = this;\r\n        this.containerId    = containerId;\r\n        this.initMassactionElements();\r\n\r\n        this.checkedString          = checkedValues;\r\n        this.formFieldName          = formFieldName;\r\n        this.formFieldNameInternal  = formFieldNameInternal;\r\n\r\n        this.grid.initCallback      = this.onGridInit.bind(this);\r\n        this.grid.preInitCallback   = this.onGridPreInit.bind(this);\r\n        this.grid.initRowCallback   = this.onGridRowInit.bind(this);\r\n        this.grid.rowClickCallback  = this.onGridRowClick.bind(this);\r\n        this.initCheckboxes();\r\n        this.checkCheckboxes();\r\n    },\r\n    setUseAjax: function(flag) {\r\n        this.useAjax = flag;\r\n    },\r\n    setUseSelectAll: function(flag) {\r\n        this.useSelectAll = flag;\r\n    },\r\n    initMassactionElements: function() {\r\n        this.container      = $(this.containerId);\r\n        this.multiselect    = $(this.containerId + '-mass-select');\r\n        this.count          = $(this.containerId + '-count');\r\n        this.formHiddens    = $(this.containerId + '-form-hiddens');\r\n        this.formAdditional = $(this.containerId + '-form-additional');\r\n        this.select         = $(this.containerId + '-select');\r\n        this.form           = this.prepareForm();\r\n        jQuery(this.form).mage('validation');\r\n        this.select.observe('change', this.onSelectChange.bindAsEventListener(this));\r\n        this.lastChecked    = { left: false, top: false, checkbox: false };\r\n        this.select.addClassName(this.select.value ? '_selected' : '');\r\n        this.initMassSelect();\r\n    },\r\n    prepareForm: function() {\r\n        var form = $(this.containerId + '-form'), formPlace = null,\r\n            formElement = this.formHiddens || this.formAdditional;\r\n\r\n        if (!formElement) {\r\n            formElement = this.container.getElementsByTagName('button')[0];\r\n            formElement && formElement.parentNode;\r\n        }\r\n        if (!form && formElement) {\r\n            /* fix problem with rendering form in FF through innerHTML property */\r\n            form = document.createElement('form');\r\n            form.setAttribute('method', 'post');\r\n            form.setAttribute('action', '');\r\n            form.id = this.containerId + '-form';\r\n            formPlace = formElement.parentNode;\r\n            formPlace.parentNode.appendChild(form);\r\n            form.appendChild(formPlace);\r\n        }\r\n\r\n        return form;\r\n    },\r\n    setGridIds: function(gridIds) {\r\n        this.gridIds = gridIds;\r\n        this.updateCount();\r\n    },\r\n    getGridIds: function() {\r\n        return this.gridIds;\r\n    },\r\n    setItems: function(items) {\r\n        this.items = items;\r\n        this.updateCount();\r\n    },\r\n    getItems: function() {\r\n        return this.items;\r\n    },\r\n    getItem: function(itemId) {\r\n        if(this.items[itemId]) {\r\n            return this.items[itemId];\r\n        }\r\n        return false;\r\n    },\r\n    getOldCallback: function (callbackName) {\r\n        return this.oldCallbacks[callbackName] ? this.oldCallbacks[callbackName] : Prototype.emptyFunction;\r\n    },\r\n    setOldCallback: function (callbackName, callback) {\r\n        this.oldCallbacks[callbackName] = callback;\r\n    },\r\n    onGridPreInit: function(grid) {\r\n        this.initMassactionElements();\r\n        this.getOldCallback('pre_init')(grid);\r\n    },\r\n    onGridInit: function(grid) {\r\n        this.initCheckboxes();\r\n        this.checkCheckboxes();\r\n        this.updateCount();\r\n        this.getOldCallback('init')(grid);\r\n    },\r\n    onGridRowInit: function(grid, row) {\r\n        this.getOldCallback('init_row')(grid, row);\r\n    },\r\n    isDisabled: function (evt) {\r\n        var target = jQuery(evt.target),\r\n            tr,\r\n            checkbox;\r\n\r\n        tr = target.is('tr') ? target : target.closest('tr');\r\n        checkbox = tr.find('input[type=\"checkbox\"]');\r\n\r\n        return checkbox.is(':disabled');\r\n    },\r\n    onGridRowClick: function(grid, evt) {\r\n        var tdElement = Event.findElement(evt, 'td');\r\n        var trElement = Event.findElement(evt, 'tr');\r\n\r\n        if (this.isDisabled(evt)) {\r\n            return false;\r\n        }\r\n\r\n        if(!$(tdElement).down('input')) {\r\n            if($(tdElement).down('a') || $(tdElement).down('select')) {\r\n                return;\r\n            }\r\n            if (trElement.title && trElement.title.strip() != '#') {\r\n                this.getOldCallback('row_click')(grid, evt);\r\n            }\r\n            else{\r\n                var checkbox = Element.select(trElement, 'input');\r\n                var isInput  = Event.element(evt).tagName == 'input';\r\n                var checked = isInput ? checkbox[0].checked : !checkbox[0].checked;\r\n\r\n                if(checked) {\r\n                    this.checkedString = varienStringArray.add(checkbox[0].value, this.checkedString);\r\n                } else {\r\n                    this.checkedString = varienStringArray.remove(checkbox[0].value, this.checkedString);\r\n                }\r\n                this.grid.setCheckboxChecked(checkbox[0], checked);\r\n                this.updateCount();\r\n            }\r\n            return;\r\n        }\r\n\r\n        if(Event.element(evt).isMassactionCheckbox) {\r\n           this.setCheckbox(Event.element(evt));\r\n        } else if (checkbox = this.findCheckbox(evt)) {\r\n           checkbox.checked = !checkbox.checked;\r\n           jQuery(checkbox).trigger('change');\r\n           this.setCheckbox(checkbox);\r\n        }\r\n    },\r\n    onSelectChange: function(evt) {\r\n        var item = this.getSelectedItem();\r\n        if(item) {\r\n            this.formAdditional.update($(this.containerId + '-item-' + item.id + '-block').innerHTML);\r\n            evt.target.addClassName('_selected')\r\n        } else {\r\n            this.formAdditional.update('');\r\n            evt.target.removeClassName('_selected')\r\n        }\r\n        jQuery(this.form).data('validator').resetForm();\r\n    },\r\n    findCheckbox: function(evt) {\r\n        if(['a', 'input', 'select'].indexOf(Event.element(evt).tagName.toLowerCase())!==-1) {\r\n            return false;\r\n        }\r\n        checkbox = false;\r\n        Event.findElement(evt, 'tr').select('[data-role=\"select-row\"]').each(function(element){\r\n            if(element.isMassactionCheckbox) {\r\n                checkbox = element;\r\n            }\r\n        }.bind(this));\r\n        return checkbox;\r\n    },\r\n    initCheckboxes: function() {\r\n        this.getCheckboxes().each(function(checkbox) {\r\n           checkbox.isMassactionCheckbox = true;\r\n        }.bind(this));\r\n    },\r\n    checkCheckboxes: function() {\r\n        this.getCheckboxes().each(function(checkbox) {\r\n            checkbox.checked = varienStringArray.has(checkbox.value, this.checkedString);\r\n            jQuery(checkbox).trigger('change');\r\n        }.bind(this));\r\n    },\r\n    selectAll: function() {\r\n        this.setCheckedValues((this.useSelectAll ? this.getGridIds() : this.getCheckboxesValuesAsString()));\r\n        this.checkCheckboxes();\r\n        this.updateCount();\r\n        this.clearLastChecked();\r\n        return false;\r\n    },\r\n    unselectAll: function() {\r\n        this.setCheckedValues('');\r\n        this.checkCheckboxes();\r\n        this.updateCount();\r\n        this.clearLastChecked();\r\n        return false;\r\n    },\r\n    selectVisible: function() {\r\n        this.setCheckedValues(this.getCheckboxesValuesAsString());\r\n        this.checkCheckboxes();\r\n        this.updateCount();\r\n        this.clearLastChecked();\r\n        return false;\r\n    },\r\n    unselectVisible: function() {\r\n        this.getCheckboxesValues().each(function(key){\r\n            this.checkedString = varienStringArray.remove(key, this.checkedString);\r\n        }.bind(this));\r\n        this.checkCheckboxes();\r\n        this.updateCount();\r\n        this.clearLastChecked();\r\n        return false;\r\n    },\r\n    setCheckedValues: function(values) {\r\n        this.checkedString = values;\r\n    },\r\n    getCheckedValues: function() {\r\n        return this.checkedString;\r\n    },\r\n    getCheckboxes: function() {\r\n        var result = [];\r\n        this.grid.rows.each(function(row){\r\n            var checkboxes = row.select('[data-role=\"select-row\"]');\r\n            checkboxes.each(function(checkbox){\r\n                result.push(checkbox);\r\n            });\r\n        });\r\n        return result;\r\n    },\r\n    getCheckboxesValues: function() {\r\n        var result = [];\r\n        this.getCheckboxes().each(function(checkbox) {\r\n            result.push(checkbox.value);\r\n        }.bind(this));\r\n        return result;\r\n    },\r\n    getCheckboxesValuesAsString: function() {\r\n        return this.getCheckboxesValues().join(',');\r\n    },\r\n    setCheckbox: function(checkbox) {\r\n        if(checkbox.checked) {\r\n            this.checkedString = varienStringArray.add(checkbox.value, this.checkedString);\r\n        } else {\r\n            this.checkedString = varienStringArray.remove(checkbox.value, this.checkedString);\r\n        }\r\n        this.updateCount();\r\n    },\r\n    updateCount: function() {\r\n        var checkboxesTotal = varienStringArray.count((this.useSelectAll ? this.getGridIds() : this.getCheckboxesValuesAsString())),\r\n            checkboxesChecked = varienStringArray.count(this.checkedString);\r\n        jQuery('[data-role=\"counter\"]' ,this.count).html(checkboxesChecked);\r\n        if (!checkboxesTotal) {\r\n            this.multiselect.addClassName('_disabled');\r\n        } else {\r\n            this.multiselect.removeClassName('_disabled');\r\n        }\r\n        if (checkboxesChecked == checkboxesTotal && checkboxesTotal != 0) {\r\n            this.count.removeClassName('_empty');\r\n            this.multiselect.addClassName('_checked').removeClassName('_indeterminate');\r\n        } else if (checkboxesChecked == 0) {\r\n            this.count.addClassName('_empty');\r\n            this.multiselect.removeClassName('_checked').removeClassName('_indeterminate');\r\n        } else {\r\n            this.count.removeClassName('_empty');\r\n            this.multiselect.addClassName('_checked').addClassName('_indeterminate');\r\n        }\r\n        if(!this.grid.reloadParams) {\r\n            this.grid.reloadParams = {};\r\n        }\r\n        this.grid.reloadParams[this.formFieldNameInternal] = this.checkedString;\r\n    },\r\n    getSelectedItem: function() {\r\n        if(this.getItem(this.select.value)) {\r\n            return this.getItem(this.select.value);\r\n        } else {\r\n            return false;\r\n        }\r\n    },\r\n    apply: function() {\r\n        var self = this;\r\n\r\n        if(varienStringArray.count(this.checkedString) == 0) {\r\n            alert({\r\n                content: this.errorText\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        var item = this.getSelectedItem();\r\n        if(!item) {\r\n            jQuery(this.form).valid();\r\n            return;\r\n        }\r\n        this.currentItem = item;\r\n        var fieldName = (item.field ? item.field : this.formFieldName);\r\n\r\n        if (this.currentItem.confirm) {\r\n            confirm({\r\n                content: this.currentItem.confirm,\r\n                actions: {\r\n                    confirm: this.onConfirm.bind(this, fieldName, item)\r\n                }\r\n            });\r\n        } else {\r\n            this.onConfirm(fieldName, item);\r\n        }\r\n    },\r\n    onConfirm: function(fieldName, item) {\r\n        this.formHiddens.update('');\r\n        new Insertion.Bottom(this.formHiddens, this.fieldTemplate({\r\n            name: fieldName,\r\n            value: this.checkedString\r\n        }));\r\n        new Insertion.Bottom(this.formHiddens, this.fieldTemplate({\r\n            name: 'massaction_prepare_key',\r\n            value: fieldName\r\n        }));\r\n\r\n        if (!jQuery(this.form).valid()) {\r\n            return;\r\n        }\r\n\r\n        if (this.useAjax && item.url) {\r\n            new Ajax.Request(item.url, {\r\n                'method': 'post',\r\n                'parameters': this.form.serialize(true),\r\n                'onComplete': this.onMassactionComplete.bind(this)\r\n            });\r\n        } else if (item.url) {\r\n            this.form.action = item.url;\r\n            this.form.submit();\r\n        }\r\n    },\r\n    onMassactionComplete: function(transport) {\r\n        if(this.currentItem.complete) {\r\n            try {\r\n                var listener = this.getListener(this.currentItem.complete) || Prototype.emptyFunction;\r\n                listener(this.grid, this, transport);\r\n            } catch (e) {}\r\n       }\r\n    },\r\n    getListener: function(strValue) {\r\n        return eval(strValue);\r\n    },\r\n    initMassSelect: function() {\r\n        $$('input[data-role=\"select-row\"]').each(\r\n            function(element) {\r\n                element.observe('click', this.massSelect.bind(this));\r\n            }.bind(this)\r\n            );\r\n    },\r\n    clearLastChecked: function() {\r\n        this.lastChecked = {\r\n            left: false,\r\n            top: false,\r\n            checkbox: false\r\n        };\r\n    },\r\n    massSelect: function(evt) {\r\n        if(this.lastChecked.left !== false\r\n            && this.lastChecked.top !== false\r\n            && evt.button === 0\r\n            && evt.shiftKey === true\r\n        ) {\r\n            var currentCheckbox = Event.element(evt);\r\n            var lastCheckbox = this.lastChecked.checkbox;\r\n            if (lastCheckbox != currentCheckbox) {\r\n                var start = this.getCheckboxOrder(lastCheckbox);\r\n                var finish = this.getCheckboxOrder(currentCheckbox);\r\n                if (start !== false && finish !== false) {\r\n                    this.selectCheckboxRange(\r\n                        Math.min(start, finish),\r\n                        Math.max(start, finish),\r\n                        currentCheckbox.checked\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        this.lastChecked = {\r\n            left: Event.element(evt).viewportOffset().left,\r\n            top: Event.element(evt).viewportOffset().top,\r\n            checkbox: Event.element(evt) // \"boundary\" checkbox\r\n        };\r\n    },\r\n    getCheckboxOrder: function(curCheckbox) {\r\n        var order = false;\r\n        this.getCheckboxes().each(function(checkbox, key){\r\n            if (curCheckbox == checkbox) {\r\n                order = key;\r\n            }\r\n        });\r\n        return order;\r\n    },\r\n    selectCheckboxRange: function(start, finish, isChecked){\r\n        this.getCheckboxes().each((function(checkbox, key){\r\n            if (key >= start && key <= finish) {\r\n                checkbox.checked = isChecked;\r\n                this.setCheckbox(checkbox);\r\n            }\r\n        }).bind(this));\r\n    }\r\n};\r\n\r\nwindow.varienGridAction = {\r\n    execute: function(select) {\r\n        if(!select.value || !select.value.isJSON()) {\r\n            return;\r\n        }\r\n\r\n        var config = select.value.evalJSON();\r\n        if(config.confirm && !window.confirm(config.confirm)) {\r\n            select.options[0].selected = true;\r\n            return;\r\n        }\r\n\r\n        if(config.popup) {\r\n            var win = window.open(config.href, 'action_window', 'width=500,height=600,resizable=1,scrollbars=1');\r\n            win.focus();\r\n            select.options[0].selected = true;\r\n        } else {\r\n            setLocation(config.href);\r\n        }\r\n    }\r\n};\r\n\r\nwindow.varienStringArray = {\r\n    remove: function(str, haystack)\r\n    {\r\n        haystack = ',' + haystack + ',';\r\n        haystack = haystack.replace(new RegExp(',' + str + ',', 'g'), ',');\r\n        return this.trimComma(haystack);\r\n    },\r\n    add: function(str, haystack)\r\n    {\r\n        haystack = ',' + haystack + ',';\r\n        if (haystack.search(new RegExp(',' + str + ',', 'g'), haystack) === -1) {\r\n            haystack += str + ',';\r\n        }\r\n        return this.trimComma(haystack);\r\n    },\r\n    has: function(str, haystack)\r\n    {\r\n        haystack = ',' + haystack + ',';\r\n        if (haystack.search(new RegExp(',' + str + ',', 'g'), haystack) === -1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    },\r\n    count: function(haystack)\r\n    {\r\n        if (typeof haystack != 'string') {\r\n            return 0;\r\n        }\r\n        if (match = haystack.match(new RegExp(',', 'g'))) {\r\n            return match.length + 1;\r\n        } else if (haystack.length != 0) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    },\r\n    each: function(haystack, fnc)\r\n    {\r\n        var haystack = haystack.split(',');\r\n        for (var i=0; i<haystack.length; i++) {\r\n            fnc(haystack[i]);\r\n        }\r\n    },\r\n    trimComma: function(string)\r\n    {\r\n        string = string.replace(new RegExp('^(,+)','i'), '');\r\n        string = string.replace(new RegExp('(,+)$','i'), '');\r\n        return string;\r\n    }\r\n};\r\n\r\nwindow.serializerController = Class.create();\r\nserializerController.prototype = {\r\n    oldCallbacks: {},\r\n    initialize: function(hiddenDataHolder, predefinedData, inputsToManage, grid, reloadParamName){\r\n        //Grid inputs\r\n        this.tabIndex = 1000;\r\n        this.inputsToManage       = inputsToManage;\r\n        this.multidimensionalMode = inputsToManage.length > 0;\r\n\r\n        //Hash with grid data\r\n        this.gridData             = this.getGridDataHash(predefinedData);\r\n\r\n        //Hidden input data holder\r\n        this.hiddenDataHolder     = $(hiddenDataHolder);\r\n        this.hiddenDataHolder.value = this.serializeObject();\r\n\r\n        this.grid = grid;\r\n\r\n        // Set old callbacks\r\n        this.setOldCallback('row_click', this.grid.rowClickCallback);\r\n        this.setOldCallback('init_row', this.grid.initRowCallback);\r\n        this.setOldCallback('checkbox_check', this.grid.checkboxCheckCallback);\r\n\r\n        //Grid\r\n        this.reloadParamName = reloadParamName;\r\n        this.grid.reloadParams = {};\r\n        this.grid.reloadParams[this.reloadParamName+'[]'] = this.getDataForReloadParam();\r\n        this.grid.rowClickCallback = this.rowClick.bind(this);\r\n        this.grid.initRowCallback = this.rowInit.bind(this);\r\n        this.grid.checkboxCheckCallback = this.registerData.bind(this);\r\n        this.grid.rows.each(this.eachRow.bind(this));\r\n    },\r\n    setOldCallback: function (callbackName, callback) {\r\n        this.oldCallbacks[callbackName] = callback;\r\n    },\r\n    getOldCallback: function (callbackName) {\r\n        return this.oldCallbacks[callbackName] ? this.oldCallbacks[callbackName] : Prototype.emptyFunction;\r\n    },\r\n    registerData : function(grid, element, checked) {\r\n        if(this.multidimensionalMode){\r\n            if(checked){\r\n                 if(element.inputElements) {\r\n                     this.gridData.set(element.value, {});\r\n                     for(var i = 0; i < element.inputElements.length; i++) {\r\n                         element.inputElements[i].disabled = false;\r\n                         this.gridData.get(element.value)[element.inputElements[i].name] = element.inputElements[i].value;\r\n                     }\r\n                 }\r\n            }\r\n            else{\r\n                if(element.inputElements){\r\n                    for(var i = 0; i < element.inputElements.length; i++) {\r\n                        element.inputElements[i].disabled = true;\r\n                    }\r\n                }\r\n                this.gridData.unset(element.value);\r\n            }\r\n        }\r\n        else{\r\n            if(checked){\r\n                this.gridData.set(element.value, element.value);\r\n            }\r\n            else{\r\n                this.gridData.unset(element.value);\r\n            }\r\n        }\r\n\r\n        this.hiddenDataHolder.value = this.serializeObject();\r\n        this.grid.reloadParams = {};\r\n        this.grid.reloadParams[this.reloadParamName+'[]'] = this.getDataForReloadParam();\r\n        this.getOldCallback('checkbox_check')(grid, element, checked);\r\n    },\r\n    eachRow : function(row) {\r\n        this.rowInit(this.grid, row);\r\n    },\r\n    rowClick : function(grid, event) {\r\n        var trElement = Event.findElement(event, 'tr');\r\n        var isInput   = Event.element(event).tagName == 'INPUT';\r\n        if(trElement){\r\n            var checkbox = Element.select(trElement, 'input');\r\n            if(checkbox[0] && !checkbox[0].disabled){\r\n                var checked = isInput ? checkbox[0].checked : !checkbox[0].checked;\r\n                this.grid.setCheckboxChecked(checkbox[0], checked);\r\n            }\r\n        }\r\n        this.getOldCallback('row_click')(grid, event);\r\n    },\r\n    inputChange : function(event) {\r\n        var element = Event.element(event);\r\n        if(element && element.checkboxElement && element.checkboxElement.checked){\r\n            this.gridData.get(element.checkboxElement.value)[element.name] = element.value;\r\n            this.hiddenDataHolder.value = this.serializeObject();\r\n        }\r\n    },\r\n    rowInit : function(grid, row) {\r\n        if(this.multidimensionalMode){\r\n            var checkbox = $(row).select('.checkbox')[0];\r\n            var selectors = this.inputsToManage.map(function (name) { return ['input[name=\"' + name + '\"]', 'select[name=\"' + name + '\"]']; });\r\n            var inputs = $(row).select.apply($(row), selectors.flatten());\r\n            if(checkbox && inputs.length > 0) {\r\n                checkbox.inputElements = inputs;\r\n                for(var i = 0; i < inputs.length; i++) {\r\n                    inputs[i].checkboxElement = checkbox;\r\n                    if(this.gridData.get(checkbox.value) && this.gridData.get(checkbox.value)[inputs[i].name]) {\r\n                        inputs[i].value = this.gridData.get(checkbox.value)[inputs[i].name];\r\n                    }\r\n                    inputs[i].disabled = !checkbox.checked;\r\n                    inputs[i].tabIndex = this.tabIndex++;\r\n                    Event.observe(inputs[i],'keyup', this.inputChange.bind(this));\r\n                    Event.observe(inputs[i],'change', this.inputChange.bind(this));\r\n                }\r\n            }\r\n        }\r\n        this.getOldCallback('init_row')(grid, row);\r\n    },\r\n\r\n    //Stuff methods\r\n    getGridDataHash: function (_object){\r\n        return $H(this.multidimensionalMode ? _object : this.convertArrayToObject(_object))\r\n    },\r\n    getDataForReloadParam: function(){\r\n        return this.multidimensionalMode ? this.gridData.keys() : this.gridData.values();\r\n    },\r\n    serializeObject: function(){\r\n        if(this.multidimensionalMode){\r\n            var clone = this.gridData.clone();\r\n            clone.each(function(pair) {\r\n                clone.set(pair.key, Base64.encode(Object.toQueryString(pair.value)));\r\n            });\r\n            return clone.toQueryString();\r\n        }\r\n        else{\r\n            return this.gridData.values().join('&');\r\n        }\r\n    },\r\n    convertArrayToObject: function (_array){\r\n        var _object = {};\r\n        for(var i = 0, l = _array.length; i < l; i++){\r\n            _object[_array[i]] = _array[i];\r\n        }\r\n        return _object;\r\n    }\r\n};\r\n\r\n});\r\n","mage/adminhtml/wysiwyg/widget.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    \"jquery\",\r\n    \"tinymce\",\r\n    'Magento_Ui/js/modal/alert',\r\n    \"jquery/ui\",\r\n    \"mage/translate\",\r\n    \"mage/mage\",\r\n    \"mage/validation\",\r\n    \"mage/adminhtml/events\",\r\n    \"prototype\",\r\n    'Magento_Ui/js/modal/modal'\r\n], function(jQuery, tinyMCE, alert){\r\n\r\n    var widgetTools = {\r\n        getDivHtml: function(id, html) {\r\n            if (!html) html = '';\r\n            return '<div id=\"' + id + '\">' + html + '</div>';\r\n        },\r\n\r\n        onAjaxSuccess: function(transport) {\r\n            if (transport.responseText.isJSON()) {\r\n                var response = transport.responseText.evalJSON()\r\n                if (response.error) {\r\n                    throw response;\r\n                } else if (response.ajaxExpired && response.ajaxRedirect) {\r\n                    setLocation(response.ajaxRedirect);\r\n                }\r\n            }\r\n        },\r\n\r\n        dialogOpened : false,\r\n\r\n        getMaxZIndex: function() {\r\n            var max = 0, i;\r\n            var cn = document.body.childNodes;\r\n            for (i = 0; i < cn.length; i++) {\r\n                var el = cn[i];\r\n                var zIndex = el.nodeType == 1 ? parseInt(el.style.zIndex, 10) || 0 : 0;\r\n                if (zIndex < 10000) {\r\n                    max = Math.max(max, zIndex);\r\n                }\r\n            }\r\n            return max + 10;\r\n        },\r\n\r\n        openDialog: function(widgetUrl) {\r\n            if (this.dialogOpened) {\r\n                return\r\n            }\r\n            var oThis = this;\r\n            this.dialogWindow = jQuery('<div/>').modal({\r\n                title: jQuery.mage.__('Insert Widget...'),\r\n                type: 'slide',\r\n                buttons: [],\r\n                opened: function () {\r\n                    var dialog = jQuery(this).addClass('loading magento-message')\r\n                    new Ajax.Updater($(this), widgetUrl, {evalScripts: true, onComplete: function () {\r\n                            dialog.removeClass('loading');\r\n                        }\r\n                    });\r\n                },\r\n                closed: function (e, modal) {\r\n                    modal.modal.remove();\r\n                    oThis.dialogOpened = false;\r\n                }\r\n            });\r\n            this.dialogOpened = true;\r\n            this.dialogWindow.modal('openModal');\r\n        }\r\n    };\r\n\r\n    var WysiwygWidget = {};\r\n    WysiwygWidget.Widget = Class.create();\r\n    WysiwygWidget.Widget.prototype = {\r\n\r\n        initialize: function(formEl, widgetEl, widgetOptionsEl, optionsSourceUrl, widgetTargetId) {\r\n            $(formEl).insert({bottom: widgetTools.getDivHtml(widgetOptionsEl)});\r\n            jQuery('#' + formEl).mage('validation', {\r\n                ignore: \".skip-submit\",\r\n                errorClass: 'mage-error'\r\n            });\r\n            this.formEl = formEl;\r\n            this.widgetEl = $(widgetEl);\r\n            this.widgetOptionsEl = $(widgetOptionsEl);\r\n            this.optionsUrl = optionsSourceUrl;\r\n            this.optionValues = new Hash({});\r\n            this.widgetTargetId = widgetTargetId;\r\n            if (typeof(tinyMCE) != \"undefined\" && tinyMCE.activeEditor) {\r\n                this.bMark = tinyMCE.activeEditor.selection.getBookmark();\r\n            }\r\n\r\n            Event.observe(this.widgetEl, \"change\", this.loadOptions.bind(this));\r\n\r\n            this.initOptionValues();\r\n        },\r\n\r\n        getOptionsContainerId: function() {\r\n            return this.widgetOptionsEl.id + '_' + this.widgetEl.value.gsub(/\\//, '_');\r\n        },\r\n\r\n        switchOptionsContainer: function(containerId) {\r\n            $$('#' + this.widgetOptionsEl.id + ' div[id^=' + this.widgetOptionsEl.id + ']').each(function(e) {\r\n                this.disableOptionsContainer(e.id);\r\n            }.bind(this));\r\n            if(containerId != undefined) {\r\n                this.enableOptionsContainer(containerId);\r\n            }\r\n            this._showWidgetDescription();\r\n        },\r\n\r\n        enableOptionsContainer: function(containerId) {\r\n            $$('#' + containerId + ' .widget-option').each(function(e) {\r\n                e.removeClassName('skip-submit');\r\n                if (e.hasClassName('obligatory')) {\r\n                    e.removeClassName('obligatory');\r\n                    e.addClassName('required-entry');\r\n                }\r\n            });\r\n            $(containerId).removeClassName('no-display');\r\n        },\r\n\r\n        disableOptionsContainer: function(containerId) {\r\n            if ($(containerId).hasClassName('no-display')) {\r\n                return;\r\n            }\r\n            $$('#' + containerId + ' .widget-option').each(function(e) {\r\n                // Avoid submitting fields of unactive container\r\n                if (!e.hasClassName('skip-submit')) {\r\n                    e.addClassName('skip-submit');\r\n                }\r\n                // Form validation workaround for unactive container\r\n                if (e.hasClassName('required-entry')) {\r\n                    e.removeClassName('required-entry');\r\n                    e.addClassName('obligatory');\r\n                }\r\n            });\r\n            $(containerId).addClassName('no-display');\r\n        },\r\n\r\n        // Assign widget options values when existing widget selected in WYSIWYG\r\n        initOptionValues: function() {\r\n\r\n            if (!this.wysiwygExists()) {\r\n                return false;\r\n            }\r\n\r\n            var e = this.getWysiwygNode();\r\n            if (e != undefined && e.id) {\r\n                var widgetCode = Base64.idDecode(e.id);\r\n                if (widgetCode.indexOf('{{widget') != -1) {\r\n                    this.optionValues = new Hash({});\r\n                    widgetCode.gsub(/([a-z0-9\\_]+)\\s*\\=\\s*[\\\"]{1}([^\\\"]+)[\\\"]{1}/i, function(match){\r\n                        if (match[1] == 'type') {\r\n                            this.widgetEl.value = match[2];\r\n                        } else {\r\n                            this.optionValues.set(match[1], match[2]);\r\n                        }\r\n                    }.bind(this));\r\n\r\n                    this.loadOptions();\r\n                }\r\n            }\r\n        },\r\n\r\n        loadOptions: function() {\r\n            if (!this.widgetEl.value) {\r\n                this.switchOptionsContainer();\r\n                return;\r\n            }\r\n\r\n            var optionsContainerId = this.getOptionsContainerId();\r\n            if ($(optionsContainerId) != undefined) {\r\n                this.switchOptionsContainer(optionsContainerId);\r\n                return;\r\n            }\r\n\r\n            this._showWidgetDescription();\r\n\r\n            var params = {widget_type: this.widgetEl.value, values: this.optionValues};\r\n            new Ajax.Request(this.optionsUrl,\r\n                {\r\n                    parameters: {widget: Object.toJSON(params)},\r\n                    onSuccess: function(transport) {\r\n                        try {\r\n                            widgetTools.onAjaxSuccess(transport);\r\n                            this.switchOptionsContainer();\r\n                            if ($(optionsContainerId) == undefined) {\r\n                                this.widgetOptionsEl.insert({bottom: widgetTools.getDivHtml(optionsContainerId, transport.responseText)});\r\n                            } else {\r\n                                this.switchOptionsContainer(optionsContainerId);\r\n                            }\r\n                        } catch(e) {\r\n                            alert({\r\n                                content: e.message\r\n                            });\r\n                        }\r\n                    }.bind(this)\r\n                }\r\n            );\r\n        },\r\n\r\n        _showWidgetDescription: function() {\r\n            var noteCnt = this.widgetEl.next().down('small');\r\n            var descrCnt = $('widget-description-' + this.widgetEl.selectedIndex);\r\n            if(noteCnt != undefined) {\r\n                var description = (descrCnt != undefined ? descrCnt.innerHTML : '');\r\n                noteCnt.update(description);\r\n            }\r\n        },\r\n\r\n        validateField: function() {\r\n            jQuery(this.widgetEl).valid();\r\n        },\r\n\r\n        insertWidget: function() {\r\n            jQuery('#' + this.formEl).validate({\r\n                ignore: \".skip-submit\",\r\n                errorClass: 'mage-error'\r\n            });\r\n\r\n            var validationResult = jQuery('#' + this.formEl).valid();\r\n            if (validationResult) {\r\n                var formElements = [];\r\n                var i = 0;\r\n                Form.getElements($(this.formEl)).each(function(e) {\r\n                    if(!e.hasClassName('skip-submit')) {\r\n                        formElements[i] = e;\r\n                        i++;\r\n                    }\r\n                });\r\n\r\n                // Add as_is flag to parameters if wysiwyg editor doesn't exist\r\n                var params = Form.serializeElements(formElements);\r\n                if (!this.wysiwygExists()) {\r\n                    params = params + '&as_is=1';\r\n                }\r\n\r\n                new Ajax.Request($(this.formEl).action,\r\n                    {\r\n                        parameters: params,\r\n                        onComplete: function(transport) {\r\n                            try {\r\n                                widgetTools.onAjaxSuccess(transport);\r\n                                widgetTools.dialogWindow.modal('closeModal');\r\n\r\n                                if (typeof(tinyMCE) != \"undefined\" && tinyMCE.activeEditor) {\r\n                                    tinyMCE.activeEditor.focus();\r\n                                    if (this.bMark) {\r\n                                        tinyMCE.activeEditor.selection.moveToBookmark(this.bMark);\r\n                                    }\r\n                                }\r\n\r\n                                this.updateContent(transport.responseText);\r\n                            } catch(e) {\r\n                                alert({\r\n                                    content: e.message\r\n                                });\r\n                            }\r\n                        }.bind(this)\r\n                    });\r\n            }\r\n        },\r\n\r\n        updateContent: function(content) {\r\n            if (this.wysiwygExists()) {\r\n                this.getWysiwyg().execCommand(\"mceInsertContent\", false, content);\r\n            } else {\r\n                var textarea = document.getElementById(this.widgetTargetId);\r\n                updateElementAtCursor(textarea, content);\r\n                varienGlobalEvents.fireEvent('tinymceChange');\r\n                jQuery(textarea).change();\r\n            }\r\n        },\r\n\r\n        wysiwygExists: function() {\r\n            return (typeof tinyMCE != 'undefined') && tinyMCE.get(this.widgetTargetId);\r\n        },\r\n\r\n        getWysiwyg: function() {\r\n            return tinyMCE.activeEditor;\r\n        },\r\n\r\n        getWysiwygNode: function() {\r\n            return tinyMCE.activeEditor.selection.getNode();\r\n        }\r\n    }\r\n\r\n    WysiwygWidget.chooser = Class.create();\r\n    WysiwygWidget.chooser.prototype = {\r\n\r\n        // HTML element A, on which click event fired when choose a selection\r\n        chooserId: null,\r\n\r\n        // Source URL for Ajax requests\r\n        chooserUrl: null,\r\n\r\n        // Chooser config\r\n        config: null,\r\n\r\n        // Chooser dialog window\r\n        dialogWindow: null,\r\n\r\n        // Chooser content for dialog window\r\n        dialogContent: null,\r\n\r\n        overlayShowEffectOptions: null,\r\n        overlayHideEffectOptions: null,\r\n\r\n        initialize: function(chooserId, chooserUrl, config) {\r\n            this.chooserId = chooserId;\r\n            this.chooserUrl = chooserUrl;\r\n            this.config = config;\r\n        },\r\n\r\n        getResponseContainerId: function() {\r\n            return 'responseCnt' + this.chooserId;\r\n        },\r\n\r\n        getChooserControl: function() {\r\n            return $(this.chooserId + 'control');\r\n        },\r\n\r\n        getElement: function() {\r\n            return $(this.chooserId + 'value');\r\n        },\r\n\r\n        getElementLabel: function() {\r\n            return $(this.chooserId + 'label');\r\n        },\r\n\r\n        open: function() {\r\n            $(this.getResponseContainerId()).show();\r\n        },\r\n\r\n        close: function() {\r\n            $(this.getResponseContainerId()).hide();\r\n            this.closeDialogWindow();\r\n        },\r\n\r\n        choose: function(event) {\r\n            // Open dialog window with previously loaded dialog content\r\n            if (this.dialogContent) {\r\n                this.openDialogWindow(this.dialogContent);\r\n                return;\r\n            }\r\n            // Show or hide chooser content if it was already loaded\r\n            var responseContainerId = this.getResponseContainerId();\r\n\r\n            // Otherwise load content from server\r\n            new Ajax.Request(this.chooserUrl,\r\n                {\r\n                    parameters: {element_value: this.getElementValue(), element_label: this.getElementLabelText()},\r\n                    onSuccess: function(transport) {\r\n                        try {\r\n                            widgetTools.onAjaxSuccess(transport);\r\n                            this.dialogContent = widgetTools.getDivHtml(responseContainerId, transport.responseText);\r\n                            this.openDialogWindow(this.dialogContent);\r\n                        } catch(e) {\r\n                            alert({\r\n                                content: e.message\r\n                            });\r\n                        }\r\n                    }.bind(this)\r\n                }\r\n            );\r\n        },\r\n\r\n        openDialogWindow: function (content) {\r\n            this.dialogWindow = jQuery('<div/>').modal({\r\n                title: this.config.buttons.open,\r\n                type: 'slide',\r\n                buttons: [],\r\n                opened: function () {\r\n                    jQuery(this).addClass('magento-message');\r\n                },\r\n                closed: function (e, modal) {\r\n                    modal.modal.remove();\r\n                    this.dialogWindow = null;\r\n                }\r\n            });\r\n\r\n            this.dialogWindow.modal('openModal').append(content);\r\n        },\r\n\r\n        closeDialogWindow: function () {\r\n            this.dialogWindow.modal('closeModal').remove();\r\n        },\r\n\r\n        getElementValue: function(value) {\r\n            return this.getElement().value;\r\n        },\r\n\r\n        getElementLabelText: function(value) {\r\n            return this.getElementLabel().innerHTML;\r\n        },\r\n\r\n        setElementValue: function(value) {\r\n            this.getElement().value = value;\r\n        },\r\n\r\n        setElementLabel: function(value) {\r\n            this.getElementLabel().innerHTML = value;\r\n        }\r\n    };\r\n\r\n    window.WysiwygWidget = WysiwygWidget;\r\n    window.widgetTools = widgetTools;\r\n});\r\n","mage/adminhtml/wysiwyg/tiny_mce/html5-schema.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    /* eslint-disable max-len */\r\n\r\n    var schema = {\r\n        blockContent: [\r\n            'address', 'article', 'aside', 'blockquote', 'details', 'dialog', 'div', 'dl', 'fieldset',\r\n            'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr',\r\n            'menu', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'\r\n        ],\r\n        phrasingContent: [\r\n            '#comment', '#text', 'a', 'abbr', 'audio', 'b', 'bdi', 'bdo', 'br', 'button', 'canvas',\r\n            'cite','code', 'command', 'datalist', 'del', 'dfn', 'em', 'embed', 'i', 'iframe', 'img',\r\n            'input', 'ins', 'kbd', 'keygen', 'label', 'map', 'mark', 'meter', 'noscript', 'object',\r\n            'output', 'picture', 'progress', 'q', 'ruby', 's', 'samp', 'script', 'select', 'small',\r\n            'span', 'strong', 'sub', 'sup', 'textarea', 'time', 'u', 'var', 'video', 'wbr'\r\n        ],\r\n        blockElements: [\r\n            'address', 'article', 'aside', 'blockquote', 'caption', 'center', 'datalist', 'dd', 'dir', 'div',\r\n            'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6',\r\n            'header', 'hgroup', 'hr', 'isindex', 'li', 'menu', 'nav', 'noscript', 'ol', 'optgroup', 'option',\r\n            'p', 'pre', 'section', 'select', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'ul'\r\n        ],\r\n        boolAttrs: [\r\n            'autoplay', 'checked', 'compact', 'controls', 'declare', 'defer', 'disabled', 'ismap', 'loop',\r\n            'multiple', 'nohref', 'noresize', 'noshade', 'nowrap', 'readonly', 'selected'\r\n        ],\r\n        shortEnded: [\r\n            'area', 'base', 'basefont', 'br', 'col', 'embed', 'frame', 'hr', 'img', 'input', 'isindex',\r\n            'link', 'meta', 'param', 'source', 'track', 'wbr'\r\n        ],\r\n        whiteSpace: [\r\n            'audio', 'iframe', 'noscript', 'object', 'pre', 'script', 'style', 'textarea', 'video'\r\n        ],\r\n        selfClosing: [\r\n            'colgroup', 'dd', 'dt', 'li', 'option', 'p', 'td', 'tfoot', 'th', 'thead', 'tr'\r\n        ]\r\n    };\r\n\r\n    schema.flowContent = schema.blockContent.concat(schema.phrasingContent, ['style']);\r\n    schema.nonEmpty = ['td', 'th', 'iframe', 'video', 'audio', 'object', 'script'].concat(schema.shortEnded);\r\n\r\n    _.extend(schema, (function (phrasingContent, flowContent) {\r\n        var validElements   = [],\r\n            validChildren   = [],\r\n            compiled        = {},\r\n            globalAttrs,\r\n            rawData;\r\n\r\n        globalAttrs = [\r\n            'id', 'dir', 'lang', 'class', 'style', 'title', 'hidden', 'onclick', 'onkeyup',\r\n            'tabindex', 'dropzone', 'accesskey', 'draggable', 'translate', 'onmouseup',\r\n            'onkeydown', 'spellcheck', 'ondblclick', 'onmouseout', 'onkeypress', 'contextmenu',\r\n            'onmousedown', 'onmouseover', 'onmousemove', 'contenteditable'\r\n        ];\r\n\r\n        rawData = [\r\n            ['html', 'manifest', 'head body'],\r\n            ['head', '', 'base command link meta noscript script style title'],\r\n            ['title hr noscript br'],\r\n            ['base', 'href target'],\r\n            ['link', 'href rel media hreflang type sizes hreflang'],\r\n            ['meta', 'name http-equiv content charset'],\r\n            ['style', 'media type scoped'],\r\n            ['script', 'src async defer type charset'],\r\n            ['body', 'onafterprint onbeforeprint onbeforeunload onblur onerror onfocus ' +\r\n                'onhashchange onload onmessage onoffline ononline onpagehide onpageshow ' +\r\n                'onpopstate onresize onscroll onstorage onunload background bgcolor text link vlink alink', flowContent\r\n            ],\r\n            ['caption', '', _.without(flowContent, 'table')],\r\n            ['address dt dd div', '', flowContent],\r\n            ['h1 h2 h3 h4 h5 h6 pre p abbr code var samp kbd sub sup i b u bdo span legend em strong small s cite dfn', '', phrasingContent],\r\n            ['blockquote', 'cite', flowContent],\r\n            ['ol', 'reversed start type', 'li'],\r\n            ['ul', 'type compact', 'li'],\r\n            ['li', 'value type', flowContent],\r\n            ['dl', '', 'dt dd'],\r\n            ['a', 'href target rel media hreflang type charset name rev shape coords download', phrasingContent],\r\n            ['q', 'cite', phrasingContent],\r\n            ['ins del', 'cite datetime', flowContent],\r\n            ['img', 'src sizes srcset alt usemap ismap width height name longdesc align border hspace vspace'],\r\n            ['iframe', 'src name width height longdesc frameborder marginwidth marginheight scrolling align sandbox seamless allowfullscreen', flowContent],\r\n            ['embed', 'src type width height'],\r\n            ['object', 'data type typemustmatch name usemap form width height declare classid code codebase codetype archive standby align border hspace vspace', flowContent.concat(['param'])],\r\n            ['param', 'name value valuetype type'],\r\n            ['map', 'name', flowContent.concat(['area'])],\r\n            ['area', 'alt coords shape href target rel media hreflang type nohref'],\r\n            ['table', 'border summary width frame rules cellspacing cellpadding align bgcolor', 'caption colgroup thead tfoot tbody tr col'],\r\n            ['colgroup', 'span width align char charoff valign', 'col'],\r\n            ['col', 'span'],\r\n            ['tbody thead tfoot', 'align char charoff valign', 'tr'],\r\n            ['tr', 'align char charoff valign bgcolor', 'td th'],\r\n            ['td', 'colspan rowspan headers abbr axis scope align char charoff valign nowrap bgcolor width height', flowContent],\r\n            ['th', 'colspan rowspan headers scope abbr axis align char charoff valign nowrap bgcolor width height accept', flowContent],\r\n            ['form', 'accept-charset action autocomplete enctype method name novalidate target onsubmit onreset', flowContent],\r\n            ['fieldset', 'disabled form name', flowContent.concat(['legend'])],\r\n            ['label', 'form for', phrasingContent],\r\n            ['input', 'accept alt autocomplete checked dirname disabled form formaction formenctype formmethod formnovalidate ' +\r\n                'formtarget height list max maxlength min multiple name pattern readonly required size src step type value width usemap align'\r\n            ],\r\n            ['button', 'disabled form formaction formenctype formmethod formnovalidate formtarget name type value', phrasingContent],\r\n            ['select', 'disabled form multiple name required size onfocus onblur onchange', 'option optgroup'],\r\n            ['optgroup', 'disabled label', 'option'],\r\n            ['option', 'disabled label selected value'],\r\n            ['textarea', 'cols dirname disabled form maxlength name readonly required rows wrap'],\r\n            ['menu', 'type label', flowContent.concat(['li'])],\r\n            ['noscript', '', flowContent],\r\n            ['wbr'],\r\n            ['ruby', '', phrasingContent.concat(['rt', 'rp'])],\r\n            ['figcaption', '', flowContent],\r\n            ['mark rt rp summary bdi', '', phrasingContent],\r\n            ['canvas', 'width height', flowContent],\r\n            ['video', 'src crossorigin poster preload autoplay mediagroup loop muted controls width height buffered', flowContent.concat(['track', 'source'])],\r\n            ['audio', 'src crossorigin preload autoplay mediagroup loop muted controls buffered volume', flowContent.concat(['track', 'source'])],\r\n            ['picture', '', 'img source'],\r\n            ['source', 'src srcset type media sizes'],\r\n            ['track', 'kind src srclang label default'],\r\n            ['datalist', '', phrasingContent.concat(['option'])],\r\n            ['article section nav aside header footer', '', flowContent],\r\n            ['hgroup', '', 'h1 h2 h3 h4 h5 h6'],\r\n            ['figure', '', flowContent.concat(['figcaption'])],\r\n            ['time', 'datetime', phrasingContent],\r\n            ['dialog', 'open', flowContent],\r\n            ['command', 'type label icon disabled checked radiogroup command'],\r\n            ['output', 'for form name', phrasingContent],\r\n            ['progress', 'value max', phrasingContent],\r\n            ['meter', 'value min max low high optimum', phrasingContent],\r\n            ['details', 'open', flowContent.concat(['summary'])],\r\n            ['keygen', 'autofocus challenge disabled form keytype name'],\r\n            ['script', 'language xml:space'],\r\n            ['style', 'xml:space'],\r\n            ['embed', 'align name hspace vspace'],\r\n            ['br', 'clear'],\r\n            ['applet', 'codebase archive code object alt name width height align hspace vspace'],\r\n            ['font basefont', 'size color face'],\r\n            ['h1 h2 h3 h4 h5 h6 div p legend caption', 'align'],\r\n            ['ol dl menu dir', 'compact'],\r\n            ['pre', 'width xml:space'],\r\n            ['hr', 'align noshade size width'],\r\n            ['isindex', 'prompt'],\r\n            ['col', 'width align char charoff valign'],\r\n            ['input button select textarea', 'autofocus'],\r\n            ['input textarea', 'placeholder onselect onchange onfocus onblur'],\r\n            ['link script img', 'crossorigin']\r\n        ];\r\n\r\n        rawData.forEach(function (data) {\r\n            var nodes       = data[0].split(' '),\r\n                attributes  = data[1] || [],\r\n                children    = data[2] || [],\r\n                ni          = nodes.length,\r\n                nodeName,\r\n                schemaData;\r\n\r\n            if (typeof attributes === 'string') {\r\n                attributes = attributes.split(' ');\r\n            }\r\n\r\n            if (typeof children === 'string') {\r\n                children = children.split(' ');\r\n            }\r\n\r\n            while (ni--) {\r\n                nodeName    = nodes[ni];\r\n                schemaData  = compiled[nodeName] || {};\r\n\r\n                compiled[nodeName] = {\r\n                    attributes: _.union(schemaData.attributes, globalAttrs, attributes),\r\n                    children: _.union(schemaData.children, children)\r\n                };\r\n            }\r\n        });\r\n\r\n        ['a', 'dfn', 'form', 'meter', 'progress'].forEach(function (nodeName) {\r\n            var node = compiled[nodeName];\r\n\r\n            node.children = _.without(node.children, nodeName);\r\n        });\r\n\r\n        _.each(compiled, function (node, nodeName) {\r\n            var filteredAttributes = [];\r\n\r\n            _.each(node.attributes, function (attribute) { //eslint-disable-line max-nested-callbacks\r\n                // Disallowing usage of 'on*' attributes.\r\n                if (!/^on/.test(attribute)) {\r\n                    filteredAttributes.push(attribute);\r\n                }\r\n            });\r\n\r\n            node.attributes = filteredAttributes;\r\n\r\n            validElements.push(nodeName + '[' + node.attributes.join('|') + ']');\r\n            validChildren.push(nodeName + '[' + node.children.join('|') + ']');\r\n        });\r\n\r\n        return {\r\n            nodes: compiled,\r\n            validElements: validElements,\r\n            validChildren: validChildren\r\n        };\r\n    })(schema.phrasingContent, schema.flowContent));\r\n\r\n    return schema;\r\n});\r\n","mage/adminhtml/wysiwyg/tiny_mce/setup.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'tinymce',\r\n    'mage/adminhtml/wysiwyg/tiny_mce/html5-schema',\r\n    'mage/translate',\r\n    'prototype',\r\n    'mage/adminhtml/events',\r\n    'mage/adminhtml/browser'\r\n], function(jQuery, _, tinyMCE, html5Schema) {\r\n\r\n    tinyMceWysiwygSetup = Class.create();\r\n\r\n    tinyMceWysiwygSetup.prototype = {\r\n        mediaBrowserOpener: null,\r\n        mediaBrowserTargetElementId: null,\r\n\r\n        initialize: function(htmlId, config) {\r\n            if (config.baseStaticUrl && config.baseStaticDefaultUrl) {\r\n                tinyMCE.baseURL = tinyMCE.baseURL.replace(config.baseStaticUrl, config.baseStaticDefaultUrl);\r\n            }\r\n\r\n            this.id = htmlId;\r\n            this.config = config;\r\n            this.schema = config.schema || html5Schema;\r\n\r\n            _.bindAll(this, 'beforeSetContent', 'saveContent', 'onChangeContent', 'openFileBrowser', 'updateTextArea');\r\n\r\n            varienGlobalEvents.attachEventHandler('tinymceChange', this.onChangeContent);\r\n            varienGlobalEvents.attachEventHandler('tinymceBeforeSetContent', this.beforeSetContent);\r\n            varienGlobalEvents.attachEventHandler('tinymceSetContent', this.updateTextArea);\r\n            varienGlobalEvents.attachEventHandler('tinymceSaveContent', this.saveContent);\r\n\r\n            if (typeof tinyMceEditors == 'undefined') {\r\n                tinyMceEditors = $H({});\r\n            }\r\n\r\n            tinyMceEditors.set(this.id, this);\r\n        },\r\n\r\n        setup: function(mode) {\r\n            if (this.config.widget_plugin_src) {\r\n                tinyMCE.PluginManager.load('magentowidget', this.config.widget_plugin_src);\r\n            }\r\n\r\n            if (this.config.plugins) {\r\n                this.config.plugins.each(function(plugin) {\r\n                    tinyMCE.PluginManager.load(plugin.name, plugin.src);\r\n                });\r\n            }\r\n\r\n            if (jQuery.isReady) {\r\n                tinyMCE.dom.Event.domLoaded = true;\r\n            }\r\n\r\n            tinyMCE.init(this.getSettings(mode));\r\n        },\r\n\r\n        getSettings: function(mode) {\r\n            var plugins = 'inlinepopups,safari,pagebreak,style,layer,table,advhr,advimage,emotions,iespell,media,searchreplace,contextmenu,paste,directionality,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras',\r\n                self = this;\r\n\r\n            if (this.config.widget_plugin_src) {\r\n                plugins = 'magentowidget,' + plugins;\r\n            }\r\n\r\n            var magentoPluginsOptions = $H({});\r\n            var magentoPlugins = '';\r\n\r\n            if (this.config.plugins) {\r\n                this.config.plugins.each(function(plugin) {\r\n                    magentoPlugins = plugin.name + ',' + magentoPlugins;\r\n                    magentoPluginsOptions.set(plugin.name, plugin.options);\r\n                });\r\n                if (magentoPlugins) {\r\n                    plugins = '-' + magentoPlugins + plugins;\r\n                }\r\n            }\r\n\r\n            var settings = {\r\n                mode: (mode != undefined ? mode : 'none'),\r\n                elements: this.id,\r\n                theme: 'advanced',\r\n                plugins: plugins,\r\n                theme_advanced_buttons1: magentoPlugins + 'magentowidget,bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,|,styleselect,formatselect,fontselect,fontsizeselect',\r\n                theme_advanced_buttons2: 'cut,copy,paste,pastetext,pasteword,|,search,replace,|,bullist,numlist,|,outdent,indent,blockquote,|,undo,redo,|,link,unlink,anchor,image,cleanup,help,code,|,forecolor,backcolor',\r\n                theme_advanced_buttons3: 'tablecontrols,|,hr,removeformat,visualaid,|,sub,sup,|,charmap,iespell,media,advhr,|,ltr,rtl,|,fullscreen',\r\n                theme_advanced_buttons4: 'insertlayer,moveforward,movebackward,absolute,|,styleprops,|,cite,abbr,acronym,del,ins,attribs,|,visualchars,nonbreaking,pagebreak',\r\n                theme_advanced_toolbar_location: 'top',\r\n                theme_advanced_toolbar_align: 'left',\r\n                theme_advanced_statusbar_location: 'bottom',\r\n                valid_elements: this.schema.validElements.join(','),\r\n                valid_children: this.schema.validChildren.join(','),\r\n                theme_advanced_resizing: true,\r\n                theme_advanced_resize_horizontal: false,\r\n                convert_urls: false,\r\n                relative_urls: false,\r\n                content_css: this.config.content_css,\r\n                custom_popup_css: this.config.popup_css,\r\n                magentowidget_url: this.config.widget_window_url,\r\n                magentoPluginsOptions: magentoPluginsOptions,\r\n                doctype: '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">',\r\n                setup: function(ed){\r\n                    ed.onInit.add(self.onEditorInit.bind(self));\r\n\r\n                    ed.onSubmit.add(function(ed, e) {\r\n                        varienGlobalEvents.fireEvent('tinymceSubmit', e);\r\n                    });\r\n\r\n                    ed.onPaste.add(function(ed, e, o) {\r\n                        varienGlobalEvents.fireEvent('tinymcePaste', o);\r\n                    });\r\n\r\n                    ed.onBeforeSetContent.add(function(ed, o) {\r\n                        varienGlobalEvents.fireEvent('tinymceBeforeSetContent', o);\r\n                    });\r\n\r\n                    ed.onSetContent.add(function(ed, o) {\r\n                        varienGlobalEvents.fireEvent('tinymceSetContent', o);\r\n                    });\r\n\r\n                    ed.onSaveContent.add(function(ed, o) {\r\n                        varienGlobalEvents.fireEvent('tinymceSaveContent', o);\r\n                    });\r\n\r\n                    var onChange = function(ed, l) {\r\n                        varienGlobalEvents.fireEvent('tinymceChange', l);\r\n                    };\r\n\r\n                    ed.onChange.add(onChange);\r\n                    ed.onKeyUp.add(onChange);\r\n\r\n                    ed.onExecCommand.add(function(ed, cmd, ui, val) {\r\n                        varienGlobalEvents.fireEvent('tinymceExecCommand', cmd);\r\n                    });\r\n                }\r\n            };\r\n\r\n            // Set the document base URL\r\n            if (this.config.document_base_url) {\r\n                settings.document_base_url = this.config.document_base_url;\r\n            }\r\n\r\n            if (this.config.files_browser_window_url) {\r\n                settings.file_browser_callback = function(fieldName, url, objectType, w) {\r\n                    varienGlobalEvents.fireEvent(\"open_browser_callback\", {\r\n                        win: w,\r\n                        type: objectType,\r\n                        field: fieldName\r\n                    });\r\n                };\r\n            }\r\n\r\n            if (this.config.width) {\r\n                settings.width = this.config.width;\r\n            }\r\n\r\n            if (this.config.height) {\r\n                settings.height = this.config.height;\r\n            }\r\n\r\n            if (this.config.settings) {\r\n                Object.extend(settings, this.config.settings)\r\n            }\r\n\r\n            return settings;\r\n        },\r\n\r\n        applySchema: function (editor) {\r\n            var schema      = editor.schema,\r\n                schemaData  = this.schema,\r\n                makeMap     = tinyMCE.makeMap;\r\n\r\n            jQuery.extend(true, {\r\n                nonEmpty: schema.getNonEmptyElements(),\r\n                boolAttrs: schema.getBoolAttrs(),\r\n                whiteSpace: schema.getWhiteSpaceElements(),\r\n                shortEnded: schema.getShortEndedElements(),\r\n                selfClosing: schema.getSelfClosingElements(),\r\n                blockElements: schema.getBlockElements()\r\n            }, {\r\n                nonEmpty: makeMap(schemaData.nonEmpty),\r\n                boolAttrs: makeMap(schemaData.boolAttrs),\r\n                whiteSpace: makeMap(schemaData.whiteSpace),\r\n                shortEnded: makeMap(schemaData.shortEnded),\r\n                selfClosing: makeMap(schemaData.selfClosing),\r\n                blockElements: makeMap(schemaData.blockElements)\r\n            });\r\n        },\r\n\r\n        openFileBrowser: function(o) {\r\n            var typeTitle,\r\n                storeId = this.config.store_id !== null ? this.config.store_id : 0,\r\n                frameDialog = jQuery(o.win.frameElement).parents('[role=\"dialog\"]'),\r\n                wUrl = this.config.files_browser_window_url +\r\n                'target_element_id/' + this.id + '/' +\r\n                'store/' + storeId + '/';\r\n\r\n            this.mediaBrowserOpener = o.win;\r\n            this.mediaBrowserTargetElementId = o.field;\r\n\r\n            if (typeof(o.type) != 'undefined' && o.type != \"\") {\r\n                typeTitle = 'image' == o.type ? this.translate('Insert Image...') : this.translate('Insert Media...');\r\n                wUrl = wUrl + \"type/\" + o.type + \"/\";\r\n            } else {\r\n                typeTitle = this.translate('Insert File...');\r\n            }\r\n\r\n            frameDialog.hide();\r\n            jQuery('#mceModalBlocker').hide();\r\n\r\n            MediabrowserUtility.openDialog(wUrl, false, false, typeTitle, {\r\n                closed: function() {\r\n                    frameDialog.show();\r\n                    jQuery('#mceModalBlocker').show();\r\n                }\r\n            });\r\n        },\r\n\r\n        translate: function(string) {\r\n            return jQuery.mage.__ ? jQuery.mage.__(string) : string;\r\n        },\r\n\r\n        getMediaBrowserOpener: function() {\r\n            return this.mediaBrowserOpener;\r\n        },\r\n\r\n        getMediaBrowserTargetElementId: function() {\r\n            return this.mediaBrowserTargetElementId;\r\n        },\r\n\r\n        getToggleButton: function() {\r\n            return $('toggle' + this.id);\r\n        },\r\n\r\n        getPluginButtons: function() {\r\n            return $$('#buttons' + this.id + ' > button.plugin');\r\n        },\r\n\r\n        turnOn: function(mode) {\r\n            this.closePopups();\r\n\r\n            this.setup(mode);\r\n\r\n            tinyMCE.execCommand('mceAddControl', false, this.id);\r\n\r\n            this.getPluginButtons().each(function(e) {\r\n                e.hide();\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        turnOff: function() {\r\n            this.closePopups();\r\n\r\n            tinyMCE.execCommand('mceRemoveControl', false, this.id);\r\n\r\n            this.getPluginButtons().each(function(e) {\r\n                e.show();\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        closePopups: function() {\r\n            if (typeof closeEditorPopup == 'function') {\r\n                // close all popups to avoid problems with updating parent content area\r\n                closeEditorPopup('widget_window' + this.id);\r\n                closeEditorPopup('browser_window' + this.id);\r\n            }\r\n        },\r\n\r\n        toggle: function() {\r\n            if (!tinyMCE.get(this.id)) {\r\n                this.turnOn();\r\n                return true;\r\n            } else {\r\n                this.turnOff();\r\n                return false;\r\n            }\r\n        },\r\n\r\n        onEditorInit: function (editor) {\r\n            this.applySchema(editor);\r\n        },\r\n\r\n        onFormValidation: function() {\r\n            if (tinyMCE.get(this.id)) {\r\n                $(this.id).value = tinyMCE.get(this.id).getContent();\r\n            }\r\n        },\r\n\r\n        onChangeContent: function() {\r\n            // Add \"changed\" to tab class if it exists\r\n            this.updateTextArea();\r\n\r\n            if (this.config.tab_id) {\r\n                var tab = $$('a[id$=' + this.config.tab_id + ']')[0];\r\n                if ($(tab) != undefined && $(tab).hasClassName('tab-item-link')) {\r\n                    $(tab).addClassName('changed');\r\n                }\r\n            }\r\n        },\r\n\r\n        // retrieve directives URL with substituted directive value\r\n        makeDirectiveUrl: function(directive) {\r\n            return this.config.directives_url.replace('directive', 'directive/___directive/' + directive);\r\n        },\r\n\r\n        encodeDirectives: function(content) {\r\n            // collect all HTML tags with attributes that contain directives\r\n            return content.gsub(/<([a-z0-9\\-\\_]+.+?)([a-z0-9\\-\\_]+=\".*?\\{\\{.+?\\}\\}.*?\".+?)>/i, function(match) {\r\n                var attributesString = match[2];\r\n                // process tag attributes string\r\n                attributesString = attributesString.gsub(/([a-z0-9\\-\\_]+)=\"(.*?)(\\{\\{.+?\\}\\})(.*?)\"/i, function(m) {\r\n                    return m[1] + '=\"' + m[2] + this.makeDirectiveUrl(Base64.mageEncode(m[3])) + m[4] + '\"';\r\n                }.bind(this));\r\n\r\n                return '<' + match[1] + attributesString + '>';\r\n\r\n            }.bind(this));\r\n        },\r\n\r\n        encodeWidgets: function(content) {\r\n            return content.gsub(/\\{\\{widget(.*?)\\}\\}/i, function(match) {\r\n                var attributes = this.parseAttributesString(match[1]);\r\n                if (attributes.type) {\r\n                    attributes.type = attributes.type.replace(/\\\\\\\\/g, \"\\\\\");\r\n                    var imageSrc = this.config.widget_placeholders[attributes.type];\r\n                    var imageHtml = '<img';\r\n                    imageHtml += ' id=\"' + Base64.idEncode(match[0]) + '\"';\r\n                    imageHtml += ' src=\"' + imageSrc + '\"';\r\n                    imageHtml += ' title=\"' + match[0].replace(/\\{\\{/g, '{').replace(/\\}\\}/g, '}').replace(/\\\"/g, '&quot;') + '\"';\r\n                    imageHtml += '>';\r\n\r\n                    return imageHtml;\r\n                }\r\n            }.bind(this));\r\n        },\r\n\r\n        decodeDirectives: function(content) {\r\n            // escape special chars in directives url to use it in regular expression\r\n            var url = this.makeDirectiveUrl('%directive%').replace(/([$^.?*!+:=()\\[\\]{}|\\\\])/g, '\\\\$1');\r\n            var reg = new RegExp(url.replace('%directive%', '([a-zA-Z0-9,_-]+)'));\r\n\r\n            return content.gsub(reg, function(match) {\r\n                return Base64.mageDecode(match[1]);\r\n            }.bind(this));\r\n        },\r\n\r\n        decodeWidgets: function(content) {\r\n            return content.gsub(/<img([^>]+id=\\\"[^>]+)>/i, function(match) {\r\n                var attributes = this.parseAttributesString(match[1]);\r\n                if (attributes.id) {\r\n                    var widgetCode = Base64.idDecode(attributes.id);\r\n                    if (widgetCode.indexOf('{{widget') != -1) {\r\n                        return widgetCode;\r\n                    }\r\n                    return match[0];\r\n                }\r\n                return match[0];\r\n            }.bind(this));\r\n        },\r\n\r\n        parseAttributesString: function(attributes) {\r\n            var result = {};\r\n            attributes.gsub(/(\\w+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?/, function(match) {\r\n                result[match[1]] = match[2];\r\n            });\r\n            return result;\r\n        },\r\n\r\n        updateTextArea: function () {\r\n            var editor = tinyMCE.get(this.id),\r\n                content;\r\n\r\n            if (!editor) {\r\n                return;\r\n            }\r\n\r\n            content = editor.getContent();\r\n            content = this.decodeContent(content);\r\n\r\n            jQuery('#' + this.id).val(content).trigger('change');\r\n        },\r\n\r\n        decodeContent: function (content) {\r\n            var result = content;\r\n\r\n            if (this.config.add_widgets) {\r\n                result = this.decodeWidgets(result);\r\n                result = this.decodeDirectives(result);\r\n            } else if (this.config.add_directives) {\r\n                result = this.decodeDirectives(result);\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        encodeContent: function (content) {\r\n            var result = content;\r\n\r\n            if (this.config.add_widgets) {\r\n                result = this.encodeWidgets(result);\r\n                result = this.encodeDirectives(result);\r\n            } else if (this.config.add_directives) {\r\n                result = this.encodeDirectives(result);\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        beforeSetContent: function(o){\r\n            o.content = this.encodeContent(o.content);\r\n        },\r\n\r\n        saveContent: function(o) {\r\n            o.content = this.decodeContent(o.content);\r\n        }\r\n    };\r\n});\r\n","mage/app/config.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint regexdash:true eqnull:true browser:true jquery:true*/\r\ndefine([], function () {\r\n    var baseUrl = '';\r\n    return {\r\n        getBaseUrl: function () {\r\n            return this.values.baseUrl;\r\n        },\r\n        getFormKey: function() {\r\n            return this.values.formKey;\r\n        }\r\n    }\r\n});\r\n","mage/apply/main.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'jquery',\r\n    './scripts'\r\n], function (_, $, processScripts) {\r\n    'use strict';\r\n\r\n    var dataAttr = 'data-mage-init',\r\n        nodeSelector = '[' + dataAttr + ']';\r\n\r\n    /**\r\n     * Initializes components assigned to a specified element via data-* attribute.\r\n     *\r\n     * @param {HTMLElement} el - Element to initialize components with.\r\n     * @param {Object|String} config - Initial components' config.\r\n     * @param {String} component - Components' path.\r\n     */\r\n    function init(el, config, component) {\r\n        require([component], function (fn) {\r\n\r\n            if (typeof fn === 'object') {\r\n                fn = fn[component].bind(fn);\r\n            }\r\n\r\n            if (_.isFunction(fn)) {\r\n                fn(config, el);\r\n            } else if ($(el)[component]) {\r\n                $(el)[component](config);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Parses elements 'data-mage-init' attribute as a valid JSON data.\r\n     * Note: data-mage-init attribute will be removed.\r\n     *\r\n     * @param {HTMLElement} el - Element whose attribute should be parsed.\r\n     * @returns {Object}\r\n     */\r\n    function getData(el) {\r\n        var data = el.getAttribute(dataAttr);\r\n\r\n        el.removeAttribute(dataAttr);\r\n\r\n        return {\r\n            el: el,\r\n            data: JSON.parse(data)\r\n        };\r\n    }\r\n\r\n    return {\r\n        /**\r\n         * Initializes components assigned to HTML elements via [data-mage-init].\r\n         *\r\n         * @example Sample 'data-mage-init' declaration.\r\n         *      data-mage-init='{\"path/to/component\": {\"foo\": \"bar\"}}'\r\n         */\r\n        apply: function () {\r\n            var virtuals = processScripts(),\r\n                nodes = document.querySelectorAll(nodeSelector);\r\n\r\n            _.toArray(nodes)\r\n                .map(getData)\r\n                .concat(virtuals)\r\n                .forEach(function (itemContainer) {\r\n                    var element = itemContainer.el;\r\n\r\n                    _.each(itemContainer.data, function (obj, key) {\r\n                            if (obj.mixins) {\r\n                                require(obj.mixins, function () {\r\n                                    for (var i = 0, len = arguments.length; i < len; i++) {\r\n                                        $.extend(true, itemContainer.data[key], arguments[i](itemContainer.data[key], element));\r\n                                    }\r\n\r\n                                    delete obj.mixins;\r\n                                    init.call(null, element, obj, key);\r\n                                });\r\n                            } else {\r\n                                init.call(null, element, obj, key);\r\n                            }\r\n\r\n                        }\r\n                    );\r\n\r\n                });\r\n        },\r\n        applyFor: init\r\n    };\r\n});\r\n","mage/apply/scripts.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'jquery'\r\n], function (_, $) {\r\n    'use strict';\r\n\r\n    var scriptSelector = 'script[type=\"text/x-magento-init\"]',\r\n        dataAttr = 'data-mage-init',\r\n        virtuals = [];\r\n\r\n    /**\r\n     * Adds components to the virtual list.\r\n     *\r\n     * @param {Object} components\r\n     */\r\n    function addVirtual(components) {\r\n        virtuals.push({\r\n            el: false,\r\n            data: components\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Merges provided data with a current data\r\n     * of a elements' \"data-mage-init\" attribute.\r\n     *\r\n     * @param {Object} components - Object with components and theirs configuration.\r\n     * @param {HTMLElement} elem - Element whose data should be modified.\r\n     */\r\n    function setData(components, elem) {\r\n        var data = elem.getAttribute(dataAttr);\r\n\r\n        data = !!data ? JSON.parse(data) : {};\r\n        _.each(components, function(obj, key) {\r\n            if (_.has(obj, 'mixins')) {\r\n                data[key] = data[key] || {};\r\n                data[key].mixins = data[key].mixins || [];\r\n                data[key].mixins = data[key].mixins.concat(obj.mixins);\r\n                delete obj.mixins;\r\n            }\r\n        });\r\n\r\n        data = $.extend(true, data, components);\r\n        data = JSON.stringify(data);\r\n        elem.setAttribute(dataAttr, data);\r\n    }\r\n\r\n    /**\r\n     * Search for the elements by privded selector and extends theirs data.\r\n     *\r\n     * @param {Object} components - Object with components and theirs configuration.\r\n     * @param {String} selector - Selector for the elements.\r\n     */\r\n    function processElems(components, selector) {\r\n        var elems,\r\n            iterator;\r\n\r\n        if (selector === '*') {\r\n            addVirtual(components);\r\n\r\n            return;\r\n        }\r\n\r\n        elems = document.querySelectorAll(selector);\r\n        iterator = setData.bind(null, components);\r\n\r\n        _.toArray(elems).forEach(iterator);\r\n    }\r\n\r\n    /**\r\n     * Parses content of a provided script node.\r\n     * Note: node will be removed from DOM.\r\n     *\r\n     * @param {HTMLScriptElement} node - Node to be processed.\r\n     * @returns {Object}\r\n     */\r\n    function getNodeData(node) {\r\n        var data = node.textContent;\r\n\r\n        node.parentNode.removeChild(node);\r\n\r\n        return JSON.parse(data);\r\n    }\r\n\r\n    /**\r\n     * Parses 'script' tags with a custom type attribute and moves it's data\r\n     * to a 'data-mage-init' attribute of an elemennt found by provided selector.\r\n     * Note: All found script nodes will be removed from DOM.\r\n     *\r\n     * @returns {Array} An array of components not assigned to the specific element.\r\n     *\r\n     * @example Sample declaration.\r\n     *      <script type=\"text/x-magento-init\">\r\n     *          {\r\n     *              \"body\": {\r\n     *                  \"path/to/component\": {\"foo\": \"bar\"}\r\n     *              }\r\n     *          }\r\n     *      </script>\r\n     *\r\n     * @example Providing data without selector.\r\n     *      {\r\n     *          \"*\": {\r\n     *              \"path/to/component\": {\"bar\": \"baz\"}\r\n     *          }\r\n     *      }\r\n     */\r\n    return function () {\r\n        var nodes = document.querySelectorAll(scriptSelector);\r\n\r\n        _.toArray(nodes)\r\n            .map(getNodeData)\r\n            .forEach(function (item) {\r\n                _.each(item, processElems);\r\n            });\r\n\r\n        return virtuals.splice(0, virtuals.length);\r\n    };\r\n});\r\n","mage/backend/action-link.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint jquery:true*/\r\ndefine([\r\n    \"jquery\",\r\n    \"jquery/ui\"\r\n], function($){\r\n    \"use strict\";\r\n    \r\n    $.widget('mage.actionLink', {\r\n        /**\r\n         * Button creation\r\n         * @protected\r\n         */\r\n        _create: function() {\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * Bind handler on button click\r\n         * @protected\r\n         */\r\n        _bind: function() {\r\n            var keyCode = $.ui.keyCode;\r\n            this._on({\r\n                mousedown: function(e){\r\n                    this._stopPropogation(e);\r\n                },\r\n                mouseup: function(e){\r\n                    this._stopPropogation(e);\r\n                },\r\n                click: function(e) {\r\n                    this._stopPropogation(e);\r\n                    this._triggerEvent();\r\n                },\r\n                keydown: function(e) {\r\n                    switch (e.keyCode) {\r\n                        case keyCode.ENTER:\r\n                        case keyCode.NUMPAD_ENTER:\r\n                            this._stopPropogation(e);\r\n                            this._triggerEvent();\r\n                            break;\r\n                    }\r\n                },\r\n                keyup: function(e) {\r\n                    switch (e.keyCode) {\r\n                        case keyCode.ENTER:\r\n                        case keyCode.NUMPAD_ENTER:\r\n                            this._stopPropogation(e);\r\n                            break;\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} e - event object\r\n         * @private\r\n         */\r\n        _stopPropogation: function(e) {\r\n            e.stopImmediatePropagation();\r\n            e.preventDefault();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _triggerEvent: function() {\r\n            $(this.options.related || this.element)\r\n                .trigger(this.options.event, this.options.eventData ? [this.options.eventData] : [{}]);\r\n        }\r\n    });\r\n    \r\n    return $.mage.actionLink;\r\n});\r\n","mage/backend/bootstrap.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint jquery:true browser:true */\r\n/*global FORM_KEY:true*/\r\ndefine([\r\n    'jquery',\r\n    'mage/apply/main',\r\n    'Magento_Ui/js/lib/knockout/bootstrap',\r\n    'mage/mage'\r\n], function($, mage){\r\n    'use strict';\r\n\r\n    $.ajaxSetup({\r\n        /*\r\n         * @type {string}\r\n         */\r\n        type: 'POST',\r\n\r\n        /*\r\n         * Ajax before send callback\r\n         * @param {Object} The jQuery XMLHttpRequest object returned by $.ajax()\r\n         * @param {Object}\r\n         */\r\n        beforeSend: function(jqXHR, settings) {\r\n            var form_key = typeof FORM_KEY !== 'undefined' ? FORM_KEY : null;\r\n            if (!settings.url.match(new RegExp('[?&]isAjax=true',''))) {\r\n                settings.url = settings.url.match(\r\n                    new RegExp('\\\\?',\"g\")) ?\r\n                    settings.url + '&isAjax=true' :\r\n                    settings.url + '?isAjax=true';\r\n            }\r\n            if (!settings.data) {\r\n                settings.data = {\r\n                    form_key: form_key\r\n                };\r\n            } else if ($.type(settings.data) === \"string\" &&\r\n                settings.data.indexOf('form_key=') === -1) {\r\n                settings.data += '&' + $.param({\r\n                    form_key: form_key\r\n                });\r\n            } else if($.isPlainObject(settings.data) && !settings.data.form_key) {\r\n                settings.data.form_key = form_key;\r\n            }\r\n        },\r\n\r\n        /*\r\n         * Ajax complete callback\r\n         * @param {Object} The jQuery XMLHttpRequest object returned by $.ajax()\r\n         * @param {string}\r\n         */\r\n        complete: function(jqXHR) {\r\n            if (jqXHR.readyState === 4) {\r\n                try {\r\n                    var jsonObject = $.parseJSON(jqXHR.responseText);\r\n                    if (jsonObject.ajaxExpired && jsonObject.ajaxRedirect) {\r\n                        window.location.replace(jsonObject.ajaxRedirect);\r\n                    }\r\n                } catch(e) {}\r\n            }\r\n        }\r\n    });\r\n\r\n    var bootstrap = function() {\r\n        /**\r\n         * Init all components defined via data-mage-init attribute\r\n         * and subscribe init action on contentUpdated event\r\n         */\r\n        mage.apply();\r\n\r\n        /*\r\n         * Initialization of notification widget\r\n         */\r\n        $('body').mage('notification');\r\n    };\r\n\r\n    $(bootstrap);\r\n});\r\n","mage/backend/button.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*global require:true*/\r\n(function (factory) {\r\n    'use strict';\r\n\r\n    if (typeof define === 'function' && define.amd) {\r\n        define([\r\n            'jquery',\r\n            'jquery/ui'\r\n        ], factory);\r\n    } else {\r\n        factory(jQuery);\r\n    }\r\n}(function ($) {\r\n    'use strict';\r\n\r\n    $.widget('ui.button', $.ui.button, {\r\n        options: {\r\n            eventData: {},\r\n            waitTillResolved: true\r\n        },\r\n\r\n        /**\r\n         * Button creation.\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            if (this.options.event) {\r\n                this.options.target = this.options.target || this.element;\r\n                this._bind();\r\n            }\r\n\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * Bind handler on button click.\r\n         * @protected\r\n         */\r\n        _bind: function () {\r\n            this.element\r\n                .off('click.button')\r\n                .on('click.button', $.proxy(this._click, this));\r\n        },\r\n\r\n        /**\r\n         * Button click handler.\r\n         * @protected\r\n         */\r\n        _click: function () {\r\n            var options = this.options;\r\n\r\n            $(options.target).trigger(options.event, [options.eventData]);\r\n        }\r\n    });\r\n\r\n    return $.ui.button;\r\n}));\r\n","mage/backend/editablemultiselect.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    \"jquery\",\r\n    'Magento_Ui/js/modal/alert',\r\n    'Magento_Ui/js/modal/confirm',\r\n    \"jquery/editableMultiselect/js/jquery.editable\",\r\n    \"jquery/editableMultiselect/js/jquery.multiselect\"\r\n], function($, alert, confirm){\r\n\r\n\r\n    /**\r\n     * Editable multiselect wrapper for multiselects\r\n     *\r\n     * This class is defined in global scope ('var' is not needed)\r\n     *\r\n     * @param String settings[add_button_caption] caption of the 'Add New Value' button\r\n     * @param String settings[new_url] URL to which new request has to be submitted\r\n     * @param String settings[save_url] URL to which save request has to be submitted\r\n     * @param String settings[delete_url] URL to which delete request has to be submitted\r\n     * @param String settings[delete_confirm_message] confirmation message that is shown to user during delete operation\r\n     * @param String settings[target_select_id] HTML ID of target select element\r\n     * @param Hash settings[submit_data] extra parameters to send with new/edit/delete requests\r\n     * @param String settings[entity_value_name] name of the request parameter that represents select option text\r\n     * @param String settings[entity_id_name] name of the request parameter that represents select option value\r\n     * @param Boolean settings[is_entry_editable] flag that shows if user can add/edit/remove data\r\n     *\r\n     * @constructor\r\n     */\r\n    EditableMultiselect = function(settings) {\r\n\r\n        this.settings = settings || {};\r\n        this.addButtonCaption = this.settings.add_button_caption || 'Add new value';\r\n        this.newUrl = this.settings.new_url;\r\n        this.saveUrl = this.settings.save_url;\r\n        this.deleteUrl = this.settings.delete_url;\r\n        this.deleteConfirmMessage = this.settings.delete_confirm_message;\r\n        this.targetSelectId = this.settings.target_select_id;\r\n        this.submitData = this.settings.submit_data || {};\r\n        this.entityIdName = this.settings.entity_id_name || 'entity_id';\r\n        this.entityValueName = this.settings.entity_value_name || 'entity_value';\r\n        this.isEntityEditable = this.settings.is_entity_editable || false;\r\n\r\n        /**\r\n         * Initialize editable multiselect (make it visible in UI)\r\n         */\r\n        EditableMultiselect.prototype.init = function() {\r\n            var self = this;\r\n            var mselectOptions = {\r\n                addText: this.addButtonCaption,\r\n                mselectInputSubmitCallback: function (value, options) {\r\n                    self.createEntity(value, options);\r\n                }\r\n            };\r\n\r\n            if (!this.isEntityEditable) {\r\n                // Override default layout of editable multiselect\r\n                mselectOptions.layout = '<section class=\"block %mselectListClass%\">' +\r\n                    '<div class=\"block-content\"><div class=\"%mselectItemsWrapperClass%\">' +\r\n                    '%items%' +\r\n                    '</div></div>' +\r\n                    '<div class=\"%mselectInputContainerClass%\">' +\r\n                    '<input type=\"text\" class=\"%mselectInputClass%\" title=\"%inputTitle%\"/>' +\r\n                    '<span class=\"%mselectButtonCancelClass%\" title=\"%cancelText%\"></span>' +\r\n                    '<span class=\"%mselectButtonSaveClass%\" title=\"Add\"></span>' +\r\n                    '</div>' +\r\n                    '</section>';\r\n            }\r\n\r\n            $('#' + this.targetSelectId).multiselect(mselectOptions);\r\n\r\n            // Make multiselect editable if needed\r\n            if (this.isEntityEditable) {\r\n                this.makeMultiselectEditable();\r\n\r\n                // Root element of HTML markup that represents select element in UI\r\n                var mselectList = $('#' + this.targetSelectId).next();\r\n                this.attachEventsToControls(mselectList);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Attach required event handlers to control elements of editable multiselect\r\n         *\r\n         * @param mselectList\r\n         */\r\n        EditableMultiselect.prototype.attachEventsToControls = function (mselectList)\r\n        {\r\n            mselectList.on(\"click.mselect-delete\", '.mselect-delete', {container: this}, function(event) {\r\n                // Pass the clicked button to container\r\n                event.data.container.deleteEntity({delete_button: this});\r\n            });\r\n\r\n            mselectList.on('click.mselect-checked', '.mselect-list-item input', {container: this}, function (event) {\r\n                var el = $(this),\r\n                    checkedClassName = 'mselect-checked';\r\n                el[el.is(':checked') ? 'addClass' : 'removeClass'](checkedClassName);\r\n                event.data.container.makeMultiselectEditable();\r\n            });\r\n\r\n            mselectList.on('click.mselect-edit', '.mselect-edit', {container: this}, function (event) {\r\n                event.data.container.makeMultiselectEditable();\r\n                $(this).parent().find('label span').trigger(\"dblclick\");\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Make multiselect editable\r\n         */\r\n        EditableMultiselect.prototype.makeMultiselectEditable = function() {\r\n            var entityIdName = this.entityIdName,\r\n                entityValueName = this.entityValueName,\r\n                selectList = $('#' + this.targetSelectId).next();\r\n            selectList.find('.mselect-list-item:not(.mselect-list-item-not-editable) label span').editable(this.saveUrl,\r\n            {\r\n                type: 'text',\r\n                submit: '<button class=\"mselect-save\" title=\"Save\" type=\"submit\" />',\r\n                cancel: '<span class=\"mselect-cancel\" title=\"Cancel\"></span>',\r\n                event: 'dblclick',\r\n                placeholder: '',\r\n                isChecked: function(settings) {\r\n                    var that = $(this);\r\n                    if (!that.closest('.mselect-list-item').hasClass('mselect-disabled')) {\r\n                        var checked = that.parent().find('[type=checkbox]').prop('disabled');\r\n                        that.parent().find('[type=checkbox]').prop({\r\n                            disabled: !checked\r\n                        });\r\n                    }\r\n                },\r\n                data: function(value, settings) {\r\n                    settings.isChecked.apply(this, [settings]);\r\n                    if (typeof value === 'string') {\r\n                        var retval = value.unescapeHTML();\r\n                        return (retval);\r\n                    }\r\n                    return value;\r\n                },\r\n                submitdata: this.submitData,\r\n                onblur: 'cancel',\r\n                name: entityValueName,\r\n                ajaxoptions: {\r\n                    dataType: 'json'\r\n                },\r\n\r\n                onsubmit: function (settings, original) {\r\n                    var select = $(original).closest('.mselect-list').prev(),\r\n                        current = $(original).closest('.mselect-list-item').index(),\r\n                        entityId = select.find('option').eq(current).val();\r\n                    // Add entity ID to AJAX request params\r\n                    var entityInfo = {};\r\n                    entityInfo[entityIdName] = entityId;\r\n                    settings.submitdata = $.extend(settings.submitdata || {}, entityInfo);\r\n                },\r\n\r\n                callback: function (result, settings) {\r\n                    settings.isChecked.apply(this, [settings]);\r\n                    var select = $(this).closest('.mselect-list').prev(),\r\n                        current = $(this).closest('.mselect-list-item').index();\r\n                    if (result.success) {\r\n                        if (typeof result[entityValueName] === 'string') {\r\n                            select.find('option').eq(current).val(result[entityIdName]).text(result[entityValueName]);\r\n                            $(this).html(result[entityValueName].escapeHTML());\r\n                        }\r\n                    } else {\r\n                        alert({\r\n                            content: result.error_message\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Callback function that is called when admin adds new value to select\r\n         *\r\n         * @param value\r\n         * @param options - list of settings of multiselect\r\n         */\r\n        EditableMultiselect.prototype.createEntity = function(value, options) {\r\n            if (!value) {\r\n                return;\r\n            }\r\n            var select = $('#' + this.targetSelectId),\r\n                entityIdName = this.entityIdName,\r\n                entityValueName = this.entityValueName,\r\n                entityInfo = {};\r\n            entityInfo[entityIdName] = null;\r\n            entityInfo[entityValueName] = value;\r\n\r\n            var postData = $.extend(entityInfo, this.submitData);\r\n\r\n            var ajaxOptions = {\r\n                type: 'POST',\r\n                data: postData,\r\n                dataType: 'json',\r\n                url: this.newUrl,\r\n                success: function(result, status) {\r\n                    if (result.success) {\r\n                        var resultEntityValueName=\"\";\r\n                        if (typeof result[entityValueName] === 'string') {\r\n                            resultEntityValueName=result[entityValueName].escapeHTML();\r\n                        } else {\r\n                            resultEntityValueName=result[entityValueName];\r\n                        }\r\n                        // Add item to initial select element\r\n                        select.append('<option value=\"' + result[entityIdName] + '\" selected=\"selected\">' +\r\n                        resultEntityValueName + '</option>');\r\n                        // Add editable multiselect item\r\n                        var mselectItemHtml = $(options.item.replace(/%value%|%label%/gi, resultEntityValueName)\r\n                                .replace(/%mselectDisabledClass%|%iseditable%|%isremovable%/gi, '')\r\n                                .replace(/%mselectListItemClass%/gi, options.mselectListItemClass))\r\n                                .find('[type=checkbox]')\r\n                                .attr('checked', true)\r\n                                .addClass(options.mselectCheckedClass)\r\n                                .end(),\r\n                            sectionBlock = select.nextAll('section.block:first'),\r\n                            itemsWrapper = sectionBlock.find('.' + options.mselectItemsWrapperClass + '');\r\n                        if( itemsWrapper.children('.' + options.mselectListItemClass + '').length ) {\r\n                            itemsWrapper.children('.' + options.mselectListItemClass + ':last').after(mselectItemHtml);\r\n                        } else {\r\n                            itemsWrapper.prepend(mselectItemHtml);\r\n                        }\r\n                        // Trigger blur event on input field, that is used to add new value, to hide it\r\n                        var inputSelector = '.' + options.mselectInputContainerClass + ' [type=text].' +\r\n                            options.mselectInputClass + '';\r\n                        sectionBlock.find(inputSelector).trigger('blur');\r\n                    } else {\r\n                        alert({\r\n                            content: result.error_message\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n            $.ajax(ajaxOptions);\r\n        };\r\n\r\n        /**\r\n         * Callback function that is called when user tries to delete value from select\r\n         *\r\n         * @param options\r\n         */\r\n        EditableMultiselect.prototype.deleteEntity = function(options) {\r\n            var self = this;\r\n\r\n            if (options.delete_button) {\r\n                confirm({\r\n                    content: this.deleteConfirmMessage,\r\n                    actions: {\r\n                        confirm: function() {\r\n                            // Button that has been clicked\r\n                            var deleteButton = $(options.delete_button),\r\n                                index = deleteButton.parent().index(),\r\n                                select = deleteButton.closest('.mselect-list').prev(),\r\n                                entityId = select.find('option').eq(index).val(),\r\n                                entityInfo = {};\r\n                            entityInfo[self.entityIdName] = entityId;\r\n                            var postData = $.extend(entityInfo, self.submitData);\r\n\r\n                            var ajaxOptions = {\r\n                                type: 'POST',\r\n                                data: postData,\r\n                                dataType: 'json',\r\n                                url: self.deleteUrl,\r\n                                success: function(result, status) {\r\n                                    if (result.success) {\r\n                                        deleteButton.parent().remove();\r\n                                        select.find('option').eq(index).remove();\r\n                                    } else {\r\n                                        alert({\r\n                                            content: result.error_message\r\n                                        });\r\n                                    }\r\n                                }\r\n                            };\r\n                            $.ajax(ajaxOptions);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    };\r\n});\r\n","mage/backend/floating-header.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint browser:true*/\r\ndefine([\r\n    \"jquery\",\r\n    \"jquery/ui\"\r\n], function($){\r\n    \"use strict\";\r\n        \r\n    $.widget('mage.floatingHeader', {\r\n        options: {\r\n            placeholderAttrs: {\r\n                'class': 'page-actions-placeholder'\r\n            },\r\n            fixedClass: '_fixed',\r\n            hiddenClass: '_hidden',\r\n            title: '.page-title-wrapper .page-title',\r\n            pageMainActions: '.page-main-actions',\r\n            contains: '[data-role=modal]'\r\n        },\r\n\r\n        /**\r\n         * Widget initialization\r\n         * @private\r\n         */\r\n        _create: function() {\r\n            var title = $(this.options.title).text(),\r\n                wrapped = this.element.find('.page-actions-buttons').children();\r\n\r\n            if (this.element.parents(this.options.contains).length) {\r\n                return this;\r\n            }\r\n\r\n            this._setVars();\r\n            this._bind();\r\n            this.element.find('script').remove();\r\n            if (wrapped.length) {\r\n                wrapped\r\n                    .unwrap()   // .page-actions-buttons\r\n                    .unwrap();  // .page-actions-inner\r\n            }\r\n            this.element.wrapInner($('<div/>', {'class': 'page-actions-buttons'}));\r\n            this.element.wrapInner($('<div/>', {'class': 'page-actions-inner', 'data-title': title}));\r\n        },\r\n\r\n        /**\r\n         * Set privat variables on load, for performance purposes\r\n         * @private\r\n         */\r\n        _setVars: function() {\r\n            this._placeholder = this.element.before($('<div/>', this.options.placeholderAttrs)).prev();\r\n            this._offsetTop = this._placeholder.offset().top;\r\n            this._height = this.element\r\n                .parents(this.options.pageMainActions)\r\n                .outerHeight();\r\n        },\r\n\r\n        /**\r\n         * Event binding, will monitor scroll and resize events (resize events left for backward compat)\r\n         * @private\r\n         */\r\n        _bind: function() {\r\n            this._on(window, {\r\n                scroll: this._handlePageScroll,\r\n                resize: this._handlePageScroll\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Event handler for setting fixed positioning\r\n         * @event\r\n         * @private\r\n         */\r\n        _handlePageScroll: function() {\r\n            var isActive = ($(window).scrollTop() > this._offsetTop);\r\n\r\n            if (isActive) {\r\n                this.element\r\n                    .addClass(this.options.fixedClass)\r\n                    .parents(this.options.pageMainActions)\r\n                    .addClass(this.options.hiddenClass);\r\n            } else {\r\n                this.element\r\n                    .removeClass(this.options.fixedClass)\r\n                    .parents(this.options.pageMainActions)\r\n                    .removeClass(this.options.hiddenClass);\r\n            }\r\n\r\n            this._placeholder.height(isActive ? this._height: '');\r\n        },\r\n\r\n        /**\r\n         * Widget destroy functionality\r\n         * @private\r\n         */\r\n        _destroy: function() {\r\n            this._placeholder.remove();\r\n            this._off($(window));\r\n        }\r\n    });\r\n    \r\n    return $.mage.floatingHeader;\r\n});\r\n","mage/backend/form.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n(function (factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define([\r\n            \"jquery\",\r\n            \"jquery/ui\"\r\n        ], factory);\r\n    } else {\r\n        factory(jQuery);\r\n    }\r\n}(function ($) {\r\n    \"use strict\";\r\n\r\n    $.widget(\"mage.form\", {\r\n        options: {\r\n            handlersData: {\r\n                save: {},\r\n                saveAndContinueEdit: {\r\n                    action: {\r\n                        args: {\r\n                            back: 'edit'\r\n                        }\r\n                    }\r\n                },\r\n                preview: {\r\n                    target: '_blank'\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Form creation\r\n         * @protected\r\n         */\r\n        _create: function() {\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * Set form attributes to initial state\r\n         * @protected\r\n         */\r\n        _rollback: function() {\r\n            if (this.oldAttributes) {\r\n                this.element.prop(this.oldAttributes);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Check if field value is changed\r\n         * @protected\r\n         * @param {Object} e event object\r\n         */\r\n        _changesObserver: function(e) {\r\n            var target = $(e.target);\r\n            if (e.type === 'focus' || e.type === 'focusin') {\r\n                this.currentField = {\r\n                    statuses: {\r\n                        checked: target.is(':checked'),\r\n                        selected: target.is(':selected')\r\n                    },\r\n                    val: target.val()\r\n                };\r\n\r\n            } else {\r\n                if (this.currentField) {\r\n                    var changed = target.val() !== this.currentField.val ||\r\n                        target.is(':checked') !== this.currentField.statuses.checked ||\r\n                        target.is(':selected') !== this.currentField.statuses.selected;\r\n                    if (changed) {\r\n                        target.trigger('changed');\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * Get array with handler names\r\n         * @protected\r\n         * @return {Array} Array of handler names\r\n         */\r\n        _getHandlers: function() {\r\n            var handlers = [];\r\n            $.each(this.options.handlersData, function(key) {\r\n                handlers.push(key);\r\n            });\r\n            return handlers;\r\n        },\r\n\r\n        /**\r\n         * Store initial value of form attribute\r\n         * @param {string} attrName name of attribute\r\n         * @protected\r\n         */\r\n        _storeAttribute: function(attrName) {\r\n            this.oldAttributes = this.oldAttributes || {};\r\n            if (!this.oldAttributes[attrName]) {\r\n                var prop = this.element.attr(attrName);\r\n                this.oldAttributes[attrName] = prop ? prop : '';\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Bind handlers\r\n         * @protected\r\n         */\r\n        _bind: function() {\r\n            this.element\r\n                .on(this._getHandlers().join(' '), $.proxy(this._submit, this))\r\n                .on('focus blur focusin focusout', $.proxy(this._changesObserver, this));\r\n        },\r\n\r\n        /**\r\n         * Get action url for form\r\n         * @param {Object|string} data object with parameters for action url or url string\r\n         * @return {string} action url\r\n         */\r\n        _getActionUrl: function(data) {\r\n            if ($.type(data) === 'object') {\r\n                return this._buildURL(this.oldAttributes.action, data.args);\r\n            } else {\r\n                return $.type(data) === 'string' ? data : this.oldAttributes.action;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Add additional parameters into URL\r\n         * @param {string} url - original url\r\n         * @param {Object} params - object with parameters for action url\r\n         * @return {string} action url\r\n         * @private\r\n         */\r\n        _buildURL: function(url, params) {\r\n            var concat = /\\?/.test(url) ? ['&', '='] : ['/', '/'];\r\n            url = url.replace(/[\\/&]+$/, '');\r\n            $.each(params, function(key, value) {\r\n                url += concat[0] + key + concat[1] + window.encodeURIComponent(value);\r\n            });\r\n            return url + (concat[0] === '/' ? '/' : '');\r\n        },\r\n\r\n        /**\r\n         * Prepare data for form attributes\r\n         * @protected\r\n         * @param {Object}\r\n         * @return {Object}\r\n         */\r\n        _processData: function(data) {\r\n            $.each(data, $.proxy(function(attrName, attrValue) {\r\n                this._storeAttribute(attrName);\r\n                if (attrName === 'action') {\r\n                    data[attrName] = this._getActionUrl(attrValue);\r\n                }\r\n            }, this));\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Get additional data before form submit\r\n         * @protected\r\n         * @param {string}\r\n         * @param {Object}\r\n         */\r\n        _beforeSubmit: function(handlerName, data) {\r\n            var submitData = {};\r\n            var event = new $.Event('beforeSubmit');\r\n            this.element.trigger(event, [submitData, handlerName]);\r\n            data = $.extend(\r\n                true, {},\r\n                this.options.handlersData[handlerName] || {},\r\n                submitData,\r\n                data\r\n            );\r\n            this.element.prop(this._processData(data));\r\n            return !event.isDefaultPrevented();\r\n        },\r\n\r\n        /**\r\n         * Submit the form\r\n         * @param {Object} e event object\r\n         * @param {Object} data event data object\r\n         */\r\n        _submit: function(e, data) {\r\n            this._rollback();\r\n            if (false !== this._beforeSubmit(e.type, data)) {\r\n                this.element.trigger('submit', e);\r\n            }\r\n        }\r\n    });\r\n    \r\n    return $.mage.form;\r\n}));\r\n","mage/backend/jstree-mixin.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return function () {\r\n        $.jstree._themes = require.s.contexts._.config.baseUrl + 'jquery/jstree/themes/';\r\n    };\r\n});\r\n","mage/backend/menu.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint jquery:true*/\r\n(function (factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define([\r\n            \"jquery\",\r\n            \"jquery/ui\"\r\n        ], factory);\r\n    } else {\r\n        factory(jQuery);\r\n    }\r\n}(function ($) {\r\n    \"use strict\";\r\n    \r\n    $.widget('mage.menu', {\r\n        widgetEventPrefix: \"menu\",\r\n        version: \"1.10.1\",\r\n        defaultElement: \"<ul>\",\r\n        delay: 300,\r\n        options: {\r\n            icons: {\r\n                submenu: \"ui-icon-carat-1-e\"\r\n            },\r\n            menus: \"ul\",\r\n            position: {\r\n                my: \"left top\",\r\n                at: \"right top\"\r\n            },\r\n            role: \"menu\",\r\n\r\n            // callbacks\r\n            blur: null,\r\n            focus: null,\r\n            select: null\r\n        },\r\n\r\n        _create: function () {\r\n            this.activeMenu = this.element;\r\n            // flag used to prevent firing of the click handler\r\n            // as the event bubbles up through nested menus\r\n            this.mouseHandled = false;\r\n            this.element\r\n                .uniqueId()\r\n                .addClass(\"ui-menu ui-widget ui-widget-content ui-corner-all\")\r\n                .toggleClass(\"ui-menu-icons\", !!this.element.find(\".ui-icon\").length)\r\n                .attr({\r\n                    role: this.options.role,\r\n                    tabIndex: 0\r\n                })\r\n                // need to catch all clicks on disabled menu\r\n                // not possible through _on\r\n                .bind(\"click\" + this.eventNamespace, $.proxy(function (event) {\r\n                    if (this.options.disabled) {\r\n                        event.preventDefault();\r\n                    }\r\n                }, this));\r\n\r\n            if (this.options.disabled) {\r\n                this.element\r\n                    .addClass(\"ui-state-disabled\")\r\n                    .attr(\"aria-disabled\", \"true\");\r\n            }\r\n\r\n            this._on({\r\n                // Prevent focus from sticking to links inside menu after clicking\r\n                // them (focus should always stay on UL during navigation).\r\n                \"mousedown .ui-menu-item > a\": function (event) {\r\n                    event.preventDefault();\r\n                },\r\n                \"click .ui-state-disabled > a\": function (event) {\r\n                    event.preventDefault();\r\n                },\r\n                \"click .ui-menu-item:has(a)\": function (event) {\r\n                    var target = $(event.target).closest(\".ui-menu-item\");\r\n                    if (!this.mouseHandled && target.not(\".ui-state-disabled\").length) {\r\n                        this.mouseHandled = true;\r\n\r\n                        this.select(event);\r\n                        // Open submenu on click\r\n                        if (target.has(\".ui-menu\").length) {\r\n                            this.expand(event);\r\n                        } else if (!this.element.is(\":focus\")) {\r\n                            // Redirect focus to the menu\r\n                            this.element.trigger(\"focus\", [true]);\r\n\r\n                            // If the active item is on the top level, let it stay active.\r\n                            // Otherwise, blur the active item since it is no longer visible.\r\n                            if (this.active && this.active.parents(\".ui-menu\").length === 1) {\r\n                                clearTimeout(this.timer);\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"mouseenter .ui-menu-item\": function (event) {\r\n                    var target = $(event.currentTarget);\r\n                    // Remove ui-state-active class from siblings of the newly focused menu item\r\n                    // to avoid a jump caused by adjacent elements both having a class with a border\r\n                    target.siblings().children(\".ui-state-active\").removeClass(\"ui-state-active\");\r\n                    this.focus(event, target);\r\n                },\r\n                mouseleave: \"collapseAll\",\r\n                \"mouseleave .ui-menu\": \"collapseAll\",\r\n                focus: function (event, keepActiveItem) {\r\n                    // If there's already an active item, keep it active\r\n                    // If not, activate the first item\r\n                    var item = this.active || this.element.children(\".ui-menu-item\").eq(0);\r\n\r\n                    if (!keepActiveItem) {\r\n                        this.focus(event, item);\r\n                    }\r\n                },\r\n                blur: function (event) {\r\n                    this._delay(function () {\r\n                        if (!$.contains(this.element[0], this.document[0].activeElement)) {\r\n                            this.collapseAll(event);\r\n                        }\r\n                    });\r\n                },\r\n                keydown: \"_keydown\"\r\n            });\r\n\r\n            this.refresh();\r\n\r\n            // Clicks outside of a menu collapse any open menus\r\n            this._on(this.document, {\r\n                click: function (event) {\r\n                    if (!$(event.target).closest(\".ui-menu\").length) {\r\n                        this.collapseAll(event);\r\n                    }\r\n\r\n                    // Reset the mouseHandled flag\r\n                    this.mouseHandled = false;\r\n                }\r\n            });\r\n        },\r\n\r\n        _destroy: function () {\r\n            // Destroy (sub)menus\r\n            this.element\r\n                .removeAttr(\"aria-activedescendant\")\r\n                .find(\".ui-menu\").addBack()\r\n                .removeClass(\"ui-menu ui-widget ui-widget-content ui-corner-all ui-menu-icons\")\r\n                .removeAttr(\"role\")\r\n                .removeAttr(\"tabIndex\")\r\n                .removeAttr(\"aria-labelledby\")\r\n                .removeAttr(\"aria-expanded\")\r\n                .removeAttr(\"aria-hidden\")\r\n                .removeAttr(\"aria-disabled\")\r\n                .removeUniqueId()\r\n                .show();\r\n\r\n            // Destroy menu items\r\n            this.element.find(\".ui-menu-item\")\r\n                .removeClass(\"ui-menu-item\")\r\n                .removeAttr(\"role\")\r\n                .removeAttr(\"aria-disabled\")\r\n                .children(\"a\")\r\n                .removeUniqueId()\r\n                .removeClass(\"ui-corner-all ui-state-hover\")\r\n                .removeAttr(\"tabIndex\")\r\n                .removeAttr(\"role\")\r\n                .removeAttr(\"aria-haspopup\")\r\n                .children().each(function () {\r\n                    var elem = $(this);\r\n                    if (elem.data(\"ui-menu-submenu-carat\")) {\r\n                        elem.remove();\r\n                    }\r\n                });\r\n\r\n            // Destroy menu dividers\r\n            this.element.find(\".ui-menu-divider\").removeClass(\"ui-menu-divider ui-widget-content\");\r\n        },\r\n\r\n        _keydown: function (event) {\r\n            var match, prev, character, skip, regex,\r\n                preventDefault = true;\r\n\r\n            function escape(value) {\r\n                return value.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\r\n            }\r\n\r\n            switch (event.keyCode) {\r\n                case $.ui.keyCode.PAGE_UP:\r\n                    this.previousPage(event);\r\n                    break;\r\n                case $.ui.keyCode.PAGE_DOWN:\r\n                    this.nextPage(event);\r\n                    break;\r\n                case $.ui.keyCode.HOME:\r\n                    this._move(\"first\", \"first\", event);\r\n                    break;\r\n                case $.ui.keyCode.END:\r\n                    this._move(\"last\", \"last\", event);\r\n                    break;\r\n                case $.ui.keyCode.UP:\r\n                    this.previous(event);\r\n                    break;\r\n                case $.ui.keyCode.DOWN:\r\n                    this.next(event);\r\n                    break;\r\n                case $.ui.keyCode.LEFT:\r\n                    this.collapse(event);\r\n                    break;\r\n                case $.ui.keyCode.RIGHT:\r\n                    if (this.active && !this.active.is(\".ui-state-disabled\")) {\r\n                        this.expand(event);\r\n                    }\r\n                    break;\r\n                case $.ui.keyCode.ENTER:\r\n                case $.ui.keyCode.SPACE:\r\n                    this._activate(event);\r\n                    break;\r\n                case $.ui.keyCode.ESCAPE:\r\n                    this.collapse(event);\r\n                    break;\r\n                default:\r\n                    preventDefault = false;\r\n                    prev = this.previousFilter || \"\";\r\n                    character = String.fromCharCode(event.keyCode);\r\n                    skip = false;\r\n\r\n                    clearTimeout(this.filterTimer);\r\n\r\n                    if (character === prev) {\r\n                        skip = true;\r\n                    } else {\r\n                        character = prev + character;\r\n                    }\r\n\r\n                    regex = new RegExp(\"^\" + escape(character), \"i\");\r\n                    match = this.activeMenu.children(\".ui-menu-item\").filter(function () {\r\n                        return regex.test($(this).children(\"a\").text());\r\n                    });\r\n                    match = skip && match.index(this.active.next()) !== -1 ?\r\n                        this.active.nextAll(\".ui-menu-item\") :\r\n                        match;\r\n\r\n                    // If no matches on the current filter, reset to the last character pressed\r\n                    // to move down the menu to the first item that starts with that character\r\n                    if (!match.length) {\r\n                        character = String.fromCharCode(event.keyCode);\r\n                        regex = new RegExp(\"^\" + escape(character), \"i\");\r\n                        match = this.activeMenu.children(\".ui-menu-item\").filter(function () {\r\n                            return regex.test($(this).children(\"a\").text());\r\n                        });\r\n                    }\r\n\r\n                    if (match.length) {\r\n                        this.focus(event, match);\r\n                        if (match.length > 1) {\r\n                            this.previousFilter = character;\r\n                            this.filterTimer = this._delay(function () {\r\n                                delete this.previousFilter;\r\n                            }, 1000);\r\n                        } else {\r\n                            delete this.previousFilter;\r\n                        }\r\n                    } else {\r\n                        delete this.previousFilter;\r\n                    }\r\n            }\r\n\r\n            if (preventDefault) {\r\n                event.preventDefault();\r\n            }\r\n        },\r\n\r\n        _activate: function (event) {\r\n            if (!this.active.is(\".ui-state-disabled\")) {\r\n                if (this.active.children(\"a[aria-haspopup='true']\").length) {\r\n                    this.expand(event);\r\n                } else {\r\n                    this.select(event);\r\n                }\r\n            }\r\n        },\r\n\r\n        refresh: function () {\r\n            var menus,\r\n                icon = this.options.icons.submenu,\r\n                submenus = this.element.find(this.options.menus);\r\n\r\n            // Initialize nested menus\r\n            submenus.filter(\":not(.ui-menu)\")\r\n                .addClass(\"ui-menu ui-widget ui-widget-content ui-corner-all\")\r\n                .hide()\r\n                .attr({\r\n                    role: this.options.role,\r\n                    \"aria-hidden\": \"true\",\r\n                    \"aria-expanded\": \"false\"\r\n                })\r\n                .each(function () {\r\n                    var menu = $(this),\r\n                        item = menu.prev(\"a\"),\r\n                        submenuCarat = $(\"<span>\")\r\n                            .addClass(\"ui-menu-icon ui-icon \" + icon)\r\n                            .data(\"ui-menu-submenu-carat\", true);\r\n\r\n                    item\r\n                        .attr(\"aria-haspopup\", \"true\")\r\n                        .prepend(submenuCarat);\r\n                    menu.attr(\"aria-labelledby\", item.attr(\"id\"));\r\n                });\r\n\r\n            menus = submenus.add(this.element);\r\n\r\n            // Don't refresh list items that are already adapted\r\n            menus.children(\":not(.ui-menu-item):has(a)\")\r\n                .addClass(\"ui-menu-item\")\r\n                .attr(\"role\", \"presentation\")\r\n                .children(\"a\")\r\n                .uniqueId()\r\n                .addClass(\"ui-corner-all\")\r\n                .attr({\r\n                    tabIndex: -1,\r\n                    role: this._itemRole()\r\n                });\r\n\r\n            // Initialize unlinked menu-items containing spaces and/or dashes only as dividers\r\n            menus.children(\":not(.ui-menu-item)\").each(function () {\r\n                var item = $(this);\r\n                // hyphen, em dash, en dash\r\n                if (!/[^\\-\\u2014\\u2013\\s]/.test(item.text())) {\r\n                    item.addClass(\"ui-widget-content ui-menu-divider\");\r\n                }\r\n            });\r\n\r\n            // Add aria-disabled attribute to any disabled menu item\r\n            menus.children(\".ui-state-disabled\").attr(\"aria-disabled\", \"true\");\r\n\r\n            // If the active item has been removed, blur the menu\r\n            if (this.active && !$.contains(this.element[0], this.active[0])) {\r\n                this.blur();\r\n            }\r\n        },\r\n\r\n        _itemRole: function () {\r\n            return {\r\n                menu: \"menuitem\",\r\n                listbox: \"option\"\r\n            }[this.options.role];\r\n        },\r\n\r\n        _setOption: function (key, value) {\r\n            if (key === \"icons\") {\r\n                this.element.find(\".ui-menu-icon\")\r\n                    .removeClass(this.options.icons.submenu)\r\n                    .addClass(value.submenu);\r\n            }\r\n            this._super(key, value);\r\n        },\r\n\r\n        focus: function (event, item) {\r\n            var nested, focused;\r\n            this.blur(event, event && event.type === \"focus\");\r\n\r\n            this._scrollIntoView(item);\r\n\r\n            this.active = item.first();\r\n            focused = this.active.children(\"a\").addClass(\"ui-state-focus\");\r\n            // Only update aria-activedescendant if there's a role\r\n            // otherwise we assume focus is managed elsewhere\r\n            if (this.options.role) {\r\n                this.element.attr(\"aria-activedescendant\", focused.attr(\"id\"));\r\n            }\r\n\r\n            // Highlight active parent menu item, if any\r\n            this.active\r\n                .parent()\r\n                .closest(\".ui-menu-item\")\r\n                .children(\"a:first\")\r\n                .addClass(\"ui-state-active\");\r\n\r\n            if (event && event.type === \"keydown\") {\r\n                this._close();\r\n            } else {\r\n                this.timer = this._delay(function () {\r\n                    this._close();\r\n                }, this.delay);\r\n            }\r\n\r\n            nested = item.children(\".ui-menu\");\r\n            if (nested.length && ( /^mouse/.test(event.type) )) {\r\n                this._startOpening(nested);\r\n            }\r\n            this.activeMenu = item.parent();\r\n\r\n            this._trigger(\"focus\", event, {item: item});\r\n        },\r\n\r\n        _scrollIntoView: function (item) {\r\n            var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;\r\n            if (this._hasScroll()) {\r\n                borderTop = parseFloat($.css(this.activeMenu[0], \"borderTopWidth\")) || 0;\r\n                paddingTop = parseFloat($.css(this.activeMenu[0], \"paddingTop\")) || 0;\r\n                offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;\r\n                scroll = this.activeMenu.scrollTop();\r\n                elementHeight = this.activeMenu.height();\r\n                itemHeight = item.height();\r\n\r\n                if (offset < 0) {\r\n                    this.activeMenu.scrollTop(scroll + offset);\r\n                } else if (offset + itemHeight > elementHeight) {\r\n                    this.activeMenu.scrollTop(scroll + offset - elementHeight + itemHeight);\r\n                }\r\n            }\r\n        },\r\n\r\n        blur: function (event, fromFocus) {\r\n            if (!fromFocus) {\r\n                clearTimeout(this.timer);\r\n            }\r\n\r\n            if (!this.active) {\r\n                return;\r\n            }\r\n\r\n            this.active.children(\"a\").removeClass(\"ui-state-focus\");\r\n            this.active = null;\r\n\r\n            this._trigger(\"blur\", event, {item: this.active});\r\n        },\r\n\r\n        _startOpening: function (submenu) {\r\n            clearTimeout(this.timer);\r\n\r\n            // Don't open if already open fixes a Firefox bug that caused a .5 pixel\r\n            // shift in the submenu position when mousing over the carat icon\r\n            if (submenu.attr(\"aria-hidden\") !== \"true\") {\r\n                return;\r\n            }\r\n\r\n            this.timer = this._delay(function () {\r\n                this._close();\r\n                this._open(submenu);\r\n            }, this.delay);\r\n        },\r\n\r\n        _open: function (submenu) {\r\n            var position = $.extend({\r\n                of: this.active\r\n            }, this.options.position);\r\n\r\n            clearTimeout(this.timer);\r\n            this.element.find(\".ui-menu\").not(submenu.parents(\".ui-menu\"))\r\n                .hide()\r\n                .attr(\"aria-hidden\", \"true\");\r\n\r\n            submenu\r\n                .show()\r\n                .removeAttr(\"aria-hidden\")\r\n                .attr(\"aria-expanded\", \"true\")\r\n                .position(position);\r\n        },\r\n\r\n        collapseAll: function (event, all) {\r\n            clearTimeout(this.timer);\r\n            this.timer = this._delay(function () {\r\n                // If we were passed an event, look for the submenu that contains the event\r\n                var currentMenu = all ? this.element :\r\n                    $(event && event.target).closest(this.element.find(\".ui-menu\"));\r\n\r\n                // If we found no valid submenu ancestor, use the main menu to close all sub menus anyway\r\n                if (!currentMenu.length) {\r\n                    currentMenu = this.element;\r\n                }\r\n\r\n                this._close(currentMenu);\r\n\r\n                this.blur(event);\r\n                this.activeMenu = currentMenu;\r\n            }, this.delay);\r\n        },\r\n\r\n        // With no arguments, closes the currently active menu - if nothing is active\r\n        // it closes all menus.  If passed an argument, it will search for menus BELOW\r\n        _close: function (startMenu) {\r\n            if (!startMenu) {\r\n                startMenu = this.active ? this.active.parent() : this.element;\r\n            }\r\n\r\n            startMenu\r\n                .find(\".ui-menu\")\r\n                .hide()\r\n                .attr(\"aria-hidden\", \"true\")\r\n                .attr(\"aria-expanded\", \"false\")\r\n                .end()\r\n                .find(\"a.ui-state-active\")\r\n                .removeClass(\"ui-state-active\");\r\n        },\r\n\r\n        collapse: function (event) {\r\n            var newItem = this.active &&\r\n                this.active.parent().closest(\".ui-menu-item\", this.element);\r\n            if (newItem && newItem.length) {\r\n                this._close();\r\n                this.focus(event, newItem);\r\n            }\r\n        },\r\n\r\n        expand: function (event) {\r\n            var newItem = this.active &&\r\n                this.active\r\n                    .children(\".ui-menu \")\r\n                    .children(\".ui-menu-item\")\r\n                    .first();\r\n\r\n            if (newItem && newItem.length) {\r\n                this._open(newItem.parent());\r\n\r\n                // Delay so Firefox will not hide activedescendant change in expanding submenu from AT\r\n                this._delay(function () {\r\n                    this.focus(event, newItem);\r\n                });\r\n            }\r\n        },\r\n\r\n        next: function (event) {\r\n            this._move(\"next\", \"first\", event);\r\n        },\r\n\r\n        previous: function (event) {\r\n            this._move(\"prev\", \"last\", event);\r\n        },\r\n\r\n        isFirstItem: function () {\r\n            return this.active && !this.active.prevAll(\".ui-menu-item\").length;\r\n        },\r\n\r\n        isLastItem: function () {\r\n            return this.active && !this.active.nextAll(\".ui-menu-item\").length;\r\n        },\r\n\r\n        _move: function (direction, filter, event) {\r\n            var next;\r\n            if (this.active) {\r\n                if (direction === \"first\" || direction === \"last\") {\r\n                    next = this.active\r\n                        [direction === \"first\" ? \"prevAll\" : \"nextAll\"](\".ui-menu-item\")\r\n                        .eq(-1);\r\n                } else {\r\n                    next = this.active\r\n                        [direction + \"All\"](\".ui-menu-item\")\r\n                        .eq(0);\r\n                }\r\n            }\r\n            if (!next || !next.length || !this.active) {\r\n                next = this.activeMenu.children(\".ui-menu-item\")[filter]();\r\n            }\r\n\r\n            this.focus(event, next);\r\n        },\r\n\r\n        nextPage: function (event) {\r\n            var item, base, height;\r\n\r\n            if (!this.active) {\r\n                this.next(event);\r\n                return;\r\n            }\r\n            if (this.isLastItem()) {\r\n                return;\r\n            }\r\n            if (this._hasScroll()) {\r\n                base = this.active.offset().top;\r\n                height = this.element.height();\r\n                this.active.nextAll(\".ui-menu-item\").each(function () {\r\n                    item = $(this);\r\n                    return item.offset().top - base - height < 0;\r\n                });\r\n\r\n                this.focus(event, item);\r\n            } else {\r\n                this.focus(event, this.activeMenu.children(\".ui-menu-item\")\r\n                    [!this.active ? \"first\" : \"last\"]());\r\n            }\r\n        },\r\n\r\n        previousPage: function (event) {\r\n            var item, base, height;\r\n            if (!this.active) {\r\n                this.next(event);\r\n                return;\r\n            }\r\n            if (this.isFirstItem()) {\r\n                return;\r\n            }\r\n            if (this._hasScroll()) {\r\n                base = this.active.offset().top;\r\n                height = this.element.height();\r\n                this.active.prevAll(\".ui-menu-item\").each(function () {\r\n                    item = $(this);\r\n                    return item.offset().top - base + height > 0;\r\n                });\r\n\r\n                this.focus(event, item);\r\n            } else {\r\n                this.focus(event, this.activeMenu.children(\".ui-menu-item\").first());\r\n            }\r\n        },\r\n\r\n        _hasScroll: function () {\r\n            return this.element.outerHeight() < this.element.prop(\"scrollHeight\");\r\n        },\r\n\r\n        select: function (event) {\r\n            // TODO: It should never be possible to not have an active item at this\r\n            // point, but the tests don't trigger mouseenter before click.\r\n            this.active = this.active || $(event.target).closest(\".ui-menu-item\");\r\n            var ui = {item: this.active};\r\n            if (!this.active.has(\".ui-menu\").length) {\r\n                this.collapseAll(event, true);\r\n            }\r\n            this._trigger(\"select\", event, ui);\r\n        }\r\n    });\r\n    \r\n    return $.mage.menu;\r\n}));\r\n","mage/backend/notification.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint browser:true*/\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'jquery/ui'\r\n], function ($, mageTemplate) {\r\n    'use strict';\r\n\r\n    $.widget('mage.notification', {\r\n        options: {\r\n            templates: {\r\n                global: '<div data-role=\"messages\" id=\"messages\"><div class=\"message <% if (data.error) { %>error<% } %>\"><div><%- data.message %></div></div></div>',\r\n                error: '<div data-role=\"messages\" id=\"messages\"><div class=\"messages\"><div class=\"message message-error error\"><div data-ui-id=\"messages-message-error\"><%- data.message %></div></div></div></div>'\r\n            }\r\n        },\r\n        placeholder: '[data-role=messages]',\r\n        /**\r\n         * Notification creation\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            $(document).on('ajaxComplete ajaxError', $.proxy(this._add, this));\r\n        },\r\n\r\n        /**\r\n         * Add new message\r\n         * @protected\r\n         * @param {Object} event - object\r\n         * @param {Object} jqXHR - The jQuery XMLHttpRequest object returned by $.ajax()\r\n         */\r\n        _add: function (event, jqXHR) {\r\n            try {\r\n                var response = JSON.parse(jqXHR.responseText);\r\n\r\n                if (response && response.error && response.html_message) {\r\n                    $(this.placeholder).html(response.html_message);\r\n                }\r\n            } catch (e) {}\r\n        },\r\n\r\n        /**\r\n         * Adds new message.\r\n         *\r\n         * @param {Object} data - Data with a message to be displayed.\r\n         */\r\n        add: function (data) {\r\n            var template = data.error ? this.options.templates.error : this.options.templates.global;\r\n            var message = mageTemplate(template, {\r\n                data: data\r\n            });\r\n            if (typeof data.insertMethod === 'function') {\r\n                data.insertMethod(message);\r\n            } else {\r\n                var messageContainer = data.messageContainer || this.placeholder;\r\n                $(messageContainer).prepend(message);\r\n            }\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes error messages.\r\n         */\r\n        clear: function () {\r\n            $(this.placeholder).html('');\r\n        }\r\n    });\r\n\r\n    return $.mage.notification;\r\n});\r\n","mage/backend/suggest.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint browser:true*/\r\n(function (root, factory) {\r\n    'use strict';\r\n\r\n    if (typeof define === 'function' && define.amd) {\r\n        define([\r\n            'jquery',\r\n            'mage/template',\r\n            'mage/mage',\r\n            'jquery/ui',\r\n            'mage/backend/menu',\r\n            'mage/translate'\r\n        ], factory);\r\n    } else {\r\n        factory(root.jQuery, root.mageTemplate);\r\n    }\r\n}(this, function ($, mageTemplate) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Implement base functionality\r\n     */\r\n    $.widget('mage.suggest', {\r\n        widgetEventPrefix: 'suggest',\r\n        options: {\r\n            template: '<% if (data.items.length) { %><% if (!data.term && !data.allShown() && data.recentShown()) { %>' +\r\n                '<h5 class=\"title\"><%- data.recentTitle %></h5>' +\r\n                '<% } %>' +\r\n                '<ul data-mage-init=\\'{\"menu\":[]}\\'>' +\r\n                '<% _.each(data.items, function(value){ %>' +\r\n                '<% if (!data.itemSelected(value)) { %><li <%= data.optionData(value) %>>' +\r\n                '<a href=\"#\"><%- value.label %></a></li><% } %>' +\r\n                '<% }); %>' +\r\n                '<% if (!data.term && !data.allShown() && data.recentShown()) { %>' +\r\n                '<li data-mage-init=\\'{\"actionLink\":{\"event\":\"showAll\"}}\\' class=\"show-all\">' +\r\n                '<a href=\"#\"><%- data.showAllTitle %></a></li>' +\r\n                '<% } %>' +\r\n                '</ul><% } else { %><span class=\"mage-suggest-no-records\"><%- data.noRecordsText %></span><% } %>',\r\n            minLength: 1,\r\n            /**\r\n             * @type {(String|Array)}\r\n             */\r\n            source: null,\r\n            delay: 500,\r\n            loadingClass: 'mage-suggest-state-loading',\r\n            events: {},\r\n            appendMethod: 'after',\r\n            controls: {\r\n                selector: ':ui-menu, :mage-menu',\r\n                eventsMap: {\r\n                    focus: ['menufocus'],\r\n                    blur: ['menublur'],\r\n                    select: ['menuselect']\r\n                }\r\n            },\r\n            termAjaxArgument: 'label_part',\r\n            filterProperty: 'label',\r\n            className: null,\r\n            inputWrapper: '<div class=\"mage-suggest\"><div class=\"mage-suggest-inner\"></div></div>',\r\n            dropdownWrapper: '<div class=\"mage-suggest-dropdown\"></div>',\r\n            preventClickPropagation: true,\r\n            currentlySelected: null\r\n        },\r\n\r\n        /**\r\n         * Component's constructor\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this._term = null;\r\n            this._nonSelectedItem = {\r\n                id: '',\r\n                label: ''\r\n            };\r\n            \r\n            this.templates = {};\r\n\r\n            this._renderedContext = null;\r\n            this._selectedItem = this._nonSelectedItem;\r\n            this._control = this.options.controls || {};\r\n            this._setTemplate();\r\n            this._prepareValueField();\r\n            this._render();\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * Render base elements for suggest component\r\n         * @private\r\n         */\r\n        _render: function () {\r\n            this.dropdown = $(this.options.dropdownWrapper).hide();\r\n            var wrapper = this.options.className ?\r\n                $(this.options.inputWrapper).addClass(this.options.className) :\r\n                $(this.options.inputWrapper);\r\n            this.element\r\n                .wrap(wrapper)[this.options.appendMethod](this.dropdown)\r\n                .attr('autocomplete', 'off');\r\n        },\r\n\r\n        /**\r\n         * Define a field for storing item id (find in DOM or create a new one)\r\n         * @private\r\n         */\r\n        _prepareValueField: function () {\r\n            if (this.options.valueField) {\r\n                this.valueField = $(this.options.valueField);\r\n            } else {\r\n                this.valueField = this._createValueField()\r\n                    .insertBefore(this.element)\r\n                    .attr('name', this.element.attr('name'));\r\n                this.element.removeAttr('name');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Create value field which keeps a id for selected option\r\n         * can be overridden in descendants\r\n         * @return {jQuery}\r\n         * @private\r\n         */\r\n        _createValueField: function () {\r\n            return $('<input/>', {\r\n                type: 'hidden'\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Component's destructor\r\n         * @private\r\n         */\r\n        _destroy: function () {\r\n            this.element\r\n                .unwrap()\r\n                .removeAttr('autocomplete');\r\n\r\n            if (!this.options.valueField) {\r\n                this.element.attr('name', this.valueField.attr('name'));\r\n                this.valueField.remove();\r\n            }\r\n\r\n            this.dropdown.remove();\r\n            this._off(this.element, 'keydown keyup blur');\r\n        },\r\n\r\n        /**\r\n         * Return actual value of an \"input\"-element\r\n         * @return {String}\r\n         * @private\r\n         */\r\n        _value: function () {\r\n            return $.trim(this.element[this.element.is(':input') ? 'val' : 'text']());\r\n        },\r\n\r\n        /**\r\n         * Pass original event to a control component for handling it as it's own event\r\n         * @param {Object} event - event object\r\n         * @private\r\n         */\r\n        _proxyEvents: function (event) {\r\n            var fakeEvent = $.extend({}, $.Event(event.type), {\r\n                    ctrlKey: event.ctrlKey,\r\n                    keyCode: event.keyCode,\r\n                    which: event.keyCode\r\n                }),\r\n                target = this._control.selector ? this.dropdown.find(this._control.selector) : this.dropdown;\r\n            target.trigger(fakeEvent);\r\n        },\r\n\r\n        /**\r\n         * Bind handlers on specific events\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            this._on($.extend({\r\n                keydown: function (event) {\r\n                    var keyCode = $.ui.keyCode,\r\n                        suggestList,\r\n                        hasSuggestedItems,\r\n                        hasSelectedItems,\r\n                        selectedItem;\r\n\r\n                    switch (event.keyCode) {\r\n                        case keyCode.PAGE_UP:\r\n                        case keyCode.UP:\r\n                            if (!event.shiftKey) {\r\n                                event.preventDefault();\r\n                                this._proxyEvents(event);\r\n                            }\r\n\r\n                            suggestList = event.currentTarget.parentNode.getElementsByTagName('ul')[0];\r\n                            hasSuggestedItems = event.currentTarget.parentNode.getElementsByTagName('ul')[0].children.length >= 0;\r\n                            if (hasSuggestedItems) {\r\n                                selectedItem =  $(suggestList.getElementsByClassName('_active')[0]).removeClass('_active').prev().addClass('_active');\r\n                                event.currentTarget.value = selectedItem.find(\"a\").text();\r\n                            }\r\n\r\n                            break;\r\n                        case keyCode.PAGE_DOWN:\r\n                        case keyCode.DOWN:\r\n                            if (!event.shiftKey) {\r\n                                event.preventDefault();\r\n                                this._proxyEvents(event);\r\n                            }\r\n\r\n                            suggestList = event.currentTarget.parentNode.getElementsByTagName('ul')[0];\r\n                            hasSuggestedItems = event.currentTarget.parentNode.getElementsByTagName('ul')[0].children.length >= 0;\r\n                            if(hasSuggestedItems){\r\n                                hasSelectedItems = suggestList.getElementsByClassName('_active').length === 0;\r\n                                if(hasSelectedItems) {\r\n                                    selectedItem = $(suggestList.children[0]).addClass('_active');\r\n                                    event.currentTarget.value = selectedItem.find(\"a\").text();\r\n                                }else {\r\n                                    selectedItem = $(suggestList.getElementsByClassName('_active')[0]).removeClass('_active').next().addClass('_active');\r\n                                    event.currentTarget.value = selectedItem.find(\"a\").text();\r\n                                }\r\n                            }\r\n                            break;\r\n                        case keyCode.TAB:\r\n                            if (this.isDropdownShown()) {\r\n                                this._onSelectItem(event, null);\r\n                                event.preventDefault();\r\n                            }\r\n                            break;\r\n                        case keyCode.ENTER:\r\n                        case keyCode.NUMPAD_ENTER:\r\n\r\n                            if (this.isDropdownShown() && this._focused) {\r\n                                this._proxyEvents(event);\r\n                                event.preventDefault();\r\n                            }\r\n                            break;\r\n                        case keyCode.ESCAPE:\r\n                            if (this.isDropdownShown()) {\r\n                                event.stopPropagation();\r\n                            }\r\n                            this.close(event);\r\n                            this._blurItem();\r\n                            break;\r\n                    }\r\n                },\r\n                keyup: function (event) {\r\n                    var keyCode = $.ui.keyCode;\r\n                    switch (event.keyCode) {\r\n                        case keyCode.HOME:\r\n                        case keyCode.END:\r\n                        case keyCode.PAGE_UP:\r\n                        case keyCode.PAGE_DOWN:\r\n                        case keyCode.ESCAPE:\r\n                        case keyCode.UP:\r\n                        case keyCode.DOWN:\r\n                        case keyCode.LEFT:\r\n                        case keyCode.RIGHT:\r\n                        case keyCode.TAB:\r\n                            break;\r\n                        case keyCode.ENTER:\r\n                        case keyCode.NUMPAD_ENTER:\r\n                            if (this.isDropdownShown()) {\r\n                                event.preventDefault();\r\n                            }\r\n                            break;\r\n                        default:\r\n                            this.search(event);\r\n                    }\r\n                },\r\n                blur: function (event) {\r\n                    if (!this.preventBlur) {\r\n                        this._abortSearch();\r\n                        this.close(event);\r\n                        this._change(event);\r\n                    } else {\r\n                        this.element.trigger('focus');\r\n                    }\r\n                },\r\n                cut: this.search,\r\n                paste: this.search,\r\n                input: this.search,\r\n                selectItem: this._onSelectItem,\r\n                click: this.search\r\n            }, this.options.events));\r\n\r\n            this._bindDropdown();\r\n        },\r\n\r\n        /**\r\n         * @param {Object} e - event object\r\n         * @private\r\n         */\r\n        _change: function (e) {\r\n            if (this._term !== this._value()) {\r\n                this._trigger('change', e);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Bind handlers for dropdown element on specific events\r\n         * @private\r\n         */\r\n        _bindDropdown: function () {\r\n            var events = {\r\n                click: function (e) {\r\n                    // prevent default browser's behavior of changing location by anchor href\r\n                    e.preventDefault();\r\n                },\r\n                mousedown: function (e) {\r\n                    e.preventDefault();\r\n                }\r\n            };\r\n            $.each(this._control.eventsMap, $.proxy(function (suggestEvent, controlEvents) {\r\n                $.each(controlEvents, $.proxy(function (i, handlerName) {\r\n                    switch (suggestEvent) {\r\n                    case 'select':\r\n                        events[handlerName] = this._onSelectItem;\r\n                        break;\r\n                    case 'focus':\r\n                        events[handlerName] = this._focusItem;\r\n                        break;\r\n                    case 'blur':\r\n                        events[handlerName] = this._blurItem;\r\n                        break;\r\n                    }\r\n                }, this));\r\n            }, this));\r\n\r\n            if (this.options.preventClickPropagation) {\r\n                this._on(this.dropdown, events);\r\n            }\r\n            // Fix for IE 8\r\n            this._on(this.dropdown, {\r\n                mousedown: function () {\r\n                    this.preventBlur = true;\r\n                },\r\n                mouseup: function () {\r\n                    this.preventBlur = false;\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _trigger: function (type, event) {\r\n            var result = this._superApply(arguments);\r\n\r\n            if (result === false && event) {\r\n                event.stopImmediatePropagation();\r\n                event.preventDefault();\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Handle focus event of options item\r\n         * @param {Object} e - event object\r\n         * @param {Object} ui - object that can contain information about focused item\r\n         * @private\r\n         */\r\n        _focusItem: function (e, ui) {\r\n            if (ui && ui.item) {\r\n                this._focused = $(ui.item).prop('tagName') ?\r\n                    this._readItemData(ui.item) :\r\n                    ui.item;\r\n\r\n                this.element.val(this._focused.label);\r\n                this._trigger('focus', e, {\r\n                    item: this._focused\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle blur event of options item\r\n         * @private\r\n         */\r\n        _blurItem: function () {\r\n            this._focused = null;\r\n            this.element.val(this._term);\r\n        },\r\n\r\n        /**\r\n         * @param {Object} e - event object\r\n         * @param {Object} item\r\n         * @private\r\n         */\r\n        _onSelectItem: function (e, item) {\r\n            if (item && $.type(item) === 'object' && $(e.target).is(this.element)) {\r\n                this._focusItem(e, {\r\n                    item: item\r\n                });\r\n            }\r\n\r\n            if (this._trigger('beforeselect', e || null, {\r\n                item: this._focused\r\n            }) === false) {\r\n                return;\r\n            }\r\n            this._selectItem(e);\r\n            this._blurItem();\r\n            this._trigger('select', e || null, {\r\n                item: this._selectedItem\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Save selected item and hide dropdown\r\n         * @private\r\n         * @param {Object} e - event object\r\n         */\r\n        _selectItem: function (e) {\r\n            if (this._focused) {\r\n                this._selectedItem = this._focused;\r\n\r\n                if (this._selectedItem !== this._nonSelectedItem) {\r\n                    this._term = this._selectedItem.label;\r\n                    this.valueField.val(this._selectedItem.id);\r\n                    this.close(e);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Read option data from item element\r\n         * @param {Element} element\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _readItemData: function (element) {\r\n            return element.data('suggestOption') || this._nonSelectedItem;\r\n        },\r\n\r\n        /**\r\n         * Check if dropdown is shown\r\n         * @return {Boolean}\r\n         */\r\n        isDropdownShown: function () {\r\n            return this.dropdown.is(':visible');\r\n        },\r\n\r\n        /**\r\n         * Open dropdown\r\n         * @private\r\n         * @param {Object} e - event object\r\n         */\r\n        open: function (e) {\r\n            if (!this.isDropdownShown()) {\r\n                this.element.addClass('_suggest-dropdown-open');\r\n                this.dropdown.show();\r\n                this._trigger('open', e);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Close and clear dropdown content\r\n         * @private\r\n         * @param {Object} e - event object\r\n         */\r\n        close: function (e) {\r\n            this._renderedContext = null;\r\n\r\n            if (this.dropdown.length) {\r\n                this.element.removeClass('_suggest-dropdown-open');\r\n                this.dropdown.hide().empty();\r\n            }\r\n\r\n            this._trigger('close', e);\r\n        },\r\n\r\n        /**\r\n         * Acquire content template\r\n         * @private\r\n         */\r\n        _setTemplate: function () {\r\n            this.templateName = 'suggest' + Math.random().toString(36).substr(2);\r\n\r\n            this.templates[this.templateName] = mageTemplate(this.options.template);\r\n        },\r\n\r\n        /**\r\n         * Execute search process\r\n         * @public\r\n         * @param {Object} e - event object\r\n         */\r\n        search: function (e) {\r\n            var term = this._value();\r\n\r\n            if ((this._term !== term || term.length === 0) && !this.preventBlur) {\r\n                this._term = term;\r\n\r\n                if ($.type(term) === 'string' && term.length >= this.options.minLength) {\r\n                    if (this._trigger('search', e) === false) {\r\n                        return;\r\n                    }\r\n                    this._search(e, term, {});\r\n                } else {\r\n                    this._selectedItem = this._nonSelectedItem;\r\n                    this._resetSuggestValue();\r\n                }\r\n            }\r\n        },\r\n\r\n        /*\r\n         * Clear suggest hidden input\r\n         * @private\r\n         */\r\n        _resetSuggestValue: function () {\r\n            this.valueField.val(this._nonSelectedItem.id);\r\n        },\r\n\r\n        /**\r\n         * Actual search method, can be overridden in descendants\r\n         * @param {Object} e - event object\r\n         * @param {String} term - search phrase\r\n         * @param {Object} context - search context\r\n         * @private\r\n         */\r\n        _search: function (e, term, context) {\r\n            var response = $.proxy(function (items) {\r\n                return this._processResponse(e, items, context || {});\r\n            }, this);\r\n            this.element.addClass(this.options.loadingClass);\r\n\r\n            if (this.options.delay) {\r\n                if ($.type(this.options.data) !== 'undefined') {\r\n                    response(this.filter(this.options.data, term));\r\n                }\r\n                clearTimeout(this._searchTimeout);\r\n                this._searchTimeout = this._delay(function () {\r\n                    this._source(term, response);\r\n                }, this.options.delay);\r\n            } else {\r\n                this._source(term, response);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Extend basic context with additional data (search results, search term)\r\n         * @param {Object} context\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _prepareDropdownContext: function (context) {\r\n            return $.extend(context, {\r\n                items: this._items,\r\n                term: this._term,\r\n                optionData: function (item) {\r\n                    return 'data-suggest-option=\"' +\r\n                        $('<div>').text(JSON.stringify(item)).html().replace(/\"/g, '&quot;') + '\"';\r\n                },\r\n                itemSelected: $.proxy(this._isItemSelected, this),\r\n                noRecordsText: $.mage.__('No records found.')\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param item\r\n         * @return {Boolean}\r\n         * @private\r\n         */\r\n        _isItemSelected: function (item) {\r\n            return item.id == (this._selectedItem && this._selectedItem.id ?\r\n                this._selectedItem.id :\r\n                this.options.currentlySelected);\r\n        },\r\n\r\n        /**\r\n         * Render content of suggest's dropdown\r\n         * @param {Object} e - event object\r\n         * @param {Array} items - list of label+id objects\r\n         * @param {Object} context - template's context\r\n         * @private\r\n         */\r\n        _renderDropdown: function (e, items, context) {\r\n            var tmpl = this.templates[this.templateName];\r\n\r\n            this._items = items;\r\n\r\n            tmpl = tmpl({\r\n                data: this._prepareDropdownContext(context)\r\n            });\r\n\r\n            $(tmpl).appendTo(this.dropdown.empty());\r\n\r\n            this.dropdown.trigger('contentUpdated')\r\n                .find(this._control.selector).on('focus', function (e) {\r\n                    e.preventDefault();\r\n                });\r\n\r\n            this._renderedContext = context;\r\n            this.element.removeClass(this.options.loadingClass);\r\n            this.open(e);\r\n        },\r\n\r\n        /**\r\n         * @param {Object} e\r\n         * @param {Object} items\r\n         * @param {Object} context\r\n         * @private\r\n         */\r\n        _processResponse: function (e, items, context) {\r\n            var renderer = $.proxy(function (items) {\r\n                return this._renderDropdown(e, items, context || {});\r\n            }, this);\r\n\r\n            if (this._trigger('response', e, [items, renderer]) === false) {\r\n                return;\r\n            }\r\n            this._renderDropdown(e, items, context);\r\n        },\r\n\r\n        /**\r\n         * Implement search process via spesific source\r\n         * @param {String} term - search phrase\r\n         * @param {Function} response - search results handler, process search result\r\n         * @private\r\n         */\r\n        _source: function (term, response) {\r\n            var o = this.options;\r\n\r\n            if ($.isArray(o.source)) {\r\n                response(this.filter(o.source, term));\r\n            } else if ($.type(o.source) === 'string') {\r\n                if (this._xhr) {\r\n                    this._xhr.abort();\r\n                }\r\n                var ajaxData = {};\r\n                ajaxData[this.options.termAjaxArgument] = term;\r\n\r\n                this._xhr = $.ajax($.extend(true, {\r\n                    url: o.source,\r\n                    type: 'POST',\r\n                    dataType: 'json',\r\n                    data: ajaxData,\r\n                    success: $.proxy(function (items) {\r\n                        this.options.data = items;\r\n                        response.apply(response, arguments);\r\n                    }, this)\r\n                }, o.ajaxOptions || {}));\r\n            } else if ($.type(o.source) === 'function') {\r\n                o.source.apply(o.source, arguments);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Abort search process\r\n         * @private\r\n         */\r\n        _abortSearch: function () {\r\n            this.element.removeClass(this.options.loadingClass);\r\n            clearTimeout(this._searchTimeout);\r\n\r\n            if (this._xhr) {\r\n                this._xhr.abort();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Perform filtering in advance loaded items and returns search result\r\n         * @param {Array} items - all available items\r\n         * @param {String} term - search phrase\r\n         * @return {Object}\r\n         */\r\n        filter: function (items, term) {\r\n            var matcher = new RegExp(term.replace(/[\\-\\/\\\\\\^$*+?.()|\\[\\]{}]/g, '\\\\$&'), 'i');\r\n            var itemsArray = $.isArray(items) ? items : $.map(items, function (element) {\r\n                return element;\r\n            });\r\n            var property = this.options.filterProperty;\r\n\r\n            return $.grep(\r\n                itemsArray,\r\n                function (value) {\r\n                    return matcher.test(value[property] || value.id || value);\r\n                }\r\n            );\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Implement show all functionality and storing and display recent searches\r\n     */\r\n    $.widget('mage.suggest', $.mage.suggest, {\r\n        options: {\r\n            showRecent: false,\r\n            showAll: false,\r\n            storageKey: 'suggest',\r\n            storageLimit: 10\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _create: function () {\r\n            if (this.options.showRecent && window.localStorage) {\r\n                var recentItems = JSON.parse(localStorage.getItem(this.options.storageKey));\r\n                /**\r\n                 * @type {Array} - list of recently searched items\r\n                 * @private\r\n                 */\r\n                this._recentItems = $.isArray(recentItems) ? recentItems : [];\r\n            }\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _bind: function () {\r\n            this._super();\r\n            this._on(this.dropdown, {\r\n                showAll: function (e) {\r\n                    e.stopImmediatePropagation();\r\n                    e.preventDefault();\r\n                    this.element.trigger('showAll');\r\n                }\r\n            });\r\n\r\n            if (this.options.showRecent || this.options.showAll) {\r\n                this._on({\r\n                    focus: function (e) {\r\n                        if (!this.isDropdownShown()) {\r\n                            this.search(e);\r\n                        }\r\n                    },\r\n                    showAll: this._showAll\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         * @param {Object} e - event object\r\n         */\r\n        _showAll: function (e) {\r\n            this._abortSearch();\r\n            this._search(e, '', {\r\n                _allShown: true\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        search: function (e) {\r\n            if (!this._value()) {\r\n\r\n                if (this.options.showRecent) {\r\n\r\n                    if (this._recentItems.length) {\r\n                        this._processResponse(e, this._recentItems, {});\r\n                    } else {\r\n                        this._showAll(e);\r\n                    }\r\n                } else if (this.options.showAll) {\r\n                    this._showAll(e);\r\n                }\r\n            }\r\n            this._superApply(arguments);\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _selectItem: function () {\r\n            this._superApply(arguments);\r\n\r\n            if (this._selectedItem && this._selectedItem.id && this.options.showRecent) {\r\n                this._addRecent(this._selectedItem);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _prepareDropdownContext: function () {\r\n            var context = this._superApply(arguments);\r\n\r\n            return $.extend(context, {\r\n                recentShown: $.proxy(function () {\r\n                    return this.options.showRecent;\r\n                }, this),\r\n                recentTitle: $.mage.__('Recent items'),\r\n                showAllTitle: $.mage.__('Show all...'),\r\n                allShown: function () {\r\n                    return !!context._allShown;\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Add selected item of search result into storage of recents\r\n         * @param {Object} item - label+id object\r\n         * @private\r\n         */\r\n        _addRecent: function (item) {\r\n            this._recentItems = $.grep(this._recentItems, function (obj) {\r\n                return obj.id !== item.id;\r\n            });\r\n            this._recentItems.unshift(item);\r\n            this._recentItems = this._recentItems.slice(0, this.options.storageLimit);\r\n            localStorage.setItem(this.options.storageKey, JSON.stringify(this._recentItems));\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Implement multi suggest functionality\r\n     */\r\n    $.widget('mage.suggest', $.mage.suggest, {\r\n        options: {\r\n            multiSuggestWrapper: '<ul class=\"mage-suggest-choices\">' +\r\n                '<li class=\"mage-suggest-search-field\" data-role=\"parent-choice-element\"><label class=\"mage-suggest-search-label\"></label></li></ul>',\r\n            choiceTemplate: '<li class=\"mage-suggest-choice button\"><div><%- text %></div>' +\r\n                '<span class=\"mage-suggest-choice-close\" tabindex=\"-1\" ' +\r\n                'data-mage-init=\\'{\"actionLink\":{\"event\":\"removeOption\"}}\\'></span></li>',\r\n            selectedClass: 'mage-suggest-selected'\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _create: function () {\r\n            this.choiceTmpl = mageTemplate(this.options.choiceTemplate);\r\n\r\n            this._super();\r\n\r\n            if (this.options.multiselect) {\r\n                this.valueField.hide();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _render: function () {\r\n            this._super();\r\n\r\n            if (this.options.multiselect) {\r\n                this._renderMultiselect();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Render selected options\r\n         * @private\r\n         */\r\n        _renderMultiselect: function () {\r\n            var that = this;\r\n            this.element.wrap(this.options.multiSuggestWrapper);\r\n            this.elementWrapper = this.element.closest('[data-role=\"parent-choice-element\"]');\r\n            $(function () {\r\n                that._getOptions()\r\n                    .each(function (i, option) {\r\n                        option = $(option);\r\n                        that._createOption({\r\n                            id: option.val(),\r\n                            label: option.text()\r\n                        });\r\n                    });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @return {Array} array of DOM-elements\r\n         * @private\r\n         */\r\n        _getOptions: function () {\r\n            return this.valueField.find('option');\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _bind: function () {\r\n            this._super();\r\n\r\n            if (this.options.multiselect) {\r\n                this._on({\r\n                    keydown: function (event) {\r\n                        if (event.keyCode === $.ui.keyCode.BACKSPACE) {\r\n                            if (!this._value()) {\r\n                                this._removeLastAdded(event);\r\n                            }\r\n                        }\r\n                    },\r\n                    removeOption: this.removeOption\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Array} items\r\n         * @param {Object} context\r\n         * @return {Array}\r\n         * @private\r\n         */\r\n        _filterSelected: function (items) {\r\n            var options = this._getOptions();\r\n\r\n            return $.grep(items, function (value) {\r\n                var itemSelected = false;\r\n                $.each(options, function () {\r\n                    if (value.id == $(this).val()) {\r\n                        itemSelected = true;\r\n                    }\r\n                });\r\n\r\n                return !itemSelected;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _processResponse: function (e, items, context) {\r\n            if (this.options.multiselect) {\r\n                items = this._filterSelected(items, context);\r\n            }\r\n            this._superApply([e, items, context]);\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _prepareValueField: function () {\r\n            this._super();\r\n\r\n            if (this.options.multiselect && !this.options.valueField && this.options.selectedItems) {\r\n                $.each(this.options.selectedItems, $.proxy(function (i, item) {\r\n                    this._addOption(item);\r\n                }, this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * If \"multiselect\" option is set, then do not need to clear value for hidden select, to avoid losing of\r\n         *      previously selected items\r\n         * @override\r\n         */\r\n        _resetSuggestValue: function () {\r\n            if (!this.options.multiselect) {\r\n                this._super();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _createValueField: function () {\r\n            if (this.options.multiselect) {\r\n                return $('<select/>', {\r\n                    type: 'hidden',\r\n                    multiple: 'multiple'\r\n                });\r\n            } else {\r\n                return this._super();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _selectItem: function (e) {\r\n            if (this.options.multiselect) {\r\n                if (this._focused) {\r\n                    this._selectedItem = this._focused;\r\n\r\n                    if (this._selectedItem !== this._nonSelectedItem) {\r\n                        this._term = '';\r\n                        this.element.val(this._term);\r\n\r\n                        if (this._isItemSelected(this._selectedItem)) {\r\n                            $(e.target).removeClass(this.options.selectedClass);\r\n                            this.removeOption(e, this._selectedItem);\r\n                            this._selectedItem = this._nonSelectedItem;\r\n                        } else {\r\n                            $(e.target).addClass(this.options.selectedClass);\r\n                            this._addOption(e, this._selectedItem);\r\n                        }\r\n                    }\r\n                }\r\n                this.close(e);\r\n            } else {\r\n                this._superApply(arguments);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _isItemSelected: function (item) {\r\n            if (this.options.multiselect) {\r\n                return this.valueField.find('option[value=' + item.id + ']').length > 0;\r\n            } else {\r\n                return this._superApply(arguments);\r\n            }\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Object} item\r\n         * @return {Element}\r\n         * @private\r\n         */\r\n        _createOption: function (item) {\r\n            var option = this._getOption(item);\r\n\r\n            if (!option.length) {\r\n                option = $('<option>', {\r\n                    value: item.id,\r\n                    selected: true\r\n                }).text(item.label);\r\n            }\r\n\r\n            return option.data('renderedOption', this._renderOption(item));\r\n        },\r\n\r\n        /**\r\n         * Add selected item in to select options\r\n         * @param {Object} e - event object\r\n         * @param item\r\n         * @private\r\n         */\r\n        _addOption: function (e, item) {\r\n            this.valueField.append(this._createOption(item).data('selectTarget', $(e.target)));\r\n        },\r\n\r\n        /**\r\n         * @param {Object|Element} item\r\n         * @return {Element}\r\n         * @private\r\n         */\r\n        _getOption: function (item) {\r\n            return $(item).prop('tagName') ?\r\n                $(item) :\r\n                this.valueField.find('option[value=' + item.id + ']');\r\n        },\r\n\r\n        /**\r\n         * Remove last added option\r\n         * @private\r\n         * @param {Object} e - event object\r\n         */\r\n        _removeLastAdded: function (e) {\r\n            var lastAdded = this._getOptions().last();\r\n\r\n            if (lastAdded.length) {\r\n                this.removeOption(e, lastAdded);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Remove item from select options\r\n         * @param {Object} e - event object\r\n         * @param {Object} item\r\n         * @private\r\n         */\r\n        removeOption: function (e, item) {\r\n            var option = this._getOption(item);\r\n            var selectTarget = option.data('selectTarget');\r\n\r\n            if (selectTarget && selectTarget.length) {\r\n                selectTarget.removeClass(this.options.selectedClass);\r\n            }\r\n\r\n            option.data('renderedOption').remove();\r\n            option.remove();\r\n        },\r\n\r\n        /**\r\n         * Render visual element of selected item\r\n         * @param {Object} item - selected item\r\n         * @private\r\n         */\r\n        _renderOption: function (item) {\r\n            var tmpl = this.choiceTmpl({\r\n                text: item.label\r\n            });\r\n\r\n            return $(tmpl)\r\n                .insertBefore(this.elementWrapper)\r\n                .trigger('contentUpdated')\r\n                .on('removeOption', $.proxy(function (e) {\r\n                    this.removeOption(e, item);\r\n                }, this));\r\n        }\r\n    });\r\n\r\n    return $.mage.suggest;\r\n}));\r\n","mage/backend/tabs.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint jquery:true browser:true*/\r\n/*global FORM_KEY:true*/\r\n(function (factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define([\r\n            \"jquery\",\r\n            \"jquery/ui\"\r\n        ], factory);\r\n    } else {\r\n        factory(jQuery);\r\n    }\r\n}(function ($) {\r\n    'use strict';\r\n\r\n    // mage.tabs base functionality\r\n    $.widget('mage.tabs', $.ui.tabs, {\r\n        options: {\r\n            spinner: false,\r\n            groups: null,\r\n            tabPanelClass: '',\r\n            excludedPanel: ''\r\n        },\r\n\r\n        /**\r\n         * Tabs creation\r\n         * @protected\r\n         */\r\n        _create: function() {\r\n            var activeIndex = this._getTabIndex(this.options.active);\r\n            this.options.active = activeIndex >= 0 ? activeIndex : 0;\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         * @private\r\n         * @return {Array} Array of DOM-elements\r\n         */\r\n        _getList: function() {\r\n            if(this.options.groups) {\r\n                return this.element.find(this.options.groups);\r\n            } else {\r\n                return this._super();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get active anchor\r\n         * @return {Element}\r\n         */\r\n        activeAnchor: function() {\r\n            return this.anchors.eq(this.option(\"active\"));\r\n        },\r\n\r\n        /**\r\n         * Get tab index by tab id\r\n         * @protected\r\n         * @param {string} id - id of tab\r\n         * @return {number}\r\n         */\r\n        _getTabIndex: function(id) {\r\n            var anchors = this.anchors ?\r\n                this.anchors :\r\n                this._getList().find(\"> li > a[href]\");\r\n            return anchors.index($('#' + id));\r\n        },\r\n\r\n        /**\r\n         * Switch between tabs\r\n         * @protected\r\n         * @param {Object} event - event object\r\n         * @param {undefined|Object} eventData\r\n         */\r\n        _toggle: function(event, eventData) {\r\n            var anchor = $(eventData.newTab).find('a');\r\n            if ($(eventData.newTab).find('a').data().tabType === 'link') {\r\n                location.href = anchor.prop('href');\r\n            } else {\r\n                this._superApply(arguments);\r\n            }\r\n        }\r\n    });\r\n    var rhash = /#.*$/,\r\n        isLocal = function(anchor) {\r\n            return anchor.hash.length > 1 &&\r\n                anchor.href.replace(rhash, \"\") ===\r\n                    location.href.replace(rhash, \"\")\r\n                        // support: Safari 5.1\r\n                        // Safari 5.1 doesn't encode spaces in window.location\r\n                        // but it does encode spaces from anchors (#8777)\r\n                        .replace(/\\s/g, \"%20\");\r\n        };\r\n\r\n    // Extension for mage.tabs - Move panels in destination element\r\n    $.widget('mage.tabs', $.mage.tabs, {\r\n        /**\r\n         * Move panels in destination element on creation\r\n         * @protected\r\n         * @override\r\n         */\r\n        _create: function() {\r\n            this._super();\r\n            this._movePanelsInDestination(this.panels);\r\n        },\r\n\r\n        /**\r\n         * Get panel for tab. If panel no exist in tabs container, then find panel in destination element\r\n         * @protected\r\n         * @override\r\n         * @param {Element} tab - tab \"li\" DOM-element\r\n         * @return {Element}\r\n         */\r\n        _getPanelForTab: function(tab) {\r\n            var panel = this._superApply(arguments);\r\n            if (!panel.length) {\r\n                var id = $(tab).attr(\"aria-controls\");\r\n                panel = $(this.options.destination).find(this._sanitizeSelector( \"#\" + id ));\r\n            }\r\n            return panel;\r\n        },\r\n\r\n        _processTabs: function() {\r\n            var that = this;\r\n\r\n            this.tablist = this._getList()\r\n                .addClass(\"ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all\")\r\n                .attr(\"role\", \"tablist\");\r\n\r\n            this.tabs = this.tablist.find(\"> li:has(a[href])\")\r\n                .addClass(\"ui-state-default ui-corner-top\")\r\n                .attr({\r\n                    role: \"tab\",\r\n                    tabIndex: -1\r\n                });\r\n\r\n            this.anchors = this.tabs.map(function() {\r\n                return $(\"a\", this)[ 0 ];\r\n            })\r\n                .addClass(\"ui-tabs-anchor\")\r\n                .attr({\r\n                    role: \"presentation\",\r\n                    tabIndex: -1\r\n                });\r\n\r\n            this.panels = $();\r\n\r\n            this.anchors.each(function(i, anchor) {\r\n                var selector, panel, panelId,\r\n                    anchorId = $(anchor).uniqueId().attr(\"id\"),\r\n                    tab = $(anchor).closest(\"li\"),\r\n                    originalAriaControls = tab.attr(\"aria-controls\");\r\n\r\n                // inline tab\r\n                if (isLocal(anchor)) {\r\n                    selector = anchor.hash;\r\n                    panel = that.document.find(that._sanitizeSelector(selector));\r\n                    // remote tab\r\n                } else {\r\n                    panelId = that._tabId(tab);\r\n                    selector = \"#\" + panelId;\r\n                    panel = that.document.find(selector);\r\n                    if (!panel.length) {\r\n                        panel = that._createPanel(panelId);\r\n                        panel.insertAfter(that.panels[ i - 1 ] || that.tablist);\r\n                    }\r\n                    panel.attr(\"aria-live\", \"polite\");\r\n                }\r\n\r\n                if (panel.length) {\r\n                    that.panels = that.panels.add(panel);\r\n                }\r\n                if (originalAriaControls) {\r\n                    tab.data(\"ui-tabs-aria-controls\", originalAriaControls);\r\n                }\r\n                tab.attr({\r\n                    \"aria-controls\": selector.substring(1),\r\n                    \"aria-labelledby\": anchorId\r\n                });\r\n                panel.attr(\"aria-labelledby\", anchorId);\r\n                if (that.options.excludedPanel.indexOf(anchorId+'_content') < 0) {\r\n                    panel.addClass(that.options.tabPanelClass);\r\n                }\r\n            });\r\n\r\n            this.panels\r\n                .addClass(\"ui-tabs-panel ui-widget-content ui-corner-bottom\")\r\n                .attr(\"role\", \"tabpanel\");\r\n        },\r\n\r\n        /**\r\n         * Move panels in destination element\r\n         * @protected\r\n         * @override\r\n         */\r\n        _movePanelsInDestination: function(panels) {\r\n            if (this.options.destination && !panels.parents(this.options.destination).length) {\r\n                this.element.trigger('beforePanelsMove', panels);\r\n\r\n                panels.find('script:not([type]), script[type=\"text/javascript\"]').remove();\r\n\r\n                panels.appendTo(this.options.destination)\r\n                    .each($.proxy(function(i, panel) {\r\n                        $(panel).trigger('move.tabs', this.anchors.eq(i));\r\n                    }, this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Move panels in destination element on tabs switching\r\n         * @protected\r\n         * @override\r\n         * @param {Object} event - event object\r\n         * @param {Object} eventData\r\n         */\r\n        _toggle: function(event, eventData) {\r\n            this._movePanelsInDestination(eventData.newPanel);\r\n            this._superApply(arguments);\r\n        }\r\n    });\r\n\r\n    // Extension for mage.tabs - Ajax functionality for tabs\r\n    $.widget('mage.tabs', $.mage.tabs, {\r\n        options: {\r\n            ajaxOptions: {\r\n                data: {\r\n                    isAjax: true,\r\n                    form_key: typeof FORM_KEY !== 'undefined' ? FORM_KEY : null\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Replacing href attribute with loaded panel id\r\n             * @param {Object} event - event object\r\n             * @param {Object} ui\r\n             */\r\n            load: function(event, ui) {\r\n                var panel = $(ui.panel);\r\n                $(ui.tab).prop('href', '#' + panel.prop('id'));\r\n                panel.trigger('contentUpdated');\r\n            }\r\n        }\r\n    });\r\n\r\n    // Extension for mage.tabs - Attach event handlers to tabs\r\n    $.widget('mage.tabs', $.mage.tabs, {\r\n        options: {\r\n            tabIdArgument: 'tab',\r\n            tabsBlockPrefix: null\r\n        },\r\n\r\n        /**\r\n         * Attach event handlers to tabs, on creation\r\n         * @protected\r\n         * @override\r\n         */\r\n        _refresh: function() {\r\n            this._super();\r\n            $.each(this.tabs, $.proxy(function(i, tab) {\r\n                $(this._getPanelForTab(tab))\r\n                    .off('changed' + this.eventNamespace)\r\n                    .off('highlight.validate' + this.eventNamespace)\r\n                    .off('focusin' + this.eventNamespace)\r\n\r\n                    .on('changed' + this.eventNamespace, {index: i}, $.proxy(this._onContentChange, this))\r\n                    .on('highlight.validate' + this.eventNamespace, {index: i}, $.proxy(this._onInvalid, this))\r\n                    .on('focusin' + this.eventNamespace, {index: i}, $.proxy(this._onFocus, this));\r\n            }, this));\r\n\r\n            ($(this.options.destination).is('form') ?\r\n                $(this.options.destination) :\r\n                $(this.options.destination).closest('form'))\r\n                    .off('beforeSubmit' + this.eventNamespace)\r\n                    .on('beforeSubmit' + this.eventNamespace, $.proxy(this._onBeforeSubmit, this));\r\n        },\r\n\r\n        /**\r\n         * Mark tab as changed if some field inside tab panel is changed\r\n         * @protected\r\n         * @param {Object} e - event object\r\n         */\r\n        _onContentChange: function(e) {\r\n            var cssChanged = '_changed';\r\n\r\n            this.anchors.eq(e.data.index).addClass(cssChanged);\r\n            this._updateNavTitleMessages(e,cssChanged);\r\n        },\r\n\r\n        /**\r\n         * Clone messages (tooltips) from anchor to parent element\r\n         * @protected\r\n         * @param {Object} e - event object\r\n         * @param {string} messageType - changed or error\r\n         */\r\n        _updateNavTitleMessages: function(e, messageType) {\r\n            var curAnchor = this.anchors.eq(e.data.index),\r\n                curItem = curAnchor.parents('[data-role=\"container\"]').find('[data-role=\"title\"]'),\r\n                curItemMessages = curItem.find('[data-role=\"title-messages\"]'),\r\n                curItemMessage,\r\n                activeClass = \"_active\";\r\n\r\n            if ((curItemMessages).is(\":empty\")) {\r\n                curAnchor\r\n                    .find('[data-role=\"item-messages\"]')\r\n                    .clone()\r\n                    .appendTo(curItemMessages);\r\n            }\r\n\r\n            curItemMessage = curItemMessages.find('.' + messageType).addClass(activeClass);\r\n        },\r\n\r\n        /**\r\n         * Mark tab as error if some field inside tab panel is not passed validation\r\n         * @param {Object} e - event object\r\n         * @protected\r\n         */\r\n        _onInvalid: function(e) {\r\n            var cssError = '_error',\r\n                fakeEvent = e;\r\n\r\n            fakeEvent.currentTarget = $(this.anchors).eq(e.data.index);\r\n            this._eventHandler(fakeEvent);\r\n            this.anchors.eq(e.data.index).addClass(cssError).find('.' + cssError).show();\r\n            this._updateNavTitleMessages(e, cssError);\r\n        },\r\n\r\n        /**\r\n         * Show tab panel if focus event triggered of some field inside tab panel\r\n         * @param {Object} e - event object\r\n         * @protected\r\n         */\r\n        _onFocus: function(e) {\r\n            this.option(\"_active\", e.data.index);\r\n        },\r\n\r\n        /**\r\n         * Add active tab id in data object when \"beforeSubmit\" event is triggered\r\n         * @param {Object} e - event object\r\n         * @param {Object} data - event data object\r\n         * @protected\r\n         */\r\n        _onBeforeSubmit: function(e, data) {\r\n            var activeAnchor = this.activeAnchor(),\r\n                activeTabId = activeAnchor.prop('id');\r\n            if (this.options.tabsBlockPrefix) {\r\n                if (activeAnchor.is('[id*=\"' + this.options.tabsBlockPrefix + '\"]')) {\r\n                    activeTabId = activeAnchor.prop('id').substr(this.options.tabsBlockPrefix.length);\r\n                }\r\n            }\r\n            $(this.anchors).removeClass('error');\r\n            var options = {\r\n                action: {\r\n                    args: {}\r\n                }\r\n            };\r\n            options.action.args[this.options.tabIdArgument] = activeTabId;\r\n            data = data ? $.extend(data, options) : options;\r\n        }\r\n    });\r\n\r\n    // Extension for mage.tabs - Shadow tabs functionality\r\n    $.widget('mage.tabs', $.mage.tabs, {\r\n        /**\r\n         * Add shadow tabs functionality on creation\r\n         * @protected\r\n         * @override\r\n         */\r\n        _refresh: function() {\r\n            this._super();\r\n            var anchors = this.anchors,\r\n                shadowTabs = this.options.shadowTabs,\r\n                tabs = this.tabs;\r\n\r\n            if (shadowTabs) {\r\n                anchors.each($.proxy(function(i, anchor) {\r\n                    var anchorId = $(anchor).prop('id');\r\n                    if (shadowTabs[anchorId]) {\r\n                        $(anchor).parents('li').on('click', $.proxy(function() {\r\n                            $.each(shadowTabs[anchorId], $.proxy(function(i, id) {\r\n                                this.load($(tabs).index($('#' + id).parents('li')), {});\r\n                            }, this));\r\n                        }, this));\r\n                    }\r\n                }, this));\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.tabs;\r\n}));\r\n","mage/backend/tree-suggest.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint browser:true*/\r\n(function (root, factory) {\r\n    'use strict';\r\n\r\n    if (typeof define === 'function' && define.amd) {\r\n        define([\r\n            'jquery',\r\n            'jquery/ui',\r\n            'jquery/jstree/jquery.jstree',\r\n            'mage/backend/suggest'\r\n        ], factory);\r\n    } else {\r\n        factory(root.jQuery);\r\n    }\r\n}(this, function ($) {\r\n    'use strict';\r\n\r\n    $.extend(true, $, {\r\n        // @TODO: Move method 'treeToList' in file with utility functions\r\n        mage: {\r\n            treeToList: function (list, nodes, level, path) {\r\n                $.each(nodes, function () {\r\n                    if ($.type(this) === 'object') {\r\n                        list.push({\r\n                            label: this.label,\r\n                            id: this.id,\r\n                            level: level,\r\n                            item: this,\r\n                            path: path + this.label\r\n                        });\r\n\r\n                        if (this.children) {\r\n                            $.mage.treeToList(list, this.children, level + 1, path + this.label + ' / ');\r\n                        }\r\n                    }\r\n                });\r\n\r\n                return list;\r\n            }\r\n        }\r\n    });\r\n\r\n    var hover_node = $.jstree._instance.prototype.hover_node,\r\n        dehover_node = $.jstree._instance.prototype.dehover_node,\r\n        select_node = $.jstree._instance.prototype.select_node,\r\n        init = $.jstree._instance.prototype.init;\r\n\r\n    $.extend(true, $.jstree._instance.prototype, {\r\n        /**\r\n         * @override\r\n         */\r\n        init: function () {\r\n            this.get_container()\r\n                .show()\r\n                .on('keydown', $.proxy(function (e) {\r\n                    if (e.keyCode === $.ui.keyCode.ENTER) {\r\n                        var o = this.data.ui.hovered || this.data.ui.last_selected || -1;\r\n                        this.select_node(o, true);\r\n                    }\r\n                }, this));\r\n            init.call(this);\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        hover_node: function (obj) {\r\n            hover_node.apply(this, arguments);\r\n            obj = this._get_node(obj);\r\n\r\n            if (!obj.length) {\r\n                return false;\r\n            }\r\n            this.get_container().trigger('hover_node', [{\r\n                item: obj.find('a:first')\r\n            }]);\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        dehover_node: function () {\r\n            dehover_node.call(this);\r\n            this.get_container().trigger('dehover_node');\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        select_node: function (o) {\r\n            select_node.apply(this, arguments);\r\n\r\n            var node = this._get_node(o);\r\n\r\n            (node ? $(node) : this.data.ui.last_selected)\r\n                .trigger('select_tree_node');\r\n        }\r\n    });\r\n\r\n    $.widget('mage.treeSuggest', $.mage.suggest, {\r\n        widgetEventPrefix: 'suggest',\r\n        options: {\r\n            template:\r\n                '<% if (data.items.length) { %>' +\r\n                    '<% if (data.allShown()) { %>' +\r\n                        '<% if (typeof data.nested === \"undefined\") { %>' +\r\n                            '<div style=\"display:none;\" data-mage-init=\"{&quot;jstree&quot;:{&quot;plugins&quot;:[&quot;themes&quot;,&quot;html_data&quot;,&quot;ui&quot;,&quot;hotkeys&quot;],&quot;themes&quot;:{&quot;theme&quot;:&quot;default&quot;,&quot;dots&quot;:false,&quot;icons&quot;:false}}}\">' +\r\n                        '<% } %>' +\r\n                        '<ul>' +\r\n                            '<% _.each(data.items, function(value) { %>' +\r\n                                '<li class=\"<% if (data.itemSelected(value)) { %>mage-suggest-selected<% } %><% if (value.is_active == 0) { %> mage-suggest-not-active<% } %>\">' +\r\n                                    '<a href=\"#\" <%= data.optionData(value) %>><%- value.label %></a>' +\r\n                                    '<% if (value.children && value.children.length) { %>' +\r\n                                        '<%= data.renderTreeLevel(value.children) %>' +\r\n                                    '<% } %>' +\r\n                                '</li>' +\r\n                            '<% }); %>' +\r\n                        '</ul>' +\r\n                        '<% if (typeof data.nested === \"undefined\") { %>' +\r\n                            '</div>' +\r\n                        '<% } %>' +\r\n                    '<% } else { %>' +\r\n                        '<ul data-mage-init=\"{&quot;menu&quot;:[]}\">' +\r\n                            '<% _.each(data.items, function(value) { %>' +\r\n                                '<% if (!data.itemSelected(value)) {%>' +\r\n                                    '<li <%= data.optionData(value) %>>' +\r\n                                        '<a href=\"#\">' +\r\n                                            '<span class=\"category-label\"><%- value.label %></span>' +\r\n                                            '<span class=\"category-path\"><%- value.path %></span>' +\r\n                                        '</a>' +\r\n                                    '</li>' +\r\n                                '<% } %>' +\r\n                            '<% }); %>' +\r\n                        '</ul>' +\r\n                    '<% } %>' +\r\n                '<% } else { %>' +\r\n                    '<span class=\"mage-suggest-no-records\"><%- data.noRecordsText %></span>' +\r\n                '<% } %>',\r\n            controls: {\r\n                selector: ':ui-menu, :mage-menu, .jstree',\r\n                eventsMap: {\r\n                    focus: ['menufocus', 'hover_node'],\r\n                    blur: ['menublur', 'dehover_node'],\r\n                    select: ['menuselect', 'select_tree_node']\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * @override\r\n         */\r\n        _bind: function () {\r\n            this._super();\r\n            this._on({\r\n                keydown: function (event) {\r\n                    var keyCode = $.ui.keyCode;\r\n\r\n                    switch (event.keyCode) {\r\n                        case keyCode.LEFT:\r\n\r\n                        case keyCode.RIGHT:\r\n\r\n                            if (this.isDropdownShown()) {\r\n                                event.preventDefault();\r\n                                this._proxyEvents(event);\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        close: function (e) {\r\n            var eType = e ? e.type : null;\r\n\r\n            if (eType === 'select_tree_node') {\r\n                this.element.focus();\r\n            } else {\r\n                this._superApply(arguments);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _filterSelected: function (items, context) {\r\n            if (context._allShown) {\r\n                return items;\r\n            } else {\r\n                return this._superApply(arguments);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _prepareDropdownContext: function () {\r\n            var context = this._superApply(arguments),\r\n                optionData = context.optionData,\r\n                templates = this.templates,\r\n                tmplName = this.templateName;\r\n\r\n            context.optionData = function (item) {\r\n                item = $.extend({}, item);\r\n                delete item.children;\r\n\r\n                return optionData(item);\r\n            };\r\n\r\n            return $.extend(context, {\r\n                renderTreeLevel: function (children) {\r\n                    var _context = $.extend({}, this, {\r\n                        items: children,\r\n                        nested: true\r\n                    }),\r\n                    tmpl = templates[tmplName];\r\n\r\n                    tmpl = tmpl({\r\n                        data: _context\r\n                    });\r\n\r\n                    return $('<div>').append($(tmpl)).html();\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _processResponse: function (e, items, context) {\r\n            if (context && !context._allShown) {\r\n                items = this.filter($.mage.treeToList([], items, 0, ''), this._term);\r\n            }\r\n            var control = this.dropdown.find(this._control.selector);\r\n\r\n            if (control.length && control.hasClass('jstree')) {\r\n                control.jstree('destroy');\r\n            }\r\n            this._superApply([e, items, context]);\r\n        }\r\n    });\r\n\r\n    return $.mage.treeSuggest;\r\n}));\r\n","mage/backend/validation.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint jquery:true browser:true*/\r\n/*global BASE_URL:true*/\r\n(function (factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define([\r\n            \"jquery\",\r\n            \"underscore\",\r\n            'Magento_Ui/js/modal/alert',\r\n            \"jquery/ui\",\r\n            \"jquery/validate\",\r\n            \"mage/translate\",\r\n            \"mage/validation\"\r\n        ], factory);\r\n    } else {\r\n        factory(jQuery);\r\n    }\r\n}(function ($, _, alert) {\r\n    \"use strict\";\r\n    \r\n    $.extend(true, $.validator.prototype, {\r\n        /**\r\n         * Focus invalid fields\r\n         */\r\n        focusInvalid: function() {\r\n            if (this.settings.focusInvalid) {\r\n                try {\r\n                    $(this.errorList.length && this.errorList[0].element || [])\r\n                        .focus()\r\n                        .trigger(\"focusin\");\r\n                } catch (e) {\r\n                    // ignore IE throwing errors when focusing hidden elements\r\n                }\r\n            }\r\n        },\r\n        elements: function () {\r\n            var validator = this,\r\n                rulesCache = {};\r\n\r\n            // select all valid inputs inside the form (no submit or reset buttons)\r\n            return $(this.currentForm)\r\n                .find(\"input, select, textarea\")\r\n                .not(this.settings.forceIgnore)\r\n                .not(':submit, :reset, :image, [disabled]')\r\n                .not(this.settings.ignore)\r\n                .filter(function () {\r\n                    if (!this.name && validator.settings.debug && window.console) {\r\n                        console.error('%o has no name assigned', this);\r\n                    }\r\n\r\n                    // select only the first element for each name, and only those with rules specified\r\n                    if (this.name in rulesCache || !validator.objectLength($(this).rules())) {\r\n                        return false;\r\n                    }\r\n\r\n                    rulesCache[this.name] = true;\r\n\r\n                    return true;\r\n                });\r\n        }\r\n    });\r\n\r\n    $.extend($.fn, {\r\n        /**\r\n         * ValidationDelegate overridden for those cases where the form is located in another form,\r\n         *     to avoid not correct working of validate plug-in\r\n         * @override\r\n         * @param {string} delegate - selector, if event target matched against this selector,\r\n         *     then event will be delegated\r\n         * @param {string} type - event type\r\n         * @param {function} handler - event handler\r\n         * @return {Element}\r\n         */\r\n        validateDelegate: function (delegate, type, handler) {\r\n            return this.on(type, $.proxy(function (event) {\r\n                var target = $(event.target);\r\n                var form = target[0].form;\r\n                if(form && $(form).is(this) && $.data(form, \"validator\") && target.is(delegate)) {\r\n                    return handler.apply(target, arguments);\r\n                }\r\n            }, this));\r\n        }\r\n    });\r\n\r\n    $.widget(\"mage.validation\", $.mage.validation, {\r\n        options: {\r\n            messagesId: 'messages',\r\n            forceIgnore: '',\r\n            ignore: ':disabled, .ignore-validate, .no-display.template, ' +\r\n                ':disabled input, .ignore-validate input, .no-display.template input, ' +\r\n                ':disabled select, .ignore-validate select, .no-display.template select, ' +\r\n                ':disabled textarea, .ignore-validate textarea, .no-display.template textarea',\r\n            errorElement: 'label',\r\n            errorUrl: typeof BASE_URL !== 'undefined' ? BASE_URL : null,\r\n            highlight: function(element) {\r\n                if ($.validator.defaults.highlight && $.isFunction($.validator.defaults.highlight)) {\r\n                    $.validator.defaults.highlight.apply(this, arguments);\r\n                }\r\n                $(element).trigger('highlight.validate');\r\n            },\r\n            unhighlight: function(element) {\r\n                if ($.validator.defaults.unhighlight && $.isFunction($.validator.defaults.unhighlight)) {\r\n                    $.validator.defaults.unhighlight.apply(this, arguments);\r\n                }\r\n                $(element).trigger('unhighlight.validate');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validation creation\r\n         * @protected\r\n         */\r\n        _create: function() {\r\n            if (!this.options.submitHandler && $.type(this.options.submitHandler) !== 'function') {\r\n                if (!this.options.frontendOnly && this.options.validationUrl) {\r\n                    this.options.submitHandler = $.proxy(this._ajaxValidate, this);\r\n                } else {\r\n                    this.options.submitHandler = $.proxy(this._submit, this);\r\n                }\r\n            }\r\n            this.element.on('resetElement', function(e) {$(e.target).rules('remove');});\r\n            this._super('_create');\r\n        },\r\n\r\n        /**\r\n         * ajax validation\r\n         * @protected\r\n         */\r\n        _ajaxValidate: function() {\r\n            $.ajax({\r\n                url: this.options.validationUrl,\r\n                type: 'POST',\r\n                dataType: 'json',\r\n                data: this.element.serialize(),\r\n                context: $('body'),\r\n                success: $.proxy(this._onSuccess, this),\r\n                error: $.proxy(this._onError, this),\r\n                showLoader: true,\r\n                dontHide: false\r\n            });\r\n        },\r\n\r\n        /*\r\n         * Process ajax success\r\n         * @protected\r\n         * @param {Object} JSON-response\r\n         * @param {string} response status\r\n         * @param {Object} The jQuery XMLHttpRequest object returned by $.ajax()\r\n         */\r\n        _onSuccess: function(response) {\r\n            if (!response.error) {\r\n                this._submit();\r\n            } else {\r\n                this._showErrors(response);\r\n                $('body').trigger('processStop');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Submitting a form\r\n         * @private\r\n         */\r\n        _submit: function() {\r\n            $(this.element[0]).trigger('afterValidate.beforeSubmit');\r\n            this.element[0].submit();\r\n        },\r\n\r\n        /**\r\n         * Displays errors after backend validation.\r\n         * @param {Object} data - Data that came from backend.\r\n         */\r\n        _showErrors: function(data) {\r\n            $('body').notification('clear')\r\n                .notification('add', {\r\n                    error: data.error,\r\n                    message: data.message,\r\n                    insertMethod: function(message) {\r\n                        $('.messages:first').html(message);\r\n                    }\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Tries to retrieve element either by id or by inputs' name property.\r\n         * @param {String} code - String to search by.\r\n         * @returns {jQuery} jQuery element.\r\n         */\r\n        _getByCode: function(code) {\r\n            var parent = this.element[0],\r\n                element;\r\n\r\n            element = parent.querySelector('#' + code) || parent.querySelector('input[name=' + code + ']');\r\n\r\n            return $(element);\r\n        },\r\n\r\n        /*\r\n         * Process ajax error\r\n         * @protected\r\n         */\r\n        _onError: function() {\r\n            this.trigger('processStop');\r\n            \r\n            if (this.options.errorUrl) {\r\n                location.href = this.options.errorUrl;\r\n            }\r\n        }\r\n    });\r\n\r\n    _.each({\r\n        'validate-greater-zero-based-on-option': [\r\n            function (v, el) {\r\n                var optionType = $(el)\r\n                    .closest('.form-list')\r\n                    .prev('.fieldset-alt')\r\n                    .find('select.select-product-option-type'),\r\n                    optionTypeVal = optionType.val();\r\n                v = Number(v) || 0;\r\n                if (optionType && (optionTypeVal == 'checkbox' || optionTypeVal == 'multi') && v <= 0) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter a number greater 0 in this field.')\r\n        ],\r\n        'validate-rating': [\r\n            function () {\r\n                var ratings = $('#detailed_rating').find('.field-rating'),\r\n                    noError = true;\r\n\r\n                ratings.each(function (index, rating) {\r\n                    noError = noError && $(rating).find('input:checked').length > 0;\r\n                });\r\n                return noError;\r\n            },\r\n            $.mage.__('Please select one of each ratings above.')\r\n        ],\r\n        'validate-downloadable-file': [\r\n            function (v, element) {\r\n                var elmParent = $(element).parent(),\r\n                    linkType = elmParent.find('input[value=\"file\"]'),\r\n                    newFileContainer;\r\n\r\n                if (linkType.is(':checked') && (v === '' || v === '[]')) {\r\n                    newFileContainer = elmParent.find('.new-file');\r\n                    if (!alertAlreadyDisplayed && (newFileContainer.empty() || newFileContainer.is(':visible'))) {\r\n                        alertAlreadyDisplayed = true;\r\n                        alert({\r\n                            content: $.mage.__('There are files that were selected but not uploaded yet. ' +\r\n                            'Please upload or remove them first')\r\n                        });\r\n                    }\r\n                    return false;\r\n                }\r\n                return true;\r\n            },\r\n            'Please upload a file.'\r\n        ],\r\n        'validate-downloadable-url': [\r\n            function (v, element) {\r\n                var linkType = $(element).parent().find('input[value=\"url\"]');\r\n                if (linkType.is(':checked') && v === '') {\r\n                    return false;\r\n                }\r\n                return true;\r\n            },\r\n            $.mage.__('Please specify Url.')\r\n        ]\r\n    }, function (rule, i) {\r\n        rule.unshift(i);\r\n        $.validator.addMethod.apply($.validator, rule);\r\n    });\r\n\r\n    return $.mage.validation;\r\n}));\r\n","mage/requirejs/resolver.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'domReady!'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    var context     = require.s.contexts._,\r\n        execCb      = context.execCb,\r\n        registry    = context.registry,\r\n        callbacks   = [],\r\n        retries     = 10,\r\n        updateDelay = 1,\r\n        ready,\r\n        update;\r\n\r\n    /**\r\n     * Checks if provided callback already exists in the callbacks list.\r\n     *\r\n     * @param {Object} callback - Callback object to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function isSubscribed(callback) {\r\n        return !!_.findWhere(callbacks, callback);\r\n    }\r\n\r\n    /**\r\n     * Checks if provided module is rejected during load.\r\n     *\r\n     * @param {Object} module - Module to be checked.\r\n     * @return {Boolean}\r\n     */\r\n    function isRejected(module) {\r\n        return registry[module.id] && registry[module.id].error;\r\n    }\r\n\r\n    /**\r\n     * Checks if provided module has unresolved dependencies.\r\n     *\r\n     * @param {Object} module - Module to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function isPending(module) {\r\n        if (!module.depCount) {\r\n            return false;\r\n        }\r\n\r\n        return module.depCount > _.filter(module.depMaps, isRejected).length;\r\n    }\r\n\r\n    /**\r\n     * Checks if requirejs's registry object contains pending modules.\r\n     *\r\n     * @returns {Boolean}\r\n     */\r\n    function hasPending() {\r\n        return _.some(registry, isPending);\r\n    }\r\n\r\n    /**\r\n     * Checks if 'resolver' module is in ready\r\n     * state and that there are no pending modules.\r\n     *\r\n     * @returns {Boolean}\r\n     */\r\n    function isReady() {\r\n        return ready && !hasPending();\r\n    }\r\n\r\n    /**\r\n     * Invokes provided callback handler.\r\n     *\r\n     * @param {Object} callback\r\n     */\r\n    function invoke(callback) {\r\n        callback.handler.call(callback.ctx);\r\n    }\r\n\r\n    /**\r\n     * Sets 'resolver' module to a ready state\r\n     * and invokes pending callbacks.\r\n     */\r\n    function resolve() {\r\n        ready = true;\r\n\r\n        callbacks.splice(0).forEach(invoke);\r\n    }\r\n\r\n    /**\r\n     * Drops 'ready' flag and runs the update process.\r\n     */\r\n    function tick() {\r\n        ready = false;\r\n\r\n        update(retries);\r\n    }\r\n\r\n    /**\r\n     * Adds callback which will be invoked\r\n     * when all of the pending modules are initiated.\r\n     *\r\n     * @param {Function} handler - 'Ready' event handler function.\r\n     * @param {Object} [ctx] - Optional context with which handler\r\n     *      will be invoked.\r\n     */\r\n    function subscribe(handler, ctx) {\r\n        var callback = {\r\n            handler: handler,\r\n            ctx: ctx\r\n        };\r\n\r\n        if (!isSubscribed(callback)) {\r\n            callbacks.push(callback);\r\n\r\n            if (isReady()) {\r\n                _.defer(tick);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks for all modules to be initiated\r\n     * and invokes pending callbacks if it's so.\r\n     *\r\n     * @param {Number} [retry] - Number of retries\r\n     *      that will be used to repeat the 'update' function\r\n     *      invokation in case if there are no pending requests.\r\n     */\r\n    update = _.debounce(function (retry) {\r\n        if (!hasPending()) {\r\n            retry ? update(--retry) : resolve();\r\n        }\r\n    }, updateDelay);\r\n\r\n    /**\r\n     * Overrides requirejs's original 'execCb' method\r\n     * in order to track pending modules.\r\n     *\r\n     * @returns {*} Result of original method call.\r\n     */\r\n    context.execCb = function () {\r\n        var exported = execCb.apply(context, arguments);\r\n\r\n        tick();\r\n\r\n        return exported;\r\n    };\r\n\r\n    return subscribe;\r\n});\r\n","mage/requirejs/text.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/* inspired by http://github.com/requirejs/text */\r\n/*global XMLHttpRequest, XDomainRequest */\r\n\r\ndefine(['module'], function (module) {\r\n    'use strict';\r\n\r\n    var xmlRegExp = /^\\s*<\\?xml(\\s)+version=[\\'\\\"](\\d)*.(\\d)*[\\'\\\"](\\s)*\\?>/im,\r\n        bodyRegExp = /<body[^>]*>\\s*([\\s\\S]+)\\s*<\\/body>/im,\r\n        stripReg = /!strip$/i,\r\n        defaultConfig = module.config && module.config() || {};\r\n\r\n    /**\r\n     * Strips <?xml ...?> declarations so that external SVG and XML documents can be\r\n     * added to a document without worry.\r\n     * Also, if the string is an HTML document, only the part inside the body tag is returned.\r\n     *\r\n     * @param {String} external\r\n     * @returns {String}\r\n     */\r\n    function stripContent(external) {\r\n        var matches;\r\n\r\n        if (!external) {\r\n            return '';\r\n        }\r\n\r\n        matches = external.match(bodyRegExp);\r\n        external = matches ?\r\n            matches[1] :\r\n            external.replace(xmlRegExp, '');\r\n\r\n        return external;\r\n    }\r\n\r\n    /**\r\n     * Checks that url match current location\r\n     *\r\n     * @param {String} url\r\n     * @returns {Boolean}\r\n     */\r\n    function sameDomain(url) {\r\n        var uProtocol, uHostName, uPort,\r\n            xdRegExp = /^([\\w:]+)?\\/\\/([^\\/\\\\]+)/i,\r\n            location = window.location,\r\n            match = xdRegExp.exec(url);\r\n\r\n        if (!match) {\r\n            return true;\r\n        }\r\n        uProtocol = match[1];\r\n        uHostName = match[2];\r\n\r\n        uHostName = uHostName.split(':');\r\n        uPort = uHostName[1] || '';\r\n        uHostName = uHostName[0];\r\n\r\n        return (!uProtocol || uProtocol === location.protocol) &&\r\n            (!uHostName || uHostName.toLowerCase() === location.hostname.toLowerCase()) &&\r\n            (!uPort && !uHostName || uPort === location.port);\r\n    }\r\n\r\n    /**\r\n     * @returns {XMLHttpRequest|XDomainRequest|null}\r\n     */\r\n    function createRequest(url) {\r\n        var xhr = new XMLHttpRequest();\r\n\r\n        if (!sameDomain(url) && typeof XDomainRequest !== 'undefined') {\r\n            xhr = new XDomainRequest();\r\n        }\r\n\r\n        return xhr;\r\n    }\r\n\r\n    /**\r\n     * XHR requester. Returns value to callback.\r\n     *\r\n     * @param {String} url\r\n     * @param {Function} callback\r\n     * @param {Function} fail\r\n     * @param {Object} headers\r\n     */\r\n    function getContent(url, callback, fail, headers) {\r\n        var xhr = createRequest(url),\r\n            header,\r\n            errorHandler = fail || Function();\r\n\r\n        xhr.open('GET', url);\r\n\r\n        /*eslint-disable max-depth */\r\n        if ('setRequestHeader' in xhr && headers) {\r\n            for (header in headers) {\r\n                if (headers.hasOwnProperty(header)) {\r\n                    xhr.setRequestHeader(header.toLowerCase(), headers[header]);\r\n                }\r\n            }\r\n        }\r\n\r\n        /*eslint-enable max-depth */\r\n\r\n        if (defaultConfig.onXhr) {\r\n            defaultConfig.onXhr(xhr, url);\r\n        }\r\n\r\n        /**\r\n         * onload handler\r\n         */\r\n        xhr.onload = function () {\r\n\r\n            callback(xhr.responseText);\r\n\r\n            if (defaultConfig.onXhrComplete) {\r\n                defaultConfig.onXhrComplete(xhr, url);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * onerror handler\r\n         */\r\n        xhr.onerror = function (event) {\r\n            errorHandler(event);\r\n\r\n            if (defaultConfig.onXhrFailure) {\r\n                defaultConfig.onXhrFailure(xhr, url, event);\r\n            }\r\n        };\r\n\r\n        xhr.send();\r\n    }\r\n\r\n    /**\r\n     * Main method used by RequireJs.\r\n     *\r\n     * @param {String} name - has format: some.module.filext!strip\r\n     * @param {Function} req\r\n     * @param {Function|undefined} onLoad\r\n     */\r\n    function loadContent(name, req, onLoad) {\r\n\r\n        var toStrip = stripReg.test(name),\r\n            url = req.toUrl(name.replace(stripReg, '')),\r\n            headers = defaultConfig.headers;\r\n\r\n        getContent(url, function (content) {\r\n                content = toStrip ? stripContent(content) : content;\r\n                onLoad(content);\r\n            }, onLoad.error, headers);\r\n    }\r\n\r\n    return {\r\n        load: loadContent,\r\n        get: getContent\r\n    };\r\n});\r\n","mage/utils/arrays.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    './strings'\r\n], function (_, utils) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Defines index of an item in a specified container.\r\n     *\r\n     * @param {*} item - Item whose index should be defined.\r\n     * @param {Array} container - Container upon which to perform search.\r\n     * @returns {Number}\r\n     */\r\n    function getIndex(item, container) {\r\n        var index = container.indexOf(item);\r\n\r\n        if (~index) {\r\n            return index;\r\n        }\r\n\r\n        return _.findIndex(container, function (value) {\r\n            return value && value.name === item;\r\n        });\r\n    }\r\n\r\n    return {\r\n       /**\r\n         * Facade method to remove/add value from/to array\r\n         * without creating a new instance.\r\n         *\r\n         * @param {Array} arr - Array to be modified.\r\n         * @param {*} value - Value to add/remove.\r\n         * @param {Boolean} add - Flag that specfies operation.\r\n         * @returns {Utils} Chainable.\r\n         */\r\n        toggle: function (arr, value, add) {\r\n            return add ?\r\n                this.add(arr, value) :\r\n                this.remove(arr, value);\r\n        },\r\n\r\n        /**\r\n         * Removes the incoming value from array in case\r\n         * without creating a new instance of it.\r\n         *\r\n         * @param {Array} arr - Array to be modified.\r\n         * @param {*} value - Value to be removed.\r\n         * @returns {Utils} Chainable.\r\n         */\r\n        remove: function (arr, value) {\r\n            var index = arr.indexOf(value);\r\n\r\n            if (~index) {\r\n                arr.splice(index, 1);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds the incoming value to array if\r\n         * it's not alredy present in there.\r\n         *\r\n         * @param {Array} arr - Array to be modifed.\r\n         * @param {...*} Values to be added.\r\n         * @returns {Utils} Chainable.\r\n         */\r\n        add: function (arr) {\r\n            var values = _.toArray(arguments).slice(1);\r\n\r\n            values.forEach(function (value) {\r\n                if (!~arr.indexOf(value)) {\r\n                    arr.push(value);\r\n                }\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Inserts specified item into container at a specified position.\r\n         *\r\n         * @param {*} item - Item to be inserted into container.\r\n         * @param {Array} container - Container of items.\r\n         * @param {*} [position=-1] - Position at which item should be inserted.\r\n         *      Position can represent:\r\n         *          - specific index in container\r\n         *          - item which might already be present in container\r\n         *          - structure with one of these properties: after, before\r\n         * @returns {Boolean|*}\r\n         *      - true if element has changed its' position\r\n         *      - false if nothing has changed\r\n         *      - inserted value if it wasn't present in container\r\n         */\r\n        insert: function (item, container, position) {\r\n            var currentIndex = getIndex(item, container),\r\n                newIndex,\r\n                target;\r\n\r\n            if (typeof position === 'undefined' || position == null) {\r\n                position = -1;\r\n            } else if (typeof position === 'string') {\r\n                position = isNaN(+position) ? position : +position;\r\n            }\r\n\r\n            newIndex = position;\r\n\r\n            if (~currentIndex) {\r\n                target = container.splice(currentIndex, 1)[0];\r\n\r\n                if (typeof item === 'string') {\r\n                    item = target;\r\n                }\r\n            }\r\n\r\n            if (typeof position !== 'number') {\r\n                target = position.after || position.before || position;\r\n\r\n                newIndex = getIndex(target, container);\r\n\r\n                if (~newIndex && (position.after || newIndex >= currentIndex)) {\r\n                    newIndex++;\r\n                }\r\n            }\r\n\r\n            if (newIndex < 0) {\r\n                newIndex += container.length + 1;\r\n            }\r\n\r\n            container[newIndex] ?\r\n                container.splice(newIndex, 0, item) :\r\n                container[newIndex] = item;\r\n\r\n            return !~currentIndex ? item : currentIndex !== newIndex;\r\n        },\r\n\r\n        formatOffset: function (elems, offset) {\r\n            if (utils.isEmpty(offset)) {\r\n                offset = -1;\r\n            }\r\n\r\n            offset = +offset;\r\n\r\n            if (offset < 0) {\r\n                offset += elems.length + 1;\r\n            }\r\n\r\n            return offset;\r\n        }\r\n    };\r\n});\r\n","mage/utils/compare.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mage/utils/objects'\r\n], function (_, utils) {\r\n    'use strict';\r\n\r\n    var result = [];\r\n\r\n    /**\r\n     * Checks if all of the provided arrays contains equal values.\r\n     *\r\n     * @param {(Boolean|Array)} [keepOrder=false]\r\n     * @param {Array} target\r\n     * @returns {Boolean}\r\n     */\r\n    function equalArrays(keepOrder, target) {\r\n        var args = _.toArray(arguments),\r\n            arrays;\r\n\r\n        if (!Array.isArray(keepOrder)) {\r\n            arrays      = args.slice(2);\r\n        } else {\r\n            target      = keepOrder;\r\n            keepOrder   = false;\r\n            arrays      = args.slice(1);\r\n        }\r\n\r\n        if (!arrays.length) {\r\n            return true;\r\n        }\r\n\r\n        return arrays.every(function (array) {\r\n            if (array === target) {\r\n                return true;\r\n            } else if (array.length !== target.length) {\r\n                return false;\r\n            } else if (!keepOrder) {\r\n                return !_.difference(target, array).length;\r\n            }\r\n\r\n            return array.every(function (value, index) {\r\n                return target.indexOf(value) === index;\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if two values are different.\r\n     *\r\n     * @param {*} a - First value.\r\n     * @param {*} b - Second value.\r\n     * @returns {Boolean}\r\n     */\r\n    function isDifferent(a, b) {\r\n        var oldIsPrimitive = utils.isPrimitive(a);\r\n\r\n        if (Array.isArray(a) && Array.isArray(b)) {\r\n            return !equalArrays(true, a, b);\r\n        }\r\n\r\n        return oldIsPrimitive ? a !== b : true;\r\n    }\r\n\r\n    /**\r\n     * @param {String} prefix\r\n     * @param {String} part\r\n     */\r\n    function getPath(prefix, part) {\r\n        return prefix ? prefix + '.' + part : part;\r\n    }\r\n\r\n    /**\r\n     * Checks if object has own specified property.\r\n     *\r\n     * @param {*} obj - Value to be checked.\r\n     * @param {String} key - Key of the property.\r\n     * @returns {Boolean}\r\n     */\r\n    function hasOwn(obj, key) {\r\n        return Object.prototype.hasOwnProperty.call(obj, key);\r\n    }\r\n\r\n    /**\r\n     * @param {Array} changes\r\n     */\r\n    function getContainers(changes) {\r\n        var containers  = {},\r\n            indexed     = _.indexBy(changes, 'path');\r\n\r\n        _.each(indexed, function (change, name) {\r\n            var path;\r\n\r\n            name.split('.').forEach(function (part) {\r\n                path = getPath(path, part);\r\n\r\n                if (path in indexed) {\r\n                    return;\r\n                }\r\n\r\n                (containers[path] = containers[path] || []).push(change);\r\n            });\r\n        });\r\n\r\n        return containers;\r\n    }\r\n\r\n    /**\r\n     * @param {String} path\r\n     * @param {String} name\r\n     * @param {String} type\r\n     * @param {String} newValue\r\n     * @param {String} oldValue\r\n     */\r\n    function addChange(path, name, type, newValue, oldValue) {\r\n        var data;\r\n\r\n        data = {\r\n            path: path,\r\n            name: name,\r\n            type: type\r\n        };\r\n\r\n        if (type !== 'remove') {\r\n            data.value = newValue;\r\n            data.oldValue = oldValue;\r\n        } else {\r\n            data.oldValue = newValue;\r\n        }\r\n\r\n        result.push(data);\r\n    }\r\n\r\n    /**\r\n     * @param {String} ns\r\n     * @param {String} name\r\n     * @param {String} type\r\n     * @param {String} iterator\r\n     * @param {String} placeholder\r\n     */\r\n    function setAll(ns, name, type, iterator, placeholder) {\r\n        var key;\r\n\r\n        if (arguments.length > 4) {\r\n            type === 'add' ?\r\n                addChange(ns, name, 'update', iterator, placeholder) :\r\n                addChange(ns, name, 'update', placeholder, iterator);\r\n        } else {\r\n            addChange(ns, name, type, iterator);\r\n        }\r\n\r\n        if (!utils.isObject(iterator)) {\r\n            return;\r\n        }\r\n\r\n        for (key in iterator) {\r\n            if (hasOwn(iterator, key)) {\r\n                setAll(getPath(ns, key), key, type, iterator[key]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*eslint-disable max-depth*/\r\n    /**\r\n     * @param {Object} old\r\n     * @param {Object} current\r\n     * @param {String} ns\r\n     * @param {String} name\r\n     */\r\n    function compare(old, current, ns, name) {\r\n        var key,\r\n            oldIsObj = utils.isObject(old),\r\n            newIsObj = utils.isObject(current);\r\n\r\n        if (oldIsObj && newIsObj) {\r\n            for (key in old) {\r\n                if (hasOwn(old, key) && !hasOwn(current, key)) {\r\n                    setAll(getPath(ns, key), key, 'remove', old[key]);\r\n                }\r\n            }\r\n\r\n            for (key in current) {\r\n                if (hasOwn(current, key)) {\r\n                    hasOwn(old, key) ?\r\n                        compare(old[key], current[key], getPath(ns, key), key) :\r\n                        setAll(getPath(ns, key), key, 'add', current[key]);\r\n                }\r\n            }\r\n        } else if (oldIsObj) {\r\n            setAll(ns, name, 'remove', old, current);\r\n        } else if (newIsObj) {\r\n            setAll(ns, name, 'add', current, old);\r\n        } else if (isDifferent(old, current)) {\r\n            addChange(ns, name, 'update', current, old);\r\n        }\r\n    }\r\n\r\n    /*eslint-enable max-depth*/\r\n\r\n    return {\r\n\r\n        /**\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        compare: function () {\r\n            var changes;\r\n\r\n            compare.apply(null, arguments);\r\n\r\n            changes = result.splice(0);\r\n\r\n            return {\r\n                containers: getContainers(changes),\r\n                changes: changes,\r\n                equal: !changes.length\r\n            };\r\n        },\r\n\r\n        equalArrays: equalArrays\r\n    };\r\n});\r\n","mage/utils/main.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine(function (require) {\r\n    'use strict';\r\n\r\n    var utils = {},\r\n        _ = require('underscore');\r\n\r\n    return _.extend(\r\n        utils,\r\n        require('./arrays'),\r\n        require('./compare'),\r\n        require('./misc'),\r\n        require('./objects'),\r\n        require('./strings'),\r\n        require('./template')\r\n    );\r\n});\r\n","mage/utils/misc.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'jquery',\r\n    'FormData'\r\n], function (_, $) {\r\n    'use strict';\r\n\r\n    var defaultAttributes,\r\n        ajaxSettings,\r\n        map;\r\n\r\n    defaultAttributes = {\r\n        method: 'post',\r\n        enctype: 'multipart/form-data'\r\n    };\r\n\r\n    ajaxSettings = {\r\n        default: {\r\n            method: 'POST',\r\n            cache: false,\r\n            processData: false,\r\n            contentType: false\r\n        },\r\n        simple: {\r\n            method: 'POST',\r\n            dataType: 'json'\r\n        }\r\n    };\r\n\r\n    map = {\r\n        'D': 'DDD',\r\n        'dd': 'DD',\r\n        'd': 'D',\r\n        'EEEE': 'dddd',\r\n        'EEE': 'ddd',\r\n        'e': 'd',\r\n        'yyyy': 'YYYY',\r\n        'yy': 'YY',\r\n        'y': 'YYYY',\r\n        'a': 'A'\r\n    };\r\n\r\n    return {\r\n\r\n        /**\r\n         * Generates a unique identifier.\r\n         *\r\n         * @param {Number} [size=7] - Length of a resulting identifier.\r\n         * @returns {String}\r\n         */\r\n        uniqueid: function (size) {\r\n            var code = Math.random() * 25 + 65 | 0,\r\n                idstr = String.fromCharCode(code);\r\n\r\n            size = size || 7;\r\n\r\n            while (idstr.length < size) {\r\n                code = Math.floor(Math.random() * 42 + 48);\r\n\r\n                if (code < 58 || code > 64) {\r\n                    idstr += String.fromCharCode(code);\r\n                }\r\n            }\r\n\r\n            return idstr;\r\n        },\r\n\r\n        /**\r\n         * Limits function call.\r\n         *\r\n         * @param {Object} owner\r\n         * @param {String} target\r\n         * @param {Number} limit\r\n         */\r\n        limit: function (owner, target, limit) {\r\n            var fn = owner[target];\r\n\r\n            owner[target] = _.debounce(fn.bind(owner), limit);\r\n        },\r\n\r\n        /**\r\n         * Converts mage date format to a moment.js format.\r\n         *\r\n         * @param {String} mageFormat\r\n         * @returns {String}\r\n         */\r\n        normalizeDate: function (mageFormat) {\r\n            var result = mageFormat;\r\n\r\n            _.each(map, function (moment, mage) {\r\n                result = result.replace(mage, moment);\r\n            });\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Puts provided value in range of min and max parameters.\r\n         *\r\n         * @param {Number} value - Value to be located.\r\n         * @param {Number} min - Min value.\r\n         * @param {Number} max - Max value.\r\n         * @returns {Number}\r\n         */\r\n        inRange: function (value, min, max) {\r\n            return Math.min(Math.max(min, value), max);\r\n        },\r\n\r\n        /**\r\n         * Serializes and sends data via POST request.\r\n         *\r\n         * @param {Object} options - Options object that consists of\r\n         *      a 'url' and 'data' properties.\r\n         * @param {Object} attrs - Attributes that will be added to virtual form.\r\n         */\r\n        submit: function (options, attrs) {\r\n            var form        = document.createElement('form'),\r\n                data        = this.serialize(options.data),\r\n                attributes  = _.extend({}, defaultAttributes, attrs || {}),\r\n                field;\r\n\r\n            if (!attributes.action) {\r\n                attributes.action = options.url;\r\n            }\r\n\r\n            data['form_key'] = window.FORM_KEY;\r\n\r\n            _.each(attributes, function (value, name) {\r\n                form.setAttribute(name, value);\r\n            });\r\n\r\n            _.each(data, function (value, name) {\r\n                field = document.createElement('input');\r\n\r\n                field.setAttribute('name', name);\r\n                field.setAttribute('type', 'hidden');\r\n\r\n                field.value = value;\r\n\r\n                form.appendChild(field);\r\n            });\r\n\r\n            document.body.appendChild(form);\r\n\r\n            form.submit();\r\n        },\r\n\r\n        /**\r\n         * Serializes and sends data via AJAX POST request.\r\n         *\r\n         * @param {Object} options - Options object that consists of\r\n         *      a 'url' and 'data' properties.\r\n         * @param {Object} config\r\n         */\r\n        ajaxSubmit: function (options, config) {\r\n            var t = new Date().getTime(),\r\n                settings;\r\n\r\n            options.data['form_key'] = window.FORM_KEY;\r\n            options.data = this.prepareFormData(options.data, config.ajaxSaveType);\r\n            settings = _.extend({}, ajaxSettings[config.ajaxSaveType], options || {});\r\n\r\n            $('body').trigger('processStart');\r\n\r\n            return $.ajax(settings)\r\n                .done(function (data) {\r\n                    data.t = t;\r\n                    config.response.data(data);\r\n                    config.response.status(undefined);\r\n                    config.response.status(!data.error);\r\n                })\r\n                .fail(function (xhr) {\r\n                    config.response.status(undefined);\r\n                    config.response.status(false);\r\n                    config.response.data({\r\n                        error: true,\r\n                        messages: xhr.statusText,\r\n                        t: t\r\n                    });\r\n                })\r\n                .always(function () {\r\n                    $('body').trigger('processStop');\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Creates FormData object and append this data.\r\n         *\r\n         * @param {Object} data\r\n         * @param {String} type\r\n         * @returns {FormData}\r\n         */\r\n        prepareFormData: function (data, type) {\r\n            var formData;\r\n\r\n            if (type === 'default') {\r\n                formData = new FormData();\r\n                _.each(this.serialize(data), function (val, name) {\r\n                    formData.append(name, val);\r\n                });\r\n            } else if (type === 'simple') {\r\n                formData = this.serialize(data);\r\n            }\r\n\r\n            return formData;\r\n        },\r\n\r\n        /**\r\n         * Filters data object. Finds properties with suffix\r\n         * and sets their values to properties with the same name without suffix.\r\n         *\r\n         * @param {Object} data - The data object that should be filtered\r\n         * @param {String} suffix - The string by which data object should be filtered\r\n         * @param {String} separator - The string that is separator between property and suffix\r\n         *\r\n         * @returns {Object} Filtered data object\r\n         */\r\n        filterFormData: function (data, suffix, separator) {\r\n            data = data || {};\r\n            suffix = suffix || 'prepared-for-send';\r\n            separator = separator || '-';\r\n\r\n            _.each(data, function (value, key) {\r\n                if (_.isObject(value) && !value.length) {\r\n                    this.filterFormData(value, suffix, separator);\r\n                } else if (_.isString(key) && ~key.indexOf(suffix)) {\r\n                    data[key.split(separator)[0]] = value;\r\n                    delete data[key];\r\n                }\r\n            }, this);\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Converts PHP IntlFormatter format to moment format.\r\n         *\r\n         * @param {String} format - PHP format\r\n         * @returns {String} - moment compatible formatting\r\n         */\r\n        convertToMomentFormat: function (format) {\r\n            var newFormat;\r\n\r\n            newFormat = format.replace(/yyyy|yy|y/, 'YYYY'); // replace the year\r\n            newFormat = newFormat.replace(/dd|d/g, 'DD'); // replace the day\r\n\r\n            return newFormat;\r\n        }\r\n    };\r\n});\r\n","mage/utils/objects.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'underscore'\r\n], function (ko, $, _) {\r\n    'use strict';\r\n\r\n    var primitives = [\r\n        'undefined',\r\n        'boolean',\r\n        'number',\r\n        'string'\r\n    ];\r\n\r\n    /**\r\n     * Sets nested property of a specified object.\r\n     * @private\r\n     *\r\n     * @param {Object} parent - Object to look inside for the properties.\r\n     * @param {Array} path - Splitted path the property.\r\n     * @param {*} value - Value of the last property in 'path' array.\r\n     * returns {*} New value for the property.\r\n     */\r\n    function setNested(parent, path, value) {\r\n        var last = path.pop(),\r\n            len = path.length,\r\n            pi = 0,\r\n            part = path[pi];\r\n\r\n        for (; pi < len; part = path[++pi]) {\r\n            if (!_.isObject(parent[part])) {\r\n                parent[part] = {};\r\n            }\r\n\r\n            parent = parent[part];\r\n        }\r\n\r\n        if (typeof parent[last] === 'function') {\r\n            parent[last](value);\r\n        } else {\r\n            parent[last] = value;\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Retrieves value of a nested property.\r\n     * @private\r\n     *\r\n     * @param {Object} parent - Object to look inside for the properties.\r\n     * @param {Array} path - Splitted path the property.\r\n     * @returns {*} Value of the property.\r\n     */\r\n    function getNested(parent, path) {\r\n        var exists = true,\r\n            len = path.length,\r\n            pi = 0;\r\n\r\n        for (; pi < len && exists; pi++) {\r\n            parent = parent[path[pi]];\r\n\r\n            if (typeof parent === 'undefined') {\r\n                exists = false;\r\n            }\r\n        }\r\n\r\n        if (exists) {\r\n            if (ko.isObservable(parent)) {\r\n                parent = parent();\r\n            }\r\n\r\n            return parent;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes property from a specified object.\r\n     * @private\r\n     *\r\n     * @param {Object} parent - Object from which to remove property.\r\n     * @param {Array} path - Splitted path to the property.\r\n     */\r\n    function removeNested(parent, path) {\r\n        var field = path.pop();\r\n\r\n        parent = getNested(parent, path);\r\n\r\n        if (_.isObject(parent)) {\r\n            delete parent[field];\r\n        }\r\n    }\r\n\r\n    return {\r\n\r\n        /**\r\n         * Retrieves or defines objects' property by a composite path.\r\n         *\r\n         * @param {Object} data - Container for the properties specified in path.\r\n         * @param {String} path - Objects' properties divided by dots.\r\n         * @param {*} [value] - New value for the last property.\r\n         * @returns {*} Returns value of the last property in chain.\r\n         *\r\n         * @example\r\n         *      utils.nested({}, 'one.two', 3);\r\n         *      => { one: {two: 3} }\r\n         */\r\n        nested: function (data, path, value) {\r\n            var action = arguments.length > 2 ? setNested : getNested;\r\n\r\n            path = path ? path.split('.') : [];\r\n\r\n            return action(data, path, value);\r\n        },\r\n\r\n        /**\r\n         * Removes nested property from an object.\r\n         *\r\n         * @param {Object} data - Data source.\r\n         * @param {String} path - Path to the property e.g. 'one.two.three'\r\n         */\r\n        nestedRemove: function (data, path) {\r\n            path = path.split('.');\r\n\r\n            removeNested(data, path);\r\n        },\r\n\r\n        /**\r\n         * Flattens objects' nested properties.\r\n         *\r\n         * @param {Object} data - Object to flatten.\r\n         * @param {String} [separator='.'] - Objects' keys separator.\r\n         * @returns {Object} Flattened object.\r\n         *\r\n         * @example Example with a default separator.\r\n         *      utils.flatten({one: { two: { three: 'value'} }});\r\n         *      => { 'one.two.three': 'value' };\r\n         *\r\n         * @example Example with a custom separator.\r\n         *      utils.flatten({one: { two: { three: 'value'} }}, '=>');\r\n         *      => {'one=>two=>three': 'value'};\r\n         */\r\n        flatten: function (data, separator, parent, result) {\r\n            separator = separator || '.';\r\n            result = result || {};\r\n\r\n            _.each(data, function (node, name) {\r\n                if (parent) {\r\n                    name = parent + separator + name;\r\n                }\r\n\r\n                typeof node === 'object' ?\r\n                    this.flatten(node, separator, name, result) :\r\n                    result[name] = node;\r\n\r\n            }, this);\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Opposite operation of the 'flatten' method.\r\n         *\r\n         * @param {Object} data - Previously flattened object.\r\n         * @param {String} [separator='.'] - Keys separator.\r\n         * @returns {Object} Object with nested properties.\r\n         *\r\n         * @example Example using custom separator.\r\n         *      utils.unflatten({'one=>two': 'value'}, '=>');\r\n         *      => {\r\n         *          one: { two: 'value' }\r\n         *      };\r\n         */\r\n        unflatten: function (data, separator) {\r\n            var result = {};\r\n\r\n            separator = separator || '.';\r\n\r\n            _.each(data, function (value, nodes) {\r\n                nodes = nodes.split(separator);\r\n\r\n                setNested(result, nodes, value);\r\n            });\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Same operation as 'flatten' method,\r\n         * but returns objects' keys wrapped in '[]'.\r\n         *\r\n         * @param {Object} data - Object that should be serialized.\r\n         * @returns {Object} Serialized data.\r\n         *\r\n         * @example\r\n         *      utils.serialize({one: { two: { three: 'value'} }});\r\n         *      => { 'one[two][three]': 'value' }\r\n         */\r\n        serialize: function (data) {\r\n            var result = {};\r\n\r\n            data = this.flatten(data);\r\n\r\n            _.each(data, function (value, keys) {\r\n                keys = this.serializeName(keys);\r\n                value = _.isUndefined(value) ? '' : value;\r\n\r\n                result[keys] = value;\r\n            }, this);\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Performs deep extend of specified objects.\r\n         *\r\n         * @returns {Object|Array} Extended object.\r\n         */\r\n        extend: function () {\r\n            var args = _.toArray(arguments);\r\n\r\n            args.unshift(true);\r\n\r\n            return $.extend.apply($, args);\r\n        },\r\n\r\n        /**\r\n         * Performs a deep clone of a specified object.\r\n         *\r\n         * @param {(Object|Array)} data - Data that should be copied.\r\n         * @returns {Object|Array} Cloned object.\r\n         */\r\n        copy: function (data) {\r\n            var result = data,\r\n                isArray = Array.isArray(data),\r\n                placeholder;\r\n\r\n            if (this.isObject(data) || isArray) {\r\n                placeholder = isArray ? [] : {};\r\n                result = this.extend(placeholder, data);\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Performs a deep clone of a specified object.\r\n         * Doesn't save links to original object.\r\n         *\r\n         * @param {*} original - Object to clone\r\n         * @returns {*}\r\n         */\r\n        hardCopy: function (original) {\r\n            if (original === null || typeof original !== 'object') {\r\n                return original;\r\n            }\r\n\r\n            return JSON.parse(JSON.stringify(original));\r\n        },\r\n\r\n        /**\r\n         * Removes specified nested properties from the target object.\r\n         *\r\n         * @param {Object} target - Object whose properties should be removed.\r\n         * @param {(...String|Array|Object)} list - List that specifies properties to be removed.\r\n         * @returns {Object} Modified object.\r\n         *\r\n         * @example Basic usage\r\n         *      var obj = {a: {b: 2}, c: 'a'};\r\n         *\r\n         *      omit(obj, 'a.b');\r\n         *      => {'a.b': 2};\r\n         *      obj => {a: {}, c: 'a'};\r\n         *\r\n         * @example Various syntaxes that would return same result\r\n         *      omit(obj, ['a.b', 'c']);\r\n         *      omit(obj, 'a.b', 'c');\r\n         *      omit(obj, {'a.b': true, 'c': true});\r\n         */\r\n        omit: function (target, list) {\r\n            var removed = {},\r\n                ignored = list;\r\n\r\n            if (this.isObject(list)) {\r\n                ignored = [];\r\n\r\n                _.each(list, function (value, key) {\r\n                    if (value) {\r\n                        ignored.push(key);\r\n                    }\r\n                });\r\n            } else if (_.isString(list)) {\r\n                ignored = _.toArray(arguments).slice(1);\r\n            }\r\n\r\n            _.each(ignored, function (path) {\r\n                var value = this.nested(target, path);\r\n\r\n                if (!_.isUndefined(value)) {\r\n                    removed[path] = value;\r\n\r\n                    this.nestedRemove(target, path);\r\n                }\r\n            }, this);\r\n\r\n            return removed;\r\n        },\r\n\r\n        /**\r\n         * Checks if provided value is a plain object.\r\n         *\r\n         * @param {*} value - Value to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isObject: function (value) {\r\n            var objProto = Object.prototype;\r\n\r\n            return typeof value == 'object' ?\r\n            objProto.toString.call(value) === '[object Object]' :\r\n                false;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {*} value\r\n         * @returns {Boolean}\r\n         */\r\n        isPrimitive: function (value) {\r\n            return value === null || ~primitives.indexOf(typeof value);\r\n        },\r\n\r\n        /**\r\n         * Iterates over obj props/array elems recursively, applying action to each one\r\n         *\r\n         * @param {Object|Array} data - Data to be iterated.\r\n         * @param {Function} action - Callback to be called with each item as an argument.\r\n         * @param {Number} [maxDepth=7] - Max recursion depth.\r\n         */\r\n        forEachRecursive: function (data, action, maxDepth) {\r\n            maxDepth = typeof maxDepth === 'number' && !isNaN(maxDepth) ? maxDepth - 1 : 7;\r\n\r\n            if (!_.isFunction(action) || _.isFunction(data) || maxDepth < 0) {\r\n                return;\r\n            }\r\n\r\n            if (!_.isObject(data)) {\r\n                action(data);\r\n\r\n                return;\r\n            }\r\n\r\n            _.each(data, function (value) {\r\n                this.forEachRecursive(value, action, maxDepth);\r\n            }, this);\r\n\r\n            action(data);\r\n        },\r\n\r\n        /**\r\n         * Maps obj props/array elems recursively\r\n         *\r\n         * @param {Object|Array} data - Data to be iterated.\r\n         * @param {Function} action - Callback to transform each item.\r\n         * @param {Number} [maxDepth=7] - Max recursion depth.\r\n         *\r\n         * @returns {Object|Array}\r\n         */\r\n        mapRecursive: function (data, action, maxDepth) {\r\n            var newData;\r\n\r\n            maxDepth = typeof maxDepth === 'number' && !isNaN(maxDepth) ? maxDepth - 1 : 7;\r\n\r\n            if (!_.isFunction(action) || _.isFunction(data) || maxDepth < 0) {\r\n                return data;\r\n            }\r\n\r\n            if (!_.isObject(data)) {\r\n                return action(data);\r\n            }\r\n\r\n            if (_.isArray(data)) {\r\n                newData = _.map(data, function (item) {\r\n                    return this.mapRecursive(item, action, maxDepth);\r\n                }, this);\r\n\r\n                return action(newData);\r\n            }\r\n\r\n            newData = _.mapObject(data, function (val, key) {\r\n                if (data.hasOwnProperty(key)) {\r\n                    return this.mapRecursive(val, action, maxDepth);\r\n                }\r\n\r\n                return val;\r\n            }, this);\r\n\r\n            return action(newData);\r\n        },\r\n\r\n        /**\r\n         * Removes empty(in common sence) obj props/array elems\r\n         *\r\n         * @param {*} data - Data to be cleaned.\r\n         * @returns {*}\r\n         */\r\n        removeEmptyValues: function (data) {\r\n            if (!_.isObject(data)) {\r\n                return data;\r\n            }\r\n\r\n            if (_.isArray(data)) {\r\n                return data.filter(function (item) {\r\n                    return !this.isEmptyObj(item);\r\n                }, this);\r\n            }\r\n\r\n            return _.omit(data, this.isEmptyObj.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Checks that argument of any type is empty in common sence:\r\n         * empty string, string with spaces only, object without own props, empty array, null or undefined\r\n         *\r\n         * @param {*} val - Value to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isEmptyObj: function (val) {\r\n\r\n            return _.isObject(val) && _.isEmpty(val) ||\r\n            this.isEmpty(val) ||\r\n            val && val.trim && this.isEmpty(val.trim());\r\n        }\r\n    };\r\n});\r\n","mage/utils/strings.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    var jsonRe = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/;\r\n\r\n    return {\r\n\r\n        /**\r\n         * Attempts to convert string to one of the primitive values,\r\n         * or to parse it as a valid json object.\r\n         *\r\n         * @param {String} str - String to be processed.\r\n         * @returns {*}\r\n         */\r\n        castString: function (str) {\r\n            try {\r\n                str = str === 'true' ? true :\r\n                    str === 'false' ? false :\r\n                        str === 'null' ? null :\r\n                            +str + '' === str ? +str :\r\n                                jsonRe.test(str) ? JSON.parse(str) :\r\n                                    str;\r\n            } catch (e) {\r\n            }\r\n\r\n            return str;\r\n        },\r\n\r\n        /**\r\n         * Splits string by separator if it's possible,\r\n         * otherwise returns the incoming value.\r\n         *\r\n         * @param {(String|Array|*)} str - String to split.\r\n         * @param {String} [separator=' '] - Seperator based on which to split the string.\r\n         * @returns {Array|*} Splitted string or the incoming value.\r\n         */\r\n        stringToArray: function (str, separator) {\r\n            separator = separator || ' ';\r\n\r\n            return typeof str === 'string' ?\r\n                str.split(separator) :\r\n                str;\r\n        },\r\n\r\n        /**\r\n         * Converts the incoming string which consists\r\n         * of a specified delimiters into a format commonly used in form elements.\r\n         *\r\n         * @param {String} name - The incoming string.\r\n         * @param {String} [separator='.']\r\n         * @returns {String} Serialized string.\r\n         *\r\n         * @example\r\n         *      utils.serializeName('one.two.three');\r\n         *      => 'one[two][three]';\r\n         */\r\n        serializeName: function (name, separator) {\r\n            var result;\r\n\r\n            separator = separator || '.';\r\n            name = name.split(separator);\r\n\r\n            result = name.shift();\r\n\r\n            name.forEach(function (part) {\r\n                result += '[' + part + ']';\r\n            });\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Checks wether the incoming value is not empty,\r\n         * e.g. not 'null' or 'undefined'\r\n         *\r\n         * @param {*} value - Value to check.\r\n         * @returns {Boolean}\r\n         */\r\n        isEmpty: function (value) {\r\n            return value === '' || _.isUndefined(value) || _.isNull(value);\r\n        },\r\n\r\n        /**\r\n         * Adds 'prefix' to the 'part' value if it was provided.\r\n         *\r\n         * @param {String} prefix\r\n         * @param {String} part\r\n         * @returns {String}\r\n         */\r\n        fullPath: function (prefix, part) {\r\n            return prefix ? prefix + '.' + part : part;\r\n        },\r\n\r\n        /**\r\n         * Splits incoming string and returns its' part specified by offset.\r\n         *\r\n         * @param {String} parts\r\n         * @param {Number} [offset]\r\n         * @param {String} [delimiter=.]\r\n         * @returns {String}\r\n         */\r\n        getPart: function (parts, offset, delimiter) {\r\n            delimiter = delimiter || '.';\r\n            parts = parts.split(delimiter);\r\n            offset = this.formatOffset(parts, offset);\r\n\r\n            parts.splice(offset, 1);\r\n\r\n            return parts.join(delimiter) || '';\r\n        },\r\n\r\n        /**\r\n         * Converts nameThroughCamelCase to name-through-minus\r\n         *\r\n         * @param {String} string\r\n         * @returns {String}\r\n         */\r\n        camelCaseToMinus: function camelCaseToMinus(string) {\r\n            return ('' + string)\r\n                .split('')\r\n                .map(function (symbol, index) {\r\n                    return index ?\r\n                        symbol.toUpperCase() === symbol ?\r\n                        '-' + symbol.toLowerCase() :\r\n                            symbol :\r\n                        symbol.toLowerCase();\r\n                })\r\n                .join('');\r\n        },\r\n\r\n        /**\r\n         * Converts name-through-minus to nameThroughCamelCase\r\n         *\r\n         * @param {String} string\r\n         * @returns {String}\r\n         */\r\n        minusToCamelCase: function minusToCamelCase(string) {\r\n            return ('' + string)\r\n                .split('-')\r\n                .map(function (part, index) {\r\n                    return index ? part.charAt(0).toUpperCase() + part.slice(1) : part;\r\n                })\r\n                .join('');\r\n        }\r\n    };\r\n});\r\n","mage/utils/template.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* eslint-disable no-shadow */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mage/utils/objects',\r\n    'mage/utils/strings'\r\n], function ($, _, utils, stringUtils) {\r\n    'use strict';\r\n\r\n    var tmplSettings = _.templateSettings,\r\n        interpolate = /\\$\\{([\\s\\S]+?)\\}/g,\r\n        opener = '${',\r\n        template,\r\n        hasStringTmpls;\r\n\r\n    /**\r\n     * Identifies whether ES6 templates are supported.\r\n     */\r\n    hasStringTmpls = (function () {\r\n        var testString = 'var foo = \"bar\"; return `${ foo }` === foo';\r\n\r\n        try {\r\n            return Function(testString)();\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    })();\r\n\r\n    if (hasStringTmpls) {\r\n\r\n        /*eslint-disable no-unused-vars, no-eval*/\r\n        /**\r\n         * Evaluates template string using ES6 templates.\r\n         *\r\n         * @param {String} tmpl - Template string.\r\n         * @param {Object} $ - Data object used in a template.\r\n         * @returns {String} Compiled template.\r\n         */\r\n        template = function (tmpl, $) {\r\n            return eval('`' + tmpl + '`');\r\n        };\r\n\r\n        /*eslint-enable no-unused-vars, no-eval*/\r\n    } else {\r\n\r\n        /**\r\n         * Fallback function used when ES6 templates are not supported.\r\n         * Uses underscore templates renderer.\r\n         *\r\n         * @param {String} tmpl - Template string.\r\n         * @param {Object} data - Data object used in a template.\r\n         * @returns {String} Compiled template.\r\n         */\r\n        template = function (tmpl, data) {\r\n            var cached = tmplSettings.interpolate;\r\n\r\n            tmplSettings.interpolate = interpolate;\r\n\r\n            tmpl = _.template(tmpl, {\r\n                variable: '$'\r\n            })(data);\r\n\r\n            tmplSettings.interpolate = cached;\r\n\r\n            return tmpl;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Checks if provided value contains template syntax.\r\n     *\r\n     * @param {*} value - Value to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function isTemplate(value) {\r\n        return typeof value === 'string' && ~value.indexOf(opener);\r\n    }\r\n\r\n    /**\r\n     * Iteratively processes provided string\r\n     * until no templates syntax will be found.\r\n     *\r\n     * @param {String} tmpl - Template string.\r\n     * @param {Object} data - Data object used in a template.\r\n     * @param {Boolean} [castString=false] - Flag that indicates whether template\r\n     *      should be casted after evaluation to a value of another type or\r\n     *      that it should be leaved as a string.\r\n     * @returns {*} Compiled template.\r\n     */\r\n    function render(tmpl, data, castString) {\r\n        var last = tmpl;\r\n\r\n        while (~tmpl.indexOf(opener)) {\r\n            tmpl = template(tmpl, data);\r\n\r\n            if (tmpl === last) {\r\n                break;\r\n            }\r\n\r\n            last = tmpl;\r\n        }\r\n\r\n        return castString ?\r\n            stringUtils.castString(tmpl) :\r\n            tmpl;\r\n    }\r\n\r\n    return {\r\n\r\n        /**\r\n         * Applies provided data to the template.\r\n         *\r\n         * @param {Object|String} tmpl\r\n         * @param {Object} [data] - Data object to match with template.\r\n         * @param {Boolean} [castString=false] - Flag that indicates whether template\r\n         *      should be casted after evaluation to a value of another type or\r\n         *      that it should be leaved as a string.\r\n         * @returns {*}\r\n         *\r\n         * @example Template defined as a string.\r\n         *      var source = { foo: 'Random Stuff', bar: 'Some' };\r\n         *\r\n         *      utils.template('${ $.bar } ${ $.foo }', source);\r\n         *      => 'Some Random Stuff';\r\n         *\r\n         * @example Template defined as an object.\r\n         *      var tmpl = {\r\n         *              key: {'${ $.$data.bar }': '${ $.$data.foo }'},\r\n         *              foo: 'bar',\r\n         *              x1: 2, x2: 5,\r\n         *              delta: '${ $.x2 - $.x1 }',\r\n         *              baz: 'Upper ${ $.foo.toUpperCase() }'\r\n         *      };\r\n         *\r\n         *      utils.template(tmpl, source);\r\n         *      => {\r\n         *          key: {'Some': 'Random Stuff'},\r\n         *          foo: 'bar',\r\n         *          x1: 2, x2: 5,\r\n         *          delta: 3,\r\n         *          baz: 'Upper BAR'\r\n         *      };\r\n         */\r\n        template: function (tmpl, data, castString, dontClone) {\r\n            if (typeof tmpl === 'string') {\r\n                return render(tmpl, data, castString);\r\n            }\r\n\r\n            if (!dontClone) {\r\n                tmpl = utils.copy(tmpl);\r\n            }\r\n\r\n            tmpl.$data = data || {};\r\n\r\n            /**\r\n             * Template iterator function.\r\n             */\r\n            _.each(tmpl, function iterate(value, key, list) {\r\n                if (key === '$data') {\r\n                    return;\r\n                }\r\n\r\n                if (isTemplate(key)) {\r\n                    delete list[key];\r\n\r\n                    key = render(key, tmpl);\r\n                    list[key] = value;\r\n                }\r\n\r\n                if (isTemplate(value)) {\r\n                    list[key] = render(value, tmpl, castString);\r\n                } else if ($.isPlainObject(value) || Array.isArray(value)) {\r\n                    _.each(value, iterate);\r\n                }\r\n            });\r\n\r\n            delete tmpl.$data;\r\n\r\n            return tmpl;\r\n        }\r\n    };\r\n});\r\n","mage/utils/wrapper.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * Utility methods used to wrap and extend functions.\r\n *\r\n * @example Usage of a 'wrap' method with arguments delegation.\r\n *      var multiply = function (a, b) {\r\n *          return a * b;\r\n *      };\r\n *\r\n *      multiply = module.wrap(multiply, function (orig) {\r\n *          return 'Result is: ' + orig();\r\n *      });\r\n *\r\n *      multiply(2, 2);\r\n *      => 'Result is: 4'\r\n *\r\n * @example Usage of 'wrapSuper' method.\r\n *      var multiply = function (a, b) {\r\n *         return a * b;\r\n *      };\r\n *\r\n *      var obj = {\r\n *          multiply: module.wrapSuper(multiply, function () {\r\n *              return 'Result is: ' + this._super();\r\n *          });\r\n *      };\r\n *\r\n *      obj.multiply(2, 2);\r\n *      => 'Result is: 4'\r\n */\r\ndefine([\r\n    'underscore'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Checks if string has a '_super' substring.\r\n     */\r\n    var superReg = /\\b_super\\b/;\r\n\r\n    return {\r\n\r\n        /**\r\n         * Wraps target function with a specified wrapper, which will recieve\r\n         * reference to the original function as a first argument.\r\n         *\r\n         * @param {Function} target - Function to be wrapped.\r\n         * @param {Function} wrapper - Wrapper function.\r\n         * @returns {Function} Wrapper function.\r\n         */\r\n        wrap: function (target, wrapper) {\r\n            if (!_.isFunction(target) || !_.isFunction(wrapper)) {\r\n                return wrapper;\r\n            }\r\n\r\n            return function () {\r\n                var args    = _.toArray(arguments),\r\n                    ctx     = this,\r\n                    _super;\r\n\r\n                /**\r\n                 * Function that will be passed to the wrapper.\r\n                 * If no arguments will be passed to it, then the original\r\n                 * function will be called with an arguments of a wrapper function.\r\n                 */\r\n                _super = function () {\r\n                    var superArgs = arguments.length ? arguments : args.slice(1);\r\n\r\n                    return target.apply(ctx, superArgs);\r\n                };\r\n\r\n                args.unshift(_super);\r\n\r\n                return wrapper.apply(ctx, args);\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Wraps the incoming function to implement support of the '_super' method.\r\n         *\r\n         * @param {Function} target - Function to be wrapped.\r\n         * @param {Function} wrapper - Wrapper function.\r\n         * @returns {Function} Wrapped function.\r\n         */\r\n        wrapSuper: function (target, wrapper) {\r\n            if (!this.hasSuper(wrapper) || !_.isFunction(target)) {\r\n                return wrapper;\r\n            }\r\n\r\n            return function () {\r\n                var _super  = this._super,\r\n                    args    = arguments,\r\n                    result;\r\n\r\n                /**\r\n                 * Temporary define '_super' method which\r\n                 * contains call to the original function.\r\n                 */\r\n                this._super = function () {\r\n                    var superArgs = arguments.length ? arguments : args;\r\n\r\n                    return target.apply(this, superArgs);\r\n                };\r\n\r\n                result = wrapper.apply(this, args);\r\n\r\n                this._super = _super;\r\n\r\n                return result;\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Checks wether the incoming method contains calls of the '_super' method.\r\n         *\r\n         * @param {Function} fn - Function to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        hasSuper: function (fn) {\r\n            return _.isFunction(fn) && superReg.test(fn);\r\n        },\r\n\r\n        /**\r\n         * Extends target object with provided extenders.\r\n         * If property in target and extender objects is a function,\r\n         * then it will be wrapped using 'wrap' method.\r\n         *\r\n         * @param {Object} target - Object to be extended.\r\n         * @param {...Object} extenders - Multiple extenders objects.\r\n         * @returns {Object} Modified target object.\r\n         */\r\n        extend: function (target) {\r\n            var extenders = _.toArray(arguments).slice(1),\r\n                iterator = this._extend.bind(this, target);\r\n\r\n            extenders.forEach(iterator);\r\n\r\n            return target;\r\n        },\r\n\r\n        /**\r\n         * Same as the 'extend' method, but operates only on one extender object.\r\n         *\r\n         * @private\r\n         * @param {Object} target\r\n         * @param {Object} extender\r\n         */\r\n        _extend: function (target, extender) {\r\n            _.each(extender, function (value, key) {\r\n                target[key] = this.wrap(target[key], extender[key]);\r\n            }, this);\r\n        }\r\n    };\r\n});\r\n","mage/validation/url.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    return {\r\n\r\n        /**\r\n         * Redirects to the url if it is considered safe\r\n         *\r\n         * @param {String} path - url to be redirected to\r\n         */\r\n        redirect: function (path) {\r\n            path = this.sanitize(path);\r\n\r\n            if (this.validate(path)) {\r\n                window.location.href = path;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validates url\r\n         *\r\n         * @param {Object} path - url to be validated\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function (path) {\r\n            var hostname = window.location.hostname;\r\n\r\n            if (path.indexOf(hostname) === -1 ||\r\n                path.indexOf('javascript:') !== -1 ||\r\n                path.indexOf('vbscript:') !== -1) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Sanitize url, replacing disallowed chars\r\n         *\r\n         * @param {String} path - url to be normalized\r\n         * @returns {String}\r\n         */\r\n        sanitize: function (path) {\r\n            return path.replace('[^-A-Za-z0-9+&@#/%?=~_|!:,.;\\(\\)]', '');\r\n        }\r\n    };\r\n});\r\n","mage/view/composite.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint browser:true jquery:true*/\r\n/*global alert*/\r\ndefine(['jquery'], function($) {\r\n    return function (wrapperTag) {\r\n        wrapperTag = wrapperTag || 'div';\r\n        var renderedChildren = {};\r\n        var children = {};\r\n        return {\r\n            addChild: function (child, key) {\r\n                children[key] = child;\r\n            },\r\n\r\n            render: function (root) {\r\n                $.each(children, function (key, child) {\r\n                    var childRoot = $('<div>');\r\n                    renderedChildren[key] = child.render(childRoot);\r\n                    root.append(childRoot);\r\n                });\r\n            }\r\n        }\r\n    }\r\n});\r\n","modernizr/modernizr.2.0.6.js":"/* Modernizr 2.0.6 (Custom Build) | MIT & BSD\r\n * Build: http://www.modernizr.com/download/#-csstransforms-csstransforms3d-cssclasses-prefixed-teststyles-testprop-testallprops-prefixes-domprefixes\r\n */\r\n;window.Modernizr=function(a,b,c){function C(a,b){var c=a.charAt(0).toUpperCase()+a.substr(1),d=(a+\" \"+o.join(c+\" \")+c).split(\" \");return B(d,b)}function B(a,b){for(var d in a)if(k[a[d]]!==c)return b==\"pfx\"?a[d]:!0;return!1}function A(a,b){return!!~(\"\"+a).indexOf(b)}function z(a,b){return typeof a===b}function y(a,b){return x(n.join(a+\";\")+(b||\"\"))}function x(a){k.cssText=a}var d=\"2.0.6\",e={},f=!0,g=b.documentElement,h=b.head||b.getElementsByTagName(\"head\")[0],i=\"modernizr\",j=b.createElement(i),k=j.style,l,m=Object.prototype.toString,n=\" -webkit- -moz- -o- -ms- -khtml- \".split(\" \"),o=\"Webkit Moz O ms Khtml\".split(\" \"),p={},q={},r={},s=[],t=function(a,c,d,e){var f,h,j,k=b.createElement(\"div\");if(parseInt(d,10))while(d--)j=b.createElement(\"div\"),j.id=e?e[d]:i+(d+1),k.appendChild(j);f=[\"&shy;\",\"<style>\",a,\"</style>\"].join(\"\"),k.id=i,k.innerHTML+=f,g.appendChild(k),h=c(k,a),k.parentNode.removeChild(k);return!!h},u,v={}.hasOwnProperty,w;!z(v,c)&&!z(v.call,c)?w=function(a,b){return v.call(a,b)}:w=function(a,b){return b in a&&z(a.constructor.prototype[b],c)};var D=function(a,c){var d=a.join(\"\"),f=c.length;t(d,function(a,c){var d=b.styleSheets[b.styleSheets.length-1],g=d.cssRules&&d.cssRules[0]?d.cssRules[0].cssText:d.cssText||\"\",h=a.childNodes,i={};while(f--)i[h[f].id]=h[f];e.csstransforms3d=i.csstransforms3d.offsetLeft===9},f,c)}([,[\"@media (\",n.join(\"transform-3d),(\"),i,\")\",\"{#csstransforms3d{left:9px;position:absolute}}\"].join(\"\")],[,\"csstransforms3d\"]);p.csstransforms=function(){return!!B([\"transformProperty\",\"WebkitTransform\",\"MozTransform\",\"OTransform\",\"msTransform\"])},p.csstransforms3d=function(){var a=!!B([\"perspectiveProperty\",\"WebkitPerspective\",\"MozPerspective\",\"OPerspective\",\"msPerspective\"]);a&&\"webkitPerspective\"in g.style&&(a=e.csstransforms3d);return a};for(var E in p)w(p,E)&&(u=E.toLowerCase(),e[u]=p[E](),s.push((e[u]?\"\":\"no-\")+u));x(\"\"),j=l=null,e._version=d,e._prefixes=n,e._domPrefixes=o,e.testProp=function(a){return B([a])},e.testAllProps=C,e.testStyles=t,e.prefixed=function(a){return C(a,\"pfx\")},g.className=g.className.replace(/\\bno-js\\b/,\"\")+(f?\" js \"+s.join(\" \"):\"\");return e}(this,this.document);","modernizr/modernizr.details.js":"// By @mathias, based on http://mths.be/axh\r\ndefine([\r\n    'modernizr/modernizr'\r\n], function(){\r\n\r\n    Modernizr.addTest('details', function() {\r\n        var doc = document,\r\n            el = doc.createElement('details'),\r\n            fake,\r\n            root,\r\n            diff;\r\n        if (!('open' in el)) { // return early if possible; thanks @aFarkas!\r\n            return false;\r\n        }\r\n        root = doc.body || (function() {\r\n            var de = doc.documentElement;\r\n            fake = true;\r\n            return de.insertBefore(doc.createElement('body'), de.firstElementChild || de.firstChild);\r\n        }());\r\n        el.innerHTML = '<summary>a</summary>b';\r\n        el.style.display = 'block';\r\n        root.appendChild(el);\r\n        diff = el.offsetHeight;\r\n        el.open = true;\r\n        diff = diff != el.offsetHeight;\r\n        root.removeChild(el);\r\n        fake && root.parentNode.removeChild(root);\r\n        return diff;\r\n    });\r\n\r\n});","modernizr/modernizr.js":"/*!\r\n * Modernizr v2.6.1\r\n * www.modernizr.com\r\n *\r\n * Copyright (c) Faruk Ates, Paul Irish, Alex Sexton\r\n * Available under the BSD and MIT licenses: www.modernizr.com/license/\r\n */\r\n\r\n/*\r\n * Modernizr tests which native CSS3 and HTML5 features are available in\r\n * the current UA and makes the results available to you in two ways:\r\n * as properties on a global Modernizr object, and as classes on the\r\n * <html> element. This information allows you to progressively enhance\r\n * your pages with a granular level of control over the experience.\r\n *\r\n * Modernizr has an optional (not included) conditional resource loader\r\n * called Modernizr.load(), based on Yepnope.js (yepnopejs.com).\r\n * To get a build that includes Modernizr.load(), as well as choosing\r\n * which tests to include, go to www.modernizr.com/download/\r\n *\r\n * Authors        Faruk Ates, Paul Irish, Alex Sexton\r\n * Contributors   Ryan Seddon, Ben Alman\r\n */\r\n\r\nwindow.Modernizr = (function( window, document, undefined ) {\r\n\r\n    var version = '2.6.1',\r\n\r\n        Modernizr = {},\r\n\r\n    /*>>cssclasses*/\r\n    // option for enabling the HTML classes to be added\r\n        enableClasses = true,\r\n    /*>>cssclasses*/\r\n\r\n        docElement = document.documentElement,\r\n\r\n        /**\r\n         * Create our \"modernizr\" element that we do most feature tests on.\r\n         */\r\n            mod = 'modernizr',\r\n        modElem = document.createElement(mod),\r\n        mStyle = modElem.style,\r\n\r\n        /**\r\n         * Create the input element for various Web Forms feature tests.\r\n         */\r\n            inputElem /*>>inputelem*/ = document.createElement('input') /*>>inputelem*/ ,\r\n\r\n    /*>>smile*/\r\n        smile = ':)',\r\n    /*>>smile*/\r\n\r\n        toString = {}.toString,\r\n\r\n    // TODO :: make the prefixes more granular\r\n    /*>>prefixes*/\r\n    // List of property values to set for css tests. See ticket #21\r\n        prefixes = ' -webkit- -moz- -o- -ms- '.split(' '),\r\n    /*>>prefixes*/\r\n\r\n    /*>>domprefixes*/\r\n    // Following spec is to expose vendor-specific style properties as:\r\n    //   elem.style.WebkitBorderRadius\r\n    // and the following would be incorrect:\r\n    //   elem.style.webkitBorderRadius\r\n\r\n    // Webkit ghosts their properties in lowercase but Opera & Moz do not.\r\n    // Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+\r\n    //   erik.eae.net/archives/2008/03/10/21.48.10/\r\n\r\n    // More here: github.com/Modernizr/Modernizr/issues/issue/21\r\n        omPrefixes = 'Webkit Moz O ms',\r\n\r\n        cssomPrefixes = omPrefixes.split(' '),\r\n\r\n        domPrefixes = omPrefixes.toLowerCase().split(' '),\r\n    /*>>domprefixes*/\r\n\r\n    /*>>ns*/\r\n        ns = {'svg': 'http://www.w3.org/2000/svg'},\r\n    /*>>ns*/\r\n\r\n        tests = {},\r\n        inputs = {},\r\n        attrs = {},\r\n\r\n        classes = [],\r\n\r\n        slice = classes.slice,\r\n\r\n        featureName, // used in testing loop\r\n\r\n\r\n    /*>>teststyles*/\r\n    // Inject element with style element and some CSS rules\r\n        injectElementWithStyles = function( rule, callback, nodes, testnames ) {\r\n\r\n            var style, ret, node,\r\n                div = document.createElement('div'),\r\n            // After page load injecting a fake body doesn't work so check if body exists\r\n                body = document.body,\r\n            // IE6 and 7 won't return offsetWidth or offsetHeight unless it's in the body element, so we fake it.\r\n                fakeBody = body ? body : document.createElement('body');\r\n\r\n            if ( parseInt(nodes, 10) ) {\r\n                // In order not to give false positives we create a node for each test\r\n                // This also allows the method to scale for unspecified uses\r\n                while ( nodes-- ) {\r\n                    node = document.createElement('div');\r\n                    node.id = testnames ? testnames[nodes] : mod + (nodes + 1);\r\n                    div.appendChild(node);\r\n                }\r\n            }\r\n\r\n            // <style> elements in IE6-9 are considered 'NoScope' elements and therefore will be removed\r\n            // when injected with innerHTML. To get around this you need to prepend the 'NoScope' element\r\n            // with a 'scoped' element, in our case the soft-hyphen entity as it won't mess with our measurements.\r\n            // msdn.microsoft.com/en-us/library/ms533897%28VS.85%29.aspx\r\n            // Documents served as xml will throw if using &shy; so use xml friendly encoded version. See issue #277\r\n            style = ['&#173;','<style id=\"s', mod, '\">', rule, '</style>'].join('');\r\n            div.id = mod;\r\n            // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.\r\n            // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270\r\n            (body ? div : fakeBody).innerHTML += style;\r\n            fakeBody.appendChild(div);\r\n            if ( !body ) {\r\n                //avoid crashing IE8, if background image is used\r\n                fakeBody.style.background = \"\";\r\n                docElement.appendChild(fakeBody);\r\n            }\r\n\r\n            ret = callback(div, rule);\r\n            // If this is done after page load we don't want to remove the body so check if body exists\r\n            !body ? fakeBody.parentNode.removeChild(fakeBody) : div.parentNode.removeChild(div);\r\n\r\n            return !!ret;\r\n\r\n        },\r\n    /*>>teststyles*/\r\n\r\n    /*>>mq*/\r\n    // adapted from matchMedia polyfill\r\n    // by Scott Jehl and Paul Irish\r\n    // gist.github.com/786768\r\n        testMediaQuery = function( mq ) {\r\n\r\n            var matchMedia = window.matchMedia || window.msMatchMedia;\r\n            if ( matchMedia ) {\r\n                return matchMedia(mq).matches;\r\n            }\r\n\r\n            var bool;\r\n\r\n            injectElementWithStyles('@media ' + mq + ' { #' + mod + ' { position: absolute; } }', function( node ) {\r\n                bool = (window.getComputedStyle ?\r\n                    getComputedStyle(node, null) :\r\n                    node.currentStyle)['position'] == 'absolute';\r\n            });\r\n\r\n            return bool;\r\n\r\n        },\r\n    /*>>mq*/\r\n\r\n\r\n    /*>>hasevent*/\r\n    //\r\n    // isEventSupported determines if a given element supports the given event\r\n    // kangax.github.com/iseventsupported/\r\n    //\r\n    // The following results are known incorrects:\r\n    //   Modernizr.hasEvent(\"webkitTransitionEnd\", elem) // false negative\r\n    //   Modernizr.hasEvent(\"textInput\") // in Webkit. github.com/Modernizr/Modernizr/issues/333\r\n    //   ...\r\n        isEventSupported = (function() {\r\n\r\n            var TAGNAMES = {\r\n                'select': 'input', 'change': 'input',\r\n                'submit': 'form', 'reset': 'form',\r\n                'error': 'img', 'load': 'img', 'abort': 'img'\r\n            };\r\n\r\n            function isEventSupported( eventName, element ) {\r\n\r\n                element = element || document.createElement(TAGNAMES[eventName] || 'div');\r\n                eventName = 'on' + eventName;\r\n\r\n                // When using `setAttribute`, IE skips \"unload\", WebKit skips \"unload\" and \"resize\", whereas `in` \"catches\" those\r\n                var isSupported = eventName in element;\r\n\r\n                if ( !isSupported ) {\r\n                    // If it has no `setAttribute` (i.e. doesn't implement Node interface), try generic element\r\n                    if ( !element.setAttribute ) {\r\n                        element = document.createElement('div');\r\n                    }\r\n                    if ( element.setAttribute && element.removeAttribute ) {\r\n                        element.setAttribute(eventName, '');\r\n                        isSupported = is(element[eventName], 'function');\r\n\r\n                        // If property was created, \"remove it\" (by setting value to `undefined`)\r\n                        if ( !is(element[eventName], 'undefined') ) {\r\n                            element[eventName] = undefined;\r\n                        }\r\n                        element.removeAttribute(eventName);\r\n                    }\r\n                }\r\n\r\n                element = null;\r\n                return isSupported;\r\n            }\r\n            return isEventSupported;\r\n        })(),\r\n    /*>>hasevent*/\r\n\r\n    // TODO :: Add flag for hasownprop ? didn't last time\r\n\r\n    // hasOwnProperty shim by kangax needed for Safari 2.0 support\r\n        _hasOwnProperty = ({}).hasOwnProperty, hasOwnProp;\r\n\r\n    if ( !is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined') ) {\r\n        hasOwnProp = function (object, property) {\r\n            return _hasOwnProperty.call(object, property);\r\n        };\r\n    }\r\n    else {\r\n        hasOwnProp = function (object, property) { /* yes, this can give false positives/negatives, but most of the time we don't care about those */\r\n            return ((property in object) && is(object.constructor.prototype[property], 'undefined'));\r\n        };\r\n    }\r\n\r\n    // Adapted from ES5-shim https://github.com/kriskowal/es5-shim/blob/master/es5-shim.js\r\n    // es5.github.com/#x15.3.4.5\r\n\r\n    if (!Function.prototype.bind) {\r\n        Function.prototype.bind = function bind(that) {\r\n\r\n            var target = this;\r\n\r\n            if (typeof target != \"function\") {\r\n                throw new TypeError();\r\n            }\r\n\r\n            var args = slice.call(arguments, 1),\r\n                bound = function () {\r\n\r\n                    if (this instanceof bound) {\r\n\r\n                        var F = function(){};\r\n                        F.prototype = target.prototype;\r\n                        var self = new F();\r\n\r\n                        var result = target.apply(\r\n                            self,\r\n                            args.concat(slice.call(arguments))\r\n                        );\r\n                        if (Object(result) === result) {\r\n                            return result;\r\n                        }\r\n                        return self;\r\n\r\n                    } else {\r\n\r\n                        return target.apply(\r\n                            that,\r\n                            args.concat(slice.call(arguments))\r\n                        );\r\n\r\n                    }\r\n\r\n                };\r\n\r\n            return bound;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * setCss applies given styles to the Modernizr DOM node.\r\n     */\r\n    function setCss( str ) {\r\n        mStyle.cssText = str;\r\n    }\r\n\r\n    /**\r\n     * setCssAll extrapolates all vendor-specific css strings.\r\n     */\r\n    function setCssAll( str1, str2 ) {\r\n        return setCss(prefixes.join(str1 + ';') + ( str2 || '' ));\r\n    }\r\n\r\n    /**\r\n     * is returns a boolean for if typeof obj is exactly type.\r\n     */\r\n    function is( obj, type ) {\r\n        return typeof obj === type;\r\n    }\r\n\r\n    /**\r\n     * contains returns a boolean for if substr is found within str.\r\n     */\r\n    function contains( str, substr ) {\r\n        return !!~('' + str).indexOf(substr);\r\n    }\r\n\r\n    /*>>testprop*/\r\n\r\n    // testProps is a generic CSS / DOM property test.\r\n\r\n    // In testing support for a given CSS property, it's legit to test:\r\n    //    `elem.style[styleName] !== undefined`\r\n    // If the property is supported it will return an empty string,\r\n    // if unsupported it will return undefined.\r\n\r\n    // We'll take advantage of this quick test and skip setting a style\r\n    // on our modernizr element, but instead just testing undefined vs\r\n    // empty string.\r\n\r\n    // Because the testing of the CSS property names (with \"-\", as\r\n    // opposed to the camelCase DOM properties) is non-portable and\r\n    // non-standard but works in WebKit and IE (but not Gecko or Opera),\r\n    // we explicitly reject properties with dashes so that authors\r\n    // developing in WebKit or IE first don't end up with\r\n    // browser-specific content by accident.\r\n\r\n    function testProps( props, prefixed ) {\r\n        for ( var i in props ) {\r\n            var prop = props[i];\r\n            if ( !contains(prop, \"-\") && mStyle[prop] !== undefined ) {\r\n                return prefixed == 'pfx' ? prop : true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /*>>testprop*/\r\n\r\n    // TODO :: add testDOMProps\r\n    /**\r\n     * testDOMProps is a generic DOM property test; if a browser supports\r\n     *   a certain property, it won't return undefined for it.\r\n     */\r\n    function testDOMProps( props, obj, elem ) {\r\n        for ( var i in props ) {\r\n            var item = obj[props[i]];\r\n            if ( item !== undefined) {\r\n\r\n                // return the property name as a string\r\n                if (elem === false) return props[i];\r\n\r\n                // let's bind a function\r\n                if (is(item, 'function')){\r\n                    // default to autobind unless override\r\n                    return item.bind(elem || obj);\r\n                }\r\n\r\n                // return the unbound function or obj or value\r\n                return item;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /*>>testallprops*/\r\n    /**\r\n     * testPropsAll tests a list of DOM properties we want to check against.\r\n     *   We specify literally ALL possible (known and/or likely) properties on\r\n     *   the element including the non-vendor prefixed one, for forward-\r\n     *   compatibility.\r\n     */\r\n    function testPropsAll( prop, prefixed, elem ) {\r\n\r\n        var ucProp  = prop.charAt(0).toUpperCase() + prop.slice(1),\r\n            props   = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');\r\n\r\n        // did they call .prefixed('boxSizing') or are we just testing a prop?\r\n        if(is(prefixed, \"string\") || is(prefixed, \"undefined\")) {\r\n            return testProps(props, prefixed);\r\n\r\n            // otherwise, they called .prefixed('requestAnimationFrame', window[, elem])\r\n        } else {\r\n            props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');\r\n            return testDOMProps(props, prefixed, elem);\r\n        }\r\n    }\r\n    /*>>testallprops*/\r\n\r\n\r\n    /**\r\n     * Tests\r\n     * -----\r\n     */\r\n\r\n        // The *new* flexbox\r\n        // dev.w3.org/csswg/css3-flexbox\r\n\r\n    tests['flexbox'] = function() {\r\n        return testPropsAll('flexWrap');\r\n    };\r\n\r\n    // The *old* flexbox\r\n    // www.w3.org/TR/2009/WD-css3-flexbox-20090723/\r\n\r\n    tests['flexboxlegacy'] = function() {\r\n        return testPropsAll('boxDirection');\r\n    };\r\n\r\n    // On the S60 and BB Storm, getContext exists, but always returns undefined\r\n    // so we actually have to call getContext() to verify\r\n    // github.com/Modernizr/Modernizr/issues/issue/97/\r\n\r\n    tests['canvas'] = function() {\r\n        var elem = document.createElement('canvas');\r\n        return !!(elem.getContext && elem.getContext('2d'));\r\n    };\r\n\r\n    tests['canvastext'] = function() {\r\n        return !!(Modernizr['canvas'] && is(document.createElement('canvas').getContext('2d').fillText, 'function'));\r\n    };\r\n\r\n    // webk.it/70117 is tracking a legit WebGL feature detect proposal\r\n\r\n    // We do a soft detect which may false positive in order to avoid\r\n    // an expensive context creation: bugzil.la/732441\r\n\r\n    tests['webgl'] = function() {\r\n        return !!window.WebGLRenderingContext;\r\n    };\r\n\r\n    /*\r\n     * The Modernizr.touch test only indicates if the browser supports\r\n     *    touch events, which does not necessarily reflect a touchscreen\r\n     *    device, as evidenced by tablets running Windows 7 or, alas,\r\n     *    the Palm Pre / WebOS (touch) phones.\r\n     *\r\n     * Additionally, Chrome (desktop) used to lie about its support on this,\r\n     *    but that has since been rectified: crbug.com/36415\r\n     *\r\n     * We also test for Firefox 4 Multitouch Support.\r\n     *\r\n     * For more info, see: modernizr.github.com/Modernizr/touch.html\r\n     */\r\n\r\n    tests['touch'] = function() {\r\n        var bool;\r\n\r\n        if(('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch) {\r\n            bool = true;\r\n        } else {\r\n            injectElementWithStyles(['@media (',prefixes.join('touch-enabled),('),mod,')','{#modernizr{top:9px;position:absolute}}'].join(''), function( node ) {\r\n                bool = node.offsetTop === 9;\r\n            });\r\n        }\r\n\r\n        return bool;\r\n    };\r\n\r\n\r\n    // geolocation is often considered a trivial feature detect...\r\n    // Turns out, it's quite tricky to get right:\r\n    //\r\n    // Using !!navigator.geolocation does two things we don't want. It:\r\n    //   1. Leaks memory in IE9: github.com/Modernizr/Modernizr/issues/513\r\n    //   2. Disables page caching in WebKit: webk.it/43956\r\n    //\r\n    // Meanwhile, in Firefox < 8, an about:config setting could expose\r\n    // a false positive that would throw an exception: bugzil.la/688158\r\n\r\n    tests['geolocation'] = function() {\r\n        return 'geolocation' in navigator;\r\n    };\r\n\r\n\r\n    tests['postmessage'] = function() {\r\n        return !!window.postMessage;\r\n    };\r\n\r\n\r\n    // Chrome incognito mode used to throw an exception when using openDatabase\r\n    // It doesn't anymore.\r\n    tests['websqldatabase'] = function() {\r\n        return !!window.openDatabase;\r\n    };\r\n\r\n    // Vendors had inconsistent prefixing with the experimental Indexed DB:\r\n    // - Webkit's implementation is accessible through webkitIndexedDB\r\n    // - Firefox shipped moz_indexedDB before FF4b9, but since then has been mozIndexedDB\r\n    // For speed, we don't test the legacy (and beta-only) indexedDB\r\n    tests['indexedDB'] = function() {\r\n        return !!testPropsAll(\"indexedDB\", window);\r\n    };\r\n\r\n    // documentMode logic from YUI to filter out IE8 Compat Mode\r\n    //   which false positives.\r\n    tests['hashchange'] = function() {\r\n        return isEventSupported('hashchange', window) && (document.documentMode === undefined || document.documentMode > 7);\r\n    };\r\n\r\n    // Per 1.6:\r\n    // This used to be Modernizr.historymanagement but the longer\r\n    // name has been deprecated in favor of a shorter and property-matching one.\r\n    // The old API is still available in 1.6, but as of 2.0 will throw a warning,\r\n    // and in the first release thereafter disappear entirely.\r\n    tests['history'] = function() {\r\n        return !!(window.history && history.pushState);\r\n    };\r\n\r\n    tests['draganddrop'] = function() {\r\n        var div = document.createElement('div');\r\n        return ('draggable' in div) || ('ondragstart' in div && 'ondrop' in div);\r\n    };\r\n\r\n    // FF3.6 was EOL'ed on 4/24/12, but the ESR version of FF10\r\n    // will be supported until FF19 (2/12/13), at which time, ESR becomes FF17.\r\n    // FF10 still uses prefixes, so check for it until then.\r\n    // for more ESR info, see: mozilla.org/en-US/firefox/organizations/faq/\r\n    tests['websockets'] = function() {\r\n        return 'WebSocket' in window || 'MozWebSocket' in window;\r\n    };\r\n\r\n\r\n    // css-tricks.com/rgba-browser-support/\r\n    tests['rgba'] = function() {\r\n        // Set an rgba() color and check the returned value\r\n\r\n        setCss('background-color:rgba(150,255,150,.5)');\r\n\r\n        return contains(mStyle.backgroundColor, 'rgba');\r\n    };\r\n\r\n    tests['hsla'] = function() {\r\n        // Same as rgba(), in fact, browsers re-map hsla() to rgba() internally,\r\n        //   except IE9 who retains it as hsla\r\n\r\n        setCss('background-color:hsla(120,40%,100%,.5)');\r\n\r\n        return contains(mStyle.backgroundColor, 'rgba') || contains(mStyle.backgroundColor, 'hsla');\r\n    };\r\n\r\n    tests['multiplebgs'] = function() {\r\n        // Setting multiple images AND a color on the background shorthand property\r\n        //  and then querying the style.background property value for the number of\r\n        //  occurrences of \"url(\" is a reliable method for detecting ACTUAL support for this!\r\n\r\n        setCss('background:url(https://),url(https://),red url(https://)');\r\n\r\n        // If the UA supports multiple backgrounds, there should be three occurrences\r\n        //   of the string \"url(\" in the return value for elemStyle.background\r\n\r\n        return (/(url\\s*\\(.*?){3}/).test(mStyle.background);\r\n    };\r\n\r\n\r\n\r\n    // this will false positive in Opera Mini\r\n    //   github.com/Modernizr/Modernizr/issues/396\r\n\r\n    tests['backgroundsize'] = function() {\r\n        return testPropsAll('backgroundSize');\r\n    };\r\n\r\n    tests['borderimage'] = function() {\r\n        return testPropsAll('borderImage');\r\n    };\r\n\r\n\r\n    // Super comprehensive table about all the unique implementations of\r\n    // border-radius: muddledramblings.com/table-of-css3-border-radius-compliance\r\n\r\n    tests['borderradius'] = function() {\r\n        return testPropsAll('borderRadius');\r\n    };\r\n\r\n    // WebOS unfortunately false positives on this test.\r\n    tests['boxshadow'] = function() {\r\n        return testPropsAll('boxShadow');\r\n    };\r\n\r\n    // FF3.0 will false positive on this test\r\n    tests['textshadow'] = function() {\r\n        return document.createElement('div').style.textShadow === '';\r\n    };\r\n\r\n\r\n    tests['opacity'] = function() {\r\n        // Browsers that actually have CSS Opacity implemented have done so\r\n        //  according to spec, which means their return values are within the\r\n        //  range of [0.0,1.0] - including the leading zero.\r\n\r\n        setCssAll('opacity:.55');\r\n\r\n        // The non-literal . in this regex is intentional:\r\n        //   German Chrome returns this value as 0,55\r\n        // github.com/Modernizr/Modernizr/issues/#issue/59/comment/516632\r\n        return (/^0.55$/).test(mStyle.opacity);\r\n    };\r\n\r\n\r\n    // Note, Android < 4 will pass this test, but can only animate\r\n    //   a single property at a time\r\n    //   daneden.me/2011/12/putting-up-with-androids-bullshit/\r\n    tests['cssanimations'] = function() {\r\n        return testPropsAll('animationName');\r\n    };\r\n\r\n\r\n    tests['csscolumns'] = function() {\r\n        return testPropsAll('columnCount');\r\n    };\r\n\r\n\r\n    tests['cssgradients'] = function() {\r\n        /**\r\n         * For CSS Gradients syntax, please see:\r\n         * webkit.org/blog/175/introducing-css-gradients/\r\n         * developer.mozilla.org/en/CSS/-moz-linear-gradient\r\n         * developer.mozilla.org/en/CSS/-moz-radial-gradient\r\n         * dev.w3.org/csswg/css3-images/#gradients-\r\n         */\r\n\r\n        var str1 = 'background-image:',\r\n            str2 = 'gradient(linear,left top,right bottom,from(#9f9),to(white));',\r\n            str3 = 'linear-gradient(left top,#9f9, white);';\r\n\r\n        setCss(\r\n            // legacy webkit syntax (FIXME: remove when syntax not in use anymore)\r\n            (str1 + '-webkit- '.split(' ').join(str2 + str1) +\r\n                // standard syntax             // trailing 'background-image:'\r\n                prefixes.join(str3 + str1)).slice(0, -str1.length)\r\n        );\r\n\r\n        return contains(mStyle.backgroundImage, 'gradient');\r\n    };\r\n\r\n\r\n    tests['cssreflections'] = function() {\r\n        return testPropsAll('boxReflect');\r\n    };\r\n\r\n\r\n    tests['csstransforms'] = function() {\r\n        return !!testPropsAll('transform');\r\n    };\r\n\r\n\r\n    tests['csstransforms3d'] = function() {\r\n\r\n        var ret = !!testPropsAll('perspective');\r\n\r\n        // Webkit's 3D transforms are passed off to the browser's own graphics renderer.\r\n        //   It works fine in Safari on Leopard and Snow Leopard, but not in Chrome in\r\n        //   some conditions. As a result, Webkit typically recognizes the syntax but\r\n        //   will sometimes throw a false positive, thus we must do a more thorough check:\r\n        if ( ret && 'webkitPerspective' in docElement.style ) {\r\n\r\n            // Webkit allows this media query to succeed only if the feature is enabled.\r\n            // `@media (transform-3d),(-webkit-transform-3d){ ... }`\r\n            injectElementWithStyles('@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}', function( node, rule ) {\r\n                ret = node.offsetLeft === 9 && node.offsetHeight === 3;\r\n            });\r\n        }\r\n        return ret;\r\n    };\r\n\r\n\r\n    tests['csstransitions'] = function() {\r\n        return testPropsAll('transition');\r\n    };\r\n\r\n\r\n    /*>>fontface*/\r\n    // @font-face detection routine by Diego Perini\r\n    // javascript.nwbox.com/CSSSupport/\r\n\r\n    // false positives:\r\n    //   WebOS github.com/Modernizr/Modernizr/issues/342\r\n    //   WP7   github.com/Modernizr/Modernizr/issues/538\r\n    tests['fontface'] = function() {\r\n        var bool;\r\n\r\n        injectElementWithStyles('@font-face {font-family:\"font\";src:url(\"https://\")}', function( node, rule ) {\r\n            var style = document.getElementById('smodernizr'),\r\n                sheet = style.sheet || style.styleSheet,\r\n                cssText = sheet ? (sheet.cssRules && sheet.cssRules[0] ? sheet.cssRules[0].cssText : sheet.cssText || '') : '';\r\n\r\n            bool = /src/i.test(cssText) && cssText.indexOf(rule.split(' ')[0]) === 0;\r\n        });\r\n\r\n        return bool;\r\n    };\r\n    /*>>fontface*/\r\n\r\n    // CSS generated content detection\r\n    tests['generatedcontent'] = function() {\r\n        var bool;\r\n\r\n        injectElementWithStyles(['#modernizr:after{content:\"',smile,'\";visibility:hidden}'].join(''), function( node ) {\r\n            bool = node.offsetHeight >= 1;\r\n        });\r\n\r\n        return bool;\r\n    };\r\n\r\n\r\n\r\n    // These tests evaluate support of the video/audio elements, as well as\r\n    // testing what types of content they support.\r\n    //\r\n    // We're using the Boolean constructor here, so that we can extend the value\r\n    // e.g.  Modernizr.video     // true\r\n    //       Modernizr.video.ogg // 'probably'\r\n    //\r\n    // Codec values from : github.com/NielsLeenheer/html5test/blob/9106a8/index.html#L845\r\n    //                     thx to NielsLeenheer and zcorpan\r\n\r\n    // Note: in some older browsers, \"no\" was a return value instead of empty string.\r\n    //   It was live in FF3.5.0 and 3.5.1, but fixed in 3.5.2\r\n    //   It was also live in Safari 4.0.0 - 4.0.4, but fixed in 4.0.5\r\n\r\n    tests['video'] = function() {\r\n        var elem = document.createElement('video'),\r\n            bool = false;\r\n\r\n        // IE9 Running on Windows Server SKU can cause an exception to be thrown, bug #224\r\n        try {\r\n            if ( bool = !!elem.canPlayType ) {\r\n                bool      = new Boolean(bool);\r\n                bool.ogg  = elem.canPlayType('video/ogg; codecs=\"theora\"')      .replace(/^no$/,'');\r\n\r\n                // Without QuickTime, this value will be `undefined`. github.com/Modernizr/Modernizr/issues/546\r\n                bool.h264 = elem.canPlayType('video/mp4; codecs=\"avc1.42E01E\"') .replace(/^no$/,'');\r\n\r\n                bool.webm = elem.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/^no$/,'');\r\n            }\r\n\r\n        } catch(e) { }\r\n\r\n        return bool;\r\n    };\r\n\r\n    tests['audio'] = function() {\r\n        var elem = document.createElement('audio'),\r\n            bool = false;\r\n\r\n        try {\r\n            if ( bool = !!elem.canPlayType ) {\r\n                bool      = new Boolean(bool);\r\n                bool.ogg  = elem.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/,'');\r\n                bool.mp3  = elem.canPlayType('audio/mpeg;')               .replace(/^no$/,'');\r\n\r\n                // Mimetypes accepted:\r\n                //   developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements\r\n                //   bit.ly/iphoneoscodecs\r\n                bool.wav  = elem.canPlayType('audio/wav; codecs=\"1\"')     .replace(/^no$/,'');\r\n                bool.m4a  = ( elem.canPlayType('audio/x-m4a;')            ||\r\n                    elem.canPlayType('audio/aac;'))             .replace(/^no$/,'');\r\n            }\r\n        } catch(e) { }\r\n\r\n        return bool;\r\n    };\r\n\r\n\r\n    // In FF4, if disabled, window.localStorage should === null.\r\n\r\n    // Normally, we could not test that directly and need to do a\r\n    //   `('localStorage' in window) && ` test first because otherwise Firefox will\r\n    //   throw bugzil.la/365772 if cookies are disabled\r\n\r\n    // Also in iOS5 Private Browsing mode, attempting to use localStorage.setItem\r\n    // will throw the exception:\r\n    //   QUOTA_EXCEEDED_ERRROR DOM Exception 22.\r\n    // Peculiarly, getItem and removeItem calls do not throw.\r\n\r\n    // Because we are forced to try/catch this, we'll go aggressive.\r\n\r\n    // Just FWIW: IE8 Compat mode supports these features completely:\r\n    //   www.quirksmode.org/dom/html5.html\r\n    // But IE8 doesn't support either with local files\r\n\r\n    tests['localstorage'] = function() {\r\n        try {\r\n            localStorage.setItem(mod, mod);\r\n            localStorage.removeItem(mod);\r\n            return true;\r\n        } catch(e) {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    tests['sessionstorage'] = function() {\r\n        try {\r\n            sessionStorage.setItem(mod, mod);\r\n            sessionStorage.removeItem(mod);\r\n            return true;\r\n        } catch(e) {\r\n            return false;\r\n        }\r\n    };\r\n\r\n\r\n    tests['webworkers'] = function() {\r\n        return !!window.Worker;\r\n    };\r\n\r\n\r\n    tests['applicationcache'] = function() {\r\n        return !!window.applicationCache;\r\n    };\r\n\r\n\r\n    // Thanks to Erik Dahlstrom\r\n    tests['svg'] = function() {\r\n        return !!document.createElementNS && !!document.createElementNS(ns.svg, 'svg').createSVGRect;\r\n    };\r\n\r\n    // specifically for SVG inline in HTML, not within XHTML\r\n    // test page: paulirish.com/demo/inline-svg\r\n    tests['inlinesvg'] = function() {\r\n        var div = document.createElement('div');\r\n        div.innerHTML = '<svg/>';\r\n        return (div.firstChild && div.firstChild.namespaceURI) == ns.svg;\r\n    };\r\n\r\n    // SVG SMIL animation\r\n    tests['smil'] = function() {\r\n        return !!document.createElementNS && /SVGAnimate/.test(toString.call(document.createElementNS(ns.svg, 'animate')));\r\n    };\r\n\r\n    // This test is only for clip paths in SVG proper, not clip paths on HTML content\r\n    // demo: srufaculty.sru.edu/david.dailey/svg/newstuff/clipPath4.svg\r\n\r\n    // However read the comments to dig into applying SVG clippaths to HTML content here:\r\n    //   github.com/Modernizr/Modernizr/issues/213#issuecomment-1149491\r\n    tests['svgclippaths'] = function() {\r\n        return !!document.createElementNS && /SVGClipPath/.test(toString.call(document.createElementNS(ns.svg, 'clipPath')));\r\n    };\r\n\r\n    /*>>webforms*/\r\n    // input features and input types go directly onto the ret object, bypassing the tests loop.\r\n    // Hold this guy to execute in a moment.\r\n    function webforms() {\r\n        /*>>input*/\r\n        // Run through HTML5's new input attributes to see if the UA understands any.\r\n        // We're using f which is the <input> element created early on\r\n        // Mike Taylr has created a comprehensive resource for testing these attributes\r\n        //   when applied to all input types:\r\n        //   miketaylr.com/code/input-type-attr.html\r\n        // spec: www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary\r\n\r\n        // Only input placeholder is tested while textarea's placeholder is not.\r\n        // Currently Safari 4 and Opera 11 have support only for the input placeholder\r\n        // Both tests are available in feature-detects/forms-placeholder.js\r\n        Modernizr['input'] = (function( props ) {\r\n            for ( var i = 0, len = props.length; i < len; i++ ) {\r\n                attrs[ props[i] ] = !!(props[i] in inputElem);\r\n            }\r\n            if (attrs.list){\r\n                // safari false positive's on datalist: webk.it/74252\r\n                // see also github.com/Modernizr/Modernizr/issues/146\r\n                attrs.list = !!(document.createElement('datalist') && window.HTMLDataListElement);\r\n            }\r\n            return attrs;\r\n        })('autocomplete autofocus list placeholder max min multiple pattern required step'.split(' '));\r\n        /*>>input*/\r\n\r\n        /*>>inputtypes*/\r\n        // Run through HTML5's new input types to see if the UA understands any.\r\n        //   This is put behind the tests runloop because it doesn't return a\r\n        //   true/false like all the other tests; instead, it returns an object\r\n        //   containing each input type with its corresponding true/false value\r\n\r\n        // Big thanks to @miketaylr for the html5 forms expertise. miketaylr.com/\r\n        Modernizr['inputtypes'] = (function(props) {\r\n\r\n            for ( var i = 0, bool, inputElemType, defaultView, len = props.length; i < len; i++ ) {\r\n\r\n                inputElem.setAttribute('type', inputElemType = props[i]);\r\n                bool = inputElem.type !== 'text';\r\n\r\n                // We first check to see if the type we give it sticks..\r\n                // If the type does, we feed it a textual value, which shouldn't be valid.\r\n                // If the value doesn't stick, we know there's input sanitization which infers a custom UI\r\n                if ( bool ) {\r\n\r\n                    inputElem.value         = smile;\r\n                    inputElem.style.cssText = 'position:absolute;visibility:hidden;';\r\n\r\n                    if ( /^range$/.test(inputElemType) && inputElem.style.WebkitAppearance !== undefined ) {\r\n\r\n                        docElement.appendChild(inputElem);\r\n                        defaultView = document.defaultView;\r\n\r\n                        // Safari 2-4 allows the smiley as a value, despite making a slider\r\n                        bool =  defaultView.getComputedStyle &&\r\n                            defaultView.getComputedStyle(inputElem, null).WebkitAppearance !== 'textfield' &&\r\n                            // Mobile android web browser has false positive, so must\r\n                            // check the height to see if the widget is actually there.\r\n                            (inputElem.offsetHeight !== 0);\r\n\r\n                        docElement.removeChild(inputElem);\r\n\r\n                    } else if ( /^(search|tel)$/.test(inputElemType) ){\r\n                        // Spec doesn't define any special parsing or detectable UI\r\n                        //   behaviors so we pass these through as true\r\n\r\n                        // Interestingly, opera fails the earlier test, so it doesn't\r\n                        //  even make it here.\r\n\r\n                    } else if ( /^(url|email)$/.test(inputElemType) ) {\r\n                        // Real url and email support comes with prebaked validation.\r\n                        bool = inputElem.checkValidity && inputElem.checkValidity() === false;\r\n\r\n                    } else {\r\n                        // If the upgraded input component rejects the :) text, we got a winner\r\n                        bool = inputElem.value != smile;\r\n                    }\r\n                }\r\n\r\n                inputs[ props[i] ] = !!bool;\r\n            }\r\n            return inputs;\r\n        })('search tel url email datetime date month week time datetime-local number range color'.split(' '));\r\n        /*>>inputtypes*/\r\n    }\r\n    /*>>webforms*/\r\n\r\n\r\n    // End of test definitions\r\n    // -----------------------\r\n\r\n\r\n\r\n    // Run through all tests and detect their support in the current UA.\r\n    // todo: hypothetically we could be doing an array of tests and use a basic loop here.\r\n    for ( var feature in tests ) {\r\n        if ( hasOwnProp(tests, feature) ) {\r\n            // run the test, throw the return value into the Modernizr,\r\n            //   then based on that boolean, define an appropriate className\r\n            //   and push it into an array of classes we'll join later.\r\n            featureName  = feature.toLowerCase();\r\n            Modernizr[featureName] = tests[feature]();\r\n\r\n            classes.push((Modernizr[featureName] ? '' : 'no-') + featureName);\r\n        }\r\n    }\r\n\r\n    /*>>webforms*/\r\n    // input tests need to run.\r\n    Modernizr.input || webforms();\r\n    /*>>webforms*/\r\n\r\n\r\n    /**\r\n     * addTest allows the user to define their own feature tests\r\n     * the result will be added onto the Modernizr object,\r\n     * as well as an appropriate className set on the html element\r\n     *\r\n     * @param feature - String naming the feature\r\n     * @param test - Function returning true if feature is supported, false if not\r\n     */\r\n    Modernizr.addTest = function ( feature, test ) {\r\n        if ( typeof feature == 'object' ) {\r\n            for ( var key in feature ) {\r\n                if ( hasOwnProp( feature, key ) ) {\r\n                    Modernizr.addTest( key, feature[ key ] );\r\n                }\r\n            }\r\n        } else {\r\n\r\n            feature = feature.toLowerCase();\r\n\r\n            if ( Modernizr[feature] !== undefined ) {\r\n                // we're going to quit if you're trying to overwrite an existing test\r\n                // if we were to allow it, we'd do this:\r\n                //   var re = new RegExp(\"\\\\b(no-)?\" + feature + \"\\\\b\");\r\n                //   docElement.className = docElement.className.replace( re, '' );\r\n                // but, no rly, stuff 'em.\r\n                return Modernizr;\r\n            }\r\n\r\n            test = typeof test == 'function' ? test() : test;\r\n\r\n            if (enableClasses) {\r\n                docElement.className += ' ' + (test ? '' : 'no-') + feature;\r\n            }\r\n            Modernizr[feature] = test;\r\n\r\n        }\r\n\r\n        return Modernizr; // allow chaining.\r\n    };\r\n\r\n\r\n    // Reset modElem.cssText to nothing to reduce memory footprint.\r\n    setCss('');\r\n    modElem = inputElem = null;\r\n\r\n    /*>>shiv*/\r\n    /*! HTML5 Shiv v3.6 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed */\r\n    ;(function(window, document) {\r\n        /*jshint evil:true */\r\n        /** Preset options */\r\n        var options = window.html5 || {};\r\n\r\n        /** Used to skip problem elements */\r\n        var reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;\r\n\r\n        /** Not all elements can be cloned in IE (this list can be shortend) **/\r\n        var saveClones = /^<|^(?:a|b|button|code|div|fieldset|form|h1|h2|h3|h4|h5|h6|i|iframe|img|input|label|li|link|ol|option|p|param|q|script|select|span|strong|style|table|tbody|td|textarea|tfoot|th|thead|tr|ul)$/i;\r\n\r\n        /** Detect whether the browser supports default html5 styles */\r\n        var supportsHtml5Styles;\r\n\r\n        /** Name of the expando, to work with multiple documents or to re-shiv one document */\r\n        var expando = '_html5shiv';\r\n\r\n        /** The id for the documents expando */\r\n        var expanID = 0;\r\n\r\n        /** Cached data for each document */\r\n        var expandoData = {};\r\n\r\n        /** Detect whether the browser supports unknown elements */\r\n        var supportsUnknownElements;\r\n\r\n        (function() {\r\n            try {\r\n                var a = document.createElement('a');\r\n                a.innerHTML = '<xyz></xyz>';\r\n                //if the hidden property is implemented we can assume, that the browser supports basic HTML5 Styles\r\n                supportsHtml5Styles = ('hidden' in a);\r\n\r\n                supportsUnknownElements = a.childNodes.length == 1 || (function() {\r\n                    // assign a false positive if unable to shiv\r\n                    (document.createElement)('a');\r\n                    var frag = document.createDocumentFragment();\r\n                    return (\r\n                        typeof frag.cloneNode == 'undefined' ||\r\n                            typeof frag.createDocumentFragment == 'undefined' ||\r\n                            typeof frag.createElement == 'undefined'\r\n                        );\r\n                }());\r\n            } catch(e) {\r\n                supportsHtml5Styles = true;\r\n                supportsUnknownElements = true;\r\n            }\r\n\r\n        }());\r\n\r\n        /*--------------------------------------------------------------------------*/\r\n\r\n        /**\r\n         * Creates a style sheet with the given CSS text and adds it to the document.\r\n         * @private\r\n         * @param {Document} ownerDocument The document.\r\n         * @param {String} cssText The CSS text.\r\n         * @returns {StyleSheet} The style element.\r\n         */\r\n        function addStyleSheet(ownerDocument, cssText) {\r\n            var p = ownerDocument.createElement('p'),\r\n                parent = ownerDocument.getElementsByTagName('head')[0] || ownerDocument.documentElement;\r\n\r\n            p.innerHTML = 'x<style>' + cssText + '</style>';\r\n            return parent.insertBefore(p.lastChild, parent.firstChild);\r\n        }\r\n\r\n        /**\r\n         * Returns the value of `html5.elements` as an array.\r\n         * @private\r\n         * @returns {Array} An array of shived element node names.\r\n         */\r\n        function getElements() {\r\n            var elements = html5.elements;\r\n            return typeof elements == 'string' ? elements.split(' ') : elements;\r\n        }\r\n\r\n        /**\r\n         * Returns the data associated to the given document\r\n         * @private\r\n         * @param {Document} ownerDocument The document.\r\n         * @returns {Object} An object of data.\r\n         */\r\n        function getExpandoData(ownerDocument) {\r\n            var data = expandoData[ownerDocument[expando]];\r\n            if (!data) {\r\n                data = {};\r\n                expanID++;\r\n                ownerDocument[expando] = expanID;\r\n                expandoData[expanID] = data;\r\n            }\r\n            return data;\r\n        }\r\n\r\n        /**\r\n         * returns a shived element for the given nodeName and document\r\n         * @memberOf html5\r\n         * @param {String} nodeName name of the element\r\n         * @param {Document} ownerDocument The context document.\r\n         * @returns {Object} The shived element.\r\n         */\r\n        function createElement(nodeName, ownerDocument, data){\r\n            if (!ownerDocument) {\r\n                ownerDocument = document;\r\n            }\r\n            if(supportsUnknownElements){\r\n                return ownerDocument.createElement(nodeName);\r\n            }\r\n            if (!data) {\r\n                data = getExpandoData(ownerDocument);\r\n            }\r\n            var node;\r\n\r\n            if (data.cache[nodeName]) {\r\n                node = data.cache[nodeName].cloneNode();\r\n            } else if (saveClones.test(nodeName)) {\r\n                node = (data.cache[nodeName] = data.createElem(nodeName)).cloneNode();\r\n            } else {\r\n                node = data.createElem(nodeName);\r\n            }\r\n\r\n            // Avoid adding some elements to fragments in IE < 9 because\r\n            // * Attributes like `name` or `type` cannot be set/changed once an element\r\n            //   is inserted into a document/fragment\r\n            // * Link elements with `src` attributes that are inaccessible, as with\r\n            //   a 403 response, will cause the tab/window to crash\r\n            // * Script elements appended to fragments will execute when their `src`\r\n            //   or `text` property is set\r\n            return node.canHaveChildren && !reSkip.test(nodeName) ? data.frag.appendChild(node) : node;\r\n        }\r\n\r\n        /**\r\n         * returns a shived DocumentFragment for the given document\r\n         * @memberOf html5\r\n         * @param {Document} ownerDocument The context document.\r\n         * @returns {Object} The shived DocumentFragment.\r\n         */\r\n        function createDocumentFragment(ownerDocument, data){\r\n            if (!ownerDocument) {\r\n                ownerDocument = document;\r\n            }\r\n            if(supportsUnknownElements){\r\n                return ownerDocument.createDocumentFragment();\r\n            }\r\n            data = data || getExpandoData(ownerDocument);\r\n            var clone = data.frag.cloneNode(),\r\n                i = 0,\r\n                elems = getElements(),\r\n                l = elems.length;\r\n            for(;i<l;i++){\r\n                clone.createElement(elems[i]);\r\n            }\r\n            return clone;\r\n        }\r\n\r\n        /**\r\n         * Shivs the `createElement` and `createDocumentFragment` methods of the document.\r\n         * @private\r\n         * @param {Document|DocumentFragment} ownerDocument The document.\r\n         * @param {Object} data of the document.\r\n         */\r\n        function shivMethods(ownerDocument, data) {\r\n            if (!data.cache) {\r\n                data.cache = {};\r\n                data.createElem = ownerDocument.createElement;\r\n                data.createFrag = ownerDocument.createDocumentFragment;\r\n                data.frag = data.createFrag();\r\n            }\r\n\r\n\r\n            ownerDocument.createElement = function(nodeName) {\r\n                //abort shiv\r\n                if (!html5.shivMethods) {\r\n                    return data.createElem(nodeName);\r\n                }\r\n                return createElement(nodeName, ownerDocument, data);\r\n            };\r\n\r\n            ownerDocument.createDocumentFragment = Function('h,f', 'return function(){' +\r\n                'var n=f.cloneNode(),c=n.createElement;' +\r\n                'h.shivMethods&&(' +\r\n                // unroll the `createElement` calls\r\n                getElements().join().replace(/\\w+/g, function(nodeName) {\r\n                    data.createElem(nodeName);\r\n                    data.frag.createElement(nodeName);\r\n                    return 'c(\"' + nodeName + '\")';\r\n                }) +\r\n                ');return n}'\r\n            )(html5, data.frag);\r\n        }\r\n\r\n        /*--------------------------------------------------------------------------*/\r\n\r\n        /**\r\n         * Shivs the given document.\r\n         * @memberOf html5\r\n         * @param {Document} ownerDocument The document to shiv.\r\n         * @returns {Document} The shived document.\r\n         */\r\n        function shivDocument(ownerDocument) {\r\n            if (!ownerDocument) {\r\n                ownerDocument = document;\r\n            }\r\n            var data = getExpandoData(ownerDocument);\r\n\r\n            if (html5.shivCSS && !supportsHtml5Styles && !data.hasCSS) {\r\n                data.hasCSS = !!addStyleSheet(ownerDocument,\r\n                    // corrects block display not defined in IE6/7/8/9\r\n                    'article,aside,figcaption,figure,footer,header,hgroup,nav,section{display:block}' +\r\n                        // adds styling not present in IE6/7/8/9\r\n                        'mark{background:#FF0;color:#000}'\r\n                );\r\n            }\r\n            if (!supportsUnknownElements) {\r\n                shivMethods(ownerDocument, data);\r\n            }\r\n            return ownerDocument;\r\n        }\r\n\r\n        /*--------------------------------------------------------------------------*/\r\n\r\n        /**\r\n         * The `html5` object is exposed so that more elements can be shived and\r\n         * existing shiving can be detected on iframes.\r\n         * @type Object\r\n         * @example\r\n         *\r\n         * // options can be changed before the script is included\r\n         * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };\r\n         */\r\n        var html5 = {\r\n\r\n            /**\r\n             * An array or space separated string of node names of the elements to shiv.\r\n             * @memberOf html5\r\n             * @type Array|String\r\n             */\r\n            'elements': options.elements || 'abbr article aside audio bdi canvas data datalist details figcaption figure footer header hgroup mark meter nav output progress section summary time video',\r\n\r\n            /**\r\n             * A flag to indicate that the HTML5 style sheet should be inserted.\r\n             * @memberOf html5\r\n             * @type Boolean\r\n             */\r\n            'shivCSS': (options.shivCSS !== false),\r\n\r\n            /**\r\n             * Is equal to true if a browser supports creating unknown/HTML5 elements\r\n             * @memberOf html5\r\n             * @type boolean\r\n             */\r\n            'supportsUnknownElements': supportsUnknownElements,\r\n\r\n            /**\r\n             * A flag to indicate that the document's `createElement` and `createDocumentFragment`\r\n             * methods should be overwritten.\r\n             * @memberOf html5\r\n             * @type Boolean\r\n             */\r\n            'shivMethods': (options.shivMethods !== false),\r\n\r\n            /**\r\n             * A string to describe the type of `html5` object (\"default\" or \"default print\").\r\n             * @memberOf html5\r\n             * @type String\r\n             */\r\n            'type': 'default',\r\n\r\n            // shivs the document according to the specified `html5` object options\r\n            'shivDocument': shivDocument,\r\n\r\n            //creates a shived element\r\n            createElement: createElement,\r\n\r\n            //creates a shived documentFragment\r\n            createDocumentFragment: createDocumentFragment\r\n        };\r\n\r\n        /*--------------------------------------------------------------------------*/\r\n\r\n        // expose html5\r\n        window.html5 = html5;\r\n\r\n        // shiv the document\r\n        shivDocument(document);\r\n\r\n    }(this, document));\r\n    /*>>shiv*/\r\n\r\n    // Assign private properties to the return object with prefix\r\n    Modernizr._version      = version;\r\n\r\n    // expose these for the plugin API. Look in the source for how to join() them against your input\r\n    /*>>prefixes*/\r\n    Modernizr._prefixes     = prefixes;\r\n    /*>>prefixes*/\r\n    /*>>domprefixes*/\r\n    Modernizr._domPrefixes  = domPrefixes;\r\n    Modernizr._cssomPrefixes  = cssomPrefixes;\r\n    /*>>domprefixes*/\r\n\r\n    /*>>mq*/\r\n    // Modernizr.mq tests a given media query, live against the current state of the window\r\n    // A few important notes:\r\n    //   * If a browser does not support media queries at all (eg. oldIE) the mq() will always return false\r\n    //   * A max-width or orientation query will be evaluated against the current state, which may change later.\r\n    //   * You must specify values. Eg. If you are testing support for the min-width media query use:\r\n    //       Modernizr.mq('(min-width:0)')\r\n    // usage:\r\n    // Modernizr.mq('only screen and (max-width:768)')\r\n    Modernizr.mq            = testMediaQuery;\r\n    /*>>mq*/\r\n\r\n    /*>>hasevent*/\r\n    // Modernizr.hasEvent() detects support for a given event, with an optional element to test on\r\n    // Modernizr.hasEvent('gesturestart', elem)\r\n    Modernizr.hasEvent      = isEventSupported;\r\n    /*>>hasevent*/\r\n\r\n    /*>>testprop*/\r\n    // Modernizr.testProp() investigates whether a given style property is recognized\r\n    // Note that the property names must be provided in the camelCase variant.\r\n    // Modernizr.testProp('pointerEvents')\r\n    Modernizr.testProp      = function(prop){\r\n        return testProps([prop]);\r\n    };\r\n    /*>>testprop*/\r\n\r\n    /*>>testallprops*/\r\n    // Modernizr.testAllProps() investigates whether a given style property,\r\n    //   or any of its vendor-prefixed variants, is recognized\r\n    // Note that the property names must be provided in the camelCase variant.\r\n    // Modernizr.testAllProps('boxSizing')\r\n    Modernizr.testAllProps  = testPropsAll;\r\n    /*>>testallprops*/\r\n\r\n\r\n    /*>>teststyles*/\r\n    // Modernizr.testStyles() allows you to add custom styles to the document and test an element afterwards\r\n    // Modernizr.testStyles('#modernizr { position:absolute }', function(elem, rule){ ... })\r\n    Modernizr.testStyles    = injectElementWithStyles;\r\n    /*>>teststyles*/\r\n\r\n\r\n    /*>>prefixed*/\r\n    // Modernizr.prefixed() returns the prefixed or nonprefixed property name variant of your input\r\n    // Modernizr.prefixed('boxSizing') // 'MozBoxSizing'\r\n\r\n    // Properties must be passed as dom-style camelcase, rather than `box-sizing` hypentated style.\r\n    // Return values will also be the camelCase variant, if you need to translate that to hypenated style use:\r\n    //\r\n    //     str.replace(/([A-Z])/g, function(str,m1){ return '-' + m1.toLowerCase(); }).replace(/^ms-/,'-ms-');\r\n\r\n    // If you're trying to ascertain which transition end event to bind to, you might do something like...\r\n    //\r\n    //     var transEndEventNames = {\r\n    //       'WebkitTransition' : 'webkitTransitionEnd',\r\n    //       'MozTransition'    : 'transitionend',\r\n    //       'OTransition'      : 'oTransitionEnd',\r\n    //       'msTransition'     : 'MSTransitionEnd',\r\n    //       'transition'       : 'transitionend'\r\n    //     },\r\n    //     transEndEventName = transEndEventNames[ Modernizr.prefixed('transition') ];\r\n\r\n    Modernizr.prefixed      = function(prop, obj, elem){\r\n        if(!obj) {\r\n            return testPropsAll(prop, 'pfx');\r\n        } else {\r\n            // Testing DOM property e.g. Modernizr.prefixed('requestAnimationFrame', window) // 'mozRequestAnimationFrame'\r\n            return testPropsAll(prop, obj, elem);\r\n        }\r\n    };\r\n    /*>>prefixed*/\r\n\r\n\r\n    /*>>cssclasses*/\r\n    // Remove \"no-js\" class from <html> element, if it exists:\r\n    docElement.className = docElement.className.replace(/(^|\\s)no-js(\\s|$)/, '$1$2') +\r\n\r\n        // Add the new classes to the <html> element.\r\n        (enableClasses ? ' js ' + classes.join(' ') : '');\r\n    /*>>cssclasses*/\r\n\r\n    return Modernizr;\r\n\r\n})(this, this.document);","requirejs/domReady.js":"/**\r\n * @license RequireJS domReady 2.0.1 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\r\n * Available via the MIT or new BSD license.\r\n * see: http://github.com/requirejs/domReady for details\r\n */\r\n/*jslint */\r\n/*global require: false, define: false, requirejs: false,\r\n  window: false, clearInterval: false, document: false,\r\n  self: false, setInterval: false */\r\n\r\n\r\ndefine(function () {\r\n    'use strict';\r\n\r\n    var isTop, testDiv, scrollIntervalId,\r\n        isBrowser = typeof window !== \"undefined\" && window.document,\r\n        isPageLoaded = !isBrowser,\r\n        doc = isBrowser ? document : null,\r\n        readyCalls = [];\r\n\r\n    function runCallbacks(callbacks) {\r\n        var i;\r\n        for (i = 0; i < callbacks.length; i += 1) {\r\n            callbacks[i](doc);\r\n        }\r\n    }\r\n\r\n    function callReady() {\r\n        var callbacks = readyCalls;\r\n\r\n        if (isPageLoaded) {\r\n            //Call the DOM ready callbacks\r\n            if (callbacks.length) {\r\n                readyCalls = [];\r\n                runCallbacks(callbacks);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the page as loaded.\r\n     */\r\n    function pageLoaded() {\r\n        if (!isPageLoaded) {\r\n            isPageLoaded = true;\r\n            if (scrollIntervalId) {\r\n                clearInterval(scrollIntervalId);\r\n            }\r\n\r\n            callReady();\r\n        }\r\n    }\r\n\r\n    if (isBrowser) {\r\n        if (document.addEventListener) {\r\n            //Standards. Hooray! Assumption here that if standards based,\r\n            //it knows about DOMContentLoaded.\r\n            document.addEventListener(\"DOMContentLoaded\", pageLoaded, false);\r\n            window.addEventListener(\"load\", pageLoaded, false);\r\n        } else if (window.attachEvent) {\r\n            window.attachEvent(\"onload\", pageLoaded);\r\n\r\n            testDiv = document.createElement('div');\r\n            try {\r\n                isTop = window.frameElement === null;\r\n            } catch (e) {}\r\n\r\n            //DOMContentLoaded approximation that uses a doScroll, as found by\r\n            //Diego Perini: http://javascript.nwbox.com/IEContentLoaded/,\r\n            //but modified by other contributors, including jdalton\r\n            if (testDiv.doScroll && isTop && window.external) {\r\n                scrollIntervalId = setInterval(function () {\r\n                    try {\r\n                        testDiv.doScroll();\r\n                        pageLoaded();\r\n                    } catch (e) {}\r\n                }, 30);\r\n            }\r\n        }\r\n\r\n        //Check if document already complete, and if so, just trigger page load\r\n        //listeners. Latest webkit browsers also use \"interactive\", and\r\n        //will fire the onDOMContentLoaded before \"interactive\" but not after\r\n        //entering \"interactive\" or \"complete\". More details:\r\n        //http://dev.w3.org/html5/spec/the-end.html#the-end\r\n        //http://stackoverflow.com/questions/3665561/document-readystate-of-interactive-vs-ondomcontentloaded\r\n        //Hmm, this is more complicated on further use, see \"firing too early\"\r\n        //bug: https://github.com/requirejs/domReady/issues/1\r\n        //so removing the || document.readyState === \"interactive\" test.\r\n        //There is still a window.onload binding that should get fired if\r\n        //DOMContentLoaded is missed.\r\n        if (document.readyState === \"complete\") {\r\n            pageLoaded();\r\n        }\r\n    }\r\n\r\n    /** START OF PUBLIC API **/\r\n\r\n    /**\r\n     * Registers a callback for DOM ready. If DOM is already ready, the\r\n     * callback is called immediately.\r\n     * @param {Function} callback\r\n     */\r\n    function domReady(callback) {\r\n        if (isPageLoaded) {\r\n            callback(doc);\r\n        } else {\r\n            readyCalls.push(callback);\r\n        }\r\n        return domReady;\r\n    }\r\n\r\n    domReady.version = '2.0.1';\r\n\r\n    /**\r\n     * Loader Plugin API method\r\n     */\r\n    domReady.load = function (name, req, onLoad, config) {\r\n        if (config.isBuild) {\r\n            onLoad(null);\r\n        } else {\r\n            domReady(onLoad);\r\n        }\r\n    };\r\n\r\n    /** END OF PUBLIC API **/\r\n\r\n    return domReady;\r\n});","varien/form.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * Most likely it's depracated classes.\r\n * Not used anywhere among pages.\r\n */\r\nVarienForm = Class.create();\r\nVarienForm.prototype = {\r\n    initialize: function(formId, firstFieldFocus){\r\n        this.form       = $(formId);\r\n        if (!this.form) {\r\n            return;\r\n        }\r\n        this.cache      = $A();\r\n        this.currLoader = false;\r\n        this.currDataIndex = false;\r\n        this.validator  = new Validation(this.form);\r\n        this.elementFocus   = this.elementOnFocus.bindAsEventListener(this);\r\n        this.elementBlur    = this.elementOnBlur.bindAsEventListener(this);\r\n        this.childLoader    = this.onChangeChildLoad.bindAsEventListener(this);\r\n        this.highlightClass = 'highlight';\r\n        this.extraChildParams = '';\r\n        this.firstFieldFocus= firstFieldFocus || false;\r\n        this.bindElements();\r\n        if(this.firstFieldFocus){\r\n            try{\r\n                Form.Element.focus(Form.findFirstElement(this.form))\r\n            }\r\n            catch(e){}\r\n        }\r\n    },\r\n\r\n    submit : function(url){\r\n        if(this.validator && this.validator.validate()){\r\n             this.form.submit();\r\n        }\r\n        return false;\r\n    },\r\n\r\n    bindElements:function (){\r\n        var elements = Form.getElements(this.form);\r\n        for (var row in elements) {\r\n            if (elements[row].id) {\r\n                Event.observe(elements[row],'focus',this.elementFocus);\r\n                Event.observe(elements[row],'blur',this.elementBlur);\r\n            }\r\n        }\r\n    },\r\n\r\n    elementOnFocus: function(event){\r\n        var element = Event.findElement(event, 'fieldset');\r\n        if(element){\r\n            Element.addClassName(element, this.highlightClass);\r\n        }\r\n    },\r\n\r\n    elementOnBlur: function(event){\r\n        var element = Event.findElement(event, 'fieldset');\r\n        if(element){\r\n            Element.removeClassName(element, this.highlightClass);\r\n        }\r\n    },\r\n\r\n    setElementsRelation: function(parent, child, dataUrl, first){\r\n        if (parent=$(parent)) {\r\n            // TODO: array of relation and caching\r\n            if (!this.cache[parent.id]){\r\n                this.cache[parent.id] = $A();\r\n                this.cache[parent.id]['child']     = child;\r\n                this.cache[parent.id]['dataUrl']   = dataUrl;\r\n                this.cache[parent.id]['data']      = $A();\r\n                this.cache[parent.id]['first']      = first || false;\r\n            }\r\n            Event.observe(parent,'change',this.childLoader);\r\n        }\r\n    },\r\n\r\n    onChangeChildLoad: function(event){\r\n        element = Event.element(event);\r\n        this.elementChildLoad(element);\r\n    },\r\n\r\n    elementChildLoad: function(element, callback){\r\n        this.callback = callback || false;\r\n        if (element.value) {\r\n            this.currLoader = element.id;\r\n            this.currDataIndex = element.value;\r\n            if (this.cache[element.id]['data'][element.value]) {\r\n                this.setDataToChild(this.cache[element.id]['data'][element.value]);\r\n            }\r\n            else{\r\n                new Ajax.Request(this.cache[this.currLoader]['dataUrl'],{\r\n                        method: 'post',\r\n                        parameters: {\"parent\":element.value},\r\n                        onComplete: this.reloadChildren.bind(this)\r\n                });\r\n            }\r\n        }\r\n    },\r\n\r\n    reloadChildren: function(transport){\r\n        var data = eval('(' + transport.responseText + ')');\r\n        this.cache[this.currLoader]['data'][this.currDataIndex] = data;\r\n        this.setDataToChild(data);\r\n    },\r\n\r\n    setDataToChild: function(data){\r\n        if (data.length) {\r\n            var child = $(this.cache[this.currLoader]['child']);\r\n            if (child){\r\n                var html = '<select name=\"'+child.name+'\" id=\"'+child.id+'\" class=\"'+child.className+'\" title=\"'+child.title+'\" '+this.extraChildParams+'>';\r\n                if(this.cache[this.currLoader]['first']){\r\n                    html+= '<option value=\"\">'+this.cache[this.currLoader]['first']+'</option>';\r\n                }\r\n                for (var i in data){\r\n                    if(data[i].value) {\r\n                        html+= '<option value=\"'+data[i].value+'\"';\r\n                        if(child.value && (child.value == data[i].value || child.value == data[i].label)){\r\n                            html+= ' selected';\r\n                        }\r\n                        html+='>'+data[i].label+'</option>';\r\n                    }\r\n                }\r\n                html+= '</select>';\r\n                Element.insert(child, {before: html});\r\n                Element.remove(child);\r\n            }\r\n        }\r\n        else{\r\n            var child = $(this.cache[this.currLoader]['child']);\r\n            if (child){\r\n                var html = '<input type=\"text\" name=\"'+child.name+'\" id=\"'+child.id+'\" class=\"'+child.className+'\" title=\"'+child.title+'\" '+this.extraChildParams+'>';\r\n                Element.insert(child, {before: html});\r\n                Element.remove(child);\r\n            }\r\n        }\r\n\r\n        this.bindElements();\r\n        if (this.callback) {\r\n            this.callback();\r\n        }\r\n    }\r\n}\r\n\r\nRegionUpdater = Class.create();\r\nRegionUpdater.prototype = {\r\n    initialize: function (countryEl, regionTextEl, regionSelectEl, regions, disableAction, zipEl)\r\n    {\r\n        this.countryEl = $(countryEl);\r\n        this.regionTextEl = $(regionTextEl);\r\n        this.regionSelectEl = $(regionSelectEl);\r\n        this.zipEl = $(zipEl);\r\n        this.config = regions['config'];\r\n        delete regions.config;\r\n        this.regions = regions;\r\n\r\n        this.disableAction = (typeof disableAction=='undefined') ? 'hide' : disableAction;\r\n        this.zipOptions = (typeof zipOptions=='undefined') ? false : zipOptions;\r\n\r\n        if (this.regionSelectEl.options.length<=1) {\r\n            this.update();\r\n        }\r\n\r\n        Event.observe(this.countryEl, 'change', this.update.bind(this));\r\n    },\r\n\r\n    _checkRegionRequired: function()\r\n    {\r\n        var label, wildCard;\r\n        var elements = [this.regionTextEl, this.regionSelectEl];\r\n        var that = this;\r\n        if (typeof this.config == 'undefined') {\r\n            return;\r\n        }\r\n        var regionRequired = this.config.regions_required.indexOf(this.countryEl.value) >= 0;\r\n\r\n        elements.each(function(currentElement) {\r\n            Validation.reset(currentElement);\r\n            label = $$('label[for=\"' + currentElement.id + '\"]')[0];\r\n            if (label) {\r\n                wildCard = label.down('em') || label.down('span.required');\r\n                if (!that.config.show_all_regions) {\r\n                    if (regionRequired) {\r\n                        label.up().show();\r\n                    } else {\r\n                        label.up().hide();\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (label && wildCard) {\r\n                if (!regionRequired) {\r\n                    wildCard.hide();\r\n                    if (label.hasClassName('required')) {\r\n                        label.removeClassName('required');\r\n                    }\r\n                } else if (regionRequired) {\r\n                    wildCard.show();\r\n                    if (!label.hasClassName('required')) {\r\n                        label.addClassName('required')\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!regionRequired) {\r\n                if (currentElement.hasClassName('required-entry')) {\r\n                    currentElement.removeClassName('required-entry');\r\n                }\r\n                if ('select' == currentElement.tagName.toLowerCase() &&\r\n                    currentElement.hasClassName('validate-select')) {\r\n                    currentElement.removeClassName('validate-select');\r\n                }\r\n            } else {\r\n                if (!currentElement.hasClassName('required-entry')) {\r\n                    currentElement.addClassName('required-entry');\r\n                }\r\n                if ('select' == currentElement.tagName.toLowerCase() &&\r\n                    !currentElement.hasClassName('validate-select')) {\r\n                    currentElement.addClassName('validate-select');\r\n                }\r\n            }\r\n        });\r\n    },\r\n\r\n    update: function()\r\n    {\r\n        if (this.regions[this.countryEl.value]) {\r\n            var i, option, region, def;\r\n\r\n            def = this.regionSelectEl.getAttribute('defaultValue');\r\n            if (this.regionTextEl) {\r\n                if (!def) {\r\n                    def = this.regionTextEl.value.toLowerCase();\r\n                }\r\n                this.regionTextEl.value = '';\r\n            }\r\n\r\n            this.regionSelectEl.options.length = 1;\r\n            for (regionId in this.regions[this.countryEl.value]) {\r\n                region = this.regions[this.countryEl.value][regionId];\r\n\r\n                option = document.createElement('OPTION');\r\n                option.value = regionId;\r\n                option.text = region.name.stripTags();\r\n                option.title = region.name;\r\n\r\n                if (this.regionSelectEl.options.add) {\r\n                    this.regionSelectEl.options.add(option);\r\n                } else {\r\n                    this.regionSelectEl.appendChild(option);\r\n                }\r\n\r\n                if (regionId==def || (region.name && region.name.toLowerCase()==def) ||\r\n                    (region.name && region.code.toLowerCase()==def)\r\n                ) {\r\n                    this.regionSelectEl.value = regionId;\r\n                }\r\n            }\r\n\r\n            if (this.disableAction=='hide') {\r\n                if (this.regionTextEl) {\r\n                    this.regionTextEl.style.display = 'none';\r\n                }\r\n\r\n                this.regionSelectEl.style.display = '';\r\n            } else if (this.disableAction=='disable') {\r\n                if (this.regionTextEl) {\r\n                    this.regionTextEl.disabled = true;\r\n                }\r\n                this.regionSelectEl.disabled = false;\r\n            }\r\n            this.setMarkDisplay(this.regionSelectEl, true);\r\n        } else {\r\n            this.regionSelectEl.options.length = 1;\r\n            if (this.disableAction=='hide') {\r\n                if (this.regionTextEl) {\r\n                    this.regionTextEl.style.display = '';\r\n                }\r\n                this.regionSelectEl.style.display = 'none';\r\n                Validation.reset(this.regionSelectEl);\r\n            } else if (this.disableAction=='disable') {\r\n                if (this.regionTextEl) {\r\n                    this.regionTextEl.disabled = false;\r\n                }\r\n                this.regionSelectEl.disabled = true;\r\n            } else if (this.disableAction=='nullify') {\r\n                this.regionSelectEl.options.length = 1;\r\n                this.regionSelectEl.value = '';\r\n                this.regionSelectEl.selectedIndex = 0;\r\n                this.lastCountryId = '';\r\n            }\r\n            this.setMarkDisplay(this.regionSelectEl, false);\r\n        }\r\n\r\n        this._checkRegionRequired();\r\n        // Make Zip and its label required/optional\r\n        var zipUpdater = new ZipUpdater(this.countryEl.value, this.zipEl);\r\n        zipUpdater.update();\r\n    },\r\n\r\n    setMarkDisplay: function(elem, display){\r\n        elem = $(elem);\r\n        var labelElement = elem.up(0).down('label > span.required') ||\r\n                           elem.up(1).down('label > span.required') ||\r\n                           elem.up(0).down('label.required > em') ||\r\n                           elem.up(1).down('label.required > em');\r\n        if(labelElement) {\r\n            inputElement = labelElement.up().next('input');\r\n            if (display) {\r\n                labelElement.show();\r\n                if (inputElement) {\r\n                    inputElement.addClassName('required-entry');\r\n                }\r\n            } else {\r\n                labelElement.hide();\r\n                if (inputElement) {\r\n                    inputElement.removeClassName('required-entry');\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nZipUpdater = Class.create();\r\nZipUpdater.prototype = {\r\n    initialize: function(country, zipElement)\r\n    {\r\n        this.country = country;\r\n        this.zipElement = $(zipElement);\r\n    },\r\n\r\n    update: function()\r\n    {\r\n        // Country ISO 2-letter codes must be pre-defined\r\n        if (typeof optionalZipCountries == 'undefined') {\r\n            return false;\r\n        }\r\n\r\n        // Ajax-request and normal content load compatibility\r\n        if (this.zipElement != undefined) {\r\n            this._setPostcodeOptional();\r\n        } else {\r\n            Event.observe(window, \"load\", this._setPostcodeOptional.bind(this));\r\n        }\r\n    },\r\n\r\n    _setPostcodeOptional: function()\r\n    {\r\n        this.zipElement = $(this.zipElement);\r\n        if (this.zipElement == undefined) {\r\n            return false;\r\n        }\r\n\r\n        // find label\r\n        var label = $$('label[for=\"' + this.zipElement.id + '\"]')[0];\r\n        if (label != undefined) {\r\n            var wildCard = label.down('em') || label.down('span.required');\r\n        }\r\n\r\n        // Make Zip and its label required/optional\r\n        if (optionalZipCountries.indexOf(this.country) != -1) {\r\n            while (this.zipElement.hasClassName('required-entry')) {\r\n                this.zipElement.removeClassName('required-entry');\r\n            }\r\n            if (wildCard != undefined) {\r\n                wildCard.hide();\r\n            }\r\n        } else {\r\n            this.zipElement.addClassName('required-entry');\r\n            if (wildCard != undefined) {\r\n                wildCard.show();\r\n            }\r\n        }\r\n    }\r\n}\r\n"}
    }
});

require.config({
    config: {
        'jsbuild':{"Magento_Backend/js/media-uploader.js":"/**\r\n *\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*global byteConvert*/\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'Magento_Ui/js/modal/alert',\r\n    'mage/translate',\r\n    'jquery/file-uploader'\r\n], function ($, mageTemplate, alert) {\r\n    'use strict';\r\n\r\n    $.widget('mage.mediaUploader', {\r\n\r\n        /**\r\n         *\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            var\r\n                self = this,\r\n                progressTmpl = mageTemplate('[data-template=\"uploader\"]');\r\n\r\n            this.element.find('input[type=file]').fileupload({\r\n                dataType: 'json',\r\n                formData: {\r\n                    'form_key': window.FORM_KEY\r\n                },\r\n                dropZone: '[data-tab-panel=image-management]',\r\n                sequentialUploads: true,\r\n                acceptFileTypes: /(\\.|\\/)(gif|jpe?g|png)$/i,\r\n                maxFileSize: this.options.maxFileSize,\r\n\r\n                /**\r\n                 * @param {Object} e\r\n                 * @param {Object} data\r\n                 */\r\n                add: function (e, data) {\r\n                    var\r\n                        fileSize,\r\n                        tmpl;\r\n\r\n                    $.each(data.files, function (index, file) {\r\n                        fileSize = typeof file.size == 'undefined' ?\r\n                            $.mage.__('We could not detect a size.') :\r\n                            byteConvert(file.size);\r\n\r\n                        data.fileId = Math.random().toString(33).substr(2, 18);\r\n\r\n                        tmpl = progressTmpl({\r\n                            data: {\r\n                                name: file.name,\r\n                                size: fileSize,\r\n                                id: data.fileId\r\n                            }\r\n                        });\r\n\r\n                        $(tmpl).appendTo(self.element);\r\n                    });\r\n\r\n                    $(this).fileupload('process', data).done(function () {\r\n                        data.submit();\r\n                    });\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} e\r\n                 * @param {Object} data\r\n                 */\r\n                done: function (e, data) {\r\n                    if (data.result && !data.result.error) {\r\n                        self.element.trigger('addItem', data.result);\r\n                    } else {\r\n                        alert({\r\n                            content: $.mage.__('We don\\'t recognize or support this file extension type.')\r\n                        });\r\n                    }\r\n                    self.element.find('#' + data.fileId).remove();\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} e\r\n                 * @param {Object} data\r\n                 */\r\n                progress: function (e, data) {\r\n                    var progress = parseInt(data.loaded / data.total * 100, 10),\r\n                        progressSelector = '#' + data.fileId + ' .progressbar-container .progressbar';\r\n\r\n                    self.element.find(progressSelector).css('width', progress + '%');\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} e\r\n                 * @param {Object} data\r\n                 */\r\n                fail: function (e, data) {\r\n                    var progressSelector = '#' + data.fileId;\r\n\r\n                    self.element.find(progressSelector).removeClass('upload-progress').addClass('upload-failure')\r\n                        .delay(2000)\r\n                        .hide('highlight')\r\n                        .remove();\r\n                }\r\n            });\r\n\r\n            this.element.find('input[type=file]').fileupload('option', {\r\n                process: [{\r\n                    action: 'load',\r\n                    fileTypes: /^image\\/(gif|jpeg|png)$/\r\n                }, {\r\n                    action: 'resize',\r\n                    maxWidth: this.options.maxWidth,\r\n                    maxHeight: this.options.maxHeight\r\n                }, {\r\n                    action: 'save'\r\n                }]\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.mediaUploader;\r\n});\r\n","Magento_Backend/js/bootstrap/editor.js":"/**\r\n *\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\nrequire([\r\n    \"Magento_Variable/variables\",\r\n    \"mage/adminhtml/browser\"\r\n]);\r\n","Magento_Theme/js/bootstrap.js":"/**\r\n *\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\nrequire([\r\n    \"jquery/fileUploader/jquery.fileupload-ui\",\r\n    \"mage/adminhtml/browser\",\r\n    \"Magento_Theme/js/form\"\r\n]);\r\n","Magento_Theme/js/custom-js-list.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'jquery/ui'\r\n], function ($, mageTemplate) {\r\n    'use strict';\r\n\r\n    $.widget('theme.themeJsList', {\r\n        options: {\r\n            templateId: null,\r\n            emptyTemplateId: null,\r\n            refreshFileListEvent: null,\r\n            prefixItemId: '',\r\n            suffixItemId: ''\r\n        },\r\n\r\n        /**\r\n         * Initialize widget\r\n         *\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * Bind event handlers\r\n         *\r\n         * @protected\r\n         */\r\n        _bind: function () {\r\n            $('body').on(this.options.refreshFileListEvent, $.proxy(this._onRefreshList, this));\r\n        },\r\n\r\n        /**\r\n         *Render js files list\r\n         *\r\n         * @param event\r\n         * @param data\r\n         * @protected\r\n         */\r\n        _onRefreshList: function (event, data) {\r\n            $(this.element).html('');\r\n\r\n            if (data.jsList.length) {\r\n                this._renderList(data.jsList);\r\n            } else {\r\n                this._renderEmptyList();\r\n            }\r\n        },\r\n\r\n        /**\r\n         *Get item js list id\r\n         *\r\n         * @param fileId\r\n         * @return string\r\n         * @protected\r\n         */\r\n        _getItemId: function (fileId) {\r\n            return this.options.prefixItemId + fileId + this.options.suffixItemId;\r\n        },\r\n\r\n        /**\r\n         * Render js list\r\n         *\r\n         * @param jsList\r\n         * @protected\r\n         */\r\n        _renderList: function (jsList) {\r\n            var itemTmpl,\r\n                index,\r\n                tmpl;\r\n\r\n            for (index = 0; index < jsList.length; index++) {\r\n                itemTmpl = $('<li></li>').html($(this.options.templateId).html());\r\n\r\n                $(itemTmpl).attr('class', ($(this.options.templateId).attr('class')));\r\n\r\n                itemTmpl.attr('id', this._getItemId(jsList[index].id));\r\n\r\n                tmpl = mageTemplate(itemTmpl.html(), {\r\n                    data: jsList[index]\r\n                });\r\n\r\n                itemTmpl.html(tmpl);\r\n\r\n                itemTmpl.removeClass('no-display');\r\n                itemTmpl.appendTo(this.element);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set empty js list\r\n         *\r\n         * @protected\r\n         */\r\n        _renderEmptyList: function () {\r\n            var itemTmpl = $(\"<li></li>\").html($(this.options.emptyTemplateId).html());\r\n\r\n            $(itemTmpl).attr('class', ($(this.options.emptyTemplateId).attr('class')));\r\n\r\n            itemTmpl.attr('id', 'empty-js-list');\r\n            itemTmpl.removeClass('no-display');\r\n            itemTmpl.appendTo(this.element);\r\n        }\r\n    });\r\n});\r\n","Magento_Theme/js/form.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\"prototype\"], function(){\r\n\r\nfunction parentThemeOnChange(selected, defaultsById) {\r\n    var statusBar = $$('.tab-item-link')[0];\r\n    var isChanged = statusBar.hasClassName('changed');\r\n    if (!isChanged) {\r\n        var defaults = defaultsById[selected];\r\n        $('theme_title').value = defaults.theme_title;\r\n    }\r\n}\r\n\r\nwindow.parentThemeOnChange = parentThemeOnChange;\r\n\r\n});\r\n","Magento_Theme/js/sortable.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    \"jquery\",\r\n    \"jquery/ui\"\r\n], function($){\r\n    /**\r\n     * Widget panel\r\n     */\r\n    $.widget('mage.sortable', $.ui.sortable, {\r\n        options: {\r\n            moveUpEvent:   'moveUp',\r\n            moveDownEvent: 'moveDown'\r\n        },\r\n\r\n        _create: function() {\r\n            this._super();\r\n            this.initButtons();\r\n            this.bind();\r\n        },\r\n\r\n        initButtons: function() {\r\n            this.element.find('input.up').on('click', $.proxy(function(event){\r\n                $('body').trigger(this.options.moveUpEvent, {item:$(event.target).parent('li')});\r\n            }, this));\r\n            this.element.find('input.down').on('click', $.proxy(function(event){\r\n                $('body').trigger(this.options.moveDownEvent, {item:$(event.target).parent('li')});\r\n            }, this));\r\n        },\r\n\r\n        bind: function() {\r\n            var $body = $('body');\r\n            $body.on(this.options.moveUpEvent, $.proxy(this._onMoveUp, this));\r\n            $body.on(this.options.moveDownEvent, $.proxy(this._onMoveDown, this));\r\n        },\r\n\r\n        _onMoveUp: function(event, data) {\r\n            data.item.insertBefore(data.item.prev());\r\n        },\r\n\r\n        _onMoveDown: function(event, data) {\r\n            data.item.insertAfter(data.item.next());\r\n        }\r\n    });\r\n\r\n    return $.mage.sortable;\r\n});\r\n","Magento_Theme/js/form/component/robots-reset-button.js":"/**\r\n * Copyright \u00c2\u00a9 2016 Magento. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/components/button',\r\n    'uiRegistry'\r\n], function (Button, registry) {\r\n    'use strict';\r\n\r\n    return Button.extend({\r\n        defaults: {\r\n            customInstructionField: '${ $.parentName }.custom_instructions',\r\n            label: '',\r\n            buttonTpl: 'Magento_Theme/form/element/button'\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         * @param {String} json\r\n         * @return {String}\r\n         */\r\n        _parseJson: function (json) {\r\n            return JSON.parse(json);\r\n        },\r\n\r\n        /**\r\n         * @param {String} defaultRobotsTxt\r\n         */\r\n        reset: function (defaultRobotsTxt) {\r\n            var customInstructions = registry.get(this.customInstructionField);\r\n\r\n            if (customInstructions) {\r\n                customInstructions.set('value', this._parseJson(defaultRobotsTxt));\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_User/app-config.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\nrequire.config({\r\n    \"waitSeconds\": 0,\r\n    \"shim\": {\r\n        \"jquery/jquery.hashchange\": [\"jquery\"],\r\n        \"jquery/jstree/jquery.hotkeys\": [\"jquery\"],\r\n        \"jquery/hover-intent\": [\"jquery\"],\r\n        \"mage/adminhtml/backup\": [\"prototype\"],\r\n        \"mage/captcha\": [\"prototype\"],\r\n        \"mage/common\": [\"jquery\"],\r\n        \"mage/webapi\": [\"jquery\"],\r\n        \"ko\": { exports: \"ko\" },\r\n        \"moment\": { exports: \"moment\" }\r\n    },\r\n    \"paths\":{\r\n        \"jquery/ui\": \"jquery/jquery-ui-1.9.2\",\r\n        \"jquery/validate\": \"jquery/jquery.validate\",\r\n        \"jquery/hover-intent\": \"jquery/jquery.hoverIntent\",\r\n        \"jquery/file-uploader\": \"jquery/fileUploader/jquery.fileupload-fp\",\r\n        \"jquery/jquery.hashchange\": \"jquery/jquery.ba-hashchange.min\",\r\n        \"prototype\": \"prototype/prototype-amd\",\r\n        \"text\": \"requirejs/text\",\r\n        \"domReady\": \"requirejs/domReady\",\r\n        \"ko\": \"ko/ko\"\r\n    }\r\n});\r\n\r\nrequire(['jquery'], function(jQuery){\r\n    jQuery.noConflict();\r\n});\r\n","Magento_User/js/roles-tree.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint browser:true jquery:true*/\r\ndefine([\r\n    \"jquery\",\r\n    \"jquery/ui\",\r\n    \"jquery/jstree/jquery.jstree\"\r\n], function($){\r\n    'use strict';\r\n\r\n    $.widget('mage.rolesTree', {\r\n        options: {\r\n            treeInitData: {},\r\n            treeInitSelectedData: {}\r\n        },\r\n        _create: function() {\r\n            this.element.jstree({\r\n                plugins: [\"themes\", \"json_data\", \"ui\", \"crrm\", \"types\", \"vcheckbox\", \"hotkeys\"],\r\n                vcheckbox: {\r\n                    'two_state': true,\r\n                    'real_checkboxes': true,\r\n                    'real_checkboxes_names': function(n) {return ['resource[]', $(n).data('id')]}\r\n                },\r\n                json_data: {data: this.options.treeInitData},\r\n                ui: {select_limit: 0},\r\n                hotkeys: {\r\n                    space: this._changeState,\r\n                    'return': this._changeState\r\n                },\r\n                types: {\r\n                    'types': {\r\n                        'disabled': {\r\n                            'check_node': false,\r\n                            'uncheck_node': false\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            this._bind();\r\n        },\r\n        _destroy: function() {\r\n            this.element.jstree('destroy');\r\n        },\r\n        _bind: function() {\r\n            this.element.on('loaded.jstree', $.proxy(this._checkNodes, this));\r\n            this.element.on('click.jstree', 'a', $.proxy(this._checkNode, this));\r\n        },\r\n        _checkNode: function(event) {\r\n            event.stopPropagation();\r\n            this.element.jstree(\r\n                'change_state',\r\n                event.currentTarget,\r\n                this.element.jstree('is_checked', event.currentTarget)\r\n            );\r\n        },\r\n        _checkNodes: function() {\r\n            var $items = $('[data-id=\"' + this.options.treeInitSelectedData.join('\"],[data-id=\"') + '\"]');\r\n            $items.removeClass(\"jstree-unchecked\").addClass(\"jstree-checked\");\r\n            $items.children(\":checkbox\").prop(\"checked\", true);\r\n        },\r\n        _changeState: function() {\r\n            if (this.data.ui.hovered) {\r\n                var element = this.data.ui.hovered;\r\n                this.change_state(element, this.is_checked(element));\r\n            }\r\n            return false;\r\n        }\r\n    });\r\n    \r\n    return $.mage.rolesTree;\r\n});\r\n","Magento_Ui/js/block-loader.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'Magento_Ui/js/lib/knockout/template/loader',\r\n    'mage/template'\r\n], function (ko, $, templateLoader, template) {\r\n    'use strict';\r\n\r\n    var blockLoaderTemplatePath = 'ui/block-loader',\r\n        blockContentLoadingClass = '_block-content-loading',\r\n        blockLoader,\r\n        blockLoaderClass,\r\n        loaderImageHref;\r\n\r\n    templateLoader.loadTemplate(blockLoaderTemplatePath).done(function (blockLoaderTemplate) {\r\n        blockLoader = template($.trim(blockLoaderTemplate), {\r\n            loaderImageHref: loaderImageHref\r\n        });\r\n        blockLoader = $(blockLoader);\r\n        blockLoaderClass = '.' + blockLoader.attr('class');\r\n    });\r\n\r\n    /**\r\n     * Helper function to check if blockContentLoading class should be applied.\r\n     * @param {Object} element\r\n     * @returns {Boolean}\r\n     */\r\n    function isLoadingClassRequired(element) {\r\n        var position = element.css('position');\r\n\r\n        if (position === 'absolute' || position === 'fixed') {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Add loader to block.\r\n     * @param {Object} element\r\n     */\r\n    function addBlockLoader(element) {\r\n        element.find(':focus').blur();\r\n        element.find('input:disabled, select:disabled').addClass('_disabled');\r\n        element.find('input, select').prop('disabled', true);\r\n\r\n        if (isLoadingClassRequired(element)) {\r\n            element.addClass(blockContentLoadingClass);\r\n        }\r\n        element.append(blockLoader.clone());\r\n    }\r\n\r\n    /**\r\n     * Remove loader from block.\r\n     * @param {Object} element\r\n     */\r\n    function removeBlockLoader(element) {\r\n        if (!element.has(blockLoaderClass).length) {\r\n            return;\r\n        }\r\n        element.find(blockLoaderClass).remove();\r\n        element.find('input:not(\"._disabled\"), select:not(\"._disabled\")').prop('disabled', false);\r\n        element.find('input:disabled, select:disabled').removeClass('_disabled');\r\n        element.removeClass(blockContentLoadingClass);\r\n    }\r\n\r\n    return function (loaderHref) {\r\n        loaderImageHref = loaderHref;\r\n        ko.bindingHandlers.blockLoader = {\r\n            /**\r\n             * Process loader for block\r\n             * @param {String} element\r\n             * @param {Boolean} displayBlockLoader\r\n             */\r\n            update: function (element, displayBlockLoader) {\r\n                element = $(element);\r\n\r\n                if (ko.unwrap(displayBlockLoader())) {\r\n                    addBlockLoader(element);\r\n                } else {\r\n                    removeBlockLoader(element);\r\n                }\r\n            }\r\n        };\r\n    };\r\n});\r\n","Magento_Ui/js/core/app.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    './renderer/types',\r\n    './renderer/layout',\r\n    '../lib/knockout/bootstrap'\r\n], function (types, layout) {\r\n    'use strict';\r\n\r\n    return function (data, merge) {\r\n        types.set(data.types);\r\n        layout(data.components, undefined, true, merge);\r\n    };\r\n});\r\n","Magento_Ui/js/core/renderer/layout.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'jquery',\r\n    'mageUtils',\r\n    'uiRegistry',\r\n    './types'\r\n], function (_, $, utils, registry, types) {\r\n    'use strict';\r\n\r\n    var templates = registry.create(),\r\n        layout = {},\r\n        cachedConfig = {};\r\n\r\n    function getNodeName(parent, node, name) {\r\n        var parentName = parent && parent.name;\r\n\r\n        if (typeof name !== 'string') {\r\n            name = node.name || name;\r\n        }\r\n\r\n        return utils.fullPath(parentName, name);\r\n    }\r\n\r\n    function getNodeType(parent, node) {\r\n        return node.type || parent && parent.childType;\r\n    }\r\n\r\n    function getDataScope(parent, node) {\r\n        var dataScope = node.dataScope,\r\n            parentScope = parent && parent.dataScope;\r\n\r\n        return !utils.isEmpty(parentScope) ?\r\n            !utils.isEmpty(dataScope) ?\r\n                parentScope + '.' + dataScope :\r\n                parentScope :\r\n            dataScope || '';\r\n    }\r\n\r\n    function loadDeps(node) {\r\n        var loaded = $.Deferred();\r\n\r\n        registry.get(node.deps, function (deps) {\r\n            node.provider = node.extendProvider ? deps && deps.name : node.provider;\r\n            loaded.resolve(node);\r\n        });\r\n\r\n        return loaded.promise();\r\n    }\r\n\r\n    function loadSource(node) {\r\n        var loaded = $.Deferred(),\r\n            source = node.component;\r\n\r\n        require([source], function (constr) {\r\n            loaded.resolve(node, constr);\r\n        });\r\n\r\n        return loaded.promise();\r\n    }\r\n\r\n    function initComponent(node, Constr) {\r\n        var component = new Constr(_.omit(node, 'children'));\r\n\r\n        registry.set(node.name, component);\r\n    }\r\n\r\n    function run(nodes, parent, cached, merge) {\r\n        if (_.isBoolean(merge) && merge) {\r\n            layout.merge(nodes);\r\n\r\n            return false;\r\n        }\r\n\r\n        if (cached) {\r\n            cachedConfig[_.keys(nodes)[0]] = JSON.parse(JSON.stringify(nodes));\r\n        }\r\n\r\n        _.each(nodes || [], layout.iterator.bind(layout, parent));\r\n    }\r\n\r\n    _.extend(layout, {\r\n        iterator: function (parent, node) {\r\n            var action = _.isString(node) ?\r\n                this.addChild :\r\n                this.process;\r\n\r\n            action.apply(this, arguments);\r\n        },\r\n\r\n        process: function (parent, node, name) {\r\n            if (!parent && node.parent) {\r\n                return this.waitParent(node, name);\r\n            }\r\n\r\n            if (node.nodeTemplate) {\r\n                return this.waitTemplate.apply(this, arguments);\r\n            }\r\n\r\n            node = this.build.apply(this, arguments);\r\n\r\n            if (!registry.has(node.name)) {\r\n                this.addChild(parent, node)\r\n                    .manipulate(node)\r\n                    .initComponent(node);\r\n            }\r\n\r\n            if (node) {\r\n                run(node.children, node);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        build: function (parent, node, name) {\r\n            var defaults    = parent && parent.childDefaults || {},\r\n                children    = node.children,\r\n                type        = getNodeType(parent, node),\r\n                dataScope   = getDataScope(parent, node),\r\n                component,\r\n                extendDeps  = true,\r\n                nodeName;\r\n\r\n            node.children = false;\r\n            node.extendProvider = true;\r\n\r\n            if (node.config && node.config.provider || node.provider) {\r\n                node.extendProvider = false;\r\n            }\r\n\r\n            if (node.config && node.config.deps || node.deps) {\r\n                extendDeps= false;\r\n            }\r\n\r\n            node = utils.extend({\r\n            }, types.get(type), defaults, node);\r\n\r\n            nodeName = getNodeName(parent, node, name);\r\n\r\n            if (registry.has(nodeName)) {\r\n                component = registry.get(nodeName);\r\n                component.children = children;\r\n\r\n                return component;\r\n            }\r\n\r\n            if (extendDeps && parent && parent.deps && type) {\r\n                node.deps = parent.deps;\r\n            }\r\n\r\n            _.extend(node, node.config || {}, {\r\n                index: node.name || name,\r\n                name: nodeName,\r\n                dataScope: dataScope,\r\n                parentName: utils.getPart(nodeName, -2),\r\n                parentScope: utils.getPart(dataScope, -2)\r\n            });\r\n\r\n            node.children = children;\r\n            node.componentType = node.type;\r\n\r\n            delete node.type;\r\n            delete node.config;\r\n\r\n            if (children) {\r\n                node.initChildCount = _.size(children);\r\n            }\r\n\r\n            if (node.isTemplate) {\r\n                node.isTemplate = false;\r\n\r\n                templates.set(node.name, node);\r\n                registry.get(node.parentName, function (parent) {\r\n                    parent.childTemplate = node;\r\n                });\r\n\r\n                return false;\r\n            }\r\n\r\n            if (node.componentDisabled === true) {\r\n                return false;\r\n            }\r\n\r\n            return node;\r\n        },\r\n\r\n        initComponent: function (node) {\r\n            if (!node.component) {\r\n                return this;\r\n            }\r\n\r\n            loadDeps(node)\r\n                .then(loadSource)\r\n                .done(initComponent);\r\n\r\n            return this;\r\n        }\r\n    });\r\n\r\n    _.extend(layout, {\r\n        waitTemplate: function (parent, node) {\r\n            var args = _.toArray(arguments);\r\n\r\n            templates.get(node.nodeTemplate, function () {\r\n                this.applyTemplate.apply(this, args);\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        waitParent: function (node, name) {\r\n            var process = this.process.bind(this);\r\n\r\n            registry.get(node.parent, function (parent) {\r\n                process(parent, node, name);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        applyTemplate: function (parent, node, name) {\r\n            var template = templates.get(node.nodeTemplate);\r\n\r\n            node = utils.extend({}, template, node);\r\n\r\n            delete node.nodeTemplate;\r\n\r\n            this.process(parent, node, name);\r\n        }\r\n    });\r\n\r\n    _.extend(layout, {\r\n        manipulate: function (node) {\r\n            var name = node.name;\r\n\r\n            if (node.appendTo) {\r\n                this.insert(name, node.appendTo, -1);\r\n            }\r\n\r\n            if (node.prependTo) {\r\n                this.insert(name, node.prependTo, 0);\r\n            }\r\n\r\n            if (node.insertTo) {\r\n                this.insertTo(name, node.insertTo);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        insert: function (item, target, position) {\r\n            registry.get(target, function (container) {\r\n                container.insertChild(item, position);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        insertTo: function (item, targets) {\r\n            _.each(targets, function (info, target) {\r\n                this.insert(item, target, info.position);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        addChild: function (parent, child) {\r\n            var name;\r\n\r\n            if (parent && parent.component) {\r\n                name = child.name || child;\r\n\r\n                this.insert(name, parent.name, child.sortOrder);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        merge: function (components) {\r\n            var cachedKey = _.keys(components)[0],\r\n                compared = utils.compare(cachedConfig[cachedKey], components),\r\n                remove = this.filterComponents(this.getByProperty(compared.changes, 'type', 'remove'), true),\r\n                update = this.getByProperty(compared.changes, 'type', 'update'),\r\n                dataSources = this.getDataSources(components),\r\n                names, index, name, component;\r\n\r\n            _.each(dataSources, function (val, key) {\r\n                name = key.replace(/\\.children|\\.config/g, '');\r\n                component = registry.get(name);\r\n\r\n                component.cacheData();\r\n                component.updateConfig(\r\n                    true,\r\n                    this.getFullConfig(key, components),\r\n                    this.getFullConfig(key, cachedConfig[cachedKey])\r\n                );\r\n            }, this);\r\n\r\n            _.each(remove, function (val) {\r\n                component = registry.get(val.path);\r\n\r\n                if (component) {\r\n                    component.cleanData().destroy();\r\n                }\r\n            });\r\n\r\n            update = _.compact(_.filter(update, function (val) {\r\n                return !_.isEqual(val.oldValue, val.value);\r\n            }));\r\n\r\n            _.each(update, function (val) {\r\n                names = val.path.split('.');\r\n                index = Math.max(_.lastIndexOf(names, 'config'), _.lastIndexOf(names, 'children') + 2);\r\n                name = _.without(names.splice(0, index), 'children', 'config').join('.');\r\n                component = registry.get(name);\r\n\r\n                if (val.name === 'sortOrder' && component) {\r\n                    registry.get(component.parentName).insertChild(component, val.value);\r\n                } else if (component) {\r\n                    component.updateConfig(\r\n                        val.oldValue,\r\n                        val.value,\r\n                        val.path\r\n                    );\r\n                }\r\n            }, this);\r\n\r\n            run(components, undefined, true);\r\n        },\r\n\r\n        getDataSources: function (config, parentPath) {\r\n            var dataSources = {},\r\n                key, obj;\r\n\r\n            for (key in config) {\r\n                if (config.hasOwnProperty(key)) {\r\n                    if (\r\n                        key === 'type' &&\r\n                        config[key] === 'dataSource' &&\r\n                        config.hasOwnProperty('config')\r\n                    ) {\r\n                        dataSources[parentPath + '.config'] = config.config;\r\n                    } else if (_.isObject(config[key])) {\r\n                        obj = this.getDataSources(config[key], utils.fullPath(parentPath, key));\r\n\r\n                        _.each(obj, function (value, path) {\r\n                            dataSources[path] = value;\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            return dataSources;\r\n        },\r\n\r\n        getFullConfig: function (path, config) {\r\n            var index;\r\n\r\n            path = path.split('.');\r\n            index = _.lastIndexOf(path, 'config');\r\n\r\n            if (!~index) {\r\n                return false;\r\n            }\r\n            path = path.splice(0, index);\r\n\r\n            _.each(path, function (val) {\r\n                config = config[val];\r\n            });\r\n\r\n            return config.config;\r\n        },\r\n\r\n        getByProperty: function (data, prop, propValue) {\r\n            return _.filter(data, function (value) {\r\n                return value[prop] === propValue;\r\n            });\r\n        },\r\n\r\n        filterComponents: function (data, splitPath, index, separator, keyName) {\r\n            var result = [],\r\n                names, length;\r\n\r\n            index = -2;\r\n            separator = '.' || separator;\r\n            keyName = 'children' || keyName;\r\n\r\n            _.each(data, function (val) {\r\n                names = val.path.split(separator);\r\n                length  = names.length;\r\n\r\n                if (names[length + index] === keyName) {\r\n                    val.path = splitPath ? _.without(names, keyName).join(separator) : val.path;\r\n                    result.push(val);\r\n                }\r\n            });\r\n\r\n            return result;\r\n        }\r\n    });\r\n\r\n    return run;\r\n});\r\n","Magento_Ui/js/core/renderer/types.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils'\r\n], function (_, utils) {\r\n    'use strict';\r\n\r\n    var store = {};\r\n\r\n    function flatten(data) {\r\n        var extender = data.extends || [],\r\n            result = {};\r\n\r\n        extender = utils.stringToArray(extender);\r\n\r\n        extender.push(data);\r\n\r\n        extender.forEach(function (item) {\r\n            if (_.isString(item)) {\r\n                item = store[item] || {};\r\n            }\r\n\r\n            utils.extend(result, item);\r\n        });\r\n\r\n        delete result.extends;\r\n\r\n        return result;\r\n    }\r\n\r\n    return {\r\n        set: function (types) {\r\n            types = types || {};\r\n\r\n            utils.extend(store, types);\r\n\r\n            _.each(types, function (data, type) {\r\n                store[type] = flatten(data);\r\n            });\r\n        },\r\n\r\n        get: function (type) {\r\n            return store[type] || {};\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/dynamic-rows/dnd.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'underscore',\r\n    'uiElement',\r\n    'Magento_Ui/js/lib/view/utils/async'\r\n], function (ko, $, _, Element) {\r\n    'use strict';\r\n\r\n    var transformProp,\r\n        isTouchDevice = typeof document.ontouchstart !== 'undefined';\r\n\r\n    /**\r\n     * Get element context\r\n     */\r\n    function getContext(elem) {\r\n        return ko.contextFor(elem);\r\n    }\r\n\r\n    /**\r\n     * Defines supported css 'transform' property.\r\n     *\r\n     * @returns {String|Undefined}\r\n     */\r\n    transformProp = (function () {\r\n        var style = document.createElement('div').style,\r\n            base = 'Transform',\r\n            vendors = ['webkit', 'moz', 'ms', 'o'],\r\n            vi = vendors.length,\r\n            property;\r\n\r\n        if (typeof style.transform !== 'undefined') {\r\n            return 'transform';\r\n        }\r\n\r\n        while (vi--) {\r\n            property = vendors[vi] + base;\r\n\r\n            if (typeof style[property] !== 'undefined') {\r\n                return property;\r\n            }\r\n        }\r\n    })();\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            separatorsClass: {\r\n                top: '_dragover-top',\r\n                bottom: '_dragover-bottom'\r\n            },\r\n            step: 'auto',\r\n            tableClass: 'table.admin__dynamic-rows',\r\n            recordsCache: [],\r\n            draggableElement: {},\r\n            draggableElementClass: '_dragged',\r\n            elemPositions: [],\r\n            listens: {\r\n                '${ $.recordsProvider }:elems': 'setCacheRecords'\r\n            },\r\n            modules: {\r\n                parentComponent: '${ $.recordsProvider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initialize component\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(\r\n                this,\r\n                'mousemoveHandler',\r\n                'mouseupHandler'\r\n            );\r\n\r\n            this._super()\r\n                .body = $('body');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent, initializes 'options' and 'initialOptions'\r\n         *     properties, calls 'setOptions' passing options to it\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'recordsCache'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Init listens to start drag\r\n         *\r\n         * @param {Object} elem - DOM element\r\n         * @param {Object} data - element data\r\n         */\r\n        initListeners: function (elem, data) {\r\n            if (isTouchDevice) {\r\n                $(elem).on('touchstart', this.mousedownHandler.bind(this, data, elem));\r\n            } else {\r\n                $(elem).on('mousedown', this.mousedownHandler.bind(this, data, elem));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Mouse down handler\r\n         *\r\n         * @param {Object} data - element data\r\n         * @param {Object} elem - element\r\n         * @param {Object} event - key down event\r\n         */\r\n        mousedownHandler: function (data, elem, event) {\r\n            var recordNode = this.getRecordNode(elem),\r\n                originRecord = $(elem).parents('tr').eq(0),\r\n                drEl = this.draggableElement,\r\n                $table = $(elem).parents('table').eq(0),\r\n                $tableWrapper = $table.parent();\r\n\r\n            $(recordNode).addClass(this.draggableElementClass);\r\n            $(originRecord).addClass(this.draggableElementClass);\r\n            this.step = this.step === 'auto' ? originRecord.height() / 2 : this.step;\r\n            drEl.originRow = originRecord;\r\n            drEl.instance = recordNode = this.processingStyles(recordNode, elem);\r\n            drEl.instanceCtx = this.getRecord(originRecord[0]);\r\n            drEl.eventMousedownY = isTouchDevice ? event.originalEvent.touches[0].pageY : event.pageY;\r\n            drEl.minYpos = $table.offset().top - originRecord.offset().top + $table.children('thead').outerHeight();\r\n            drEl.maxYpos = drEl.minYpos + $table.children('tbody').outerHeight() - originRecord.outerHeight();\r\n            $tableWrapper.append(recordNode);\r\n\r\n            if (isTouchDevice) {\r\n                this.body.bind('touchmove', this.mousemoveHandler);\r\n                this.body.bind('touchend', this.mouseupHandler);\r\n            } else {\r\n                this.body.bind('mousemove', this.mousemoveHandler);\r\n                this.body.bind('mouseup', this.mouseupHandler);\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * Mouse move handler\r\n         *\r\n         * @param {Object} event - mouse move event\r\n         */\r\n        mousemoveHandler: function (event) {\r\n            var depEl = this.draggableElement,\r\n                pageY = isTouchDevice ? event.originalEvent.touches[0].pageY : event.pageY,\r\n                positionY = pageY - depEl.eventMousedownY,\r\n                processingPositionY = positionY + 'px',\r\n                processingMaxYpos = depEl.maxYpos + 'px',\r\n                processingMinYpos = depEl.minYpos + 'px',\r\n                depElement = this.getDepElement(depEl.instance, positionY, depEl.originRow);\r\n\r\n            event.stopPropagation();\r\n            event.preventDefault();\r\n\r\n            if (depElement) {\r\n                depEl.depElement ? depEl.depElement.elem.removeClass(depEl.depElement.className) : false;\r\n                depEl.depElement = depElement;\r\n                depEl.depElement.insert !== 'none' ? depEl.depElement.elem.addClass(depElement.className) : false;\r\n            } else if (depEl.depElement && depEl.depElement.insert !== 'none') {\r\n                depEl.depElement.elem.removeClass(depEl.depElement.className);\r\n                depEl.depElement.insert = 'none';\r\n            }\r\n\r\n            if (positionY > depEl.minYpos && positionY < depEl.maxYpos) {\r\n                $(depEl.instance)[0].style[transformProp] = 'translateY(' + processingPositionY + ')';\r\n            } else if (positionY < depEl.minYpos) {\r\n                $(depEl.instance)[0].style[transformProp] = 'translateY(' + processingMinYpos + ')';\r\n            } else if (positionY >= depEl.maxYpos) {\r\n                $(depEl.instance)[0].style[transformProp] = 'translateY(' + processingMaxYpos + ')';\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Mouse up handler\r\n         */\r\n        mouseupHandler: function (event) {\r\n            var depElementCtx,\r\n                drEl = this.draggableElement,\r\n                pageY = isTouchDevice ? event.originalEvent.touches[0].pageY : event.pageY,\r\n                positionY = pageY - drEl.eventMousedownY;\r\n\r\n            drEl.depElement = this.getDepElement(drEl.instance, positionY, this.draggableElement.originRow);\r\n\r\n            drEl.instance.remove();\r\n\r\n            if (drEl.depElement) {\r\n                depElementCtx = this.getRecord(drEl.depElement.elem[0]);\r\n                drEl.depElement.elem.removeClass(drEl.depElement.className);\r\n\r\n                if (drEl.depElement.insert !== 'none') {\r\n                    this.setPosition(drEl.depElement.elem, depElementCtx, drEl);\r\n                }\r\n            }\r\n\r\n            drEl.originRow.removeClass(this.draggableElementClass);\r\n\r\n            if (isTouchDevice) {\r\n                this.body.unbind('touchmove', this.mousemoveHandler);\r\n                this.body.unbind('touchend', this.mouseupHandler);\r\n            } else {\r\n                this.body.unbind('mousemove', this.mousemoveHandler);\r\n                this.body.unbind('mouseup', this.mouseupHandler);\r\n            }\r\n\r\n            this.draggableElement = {};\r\n        },\r\n\r\n        /**\r\n         * Set position to element\r\n         *\r\n         * @param {Object} depElem - dep element\r\n         * @param {Object} depElementCtx - dep element context\r\n         * @param {Object} dragData - data draggable element\r\n         */\r\n        setPosition: function (depElem, depElementCtx, dragData) {\r\n            var depElemPosition = ~~depElementCtx.position;\r\n\r\n            this.cacheElementsPosition();\r\n\r\n            if (dragData.depElement.insert === 'after') {\r\n                dragData.instanceCtx.position = depElemPosition + 1;\r\n            } else if (dragData.depElement.insert === 'before') {\r\n                dragData.instanceCtx.position = depElemPosition;\r\n            }\r\n\r\n            this.normalizePositions();\r\n        },\r\n\r\n        /**\r\n         * Saves elements position from current elements\r\n         */\r\n        cacheElementsPosition: function () {\r\n            this.elemPositions = [];\r\n            this.parentComponent().elems.each(function (elem) {\r\n                this.elemPositions.push(elem.position);\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Normalize position, uses start elements position\r\n         */\r\n        normalizePositions: function () {\r\n            this.parentComponent().elems.each(function (item, index) {\r\n                item.position = this.elemPositions[index];\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Get dependency element\r\n         *\r\n         * @param {Object} curInstance - current element instance\r\n         * @param {Number} position\r\n         */\r\n        getDepElement: function (curInstance, position, row) {\r\n            var tableSelector = this.tableClass + ' tr',\r\n                $table = $(row).parents('table').eq(0),\r\n                $curInstance = $(curInstance),\r\n                recordsCollection = $table.find('table').length ?\r\n                    $table.find('tbody > tr').filter(function (index, elem) {\r\n                        return !$(elem).parents(tableSelector).length;\r\n                    }) :\r\n                    $table.find('tbody > tr'),\r\n                curInstancePositionTop = $curInstance.position().top,\r\n                curInstancePositionBottom = curInstancePositionTop + $curInstance.height();\r\n\r\n            if (position < 0) {\r\n                return this._getDepElement(recordsCollection, 'before', curInstancePositionTop);\r\n            } else if (position > 0) {\r\n                return this._getDepElement(recordsCollection, 'after', curInstancePositionBottom);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get dependency element private\r\n         *\r\n         * @param {Array} collection - record collection\r\n         * @param {String} position - position to add\r\n         * @param {Number} dragPosition - position drag element\r\n         */\r\n        _getDepElement: function (collection, position, dragPosition) {\r\n            var rec,\r\n                rangeEnd,\r\n                rangeStart,\r\n                result,\r\n                className,\r\n                i = 0,\r\n                length = collection.length;\r\n\r\n            for (i; i < length; i++) {\r\n                rec = collection.eq(i);\r\n\r\n                if (position === 'before') {\r\n                    rangeStart = collection.eq(i).position().top - this.step;\r\n                    rangeEnd = rangeStart + this.step * 2;\r\n                    className = this.separatorsClass.top;\r\n                } else if (position === 'after') {\r\n                    rangeEnd = rec.position().top + rec.height() + this.step;\r\n                    rangeStart = rangeEnd - this.step * 2;\r\n                    className = this.separatorsClass.bottom;\r\n                }\r\n\r\n                if (dragPosition > rangeStart && dragPosition < rangeEnd) {\r\n                    result = {\r\n                        elem: rec,\r\n                        insert: rec[0] === this.draggableElement.originRow[0] ? 'none' : position,\r\n                        className: className\r\n                    };\r\n                }\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Set default position of draggable element\r\n         *\r\n         * @param {Object} elem - current element instance\r\n         * @param {Object} data - current element data\r\n         */\r\n        _setDefaultPosition: function (elem, data) {\r\n            var originRecord = $(elem).parents('tr').eq(0),\r\n                position = originRecord.position();\r\n\r\n            ++position.top;\r\n            $(data).css(position);\r\n        },\r\n\r\n        /**\r\n         * Set records to cache\r\n         *\r\n         * @param {Object} records - record instance\r\n         */\r\n        setCacheRecords: function (records) {\r\n            this.recordsCache(records);\r\n        },\r\n\r\n        /**\r\n         * Set styles to draggable element\r\n         *\r\n         * @param {Object} data - data\r\n         * @param {Object} elem - elem instance\r\n         * @returns {Object} instance data.\r\n         */\r\n        processingStyles: function (data, elem) {\r\n            var table = $(elem).parents('table').eq(0),\r\n                columns = table.find('th'),\r\n                recordColumns = $(data).find('td');\r\n\r\n            this._setDefaultPosition(elem, $(data));\r\n            this._setColumnsWidth(columns, recordColumns);\r\n            this._setTableWidth(table, $(data));\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Set table width.\r\n         *\r\n         * @param {Object} originalTable - original record instance\r\n         * @param {Object} recordTable - draggable record instance\r\n         */\r\n        _setTableWidth: function (originalTable, recordTable) {\r\n            recordTable.outerWidth(originalTable.outerWidth());\r\n        },\r\n\r\n        /**\r\n         * Set columns width.\r\n         *\r\n         * @param {Object} originColumns - original record instance\r\n         * @param {Object} recordColumns - draggable record instance\r\n         */\r\n        _setColumnsWidth: function (originColumns, recordColumns) {\r\n            var i = 0,\r\n                length = originColumns.length;\r\n\r\n            for (i; i < length; i++) {\r\n                recordColumns.eq(i).outerWidth(originColumns.eq(i).outerWidth());\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get copy original record\r\n         *\r\n         * @param {Object} record - original record instance\r\n         * @returns {Object} draggable record instance\r\n         */\r\n        getRecordNode: function (record) {\r\n            var $record = $(record),\r\n                table = $record.parents('table')[0].cloneNode(true),\r\n                $table = $(table);\r\n\r\n            $table.find('tr').remove();\r\n            $table.append($record.parents('tr')[0].cloneNode(true));\r\n\r\n            return table;\r\n        },\r\n\r\n        /**\r\n         * Get record context by element\r\n         *\r\n         * @param {Object} elem - original element\r\n         * @returns {Object} draggable record context\r\n         */\r\n        getRecord: function (elem) {\r\n            var ctx = getContext(elem),\r\n                index = _.isFunction(ctx.$index) ? ctx.$index() : ctx.$index;\r\n\r\n            return this.recordsCache()[index];\r\n        }\r\n\r\n    });\r\n});\r\n","Magento_Ui/js/dynamic-rows/dynamic-rows-grid.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    './dynamic-rows'\r\n], function (_, dynamicRows) {\r\n    'use strict';\r\n\r\n    return dynamicRows.extend({\r\n        defaults: {\r\n            dataProvider: '',\r\n            insertData: [],\r\n            map: null,\r\n            cacheGridData: [],\r\n            deleteProperty: false,\r\n            positionProvider: 'position',\r\n            dataLength: 0,\r\n            identificationProperty: 'id',\r\n            identificationDRProperty: 'id',\r\n            listens: {\r\n                'insertData': 'processingInsertData',\r\n                'recordData': 'initElements setToInsertData'\r\n            },\r\n            mappingSettings: {\r\n                enabled: true,\r\n                distinct: true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'insertData'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Set data from recordData to insertData\r\n         */\r\n        setToInsertData: function () {\r\n            var insertData = [],\r\n                obj;\r\n\r\n            if (this.recordData().length && !this.update) {\r\n                this.recordData.each(function (recordData) {\r\n                    obj = {};\r\n                    obj[this.map[this.identificationProperty]] = recordData[this.identificationProperty];\r\n                    insertData.push(obj);\r\n                }, this);\r\n\r\n                this.source.set(this.dataProvider, insertData);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initialize children\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initChildren: function () {\r\n            this.getChildItems().forEach(function (data, index) {\r\n                this.processingAddChild(data, this.startIndex + index, data[this.identificationDRProperty]);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initialize elements from grid\r\n         *\r\n         * @param {Array} data\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initElements: function (data) {\r\n            var newData = this.getNewData(data);\r\n\r\n            this.parsePagesData(data);\r\n\r\n            if (newData.length) {\r\n                if (this.insertData().length) {\r\n                    this.processingAddChild(newData[0], data.length - 1, newData[0][this.identificationProperty]);\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Delete record instance\r\n         * update data provider dataScope\r\n         *\r\n         * @param {String|Number} index - record index\r\n         * @param {String|Number} recordId\r\n         */\r\n        deleteRecord: function (index, recordId) {\r\n            this.updateInsertData(recordId);\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * Updates insertData when record is deleted\r\n         *\r\n         * @param {String|Number} recordId\r\n         */\r\n        updateInsertData: function (recordId) {\r\n            var data = this.getElementData(this.insertData(), recordId),\r\n                prop = this.map[this.identificationDRProperty];\r\n\r\n            this.insertData(_.reject(this.source.get(this.dataProvider), function (recordData) {\r\n                return ~~recordData[prop] === ~~data[prop];\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * Find data object by index\r\n         *\r\n         * @param {Array} array - data collection\r\n         * @param {Number} index - element index\r\n         * @param {String} property - to find by property\r\n         *\r\n         * @returns {Object} data object\r\n         */\r\n        getElementData: function (array, index, property) {\r\n            var obj = {},\r\n                result;\r\n\r\n            property ? obj[property] = index : obj[this.map[this.identificationDRProperty]] = index;\r\n            result = _.findWhere(array, obj);\r\n\r\n            if (!result) {\r\n                property ?\r\n                    obj[property] = index.toString() :\r\n                    obj[this.map[this.identificationDRProperty]] = index.toString();\r\n            }\r\n\r\n            result = _.findWhere(array, obj);\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Processing pages before addChild\r\n         *\r\n         * @param {Object} ctx - element context\r\n         * @param {Number|String} index - element index\r\n         * @param {Number|String} prop - additional property to element\r\n         */\r\n        processingAddChild: function (ctx, index, prop) {\r\n            if (this._elems.length > this.pageSize) {\r\n                return false;\r\n            }\r\n\r\n            this.showSpinner(true);\r\n            this.addChild(ctx, index, prop);\r\n        },\r\n\r\n        /**\r\n         * Contains old data with new\r\n         *\r\n         * @param {Array} data\r\n         *\r\n         * @returns {Array} changed data\r\n         */\r\n        getNewData: function (data) {\r\n            var changes = [],\r\n                tmpObj = {};\r\n\r\n            if (data.length !== this.relatedData.length) {\r\n                data.forEach(function (obj) {\r\n                    tmpObj[this.identificationDRProperty] = obj[this.identificationDRProperty];\r\n\r\n                    if (!_.findWhere(this.relatedData, tmpObj)) {\r\n                        changes.push(obj);\r\n                    }\r\n                }, this);\r\n            }\r\n\r\n            return changes;\r\n        },\r\n\r\n        /**\r\n         * Processing insert data\r\n         *\r\n         * @param {Array} data\r\n         */\r\n        processingInsertData: function (data) {\r\n            var changes,\r\n                obj = {};\r\n\r\n            changes = this._checkGridData(data);\r\n            this.cacheGridData = data;\r\n\r\n            if (changes.length) {\r\n                obj[this.identificationDRProperty] = changes[0][this.map[this.identificationProperty]];\r\n\r\n                if (_.findWhere(this.recordData(), obj)) {\r\n                    return false;\r\n                }\r\n\r\n                changes.each(function (changedObject) {\r\n                    this.mappingValue(changedObject);\r\n                }, this);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Mapping value from grid\r\n         *\r\n         * @param {Array} data\r\n         */\r\n        mappingValue: function (data) {\r\n            var obj = {},\r\n                tmpObj = {};\r\n\r\n            if (this.mappingSettings.enabled) {\r\n                _.each(this.map, function (prop, index) {\r\n                    obj[index] = !_.isUndefined(data[prop]) ? data[prop] : '';\r\n                }, this);\r\n            } else {\r\n                obj = data;\r\n            }\r\n\r\n            if (this.mappingSettings.distinct) {\r\n                tmpObj[this.identificationDRProperty] = obj[this.identificationDRProperty];\r\n\r\n                if (_.findWhere(this.recordData(), tmpObj)) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            if (!obj.hasOwnProperty(this.positionProvider)) {\r\n                this.setMaxPosition();\r\n                obj[this.positionProvider] = this.maxPosition;\r\n            }\r\n\r\n            this.source.set(this.dataScope + '.' + this.index + '.' + this.recordData().length, obj);\r\n        },\r\n\r\n        /**\r\n         * Check changed records\r\n         *\r\n         * @param {Array} data - array with records data\r\n         * @returns {Array} Changed records\r\n         */\r\n        _checkGridData: function (data) {\r\n            var cacheLength = this.cacheGridData.length,\r\n                curData = data.length,\r\n                max = cacheLength > curData ? this.cacheGridData : data,\r\n                changes = [],\r\n                obj = {};\r\n\r\n            max.each(function (record, index) {\r\n                obj[this.map[this.identificationDRProperty]] = record[this.map[this.identificationDRProperty]];\r\n\r\n                if (!_.where(this.cacheGridData, obj).length) {\r\n                    changes.push(data[index]);\r\n                }\r\n            }, this);\r\n\r\n            return changes;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/dynamic-rows/dynamic-rows.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'mageUtils',\r\n    'underscore',\r\n    'uiLayout',\r\n    'uiCollection',\r\n    'uiRegistry',\r\n    'mage/translate'\r\n], function (ko, utils, _, layout, uiCollection, registry, $t) {\r\n    'use strict';\r\n\r\n    return uiCollection.extend({\r\n        defaults: {\r\n            defaultRecord: false,\r\n            columnsHeader: true,\r\n            columnsHeaderAfterRender: false,\r\n            columnsHeaderClasses: '',\r\n            labels: [],\r\n            recordTemplate: 'record',\r\n            collapsibleHeader: false,\r\n            additionalClasses: {},\r\n            visible: true,\r\n            disabled: false,\r\n            fit: false,\r\n            addButton: true,\r\n            addButtonLabel: $t('Add'),\r\n            recordData: [],\r\n            maxPosition: 0,\r\n            deleteProperty: 'delete',\r\n            identificationProperty: 'record_id',\r\n            deleteValue: true,\r\n            showSpinner: true,\r\n            isDifferedFromDefault: false,\r\n            fallbackResetTpl: 'ui/form/element/helper/fallback-reset-link',\r\n            dndConfig: {\r\n                name: '${ $.name }_dnd',\r\n                component: 'Magento_Ui/js/dynamic-rows/dnd',\r\n                template: 'ui/dynamic-rows/cells/dnd',\r\n                recordsProvider: '${ $.name }',\r\n                enabled: true\r\n            },\r\n            templates: {\r\n                record: {\r\n                    parent: '${ $.$data.collection.name }',\r\n                    name: '${ $.$data.index }',\r\n                    dataScope: '${ $.$data.collection.index }.${ $.name }',\r\n                    nodeTemplate: '${ $.parent }.${ $.$data.collection.recordTemplate }'\r\n                }\r\n            },\r\n            links: {\r\n                recordData: '${ $.provider }:${ $.dataScope }.${ $.index }'\r\n            },\r\n            listens: {\r\n                visible: 'setVisible',\r\n                disabled: 'setDisabled',\r\n                childTemplate: 'initHeader',\r\n                recordTemplate: 'onUpdateRecordTemplate',\r\n                recordData: 'setDifferedFromDefault parsePagesData',\r\n                currentPage: 'changePage',\r\n                elems: 'checkSpinner'\r\n            },\r\n            modules: {\r\n                dnd: '${ $.dndConfig.name }'\r\n            },\r\n            pages: 1,\r\n            pageSize: 20,\r\n            relatedData: [],\r\n            currentPage: 1,\r\n            startIndex: 0\r\n        },\r\n\r\n        /**\r\n         * Extends instance with default config, calls initialize of parent\r\n         * class, calls initChildren method, set observe variable.\r\n         * Use parent \"track\" method - wrapper observe array\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initChildren()\r\n                .initDnd()\r\n                .setColumnsHeaderListener()\r\n                .initDefaultRecord()\r\n                .checkSpinner();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track('childTemplate')\r\n                .observe([\r\n                    'pages',\r\n                    'currentPage',\r\n                    'recordData',\r\n                    'columnsHeader',\r\n                    'visible',\r\n                    'disabled',\r\n                    'labels',\r\n                    'showSpinner',\r\n                    'isDifferedFromDefault'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Init DND module\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initDnd: function () {\r\n            if (this.dndConfig.enabled) {\r\n                layout([this.dndConfig]);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Check columnsHeaderAfterRender property,\r\n         * and set listener on elems if needed\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        setColumnsHeaderListener: function () {\r\n            if (this.columnsHeaderAfterRender) {\r\n                this.on('recordData', this.renderColumnsHeader.bind(this));\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Render column header\r\n         */\r\n        renderColumnsHeader: function () {\r\n            this.recordData().length ? this.columnsHeader(true) : this.columnsHeader(false);\r\n        },\r\n\r\n        /**\r\n         * Init default record\r\n         *\r\n         * @returns Chainable.\r\n         */\r\n        initDefaultRecord: function () {\r\n            if (this.defaultRecord && !this.recordData().length) {\r\n                this.addChild();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Create header template\r\n         *\r\n         * @param {Object} prop - instance obj\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        createHeaderTemplate: function (prop) {\r\n            var visible = prop.visible !== false,\r\n                disabled = _.isUndefined(prop.disabled) ? this.disabled() : prop.disabled;\r\n\r\n            return {\r\n                visible: ko.observable(visible),\r\n                disabled: ko.observable(disabled)\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Init header elements\r\n         */\r\n        initHeader: function () {\r\n            var data;\r\n\r\n            if (!this.labels().length) {\r\n                _.each(this.childTemplate.children, function (cell) {\r\n                    data = this.createHeaderTemplate(cell.config);\r\n\r\n                    cell.config.labelVisible = false;\r\n                    _.extend(data, {\r\n                        label: cell.config.label,\r\n                        name: cell.name,\r\n                        columnsHeaderClasses: cell.config.columnsHeaderClasses\r\n                    });\r\n\r\n                    this.labels.push(data);\r\n                }, this);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set max element position\r\n         *\r\n         * @param {Number} position - element position\r\n         * @param {Object} elem - instance\r\n         */\r\n        setMaxPosition: function (position, elem) {\r\n            if (position) {\r\n                this.checkMaxPosition(position);\r\n                this.sort(position, elem);\r\n            } else {\r\n                this.maxPosition += 1;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Sort element by position\r\n         *\r\n         * @param {Number} position - element position\r\n         * @param {Object} elem - instance\r\n         */\r\n        sort: function (position, elem) {\r\n            var that = this,\r\n                sorted,\r\n                updatedCollection;\r\n\r\n            if (this.elems().filter(function (el) {\r\n                    return el.position;\r\n                }).length !== this.getChildItems().length) {\r\n\r\n                return false;\r\n            }\r\n\r\n            if (!elem.containers.length) {\r\n                registry.get(elem.name, function () {\r\n                    that.sort(position, elem);\r\n                });\r\n\r\n                return false;\r\n            }\r\n\r\n            sorted = this.elems().sort(function (propOne, propTwo) {\r\n                return ~~propOne.position - ~~propTwo.position;\r\n            });\r\n\r\n            updatedCollection = this.updatePosition(sorted, position, elem.name);\r\n            this.elems(updatedCollection);\r\n        },\r\n\r\n        /**\r\n         * Checking loader visibility\r\n         *\r\n         * @param {Array} elems\r\n         */\r\n        checkSpinner: function (elems) {\r\n            this.showSpinner(!(!this.recordData().length || elems && elems.length === this.getChildItems().length));\r\n        },\r\n\r\n        /**\r\n         * Filtering data and calculates the quantity of pages\r\n         *\r\n         * @param {Array} data\r\n         */\r\n        parsePagesData: function (data) {\r\n            var pages;\r\n\r\n            this.relatedData = this.deleteProperty ?\r\n                _.filter(data, function (elem) {\r\n                    return elem[this.deleteProperty] !== this.deleteValue;\r\n                }, this) : data;\r\n\r\n            pages = Math.ceil(this.relatedData.length / this.pageSize) || 1;\r\n            this.pages(pages);\r\n        },\r\n\r\n        /**\r\n         * Get items to rendering on current page\r\n         *\r\n         * @returns {Array} data\r\n         */\r\n        getChildItems: function () {\r\n            this.startIndex = (~~this.currentPage() - 1) * this.pageSize;\r\n\r\n            return this.relatedData.slice(this.startIndex, this.startIndex + this.pageSize);\r\n        },\r\n\r\n        /**\r\n         * Get number of columns\r\n         *\r\n         * @returns {Number} columns\r\n         */\r\n        getColumnsCount: function () {\r\n            return this.labels().length + (this.dndConfig.enabled ? 1 : 0);\r\n        },\r\n\r\n        /**\r\n         * Processing pages before addChild\r\n         *\r\n         * @param {Object} ctx - element context\r\n         * @param {Number|String} index - element index\r\n         * @param {Number|String} prop - additional property to element\r\n         */\r\n        processingAddChild: function (ctx, index, prop) {\r\n            if (this.relatedData.length && this.relatedData.length % this.pageSize === 0) {\r\n                this.clear();\r\n                this.pages(this.pages() + 1);\r\n                this.currentPage(this.pages());\r\n            } else if (~~this.currentPage() !== this.pages()) {\r\n                this.currentPage(this.pages());\r\n            }\r\n\r\n            this.addChild(ctx, index, prop);\r\n        },\r\n\r\n        /**\r\n         * Processing pages before deleteRecord\r\n         *\r\n         * @param {Number|String} index - element index\r\n         * @param {Number|String} recordId\r\n         */\r\n        processingDeleteRecord: function (index, recordId) {\r\n            this.deleteRecord(index, recordId);\r\n\r\n            if (this.getChildItems().length <= 0 && this.pages() !== 1) {\r\n                this.pages(this.pages() - 1);\r\n                this.currentPage(this.pages());\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Change page\r\n         *\r\n         * @param {Number} page - current page\r\n         */\r\n        changePage: function (page) {\r\n            if (page === 1 && !this.recordData().length) {\r\n                return false;\r\n            }\r\n\r\n            if (~~page > this.pages()) {\r\n                this.currentPage(this.pages());\r\n\r\n                return false;\r\n            } else if (~~page < 1) {\r\n                this.currentPage(1);\r\n\r\n                return false;\r\n            }\r\n\r\n            this.clear();\r\n            this.initChildren();\r\n        },\r\n\r\n        /**\r\n         * Check page\r\n         *\r\n         * @returns {Boolean} is page first or not\r\n         */\r\n        isFirst: function () {\r\n            return this.currentPage() === 1;\r\n        },\r\n\r\n        /**\r\n         * Check page\r\n         *\r\n         * @returns {Boolean} is page last or not\r\n         */\r\n        isLast: function () {\r\n            return this.currentPage() === this.pages();\r\n        },\r\n\r\n        /**\r\n         * Change page to next\r\n         */\r\n        nextPage: function () {\r\n            this.currentPage(this.currentPage() + 1);\r\n        },\r\n\r\n        /**\r\n         * Change page to previos\r\n         */\r\n        previousPage: function () {\r\n            this.currentPage(this.currentPage() - 1);\r\n        },\r\n\r\n        /**\r\n         * Check dependency and set position to elements\r\n         *\r\n         * @param {Array} collection - elems\r\n         * @param {Number} position - current position\r\n         * @param {String} elemName - element name\r\n         *\r\n         * @returns {Array} collection\r\n         */\r\n        updatePosition: function (collection, position, elemName) {\r\n            var curPos,\r\n                parsePosition = ~~position,\r\n                result = _.filter(collection, function (record) {\r\n                    return ~~record.position === parsePosition;\r\n                });\r\n\r\n            if (result[1]) {\r\n                curPos = parsePosition + 1;\r\n                result[0].name === elemName ? result[1].position = curPos : result[0].position = curPos;\r\n                this.updatePosition(collection, curPos);\r\n            }\r\n\r\n            return collection;\r\n        },\r\n\r\n        /**\r\n         * Check max elements position and set if max\r\n         *\r\n         * @param {Number} position - current position\r\n         */\r\n        checkMaxPosition: function (position) {\r\n            var max = 0,\r\n                pos;\r\n\r\n            this.elems.each(function (record) {\r\n                pos = ~~record.position;\r\n                pos > max ? max = pos : false;\r\n            });\r\n\r\n            max < position ? max = position : false;\r\n            this.maxPosition = max;\r\n        },\r\n\r\n        /**\r\n         * Remove and set new max position\r\n         */\r\n        removeMaxPosition: function () {\r\n            this.maxPosition = 0;\r\n            this.elems.each(function (record) {\r\n                this.maxPosition < record.position ? this.maxPosition = ~~record.position : false;\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Update record template and rerender elems\r\n         *\r\n         * @param {String} recordName - record name\r\n         */\r\n        onUpdateRecordTemplate: function (recordName) {\r\n            if (recordName) {\r\n                this.recordTemplate = recordName;\r\n                this.reload();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Delete record\r\n         *\r\n         * @param {Number} index - row index\r\n         *\r\n         */\r\n        deleteRecord: function (index, recordId) {\r\n            var recordInstance,\r\n                lastRecord,\r\n                recordsData,\r\n                childs;\r\n\r\n            if (this.deleteProperty) {\r\n                recordInstance = _.find(this.elems(), function (elem) {\r\n                    return elem.index === index;\r\n                });\r\n                recordInstance.destroy();\r\n                this.elems([]);\r\n                this._updateCollection();\r\n                this.removeMaxPosition();\r\n                this.recordData()[recordInstance.index][this.deleteProperty] = this.deleteValue;\r\n                this.recordData.valueHasMutated();\r\n                childs = this.getChildItems();\r\n\r\n                if (childs.length > this.elems().length) {\r\n                    this.addChild(false, childs[childs.length - 1][this.identificationProperty], false);\r\n                }\r\n            } else {\r\n                this.update = true;\r\n\r\n                if (~~this.currentPage() === this.pages()) {\r\n                    lastRecord =\r\n                        _.findWhere(this.elems(), {\r\n                            index: this.startIndex + this.getChildItems().length - 1\r\n                        }) ||\r\n                        _.findWhere(this.elems(), {\r\n                            index: (this.startIndex + this.getChildItems().length - 1).toString()\r\n                        });\r\n\r\n                    lastRecord.destroy();\r\n                }\r\n\r\n                this.removeMaxPosition();\r\n                recordsData = this._getDataByProp(recordId);\r\n                this._updateData(recordsData);\r\n                this.update = false;\r\n            }\r\n\r\n            if (this.pages() < ~~this.currentPage()) {\r\n                this.currentPage(this.pages());\r\n            }\r\n\r\n            this._sort();\r\n        },\r\n\r\n        /**\r\n         * Get data object by some property\r\n         *\r\n         * @param {Number} id - element id\r\n         * @param {String} prop - property\r\n         */\r\n        _getDataByProp: function (id, prop) {\r\n            prop = prop || this.identificationProperty;\r\n\r\n            return _.reject(this.getChildItems(), function (recordData) {\r\n                return ~~recordData[prop] === ~~id;\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Sort elems by position property\r\n         */\r\n        _sort: function () {\r\n            this.elems(this.elems().sort(function (propOne, propTwo) {\r\n                return ~~propOne.position - ~~propTwo.position;\r\n            }));\r\n        },\r\n\r\n        /**\r\n         * Set new data to dataSource,\r\n         * delete element\r\n         *\r\n         * @param {Array} data - record data\r\n         */\r\n        _updateData: function (data) {\r\n            var elems = _.clone(this.elems()),\r\n                path,\r\n                dataArr;\r\n\r\n            dataArr = this.recordData.splice(this.startIndex, this.recordData().length - this.startIndex);\r\n            dataArr.splice(0, this.pageSize);\r\n            elems = _.sortBy(this.elems(), function (elem) {\r\n                return ~~elem.index;\r\n            });\r\n\r\n            data.concat(dataArr).forEach(function (rec, idx) {\r\n                if (elems[idx]) {\r\n                    elems[idx].recordId = rec[this.identificationProperty];\r\n                }\r\n\r\n                if (!rec.position) {\r\n                    rec.position = this.maxPosition;\r\n                    this.setMaxPosition();\r\n                }\r\n\r\n                path = this.dataScope + '.' + this.index + '.' + (this.startIndex + idx);\r\n                this.source.set(path, rec);\r\n            }, this);\r\n\r\n            this.elems(elems);\r\n        },\r\n\r\n        /**\r\n         * Rerender dynamic-rows elems\r\n         */\r\n        reload: function () {\r\n            this.clear();\r\n            this.initChildren(false, true);\r\n        },\r\n\r\n        /**\r\n         * Destroy all dynamic-rows elems\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        clear: function () {\r\n            this.destroyChildren();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Reset data to initial value.\r\n         * Call method reset on child elements.\r\n         */\r\n        reset: function () {\r\n            var elems = this.elems();\r\n\r\n            _.each(elems, function (elem) {\r\n                if (_.isFunction(elem.reset)) {\r\n                    elem.reset();\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Set classes\r\n         *\r\n         * @param {Object} data\r\n         *\r\n         * @returns {Object} Classes\r\n         */\r\n        setClasses: function (data) {\r\n            var additional;\r\n\r\n            if (_.isString(data.additionalClasses)) {\r\n                additional = data.additionalClasses.split(' ');\r\n                data.additionalClasses = {};\r\n\r\n                additional.forEach(function (name) {\r\n                    data.additionalClasses[name] = true;\r\n                });\r\n            }\r\n\r\n            if (!data.additionalClasses) {\r\n                data.additionalClasses = {};\r\n            }\r\n\r\n            _.extend(data.additionalClasses, {\r\n                '_fit': data.fit,\r\n                '_required': data.required,\r\n                '_error': data.error,\r\n                '_empty': !this.elems().length,\r\n                '_no-header': this.columnsHeaderAfterRender || this.collapsibleHeader\r\n            });\r\n\r\n            return data.additionalClasses;\r\n        },\r\n\r\n        /**\r\n         * Initialize children\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initChildren: function () {\r\n            this.showSpinner(true);\r\n            this.getChildItems().forEach(function (data, index) {\r\n                this.addChild(data, this.startIndex + index);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Set visibility to dynamic-rows child\r\n         *\r\n         * @param {Boolean} state\r\n         */\r\n        setVisible: function (state) {\r\n            this.elems.each(function (record) {\r\n                record.setVisible(state);\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Set disabled property to dynamic-rows child\r\n         *\r\n         * @param {Boolean} state\r\n         */\r\n        setDisabled: function (state) {\r\n            this.elems.each(function (record) {\r\n                record.setDisabled(state);\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Set visibility to column\r\n         *\r\n         * @param {Number} index - column index\r\n         * @param {Boolean} state\r\n         */\r\n        setVisibilityColumn: function (index, state) {\r\n            this.elems.each(function (record) {\r\n                record.setVisibilityColumn(index, state);\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Set disabled property to column\r\n         *\r\n         * @param {Number} index - column index\r\n         * @param {Boolean} state\r\n         */\r\n        setDisabledColumn: function (index, state) {\r\n            this.elems.each(function (record) {\r\n                record.setDisabledColumn(index, state);\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Add child components\r\n         *\r\n         * @param {Object} data - component data\r\n         * @param {Number} index - record(row) index\r\n         * @param {Number|String} prop - custom identify property\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        addChild: function (data, index, prop) {\r\n            var template = this.templates.record,\r\n                child;\r\n\r\n            index = index || _.isNumber(index) ? index : this.recordData().length;\r\n            prop = prop || _.isNumber(prop) ? prop : index;\r\n\r\n            _.extend(this.templates.record, {\r\n                recordId: prop\r\n            });\r\n\r\n            child = utils.template(template, {\r\n                collection: this,\r\n                index: index\r\n            });\r\n\r\n            layout([child]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Restore value to default\r\n         */\r\n        restoreToDefault: function () {\r\n            this.recordData(utils.copy(this.default));\r\n            this.reload();\r\n        },\r\n\r\n        /**\r\n         * Update whether value differs from default value\r\n         */\r\n        setDifferedFromDefault: function () {\r\n            var recordData = utils.copy(this.recordData());\r\n\r\n            Array.isArray(recordData) && recordData.forEach(function (item) {\r\n                delete item['record_id'];\r\n            });\r\n\r\n            this.isDifferedFromDefault(!_.isEqual(recordData, this.default));\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/dynamic-rows/record.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'uiCollection'\r\n], function (_, uiCollection) {\r\n    'use strict';\r\n\r\n    return uiCollection.extend({\r\n        defaults: {\r\n            visible: true,\r\n            disabled: true,\r\n            headerLabel: '',\r\n            label: '',\r\n            positionProvider: 'position',\r\n            imports: {\r\n                data: '${ $.provider }:${ $.dataScope }'\r\n            },\r\n            listens: {\r\n                position: 'initPosition',\r\n                elems: 'setColumnVisibileListener'\r\n            },\r\n            links: {\r\n                position: '${ $.name }.${ $.positionProvider }:value'\r\n            },\r\n            exports: {\r\n                recordId: '${ $.provider }:${ $.dataScope }.record_id'\r\n            },\r\n            modules: {\r\n                parentComponent: '${ $.parentName }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Init config\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n\r\n            this.label = this.label || this.headerLabel;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track('position')\r\n                .observe([\r\n                    'visible',\r\n                    'disabled',\r\n                    'data',\r\n                    'label'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Init element position\r\n         *\r\n         * @param {Number} position - element position\r\n         */\r\n        initPosition: function (position) {\r\n            var pos = ~~position;\r\n\r\n            this.parentComponent().setMaxPosition(pos, this);\r\n\r\n            if (!pos) {\r\n                this.position = this.parentComponent().maxPosition;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set column visibility listener\r\n         */\r\n        setColumnVisibileListener: function () {\r\n            var elem = _.find(this.elems(), function (curElem) {\r\n                return !curElem.hasOwnProperty('visibleListener');\r\n            });\r\n\r\n            if (!elem) {\r\n                return;\r\n            }\r\n\r\n            this.childVisibleListener(elem);\r\n\r\n            if (!elem.visibleListener) {\r\n                elem.on('visible', this.childVisibleListener.bind(this, elem));\r\n            }\r\n\r\n            elem.visibleListener = true;\r\n        },\r\n\r\n        /**\r\n         * Child visibility listener\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        childVisibleListener: function (data) {\r\n            this.setVisibilityColumn(data.index, data.visible());\r\n        },\r\n\r\n        /**\r\n         * Reset data to initial value.\r\n         * Call method reset on child elements.\r\n         */\r\n        reset: function () {\r\n            var elems = this.elems(),\r\n                nameIsEqual,\r\n                dataScopeIsEqual;\r\n\r\n            _.each(elems, function (elem) {\r\n                nameIsEqual = this.name + '.' + this.positionProvider === elem.name;\r\n                dataScopeIsEqual = this.dataScope === elem.dataScope;\r\n\r\n                if (!(nameIsEqual || dataScopeIsEqual) && _.isFunction(elem.reset)) {\r\n                    elem.reset();\r\n                }\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Clear data\r\n         *\r\n         * @returns {Collection} Chainable.\r\n         */\r\n        clear: function () {\r\n            var elems = this.elems(),\r\n                nameIsEqual,\r\n                dataScopeIsEqual;\r\n\r\n            _.each(elems, function (elem) {\r\n                nameIsEqual = this.name + '.' + this.positionProvider === elem.name;\r\n                dataScopeIsEqual = this.dataScope === elem.dataScope;\r\n\r\n                if (!(nameIsEqual || dataScopeIsEqual) && _.isFunction(elem.reset)) {\r\n                    elem.clear();\r\n                }\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Get label for collapsible header\r\n         *\r\n         * @param {String} label\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getLabel: function (label) {\r\n            if (_.isString(label)) {\r\n                this.label(label);\r\n            } else if (label && this.label()) {\r\n                return this.label();\r\n            } else {\r\n                this.label(this.headerLabel);\r\n            }\r\n\r\n            return this.label();\r\n        },\r\n\r\n        /**\r\n         * Set visibility to record child\r\n         *\r\n         * @param {Boolean} state\r\n         */\r\n        setVisible: function (state) {\r\n            this.elems.each(function (cell) {\r\n                cell.visible(state);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Set visibility to child by index\r\n         *\r\n         * @param {Number} index\r\n         * @param {Boolean} state\r\n         */\r\n        setVisibilityColumn: function (index, state) {\r\n            var elems = this.elems(),\r\n                curElem = parseInt(index, 10),\r\n                label;\r\n\r\n            if (!this.parentComponent()) {\r\n                return false;\r\n            }\r\n\r\n            if (_.isNaN(curElem)) {\r\n                _.findWhere(elems, {\r\n                    index: index\r\n                }).visible(state);\r\n                label = _.findWhere(this.parentComponent().labels(), {\r\n                    name: index\r\n                });\r\n                label.visible() !== state ? label.visible(state) : false;\r\n            } else {\r\n                elems[curElem].visible(state);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set disabled to child\r\n         *\r\n         * @param {Boolean} state\r\n         */\r\n        setDisabled: function (state) {\r\n            this.elems.each(function (cell) {\r\n                cell.disabled(state);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Set disabled to child by index\r\n         *\r\n         * @param {Number} index\r\n         * @param {Boolean} state\r\n         */\r\n        setDisabledColumn: function (index, state) {\r\n            index = ~~index;\r\n            this.elems()[index].disabled(state);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/adapter.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'Magento_Ui/js/form/adapter/buttons'\r\n], function ($, _, buttons) {\r\n    'use strict';\r\n\r\n    var selectorPrefix = '',\r\n        eventPrefix;\r\n\r\n    /**\r\n     * Initialize listener.\r\n     *\r\n     * @param {Function} callback\r\n     * @param {String} action\r\n     */\r\n    function initListener(callback, action) {\r\n        var selector    = selectorPrefix ? selectorPrefix + ' ' + buttons[action] : buttons[action],\r\n            elem        = $(selector)[0];\r\n\r\n        if (!elem) {\r\n            return;\r\n        }\r\n\r\n        if (elem.onclick) {\r\n            elem.onclick = null;\r\n        }\r\n\r\n        $(elem).on('click' + eventPrefix, callback);\r\n    }\r\n\r\n    /**\r\n     * Destroy listener.\r\n     *\r\n     * @param {String} action\r\n     */\r\n    function destroyListener(action) {\r\n        var selector    = selectorPrefix ? selectorPrefix + ' ' + buttons[action] : buttons[action],\r\n            elem        = $(selector)[0];\r\n\r\n        if (!elem) {\r\n            return;\r\n        }\r\n\r\n        if (elem.onclick) {\r\n            elem.onclick = null;\r\n        }\r\n\r\n        $(elem).off('click' + eventPrefix);\r\n    }\r\n\r\n    return {\r\n\r\n        /**\r\n         * Attaches events handlers.\r\n         *\r\n         * @param {Object} handlers\r\n         * @param {String} selectorPref\r\n         * @param {String} eventPref\r\n         */\r\n        on: function (handlers, selectorPref, eventPref) {\r\n            selectorPrefix = selectorPrefix || selectorPref;\r\n            eventPrefix = eventPref;\r\n            _.each(handlers, initListener);\r\n            selectorPrefix = '';\r\n        },\r\n\r\n        /**\r\n         * Removes events handlers.\r\n         *\r\n         * @param {Object} handlers\r\n         * @param {String} eventPref\r\n         */\r\n        off: function (handlers, eventPref) {\r\n            eventPrefix = eventPref;\r\n            _.each(handlers, destroyListener);\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/form/button-adapter.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiClass',\r\n    'jquery',\r\n    'underscore',\r\n    'uiRegistry'\r\n], function (Class, $, _, registry) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n\r\n        /**\r\n         * Initialize actions and adapter.\r\n         *\r\n         * @param {Object} config\r\n         * @param {Element} elem\r\n         * @returns {Object}\r\n         */\r\n        initialize: function (config, elem) {\r\n            return this._super()\r\n                .initActions()\r\n                .initAdapter(elem);\r\n        },\r\n\r\n        /**\r\n         * Creates callback from declared actions.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        initActions: function () {\r\n            var callbacks = [];\r\n\r\n            _.each(this.actions, function (action) {\r\n                callbacks.push({\r\n                    action: registry.async(action.targetName),\r\n                    args: _.union([action.actionName], action.params)\r\n                });\r\n            });\r\n\r\n            /**\r\n             * Callback function.\r\n             */\r\n            this.callback = function () {\r\n                _.each(callbacks, function (callback) {\r\n                    callback.action.apply(callback.action, callback.args);\r\n                });\r\n            };\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Attach callback handler on button.\r\n         *\r\n         * @param {Element} elem\r\n         */\r\n        initAdapter: function (elem) {\r\n            $(elem).on('click', this.callback);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/client.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiClass'\r\n], function ($, _, utils, Class) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Before save validate request.\r\n     *\r\n     * @param {Object} data\r\n     * @param {String} url\r\n     * @param {String} selectorPrefix\r\n     * @param {String} messagesClass\r\n     * @returns {*}\r\n     */\r\n    function beforeSave(data, url, selectorPrefix, messagesClass) {\r\n        var save = $.Deferred();\r\n\r\n        data = utils.serialize(utils.filterFormData(data));\r\n\r\n        data['form_key'] = window.FORM_KEY;\r\n\r\n        if (!url || url === 'undefined') {\r\n            return save.resolve();\r\n        }\r\n\r\n        $('body').trigger('processStart');\r\n\r\n        $.ajax({\r\n            url: url,\r\n            data: data,\r\n\r\n            /**\r\n             * Success callback.\r\n             * @param {Object} resp\r\n             * @returns {Boolean}\r\n             */\r\n            success: function (resp) {\r\n                if (!resp.error) {\r\n                    save.resolve();\r\n\r\n                    return true;\r\n                }\r\n\r\n                $('body').notification('clear');\r\n                $.each(resp.messages || [resp.message] || [], function (key, message) {\r\n                    $('body').notification('add', {\r\n                        error: resp.error,\r\n                        message: message,\r\n\r\n                        /**\r\n                         * Insert method.\r\n                         *\r\n                         * @param {String} msg\r\n                         */\r\n                        insertMethod: function (msg) {\r\n                            var $wrapper = $('<div/>').addClass(messagesClass).html(msg);\r\n\r\n                            $('.page-main-actions', selectorPrefix).after($wrapper);\r\n                        }\r\n                    });\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Complete callback.\r\n             */\r\n            complete: function () {\r\n                $('body').trigger('processStop');\r\n            }\r\n        });\r\n\r\n        return save.promise();\r\n    }\r\n\r\n    return Class.extend({\r\n\r\n        /**\r\n         * Assembles data and submits it using 'utils.submit' method\r\n         */\r\n        save: function (data, options) {\r\n            var url = this.urls.beforeSave,\r\n                save = this._save.bind(this, data, options);\r\n\r\n            beforeSave(data, url, this.selectorPrefix, this.messagesClass).then(save);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Save data.\r\n         *\r\n         * @param {Object} data\r\n         * @param {Object} options\r\n         * @returns {Object}\r\n         * @private\r\n         */\r\n        _save: function (data, options) {\r\n            var url = this.urls.save;\r\n\r\n            $('body').trigger('processStart');\r\n            options = options || {};\r\n\r\n            if (!options.redirect) {\r\n                url += 'back/edit';\r\n            }\r\n\r\n            if (options.ajaxSave) {\r\n                utils.ajaxSubmit({\r\n                    url: url,\r\n                    data: data\r\n                }, options);\r\n\r\n                $('body').trigger('processStop');\r\n\r\n                return this;\r\n            }\r\n\r\n            utils.submit({\r\n                url: url,\r\n                data: data\r\n            }, options.attributes);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/form.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/lib/spinner',\r\n    'rjsResolver',\r\n    './adapter',\r\n    'uiCollection',\r\n    'mageUtils',\r\n    'jquery',\r\n    'Magento_Ui/js/core/app',\r\n    'mage/validation'\r\n], function (_, loader, resolver, adapter, Collection, utils, $, app) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Format params\r\n     *\r\n     * @param {Object} params\r\n     * @returns {Array}\r\n     */\r\n    function prepareParams(params) {\r\n        var result = '?';\r\n\r\n        _.each(params, function (value, key) {\r\n            result += key + '=' + value + '&';\r\n        });\r\n\r\n        return result.slice(0, -1);\r\n    }\r\n\r\n    /**\r\n     * Collect form data.\r\n     *\r\n     * @param {Array} items\r\n     * @returns {Object}\r\n     */\r\n    function collectData(items) {\r\n        var result = {},\r\n            name;\r\n\r\n        items = Array.prototype.slice.call(items);\r\n\r\n        items.forEach(function (item) {\r\n            switch (item.type) {\r\n                case 'checkbox':\r\n                    result[item.name] = +!!item.checked;\r\n                    break;\r\n\r\n                case 'radio':\r\n                    if (item.checked) {\r\n                        result[item.name] = item.value;\r\n                    }\r\n                    break;\r\n\r\n                case 'select-multiple':\r\n                    name = item.name.substring(0, item.name.length - 2); //remove [] from the name ending\r\n                    result[name] = _.pluck(item.selectedOptions, 'value');\r\n                    break;\r\n\r\n                default:\r\n                    result[item.name] = item.value;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Makes ajax request\r\n     *\r\n     * @param {Object} params\r\n     * @param {Object} data\r\n     * @param {String} url\r\n     * @returns {*}\r\n     */\r\n    function makeRequest(params, data, url) {\r\n        var save = $.Deferred();\r\n\r\n        data = utils.serialize(data);\r\n        data['form_key'] = window.FORM_KEY;\r\n\r\n        if (!url) {\r\n            save.resolve();\r\n        }\r\n\r\n        $('body').trigger('processStart');\r\n\r\n        $.ajax({\r\n            url: url + prepareParams(params),\r\n            data: data,\r\n            dataType: 'json',\r\n\r\n            /**\r\n             * Success callback.\r\n             * @param {Object} resp\r\n             * @returns {Boolean}\r\n             */\r\n            success: function (resp) {\r\n                if (resp.ajaxExpired) {\r\n                    window.location.href = resp.ajaxRedirect;\r\n                }\r\n\r\n                if (!resp.error) {\r\n                    save.resolve(resp);\r\n\r\n                    return true;\r\n                }\r\n\r\n                $('body').notification('clear');\r\n                $.each(resp.messages, function (key, message) {\r\n                    $('body').notification('add', {\r\n                        error: resp.error,\r\n                        message: message,\r\n\r\n                        /**\r\n                         * Inserts message on page\r\n                         * @param {String} msg\r\n                         */\r\n                        insertMethod: function (msg) {\r\n                            $('.page-main-actions').after(msg);\r\n                        }\r\n                    });\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Complete callback.\r\n             */\r\n            complete: function () {\r\n                $('body').trigger('processStop');\r\n            }\r\n        });\r\n\r\n        return save.promise();\r\n    }\r\n\r\n    /**\r\n     * Check if fields is valid.\r\n     *\r\n     * @param {Array}items\r\n     * @returns {Boolean}\r\n     */\r\n    function isValidFields(items) {\r\n        var result = true;\r\n\r\n        _.each(items, function (item) {\r\n            if (!$.validator.validateSingleElement(item)) {\r\n                result = false;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            additionalFields: [],\r\n            additionalInvalid: false,\r\n            selectorPrefix: '.page-content',\r\n            messagesClass: 'messages',\r\n            eventPrefix: '.${ $.index }',\r\n            ajaxSave: false,\r\n            ajaxSaveType: 'default',\r\n            imports: {\r\n                reloadUrl: '${ $.provider}:reloadUrl'\r\n            },\r\n            listens: {\r\n                selectorPrefix: 'destroyAdapter initAdapter',\r\n                '${ $.name }.${ $.reloadItem }': 'params.set reload'\r\n            },\r\n            exports: {\r\n                selectorPrefix: '${ $.provider }:client.selectorPrefix',\r\n                messagesClass: '${ $.provider }:client.messagesClass'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super()\r\n                .initAdapter();\r\n\r\n            resolver(this.hideLoader, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            return this._super()\r\n                .observe([\r\n                    'responseData',\r\n                    'responseStatus'\r\n                ]);\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initConfig: function () {\r\n            this._super();\r\n\r\n            this.selector = '[data-form-part=' + this.namespace + ']';\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initialize adapter handlers.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        initAdapter: function () {\r\n            adapter.on({\r\n                'reset': this.reset.bind(this),\r\n                'save': this.save.bind(this, true, {}),\r\n                'saveAndContinue': this.save.bind(this, false, {})\r\n            }, this.selectorPrefix, this.eventPrefix);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Destroy adapter handlers.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        destroyAdapter: function () {\r\n            adapter.off([\r\n                'reset',\r\n                'save',\r\n                'saveAndContinue'\r\n            ], this.eventPrefix);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Hide loader.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        hideLoader: function () {\r\n            loader.get(this.name).hide();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Validate and save form.\r\n         *\r\n         * @param {String} redirect\r\n         * @param {Object} data\r\n         */\r\n        save: function (redirect, data) {\r\n            this.validate();\r\n\r\n            if (!this.additionalInvalid && !this.source.get('params.invalid')) {\r\n                this.setAdditionalData(data)\r\n                    .submit(redirect);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set additional data to source before form submit and after validation.\r\n         *\r\n         * @param {Object} data\r\n         * @returns {Object}\r\n         */\r\n        setAdditionalData: function (data) {\r\n            _.each(data, function (value, name) {\r\n                this.source.set('data.' + name, value);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Submits form\r\n         *\r\n         * @param {String} redirect\r\n         */\r\n        submit: function (redirect) {\r\n            var additional = collectData(this.additionalFields),\r\n                source = this.source;\r\n\r\n            _.each(additional, function (value, name) {\r\n                source.set('data.' + name, value);\r\n            });\r\n\r\n            source.save({\r\n                redirect: redirect,\r\n                ajaxSave: this.ajaxSave,\r\n                ajaxSaveType: this.ajaxSaveType,\r\n                response: {\r\n                    data: this.responseData,\r\n                    status: this.responseStatus\r\n                },\r\n                attributes: {\r\n                    id: this.namespace\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Validates each element and returns true, if all elements are valid.\r\n         */\r\n        validate: function () {\r\n            this.additionalFields = document.querySelectorAll(this.selector);\r\n            this.source.set('params.invalid', false);\r\n            this.source.trigger('data.validate');\r\n            this.set('additionalInvalid', !isValidFields(this.additionalFields));\r\n        },\r\n\r\n        /**\r\n         * Trigger reset form data.\r\n         */\r\n        reset: function () {\r\n            this.source.trigger('data.reset');\r\n        },\r\n\r\n        /**\r\n         * Trigger overload form data.\r\n         */\r\n        overload: function () {\r\n            this.source.trigger('data.overload');\r\n        },\r\n\r\n        /**\r\n         * Updates data from server.\r\n         */\r\n        reload: function () {\r\n            makeRequest(this.params, this.data, this.reloadUrl).then(function (data) {\r\n                app(data, true);\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/provider.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiElement',\r\n    './client',\r\n    'mageUtils'\r\n], function (_, Element, Client, utils) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            clientConfig: {\r\n                urls: {\r\n                    save: '${ $.submit_url }',\r\n                    beforeSave: '${ $.validate_url }'\r\n                }\r\n            },\r\n            ignoreTmpls: {\r\n                data: true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes provider component.\r\n         *\r\n         * @returns {Provider} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initClient();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes client component.\r\n         *\r\n         * @returns {Provider} Chainable.\r\n         */\r\n        initClient: function () {\r\n            this.client = new Client(this.clientConfig);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Saves currently available data.\r\n         *\r\n         * @param {Object} [options] - Addtitional request options.\r\n         * @returns {Provider} Chainable.\r\n         */\r\n        save: function (options) {\r\n            var data = this.get('data');\r\n\r\n            this.client.save(data, options);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Update data that stored in provider.\r\n         *\r\n         * @param {Boolean} isProvider\r\n         * @param {Object} newData\r\n         * @param {Object} oldData\r\n         *\r\n         * @returns {Provider}\r\n         */\r\n        updateConfig: function (isProvider, newData, oldData) {\r\n            if (isProvider === true) {\r\n                this.setData(oldData, newData, this);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *  Set data to provder based on current data.\r\n         *\r\n         * @param {Object} oldData\r\n         * @param {Object} newData\r\n         * @param {Provider} current\r\n         * @param {String} parentPath\r\n         */\r\n        setData: function (oldData, newData, current, parentPath) {\r\n\r\n            /* eslint-disable eqeqeq */\r\n            _.each(newData, function (val, key) {\r\n                if (_.isObject(val) || _.isArray(val)) {\r\n                    this.setData(oldData[key], val, current[key], utils.fullPath(parentPath, key));\r\n                } else if (val != oldData[key] && oldData[key] == current[key]) {\r\n                    this.set(utils.fullPath(parentPath, key), val);\r\n                }\r\n            }, this);\r\n\r\n            /* eslint-enable eqeqeq */\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/switcher.js":"define([\r\n    'underscore',\r\n    'uiRegistry',\r\n    'uiClass'\r\n], function (_, registry, Class) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n            rules: []\r\n        },\r\n\r\n        /**\r\n         * Initializes instance of a DataSwitcher.\r\n         *\r\n         * @returns {DataSwitcher} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initRules();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @returns {DataSwitcher} Chainable.\r\n         */\r\n        initRules: function () {\r\n            this.rules.forEach(this.initRule, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Object} rule - Rule definition.\r\n         * @returns {DataSwitcher} Chainable.\r\n         */\r\n        initRule: function (rule) {\r\n            var handler = this.onValueChange.bind(this, rule);\r\n\r\n            if (!rule.target) {\r\n                rule.target = this.target;\r\n            }\r\n\r\n            if (!rule.property) {\r\n                rule.property = this.property;\r\n            }\r\n\r\n            registry.get(rule.target, function (target) {\r\n                this.applyRule(rule, target.get(rule.property));\r\n                target.on(rule.property, handler);\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Object} rule - Rule definition.\r\n         * @returns {DataSwitcher} Chainable.\r\n         */\r\n        addRule: function (rule) {\r\n            this.rules.push(rule);\r\n            this.initRule(rule);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Object} rule - Rule object.\r\n         * @param {*} value - Current value associated with a rule.\r\n         */\r\n        applyRule: function (rule, value) {\r\n            var actions = rule.actions;\r\n\r\n            //TODO Refactor this logic in scope of MAGETWO-48585\r\n            /* eslint-disable eqeqeq */\r\n            if (rule.value != value) {\r\n                return;\r\n            } else if (rule.strict) {\r\n                return;\r\n            }\r\n\r\n            /* eslint-enable eqeqeq */\r\n            actions.forEach(this.applyAction, this);\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Object} action - Action object.\r\n         */\r\n        applyAction: function (action) {\r\n            registry.get(action.target, function (target) {\r\n                var callback = target[action.callback];\r\n\r\n                callback.apply(target, action.params || []);\r\n            });\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Object} rule - Rules object.\r\n         * @param {*} value - Current value associated with a rule.\r\n         */\r\n        onValueChange: function (rule, value) {\r\n            this.applyRule(rule, value);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/adapter/buttons.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine(function () {\r\n    'use strict';\r\n\r\n    return {\r\n        'reset': '#reset',\r\n        'save': '#save',\r\n        'saveAndContinue': '#save_and_continue'\r\n    };\r\n});\r\n","Magento_Ui/js/form/components/area.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    './tab'\r\n], function (_, Tab) {\r\n    'use strict';\r\n\r\n    return Tab.extend({\r\n        defaults: {\r\n            uniqueNs:   'params.activeArea',\r\n            template:   'ui/area',\r\n            changed:    false,\r\n            loading:    false\r\n        },\r\n\r\n        /**\r\n         * Extends instance with defaults. Invokes parent initialize method.\r\n         * Calls initListeners and pushParams methods.\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(this, 'onChildrenUpdate', 'onContentLoading');\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Calls initObservable of parent class.\r\n         * Defines observable properties of instance.\r\n         * @return {Object} - reference to instance\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('changed loading');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls parent's initElement method.\r\n         * Assignes callbacks on various events of incoming element.\r\n         * @param  {Object} elem\r\n         * @return {Object} - reference to instance\r\n         */\r\n        initElement: function (elem) {\r\n            this._super();\r\n\r\n            elem.on({\r\n                'update':   this.onChildrenUpdate,\r\n                'loading':  this.onContentLoading\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Is being invoked on children update.\r\n         * Sets changed property to one incoming.\r\n         * Invokes setActive method if settings\r\n         * contain makeVisible property set to true.\r\n         *\r\n         * @param  {Boolean} hasChanged\r\n         */\r\n        onChildrenUpdate: function (hasChanged) {\r\n            if (!hasChanged) {\r\n                hasChanged = _.some(this.delegate('hasChanged'));\r\n            }\r\n\r\n            this.changed(hasChanged);\r\n        },\r\n\r\n        /**\r\n         * Callback that sets loading property to true.\r\n         */\r\n        onContentLoading: function (isLoading) {\r\n            this.loading(isLoading);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/button.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiElement',\r\n    'uiRegistry',\r\n    'uiLayout',\r\n    'mageUtils'\r\n], function (Element, registry, layout, utils) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            additionalClasses: {},\r\n            displayArea: 'outsideGroup',\r\n            displayAsLink: false,\r\n            elementTmpl: 'ui/form/element/button',\r\n            template: 'ui/form/components/button/simple',\r\n            visible: true,\r\n            disabled: false,\r\n            title: ''\r\n        },\r\n\r\n        /**\r\n         * Initializes component.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initialize: function () {\r\n            return this._super()\r\n                ._setClasses();\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            return this._super()\r\n                .observe([\r\n                    'visible',\r\n                    'disabled',\r\n                    'title'\r\n                ]);\r\n        },\r\n\r\n        /**\r\n         * Performs configured actions\r\n         */\r\n        action: function () {\r\n            this.actions.forEach(this.applyAction, this);\r\n        },\r\n\r\n        /**\r\n         * Apply action on target component,\r\n         * but previously create this component from template if it is not existed\r\n         *\r\n         * @param {Object} action - action configuration\r\n         */\r\n        applyAction: function (action) {\r\n            var targetName = action.targetName,\r\n                params = utils.copy(action.params) || [],\r\n                actionName = action.actionName,\r\n                target;\r\n\r\n            if (!registry.has(targetName)) {\r\n                this.getFromTemplate(targetName);\r\n            }\r\n            target = registry.async(targetName);\r\n\r\n            if (target && typeof target === 'function' && actionName) {\r\n                params.unshift(actionName);\r\n                target.apply(target, params);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Create target component from template\r\n         *\r\n         * @param {Object} targetName - name of component,\r\n         * that supposed to be a template and need to be initialized\r\n         */\r\n        getFromTemplate: function (targetName) {\r\n            var parentName = targetName.split('.'),\r\n                index = parentName.pop(),\r\n                child;\r\n\r\n            parentName = parentName.join('.');\r\n            child = utils.template({\r\n                parent: parentName,\r\n                name: index,\r\n                nodeTemplate: targetName\r\n            });\r\n            layout([child]);\r\n        },\r\n\r\n        /**\r\n         * Extends 'additionalClasses' object.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        _setClasses: function () {\r\n            if (typeof this.additionalClasses === 'string') {\r\n                this.additionalClasses = this.additionalClasses\r\n                    .trim()\r\n                    .split(' ')\r\n                    .reduce(function (classes, name) {\r\n                        classes[name] = true;\r\n\r\n                        return classes;\r\n                    }, {}\r\n                );\r\n            }\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/collection.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiRegistry',\r\n    'uiComponent',\r\n    'uiLayout',\r\n    'Magento_Ui/js/modal/confirm'\r\n], function (_, utils, registry, Component, layout, confirm) {\r\n    'use strict';\r\n\r\n    var childTemplate = {\r\n        parent: '${ $.$data.name }',\r\n        name: '${ $.$data.childIndex }',\r\n        dataScope: '${ $.name }',\r\n        nodeTemplate: '${ $.$data.name }.${ $.$data.itemTemplate }'\r\n    };\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            lastIndex: 0,\r\n            template: 'ui/form/components/collection'\r\n        },\r\n\r\n        /**\r\n         * Extends instance with default config, calls initialize of parent\r\n         * class, calls initChildren method.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initChildren();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Activates the incoming child and triggers the update event.\r\n         *\r\n         * @param {Object} elem - Incoming child.\r\n         */\r\n        initElement: function (elem) {\r\n            this._super();\r\n\r\n            elem.activate();\r\n\r\n            this.bubble('update');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Loops over corresponding data in data storage,\r\n         * creates child for each and pushes it's identifier to initialItems array.\r\n         *\r\n         * @returns {Collection} Chainable.\r\n         */\r\n        initChildren: function () {\r\n            var children = this.source.get(this.dataScope),\r\n                initial = this.initialItems = [];\r\n\r\n            _.each(children, function (item, index) {\r\n                initial.push(index);\r\n                this.addChild(index);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates new item of collection, based on incoming 'index'.\r\n         * If not passed creates one with 'new_' prefix.\r\n         *\r\n         * @param {String|Object} [index] - Index of a child.\r\n         * @returns {Collection} Chainable.\r\n         */\r\n        addChild: function (index) {\r\n            this.childIndex = !_.isString(index) ?\r\n                'new_' + this.lastIndex++ :\r\n                index;\r\n\r\n            layout([utils.template(childTemplate, this)]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returnes true if current set of items differ from initial one,\r\n         * or if some child has been changed.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasChanged: function () {\r\n            var initial = this.initialItems,\r\n                current = this.elems.pluck('index'),\r\n                changed = !utils.equalArrays(initial, current);\r\n\r\n            return changed || this.elems.some(function (elem) {\r\n                return _.some(elem.delegate('hasChanged'));\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Initiates validation of its' children components.\r\n         *\r\n         * @returns {Array} An array of validation results.\r\n         */\r\n        validate: function () {\r\n            var elems;\r\n\r\n            this.allValid = true;\r\n\r\n            elems = this.elems.sortBy(function (elem) {\r\n                return !elem.active();\r\n            });\r\n\r\n            elems = elems.map(this._validate, this);\r\n\r\n            return _.flatten(elems);\r\n        },\r\n\r\n        /**\r\n         * Iterator function for components validation.\r\n         * Activates first invalid child component.\r\n         *\r\n         * @param {Object} elem - Element to run validation on.\r\n         * @returns {Array} An array of validation results.\r\n         */\r\n        _validate: function (elem) {\r\n            var result = elem.delegate('validate'),\r\n                invalid;\r\n\r\n            invalid = _.some(result, function (item) {\r\n                return !item.valid;\r\n            });\r\n\r\n            if (this.allValid && invalid) {\r\n                this.allValid = false;\r\n\r\n                elem.activate();\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Creates function that removes element\r\n         * from collection using '_removeChild' method.\r\n         * @param  {Object} elem - Element that should be removed.\r\n         * @returns {Function}\r\n         *      Since this method is used by 'click' binding,\r\n         *      it requires function to invoke.\r\n         */\r\n        removeAddress: function (elem) {\r\n            var self = this;\r\n\r\n            confirm({\r\n                content: this.removeMessage,\r\n                actions: {\r\n                    confirm: function () {\r\n                        self._removeAddress(elem)\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Removes elememt from both collection and data storage,\r\n         * activates first element if removed one was active,\r\n         * triggers 'update' event.\r\n         *\r\n         * @param {Object} elem - Element to remove.\r\n         */\r\n        _removeAddress: function (elem) {\r\n            var isActive = elem.active(),\r\n                first;\r\n\r\n            elem.destroy();\r\n\r\n            first = this.elems.first();\r\n\r\n            if (first && isActive) {\r\n                first.activate();\r\n            }\r\n\r\n            this.bubble('update');\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/fieldset.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/lib/collapsible',\r\n    'underscore'\r\n], function (Collapsible, _) {\r\n    'use strict';\r\n\r\n    return Collapsible.extend({\r\n        defaults: {\r\n            template: 'ui/form/fieldset',\r\n            collapsible: false,\r\n            changed: false,\r\n            loading: false,\r\n            error: false,\r\n            opened: false,\r\n            level: 0,\r\n            visible: true,\r\n            disabled: false,\r\n            listens: {\r\n                'opened': 'onVisibilityChange'\r\n            },\r\n            additionalClasses: {}\r\n        },\r\n\r\n        /**\r\n         * Extends instance with defaults. Invokes parent initialize method.\r\n         * Calls initListeners and pushParams methods.\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(this, 'onChildrenUpdate', 'onChildrenError', 'onContentLoading');\r\n\r\n            return this._super()\r\n                ._setClasses();\r\n        },\r\n\r\n        /**\r\n         * Initializes components' configuration.\r\n         *\r\n         * @returns {Fieldset} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n            this._wasOpened = this.opened || !this.collapsible;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls initObservable of parent class.\r\n         * Defines observable properties of instance.\r\n         *\r\n         * @returns {Object} Reference to instance\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('changed loading error visible');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls parent's initElement method.\r\n         * Assignes callbacks on various events of incoming element.\r\n         *\r\n         * @param  {Object} elem\r\n         * @return {Object} - reference to instance\r\n         */\r\n        initElement: function (elem) {\r\n            elem.initContainer(this);\r\n\r\n            elem.on({\r\n                'update':   this.onChildrenUpdate,\r\n                'loading':  this.onContentLoading,\r\n                'error':  this.onChildrenError\r\n            });\r\n\r\n            if (this.disabled) {\r\n                try {\r\n                    elem.disabled(true);\r\n                }\r\n                catch (e) {\r\n\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Is being invoked on children update.\r\n         * Sets changed property to one incoming.\r\n         *\r\n         * @param  {Boolean} hasChanged\r\n         */\r\n        onChildrenUpdate: function (hasChanged) {\r\n            if (!hasChanged) {\r\n                hasChanged = _.some(this.delegate('hasChanged'));\r\n            }\r\n\r\n            this.changed(hasChanged);\r\n        },\r\n\r\n        /**\r\n         * Extends 'additionalClasses' object.\r\n         *\r\n         * @returns {Group} Chainable.\r\n         */\r\n        _setClasses: function () {\r\n            var additional = this.additionalClasses,\r\n                classes;\r\n\r\n            if (_.isString(additional)) {\r\n                additional = this.additionalClasses.split(' ');\r\n                classes = this.additionalClasses = {};\r\n\r\n                additional.forEach(function (name) {\r\n                    classes[name] = true;\r\n                }, this);\r\n            }\r\n\r\n            _.extend(this.additionalClasses, {\r\n                'admin__collapsible-block-wrapper': this.collapsible,\r\n                _show: this.opened,\r\n                _hide: !this.opened,\r\n                _disabled: this.disabled\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Handler of the \"opened\" property changes.\r\n         *\r\n         * @param {Boolean} isOpened\r\n         */\r\n        onVisibilityChange: function (isOpened) {\r\n            if (!this._wasOpened) {\r\n                this._wasOpened = isOpened;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Is being invoked on children validation error.\r\n         * Sets error property to one incoming.\r\n         *\r\n         * @param {String} message - error message.\r\n         */\r\n        onChildrenError: function (message) {\r\n            var hasErrors = this.elems.some('error');\r\n\r\n            this.error(hasErrors || message);\r\n        },\r\n\r\n        /**\r\n         * Callback that sets loading property to true.\r\n         */\r\n        onContentLoading: function (isLoading) {\r\n            this.loading(isLoading);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/group.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiCollection'\r\n], function (_, Collection) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            visible: true,\r\n            label: '',\r\n            showLabel: true,\r\n            required: false,\r\n            template: 'ui/group/group',\r\n            fieldTemplate: 'ui/form/field',\r\n            breakLine: true,\r\n            validateWholeGroup: false,\r\n            additionalClasses: {}\r\n        },\r\n\r\n        /**\r\n         * Extends this with defaults and config.\r\n         * Then calls initObservable, iniListenes and extractData methods.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                ._setClasses();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls initObservable of parent class.\r\n         * Defines observable properties of instance.\r\n         *\r\n         * @return {Object} - reference to instance\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('visible')\r\n                .observe({\r\n                    required: !!+this.required\r\n                });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Extends 'additionalClasses' object.\r\n         *\r\n         * @returns {Group} Chainable.\r\n         */\r\n        _setClasses: function () {\r\n            var additional = this.additionalClasses,\r\n                classes;\r\n\r\n            if (_.isString(additional)) {\r\n                additional = this.additionalClasses.split(' ');\r\n                classes = this.additionalClasses = {};\r\n\r\n                additional.forEach(function (name) {\r\n                    classes[name] = true;\r\n                }, this);\r\n            }\r\n\r\n            _.extend(this.additionalClasses, {\r\n                'admin__control-grouped': !this.breakLine,\r\n                'admin__control-fields': this.breakLine,\r\n                required:   this.required,\r\n                _error:     this.error,\r\n                _disabled:  this.disabled\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Defines if group has only one element.\r\n         * @return {Boolean}\r\n         */\r\n        isSingle: function () {\r\n            return this.elems.getLength() === 1;\r\n        },\r\n\r\n        /**\r\n         * Defines if group has multiple elements.\r\n         * @return {Boolean}\r\n         */\r\n        isMultiple: function () {\r\n            return this.elems.getLength() > 1;\r\n        },\r\n\r\n        /**\r\n         * Returns an array of child components previews.\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getPreview: function () {\r\n            return this.elems.map('getPreview');\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/html.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'uiComponent'\r\n], function ($, _, Component) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            content:        '',\r\n            showSpinner:    false,\r\n            loading:        false,\r\n            visible:        true,\r\n            template:       'ui/content/content',\r\n            additionalClasses: {},\r\n            ignoreTmpls: {\r\n                content: true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Extends instance with default config, calls 'initialize' method of\r\n         *     parent, calls 'initAjaxConfig'\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(this, 'onContainerToggle', 'onDataLoaded');\r\n\r\n            this._super()\r\n                ._setClasses()\r\n                .initAjaxConfig();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' method of parent, initializes observable\r\n         * properties of instance\r\n         *\r\n         * @return {Object} - reference to instance\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('content loading visible');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Extends 'additionalClasses' object.\r\n         *\r\n         * @returns {Group} Chainable.\r\n         */\r\n        _setClasses: function () {\r\n            var additional = this.additionalClasses,\r\n                classes;\r\n\r\n            if (_.isString(additional)) {\r\n                additional = this.additionalClasses.split(' ');\r\n                classes = this.additionalClasses = {};\r\n\r\n                additional.forEach(function (name) {\r\n                    classes[name] = true;\r\n                }, this);\r\n            }\r\n\r\n            _.extend(this.additionalClasses, {\r\n                'admin__scope-old': !!additional\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        initContainer: function (parent) {\r\n            this._super();\r\n\r\n            parent.on('active', this.onContainerToggle);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes default ajax config on instance\r\n         *\r\n         * @return {Object} - reference to instance\r\n         */\r\n        initAjaxConfig: function () {\r\n            this.ajaxConfig = {\r\n                url: this.url,\r\n                data: {\r\n                    FORM_KEY: window.FORM_KEY\r\n                },\r\n                success:    this.onDataLoaded\r\n            };\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls 'loadData' if both 'active' variable and 'shouldLoad'\r\n         * property are truthy\r\n         *\r\n         * @param  {Boolean} active\r\n         */\r\n        onContainerToggle: function (active) {\r\n            if (active && this.shouldLoad()) {\r\n                this.loadData();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Defines if instance has 'content' property defined.\r\n         *\r\n         * @return {Boolean} [description]\r\n         */\r\n        hasData: function () {\r\n            return !!this.content();\r\n        },\r\n\r\n        /**\r\n         * Defines if instance should load external data\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        shouldLoad: function () {\r\n            return this.url && !this.hasData() && !this.loading();\r\n        },\r\n\r\n        /**\r\n         * Sets loading property to true, makes ajax call\r\n         *\r\n         * @return {Object} - reference to instance\r\n         */\r\n        loadData: function () {\r\n            this.loading(true);\r\n\r\n            $.ajax(this.ajaxConfig);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Ajax's request success handler. Calls 'updateContent' passing 'data'\r\n         * to it, then sets 'loading' property to false.\r\n         *\r\n         * @param  {String} data\r\n         */\r\n        onDataLoaded: function (data) {\r\n            this.updateContent(data)\r\n                .loading(false);\r\n        },\r\n\r\n        /**\r\n         * Sets incoming data 'content' property's value\r\n         *\r\n         * @param  {String} content\r\n         * @return {Object} - reference to instance\r\n         */\r\n        updateContent: function (content) {\r\n            this.content(content);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/insert-form.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    './insert',\r\n    'mageUtils',\r\n    'jquery'\r\n], function (Insert, utils, $) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Get page actions element.\r\n     *\r\n     * @param {String} elem\r\n     * @param {String} actionsClass\r\n     * @returns {String}\r\n     */\r\n    function getPageActions(elem, actionsClass) {\r\n        var el = document.createElement('div');\r\n\r\n        el.innerHTML = elem;\r\n\r\n        return el.getElementsByClassName(actionsClass)[0];\r\n    }\r\n\r\n    /**\r\n     * Return element without page actions toolbar\r\n     *\r\n     * @param {String} elem\r\n     * @param {String} actionsClass\r\n     * @returns {String}\r\n     */\r\n    function removePageActions(elem, actionsClass) {\r\n        var el = document.createElement('div'),\r\n            actions;\r\n\r\n        el.innerHTML = elem;\r\n        actions = el.getElementsByClassName(actionsClass)[0];\r\n        el.removeChild(actions);\r\n\r\n        return el.innerHTML;\r\n    }\r\n\r\n    return Insert.extend({\r\n        defaults: {\r\n            externalFormName: '${ $.ns }.${ $.ns }',\r\n            pageActionsClass: 'page-actions',\r\n            actionsContainerClass: 'page-main-actions',\r\n            exports: {\r\n                prefix: '${ $.externalFormName }:selectorPrefix'\r\n            },\r\n            imports: {\r\n                toolbarSection: '${ $.toolbarContainer }:toolbarSection',\r\n                prefix: '${ $.toolbarContainer }:rootSelector',\r\n                messagesClass: '${ $.externalFormName }:messagesClass'\r\n            },\r\n            settings: {\r\n                ajax: {\r\n                    ajaxSave: true,\r\n                    exports: {\r\n                        ajaxSave: '${ $.externalFormName }:ajaxSave'\r\n                    },\r\n                    imports: {\r\n                        responseStatus: '${ $.externalFormName }:responseStatus',\r\n                        responseData: '${ $.externalFormName }:responseData'\r\n                    }\r\n                }\r\n            },\r\n            modules: {\r\n                externalForm: '${ $.externalFormName }'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            return this._super()\r\n                .observe('responseStatus');\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initConfig: function (config) {\r\n            var defaults = this.constructor.defaults;\r\n\r\n            utils.extend(defaults, defaults.settings[config.formSubmitType] || {});\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /** @inheritdoc*/\r\n        destroyInserted: function () {\r\n            if (this.isRendered && this.externalForm()) {\r\n                this.externalForm().delegate('destroy');\r\n                this.removeActions();\r\n                this.responseStatus(undefined);\r\n                this.responseData = {};\r\n            }\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        onRender: function (data) {\r\n            var actions = getPageActions(data, this.pageActionsClass);\r\n\r\n            if (!data.length) {\r\n                return this;\r\n            }\r\n            data = removePageActions(data, this.pageActionsClass);\r\n            this.renderActions(actions);\r\n            this._super(data);\r\n        },\r\n\r\n        /**\r\n         * Insert actions in toolbar.\r\n         *\r\n         * @param {String} actions\r\n         */\r\n        renderActions: function (actions) {\r\n            var $container = $('<div/>');\r\n\r\n            $container\r\n                .addClass(this.actionsContainerClass)\r\n                .append(actions);\r\n\r\n            this.formHeader = $container;\r\n\r\n            $(this.toolbarSection).append(this.formHeader);\r\n        },\r\n\r\n        /**\r\n         * Remove actions toolbar.\r\n         */\r\n        removeActions: function () {\r\n            $(this.formHeader).siblings('.' + this.messagesClass).remove();\r\n            $(this.formHeader).remove();\r\n            this.formHeader = $();\r\n        },\r\n\r\n        /**\r\n         * Reset external form data.\r\n         */\r\n        resetForm: function () {\r\n            if (this.externalSource()) {\r\n                this.externalSource().trigger('data.reset');\r\n                this.responseStatus(undefined);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/insert-listing.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    './insert',\r\n    'mageUtils',\r\n    'underscore'\r\n], function ($, Insert, utils, _) {\r\n    'use strict';\r\n\r\n    return Insert.extend({\r\n        defaults: {\r\n            externalListingName: '${ $.ns }.${ $.ns }',\r\n            behaviourType: 'simple',\r\n            externalFilterMode: false,\r\n            requestConfig: {\r\n                method: 'POST'\r\n            },\r\n            externalCondition: 'nin',\r\n            settings: {\r\n                edit: {\r\n                    imports: {\r\n                        'onChangeRecord': '${ $.editorProvider }:changed'\r\n                    }\r\n                },\r\n                filter: {\r\n                    exports: {\r\n                        'requestConfig': '${ $.externalProvider }:requestConfig'\r\n                    }\r\n                }\r\n            },\r\n            imports: {\r\n                onSelectedChange: '${ $.selectionsProvider }:selected',\r\n                'update_url': '${ $.externalProvider }:update_url',\r\n                'indexField': '${ $.selectionsProvider }:indexField'\r\n            },\r\n            exports: {\r\n                externalFiltersModifier: '${ $.externalProvider }:params.filters_modifier'\r\n            },\r\n            listens: {\r\n                externalValue: 'updateExternalFiltersModifier updateSelections',\r\n                indexField: 'initialUpdateListing'\r\n            },\r\n            modules: {\r\n                selections: '${ $.selectionsProvider }',\r\n                externalListing: '${ $.externalListingName }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Invokes initialize method of parent class,\r\n         * contains initialization logic\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            _.bindAll(this, 'updateValue', 'updateExternalValueByEditableData');\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initConfig: function (config) {\r\n            var defaults = this.constructor.defaults;\r\n\r\n            if (config.behaviourType === 'edit') {\r\n                defaults.editableData = {};\r\n                _.map(defaults.settings.edit.imports, function (value, key) {\r\n                    this.imports[key] = value;\r\n                }, defaults);\r\n            }\r\n\r\n            if (config.externalFilterMode === true) {\r\n                _.map(defaults.settings.filter.exports, function (value, key) {\r\n                    this.exports[key] = value;\r\n                }, defaults);\r\n            }\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            return this._super()\r\n                .observe([\r\n                    'externalValue'\r\n                ]);\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        destroyInserted: function () {\r\n            if (this.isRendered && this.externalListing()) {\r\n                this.externalListing().source.storage().clearRequests();\r\n                this.externalListing().delegate('destroy');\r\n            }\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Store data from edited record\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        onChangeRecord: function (record) {\r\n            this.updateEditableData(record);\r\n\r\n            if (!this.dataLinks.imports) {\r\n                return;\r\n            }\r\n\r\n            this.updateExternalValueByEditableData();\r\n        },\r\n\r\n        /**\r\n         * Updates externalValue every time row is selected,\r\n         * if it is configured by 'dataLinks.imports'\r\n         * Also suppress dataLinks so import/export of selections will not activate each other in circle\r\n         *\r\n         */\r\n        onSelectedChange: function () {\r\n            if (!this.dataLinks.imports ||\r\n                this.suppressDataLinks ||\r\n                _.isBoolean(this.initialExportDone) && !this.initialExportDone\r\n            ) {\r\n                this.suppressDataLinks = false;\r\n\r\n                return;\r\n            }\r\n\r\n            this.suppressDataLinks = true;\r\n            this.updateExternalValue();\r\n        },\r\n\r\n        /**\r\n         * Stores data from editor in editableData\r\n         * @param {Object} record\r\n         *\r\n         */\r\n        updateEditableData: function (record) {\r\n            var id = _.keys(record[0])[0];\r\n\r\n            this.editableData[id] = record[0][id];\r\n        },\r\n\r\n        /**\r\n         * Updates externalValue by data from editor (already stored in editableData)\r\n         *\r\n         */\r\n        updateExternalValueByEditableData: function () {\r\n            var updatedExtValue;\r\n\r\n            if (!this.behaviourType === 'edit' || _.isEmpty(this.editableData) || _.isEmpty(this.externalValue())) {\r\n                return;\r\n            }\r\n\r\n            updatedExtValue = this.externalValue();\r\n            updatedExtValue.map(function (item) {\r\n                _.extend(item, this.editableData[item[this.indexField]]);\r\n            }, this);\r\n            this.setExternalValue(updatedExtValue);\r\n        },\r\n\r\n        /**\r\n         * Updates externalValue, from selectionsProvider data (if it is enough)\r\n         * or ajax request to server\r\n         *\r\n         * @returns {Object} result - deferred that will be resolved when value is updated\r\n         */\r\n        updateExternalValue: function () {\r\n            var result = $.Deferred(),\r\n                provider = this.selections(),\r\n                selections,\r\n                totalSelected,\r\n                itemsType,\r\n                rows;\r\n\r\n            if (!provider) {\r\n                return result;\r\n            }\r\n\r\n            selections = provider && provider.getSelections();\r\n            totalSelected = provider.totalSelected();\r\n            itemsType = selections && selections.excludeMode ? 'excluded' : 'selected';\r\n            rows = provider && provider.rows();\r\n\r\n            if (_.isEmpty(selections.selected)) {\r\n                this.suppressDataLinks = false;\r\n\r\n                return result;\r\n            }\r\n\r\n            if (this.canUpdateFromClientData(totalSelected, selections.selected, rows)) {\r\n                this.updateFromClientData(selections.selected, rows);\r\n                this.updateExternalValueByEditableData();\r\n                result.resolve();\r\n            } else {\r\n                this.updateFromServerData(selections, itemsType).done(function () {\r\n                    this.updateExternalValueByEditableData();\r\n                    result.resolve();\r\n                }.bind(this));\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Check if the selected rows data can be taken from selectionsProvider data\r\n         * (which only stores data of the current page rows)\r\n         *  + from already saved data\r\n         *\r\n         * @param {Boolean} totalSelected - total rows selected (include rows that were filtered out)\r\n         * @param {Array} selected - ids of selected rows\r\n         * @param {Object} rows\r\n         */\r\n        canUpdateFromClientData: function (totalSelected, selected, rows) {\r\n            var alreadySavedSelectionsIds = _.pluck(this.externalValue(), this.indexField),\r\n                rowsOnCurrentPageIds = _.pluck(rows, this.indexField);\r\n\r\n            return totalSelected === selected.length &&\r\n                _.intersection(_.union(alreadySavedSelectionsIds, rowsOnCurrentPageIds), selected).length ===\r\n                selected.length;\r\n        },\r\n\r\n        /**\r\n         * Updates externalValue, from selectionsProvider data\r\n         * (which only stores data of the current page rows)\r\n         *  + from already saved data\r\n         *  so we can avoid request to server\r\n         *\r\n         * @param {Array} selected - ids of selected rows\r\n         * @param {Object} rows\r\n         */\r\n        updateFromClientData: function (selected, rows) {\r\n            var value,\r\n                rowIds,\r\n                valueIds;\r\n\r\n            if (!selected || !selected.length) {\r\n                this.setExternalValue([]);\r\n\r\n                return;\r\n            }\r\n\r\n            value = this.externalValue();\r\n            rowIds = _.pluck(rows, this.indexField);\r\n            valueIds = _.pluck(value, this.indexField);\r\n\r\n            value = _.map(selected, function (item) {\r\n                if (_.contains(rowIds, item)) {\r\n                    return _.find(rows, function (row) {\r\n                        return row[this.indexField] === item;\r\n                    }, this);\r\n                } else if (_.contains(valueIds, item)) {\r\n                    return _.find(value, function (row) {\r\n                        return row[this.indexField] === item;\r\n                    }, this);\r\n                }\r\n            }, this);\r\n\r\n            this.setExternalValue(value);\r\n        },\r\n\r\n        /**\r\n         * Updates externalValue, from ajax request to grab selected rows data\r\n         *\r\n         * @param {Object} selections\r\n         * @param {String} itemsType\r\n         *\r\n         * @returns {Object} request - deferred that will be resolved when ajax is done\r\n         */\r\n        updateFromServerData: function (selections, itemsType) {\r\n            var filterType = selections && selections.excludeMode ? 'nin' : 'in',\r\n                selectionsData = {},\r\n                request;\r\n\r\n            _.extend(selectionsData, this.params || {}, selections.params);\r\n\r\n            if (selections[itemsType] && selections[itemsType].length) {\r\n                selectionsData.filters = {};\r\n                selectionsData['filters_modifier'] = {};\r\n                selectionsData['filters_modifier'][this.indexField] = {\r\n                    'condition_type': filterType,\r\n                    value: selections[itemsType]\r\n                };\r\n            }\r\n\r\n            selectionsData.paging = {\r\n                notLimits: 1\r\n            };\r\n\r\n            request = this.requestData(selectionsData, {\r\n                method: this.requestConfig.method\r\n            });\r\n            request\r\n                .done(function (data) {\r\n                    this.setExternalValue(data.items || data);\r\n                    this.loading(false);\r\n                }.bind(this))\r\n                .fail(this.onError);\r\n\r\n            return request;\r\n        },\r\n\r\n        /**\r\n         * Set listing rows data to the externalValue,\r\n         * or if externalData is configured with the names of particular columns,\r\n         * filter rows data to have only these columns, and then set to the externalValue\r\n         *\r\n         * @param {Object} newValue - rows data\r\n         *\r\n         */\r\n        setExternalValue: function (newValue) {\r\n            var keys = this.externalData,\r\n                value = this.externalValue(),\r\n                selectedIds = _.pluck(newValue, this.indexField);\r\n\r\n            if (_.isArray(keys) && !_.isEmpty(keys)) {\r\n                newValue = _.map(newValue, function (item) {\r\n                    return _.pick(item, keys);\r\n                }, this);\r\n            } else if (keys && _.isString(keys) && !_.isEmpty(newValue)) {\r\n                newValue = newValue[0][keys];\r\n            }\r\n\r\n            if (this.externalFilterMode) {\r\n                newValue = _.union(newValue, _.filter(value,\r\n                    function (item) {\r\n                        return !_.contains(selectedIds, item[this.indexField]);\r\n                    }, this));\r\n            }\r\n\r\n            this.set('externalValue', newValue);\r\n        },\r\n\r\n        /**\r\n         * Updates external filter (if externalFilterMode is on)\r\n         * every time, when value is updated,\r\n         * so grid is re-filtered to exclude or include selected rows only\r\n         *\r\n         * @param {Object} items\r\n         */\r\n        updateExternalFiltersModifier: function (items) {\r\n            var provider,\r\n                filter = {};\r\n\r\n            if (!this.externalFilterMode) {\r\n                return;\r\n            }\r\n\r\n            provider = this.selections();\r\n\r\n            if (!provider) {\r\n                this.needInitialListingUpdate = true;\r\n\r\n                return;\r\n            }\r\n\r\n            filter[this.indexField] = {\r\n                'condition_type': this.externalCondition,\r\n                value: _.pluck(items, this.indexField)\r\n            };\r\n            this.set('externalFiltersModifier', filter);\r\n        },\r\n\r\n        /**\r\n         * Updates grid selections\r\n         * every time, when extenalValue is updated,\r\n         * so grid is re-selected according to externalValue updated\r\n         * Also suppress dataLinks so import/export of selections will not activate each other in circle\r\n         *\r\n         * @param {Object} items\r\n         */\r\n        updateSelections: function (items) {\r\n            var provider,\r\n                ids;\r\n\r\n            if (!this.dataLinks.exports || this.suppressDataLinks) {\r\n                this.suppressDataLinks = false;\r\n                this.initialExportDone = true;\r\n\r\n                return;\r\n            }\r\n\r\n            provider = this.selections();\r\n\r\n            if (!provider) {\r\n                this.needInitialListingUpdate = true;\r\n\r\n                return;\r\n            }\r\n\r\n            this.suppressDataLinks = true;\r\n            provider.deselectAll();\r\n\r\n            if (_.isString(items)) {\r\n                provider.selected([items] || []);\r\n            } else {\r\n                ids = _.pluck(items || [], this.indexField)\r\n                    .map(function (item) {\r\n                        return item.toString();\r\n                    });\r\n\r\n                provider.selected(ids || []);\r\n            }\r\n            this.initialExportDone = true;\r\n        },\r\n\r\n        /**\r\n         * initial update of the listing\r\n         * with rows that must be checked/filtered\r\n         * by the indexes\r\n         */\r\n        initialUpdateListing: function () {\r\n            var items = this.externalValue();\r\n\r\n            if (this.needInitialListingUpdate && items) {\r\n                this.updateExternalFiltersModifier(items);\r\n                this.updateSelections(items);\r\n                this.needInitialListingUpdate = false;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Reload source\r\n         */\r\n        reload: function () {\r\n            this.externalSource().set('params.t', new Date().getTime());\r\n        },\r\n\r\n        /**\r\n         * Updates value from external value\r\n         *\r\n         */\r\n        updateValue: function () {\r\n            this.set('value', this.externalValue());\r\n        },\r\n\r\n        /**\r\n         * Updates external value, then updates value from external value\r\n         *\r\n         */\r\n        save: function () {\r\n            this.updateExternalValue().done(\r\n                function () {\r\n                    if (!this.realTimeLink) {\r\n                        this.updateValue();\r\n                    }\r\n                }.bind(this)\r\n            );\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/insert.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiElement',\r\n    'jquery',\r\n    'mage/translate',\r\n    'mageUtils',\r\n    'underscore',\r\n    'Magento_Ui/js/modal/alert',\r\n    'Magento_Ui/js/lib/view/utils/bindings',\r\n    'Magento_Ui/js/lib/view/utils/async'\r\n], function (Element, $, $t, utils, _, alert) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            content: '',\r\n            template: 'ui/form/insert',\r\n            showSpinner: true,\r\n            loading: false,\r\n            autoRender: true,\r\n            visible: true,\r\n            contentSelector: '${$.name}',\r\n            externalData: [],\r\n            params: {\r\n                namespace: '${ $.ns }'\r\n            },\r\n            renderSettings: {\r\n                url: '${ $.render_url }',\r\n                dataType: 'html'\r\n            },\r\n            updateSettings: {\r\n                url: '${ $.update_url }',\r\n                dataType: 'json'\r\n            },\r\n            imports: {},\r\n            exports: {},\r\n            listens: {},\r\n            links: {\r\n                value: '${ $.provider }:${ $.dataScope}'\r\n            },\r\n            modules: {\r\n                externalSource: '${ $.externalProvider }'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super();\r\n            _.bindAll(this, 'onRender', 'onUpdate');\r\n\r\n            if (this.autoRender) {\r\n                this.render();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            return this._super()\r\n                .observe([\r\n                    'visible',\r\n                    'content',\r\n                    'value',\r\n                    'loading'\r\n                ]);\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initConfig: function (config) {\r\n            this.initDataLink(config)._super();\r\n            this.contentSelector = this.contentSelector.replace(/\\./g, '_');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sync data with external provider.\r\n         *\r\n         * @param {Object} config\r\n         * @returns {Object}\r\n         */\r\n        initDataLink: function (config) {\r\n            var key, value;\r\n\r\n            if (config.dataLinks) {\r\n                _.each(config.externalData, function (val) {\r\n                    value = val;\r\n                    key = 'externalValue.' + val.replace('data.', '');\r\n\r\n                    if (config.dataLinks.imports) {\r\n                        this.imports[key] = '${ $.externalProvider }:' + value;\r\n                    }\r\n\r\n                    if (config.dataLinks.exports) {\r\n                        this.exports[key] = '${ $.externalProvider }:' + value;\r\n                    }\r\n                    this.links[key] = '${ $.externalProvider }:' + value;\r\n                }, this.constructor.defaults);\r\n            }\r\n\r\n            if (config.realTimeLink) {\r\n                this.constructor.defaults.links.externalValue = 'value';\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Request for render content.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        render: function (params) {\r\n            var self = this,\r\n                request;\r\n\r\n            if (this.isRendered) {\r\n                return this;\r\n            }\r\n\r\n            self.previousParams = params || {};\r\n\r\n            $.async({\r\n                component: this.name,\r\n                ctx: '.' + this.contentSelector\r\n            }, function (el) {\r\n                self.contentEl = $(el);\r\n                self.startRender = true;\r\n                params = _.extend({}, self.params, params || {});\r\n                request = self.requestData(params, self.renderSettings);\r\n                request\r\n                    .done(self.onRender)\r\n                    .fail(self.onError);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        destroy: function () {\r\n            this.destroyInserted()\r\n                ._super();\r\n        },\r\n\r\n        /**\r\n         * Destroy inserted components.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        destroyInserted: function () {\r\n            if (this.isRendered) {\r\n                this.isRendered = false;\r\n                this.content('');\r\n\r\n                if (this.externalSource()) {\r\n                    this.externalSource().destroy();\r\n                }\r\n                this.initExternalLinks();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initialize links on external components.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        initExternalLinks: function () {\r\n            var imports = this.filterExternalLinks(this.imports, this.ns),\r\n                exports = this.filterExternalLinks(this.exports, this.ns),\r\n                links = this.filterExternalLinks(this.links, this.ns);\r\n\r\n            this.setLinks(links, 'imports')\r\n                .setLinks(links, 'exports');\r\n\r\n            _.each({\r\n                exports: exports,\r\n                imports: imports\r\n            }, this.setLinks, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Filter external links.\r\n         *\r\n         * @param {Object} data\r\n         * @param {String }ns\r\n         * @returns {Object}\r\n         */\r\n        filterExternalLinks: function (data, ns) {\r\n            var links  = {};\r\n\r\n            _.each(data, function (value, key) {\r\n                if (value.split('.')[0] === ns) {\r\n                    links[key] = value;\r\n                }\r\n            });\r\n\r\n            return links;\r\n        },\r\n\r\n        /**\r\n         * Request with configurable params and settings.\r\n         *\r\n         * @param {Object} params\r\n         * @param {Object} ajaxSettings\r\n         * @returns {Object}\r\n         */\r\n        requestData: function (params, ajaxSettings) {\r\n            var query = utils.copy(params);\r\n\r\n            ajaxSettings = _.extend({\r\n                url: this['update_url'],\r\n                method: 'GET',\r\n                data: query,\r\n                dataType: 'json'\r\n            }, ajaxSettings);\r\n\r\n            this.loading(true);\r\n\r\n            return $.ajax(ajaxSettings);\r\n        },\r\n\r\n        /**\r\n         * Callback that render content.\r\n         *\r\n         * @param {*} data\r\n         */\r\n        onRender: function (data) {\r\n            this.loading(false);\r\n            this.set('content', data);\r\n            this.isRendered = true;\r\n            this.startRender = false;\r\n        },\r\n\r\n        /**\r\n         * Error callback.\r\n         *\r\n         * @param {Object} xhr\r\n         */\r\n        onError: function (xhr) {\r\n            if (xhr.statusText === 'abort') {\r\n                return;\r\n            }\r\n\r\n            alert({\r\n                content: $t('Something went wrong.')\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Getter for external data.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getExternalData: function () {\r\n            var data = {};\r\n\r\n            _.each(this.externalData, function (path) {\r\n                utils.nested(data, path.replace('data.', ''), this.externalSource().get(path));\r\n            }, this);\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Request for update data.\r\n         *\r\n         * @returns {*|Object}\r\n         */\r\n        updateData: function (params) {\r\n            var request;\r\n\r\n            params = _.extend(params || {}, this.params);\r\n\r\n            if (!this.startRender && !this.isRendered) {\r\n                return this.render(params);\r\n            }\r\n\r\n            request = this.requestData(params, this.updateSettings);\r\n            request\r\n                .done(this.onUpdate)\r\n                .fail(this.onError);\r\n\r\n            return request;\r\n        },\r\n\r\n        /**\r\n         * Set data to external provider, clear changes.\r\n         *\r\n         * @param {*} data\r\n         */\r\n        onUpdate: function (data) {\r\n            this.externalSource().set('data', data);\r\n            this.externalSource().trigger('data.overload');\r\n            this.loading(false);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/tab.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'uiCollection'\r\n], function (Collection) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            uniqueProp:     'active',\r\n            active:         false,\r\n            wasActivated:   false\r\n        },\r\n\r\n        /**\r\n         * Extends instance with defaults. Invokes parent initialize method.\r\n         * Calls initListeners and pushParams methods.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .setUnique();\r\n        },\r\n\r\n        /**\r\n         * Calls initObservable of parent class.\r\n         * Defines observable properties of instance.\r\n         * @return {Object} - reference to instance\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('active wasActivated');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets active property to true, then invokes pushParams method.\r\n         */\r\n        activate: function () {\r\n            this.active(true);\r\n            this.wasActivated(true);\r\n\r\n            this.setUnique();\r\n\r\n            return true;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/tab_group.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/lib/collapsible'\r\n], function (_, Collapsible) {\r\n    'use strict';\r\n\r\n    return Collapsible.extend({\r\n        defaults: {\r\n            listens: {\r\n                '${ $.provider }:data.validate': 'onValidate'\r\n            },\r\n            collapsible: false,\r\n            opened: true\r\n        },\r\n\r\n        /**\r\n         * Invokes initElement method of parent class, calls 'initActivation' method\r\n         * passing element to it.\r\n         * @param {Object} elem\r\n         * @returns {Object} - reference to instance\r\n         */\r\n        initElement: function (elem) {\r\n            this._super()\r\n                .initActivation(elem);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Activates element if one is first or if one has 'active' propert\r\n         * set to true.\r\n         *\r\n         * @param  {Object} elem\r\n         * @returns {Object} - reference to instance\r\n         */\r\n        initActivation: function (elem) {\r\n            var elems   = this.elems(),\r\n                isFirst = !elems.indexOf(elem);\r\n\r\n            if (isFirst || elem.active()) {\r\n                elem.activate();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Delegates 'validate' method on element, then reads 'invalid' property\r\n         * of params storage, and if defined, activates element, sets\r\n         * 'allValid' property of instance to false and sets invalid's\r\n         * 'focused' property to true.\r\n         *\r\n         * @param {Object} elem\r\n         */\r\n        validate: function (elem) {\r\n            var result  = elem.delegate('validate'),\r\n                invalid;\r\n\r\n            invalid = _.find(result, function (item) {\r\n                return !item.valid;\r\n            });\r\n\r\n            if (invalid) {\r\n                elem.activate();\r\n                invalid.target.focused(true);\r\n            }\r\n\r\n            return invalid;\r\n        },\r\n\r\n        /**\r\n         * Sets 'allValid' property of instance to true, then calls 'validate' method\r\n         * of instance for each element.\r\n         */\r\n        onValidate: function () {\r\n            this.elems.sortBy(function (elem) {\r\n                return !elem.active();\r\n            }).some(this.validate, this);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/components/collection/item.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    '../tab'\r\n], function (_, utils, Tab) {\r\n    'use strict';\r\n\r\n    var previewConfig = {\r\n        separator: ' ',\r\n        prefix: ''\r\n    };\r\n\r\n    /**\r\n     * Parses incoming data and returnes result merged with default preview config\r\n     *\r\n     * @param  {Object|String} data\r\n     * @return {Object}\r\n     */\r\n    function parsePreview(data) {\r\n        if (typeof data == 'string') {\r\n            data = {\r\n                items: data\r\n            };\r\n        }\r\n\r\n        data.items = utils.stringToArray(data.items);\r\n\r\n        return _.defaults(data, previewConfig);\r\n    }\r\n\r\n    return Tab.extend({\r\n        defaults: {\r\n            label: '',\r\n            uniqueNs: 'activeCollectionItem',\r\n            previewTpl: 'ui/form/components/collection/preview'\r\n        },\r\n\r\n        /**\r\n         * Extends instance with default config, calls initializes of parent class\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(this, 'buildPreview', 'hasPreview');\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Calls initProperties of parent class, initializes properties\r\n         * of instance.\r\n         *\r\n         * @return {Object} - reference to instance\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n\r\n            this.displayed = [];\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls initObservable of parent class, initializes observable\r\n         * properties of instance.\r\n         *\r\n         * @return {Object} - reference to instance\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe({\r\n                    noPreview: true,\r\n                    indexed: {}\r\n                });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Is being called when child element has been initialized,\r\n         *     calls initElement of parent class, binds to element's update event,\r\n         *     calls insertToArea and insertToIndexed methods passing element to it\r\n         *\r\n         * @param  {Object} elem\r\n         */\r\n        initElement: function (elem) {\r\n            this._super()\r\n                .insertToIndexed(elem);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds element to observable indexed object of instance\r\n         *\r\n         * @param  {Object} elem\r\n         * @return {Object} - reference to instance\r\n         */\r\n        insertToIndexed: function (elem) {\r\n            var indexed = this.indexed();\r\n\r\n            indexed[elem.index] = elem;\r\n\r\n            this.indexed(indexed);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Destroys current instance along with all of its' children.\r\n         * Overrides base method to clear data when this method is called.\r\n         */\r\n        destroy: function () {\r\n            this._super();\r\n            this._clearData();\r\n        },\r\n\r\n        /**\r\n         * Clears all data associated with component.\r\n         * @private\r\n         *\r\n         * @returns {Item} Chainable.\r\n         */\r\n        _clearData: function () {\r\n            this.source.remove(this.dataScope);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Formats incoming previews array via parsePreview function.\r\n         *\r\n         * @param  {Array} previews\r\n         * @return {Array} - formatted previews\r\n         */\r\n        formatPreviews: function (previews) {\r\n            return previews.map(parsePreview);\r\n        },\r\n\r\n        /**\r\n         * Creates string view of previews\r\n         *\r\n         * @param  {Object} data\r\n         * @return {Strict} - formatted preview string\r\n         */\r\n        buildPreview: function (data) {\r\n            var preview = this.getPreview(data.items),\r\n                prefix = data.prefix;\r\n\r\n            return prefix + preview.join(data.separator);\r\n        },\r\n\r\n        /**\r\n         * Defines if instance has preview for incoming data\r\n         *\r\n         * @param  {Object}  data\r\n         * @return {Boolean}\r\n         */\r\n        hasPreview: function (data) {\r\n            return !!this.getPreview(data.items).length;\r\n        },\r\n\r\n        /**\r\n         * Creates an array of previews for elements specified in incoming\r\n         * items array, calls updatePreview afterwards.\r\n         *\r\n         * @param  {Array} items - An array of element's indexes.\r\n         * @returns {Array} An array of previews.\r\n         */\r\n        getPreview: function (items) {\r\n            var elems = this.indexed(),\r\n                displayed = this.displayed,\r\n                preview;\r\n\r\n            items = items.map(function (index) {\r\n                var elem = elems[index];\r\n\r\n                preview = elem && elem.visible() ? elem.getPreview() : '';\r\n\r\n                preview = Array.isArray(preview) ?\r\n                    _.compact(preview).join(', ') :\r\n                    preview;\r\n\r\n                utils.toggle(displayed, index, !!preview);\r\n\r\n                return preview;\r\n            });\r\n\r\n            this.noPreview(!displayed.length);\r\n\r\n            return _.compact(items);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/abstract.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiLayout',\r\n    'uiElement',\r\n    'Magento_Ui/js/lib/validation/validator'\r\n], function (_, utils, layout, Element, validator) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            visible: true,\r\n            preview: '',\r\n            focused: false,\r\n            required: false,\r\n            disabled: false,\r\n            valueChangedByUser: false,\r\n            elementTmpl: 'ui/form/element/input',\r\n            tooltipTpl: 'ui/form/element/helper/tooltip',\r\n            fallbackResetTpl: 'ui/form/element/helper/fallback-reset',\r\n            'input_type': 'input',\r\n            placeholder: '',\r\n            description: '',\r\n            labelVisible: true,\r\n            label: '',\r\n            error: '',\r\n            warn: '',\r\n            notice: '',\r\n            customScope: '',\r\n            default: '',\r\n            isDifferedFromDefault: false,\r\n            showFallbackReset: false,\r\n            additionalClasses: {},\r\n            isUseDefault: '',\r\n            valueUpdate: false, // ko binding valueUpdate\r\n\r\n            switcherConfig: {\r\n                component: 'Magento_Ui/js/form/switcher',\r\n                name: '${ $.name }_switcher',\r\n                target: '${ $.name }',\r\n                property: 'value'\r\n            },\r\n            listens: {\r\n                visible: 'setPreview',\r\n                value: 'setDifferedFromDefault',\r\n                '${ $.provider }:data.reset': 'reset',\r\n                '${ $.provider }:data.overload': 'overload',\r\n                '${ $.provider }:${ $.customScope ? $.customScope + \".\" : \"\"}data.validate': 'validate',\r\n                'isUseDefault': 'toggleUseDefault'\r\n            },\r\n\r\n            links: {\r\n                value: '${ $.provider }:${ $.dataScope }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Invokes initialize method of parent class,\r\n         * contains initialization logic\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(this, 'reset');\r\n\r\n            this._super()\r\n                .setInitialValue()\r\n                ._setClasses()\r\n                .initSwitcher();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties of instance\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            var rules = this.validation = this.validation || {};\r\n\r\n            this._super();\r\n\r\n            this.observe('error disabled focused preview visible value warn isDifferedFromDefault')\r\n                .observe('isUseDefault')\r\n                .observe({\r\n                    'required': !!rules['required-entry']\r\n                });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes regular properties of instance.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            var uid = utils.uniqueid(),\r\n                name,\r\n                valueUpdate,\r\n                scope;\r\n\r\n            this._super();\r\n\r\n            scope   = this.dataScope;\r\n            name    = scope.split('.').slice(1);\r\n\r\n            valueUpdate = this.showFallbackReset ? 'afterkeydown' : this.valueUpdate;\r\n\r\n            _.extend(this, {\r\n                uid: uid,\r\n                noticeId: 'notice-' + uid,\r\n                inputName: utils.serializeName(name.join('.')),\r\n                valueUpdate: valueUpdate\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes switcher element instance.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        initSwitcher: function () {\r\n            if (this.switcherConfig.enabled) {\r\n                layout([this.switcherConfig]);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets initial value of the element and subscribes to it's changes.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        setInitialValue: function () {\r\n            this.initialValue = this.getInitialValue();\r\n\r\n            if (this.value.peek() !== this.initialValue) {\r\n                this.value(this.initialValue);\r\n            }\r\n\r\n            this.on('value', this.onUpdate.bind(this));\r\n            this.isUseDefault(this.disabled());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Extends 'additionalClasses' object.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        _setClasses: function () {\r\n            var additional = this.additionalClasses;\r\n\r\n            if (_.isString(additional)){\r\n                this.additionalClasses = {};\r\n\r\n                if (additional.trim().length) {\r\n                    additional = additional.trim().split(' ');\r\n\r\n                    additional.forEach(function (name) {\r\n                        if (name.length) {\r\n                            this.additionalClasses[name] = true;\r\n                        }\r\n                    }, this);\r\n                }\r\n            }\r\n\r\n            _.extend(this.additionalClasses, {\r\n                _required: this.required,\r\n                _error: this.error,\r\n                _warn: this.warn,\r\n                _disabled: this.disabled\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Gets initial value of element\r\n         *\r\n         * @returns {*} Elements' value.\r\n         */\r\n        getInitialValue: function () {\r\n            var values = [this.value(), this.default],\r\n                value;\r\n\r\n            values.some(function (v) {\r\n                if (v !== null && v !== undefined) {\r\n                    value = v;\r\n                    return true;\r\n                }\r\n                return false;\r\n            });\r\n\r\n            return this.normalizeData(value);\r\n        },\r\n\r\n        /**\r\n         * Sets 'value' as 'hidden' property's value, triggers 'toggle' event,\r\n         * sets instance's hidden identifier in params storage based on\r\n         * 'value'.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        setVisible: function (isVisible) {\r\n            this.visible(isVisible);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Show element.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        show: function () {\r\n            this.visible(true);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Hide element.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        hide: function () {\r\n            this.visible(false);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Disable element.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        disable: function () {\r\n            this.disabled(true);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Enable element.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        enable: function () {\r\n            this.disabled(false);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {(String|Object)} rule\r\n         * @param {(Object|Boolean)} [options]\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        setValidation: function (rule, options) {\r\n            var rules =  utils.copy(this.validation),\r\n                changed;\r\n\r\n            if (_.isObject(rule)) {\r\n                _.extend(this.validation, rule);\r\n            } else {\r\n                this.validation[rule] = options;\r\n            }\r\n\r\n            changed = utils.compare(rules, this.validation).equal;\r\n\r\n            if (changed) {\r\n                this.required(!!rules['required-entry']);\r\n                this.validate();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns unwrapped preview observable.\r\n         *\r\n         * @returns {String} Value of the preview observable.\r\n         */\r\n        getPreview: function () {\r\n            return this.value();\r\n        },\r\n\r\n        /**\r\n         * Checks if element has addons\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasAddons: function () {\r\n            return this.addbefore || this.addafter;\r\n        },\r\n\r\n        /**\r\n         * Checks if element has service setting\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasService: function() {\r\n            return this.service && this.service.template;\r\n        },\r\n\r\n        /**\r\n         * Defines if value has changed.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasChanged: function () {\r\n            var notEqual = this.value() !== this.initialValue;\r\n\r\n            return !this.visible() ? false : notEqual;\r\n        },\r\n\r\n        /**\r\n         * Checks if 'value' is not empty.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasData: function () {\r\n            return !utils.isEmpty(this.value());\r\n        },\r\n\r\n        /**\r\n         * Sets value observable to initialValue property.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        reset: function () {\r\n            this.value(this.initialValue);\r\n            this.error(false);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets current state as initial.\r\n         */\r\n        overload: function () {\r\n            this.setInitialValue();\r\n            this.bubble('update', this.hasChanged());\r\n        },\r\n\r\n        /**\r\n         * Clears 'value' property.\r\n         *\r\n         * @returns {Abstract} Chainable.\r\n         */\r\n        clear: function () {\r\n            this.value('');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Converts values like 'null' or 'undefined' to an empty string.\r\n         *\r\n         * @param {*} value - Value to be processed.\r\n         * @returns {*}\r\n         */\r\n        normalizeData: function (value) {\r\n            return utils.isEmpty(value) ? '' : value;\r\n        },\r\n\r\n        /**\r\n         * Validates itself by it's validation rules using validator object.\r\n         * If validation of a rule did not pass, writes it's message to\r\n         * 'error' observable property.\r\n         *\r\n         * @returns {Object} Validate information.\r\n         */\r\n        validate: function () {\r\n            var value   = this.value(),\r\n                result  = validator(this.validation, value, this.validationParams),\r\n                message = !this.disabled() && this.visible() ? result.message : '',\r\n                isValid = this.disabled() || !this.visible() || result.passed;\r\n\r\n            this.error(message);\r\n            this.bubble('error', message);\r\n\r\n            //TODO: Implement proper result propagation for form\r\n            if (!isValid) {\r\n                this.source.set('params.invalid', true);\r\n            }\r\n\r\n            return {\r\n                valid: isValid,\r\n                target: this\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Callback that fires when 'value' property is updated.\r\n         */\r\n        onUpdate: function () {\r\n            this.bubble('update', this.hasChanged());\r\n\r\n            this.validate();\r\n        },\r\n\r\n        /**\r\n         * Restore value to default\r\n         */\r\n        restoreToDefault: function () {\r\n            this.value(this.default);\r\n        },\r\n\r\n        /**\r\n         * Update whether value differs from default value\r\n         */\r\n        setDifferedFromDefault: function () {\r\n            var value = typeof this.value() != 'undefined' && this.value() !== null ? this.value() : '',\r\n                defaultValue = typeof this.default != 'undefined' && this.default !== null ? this.default : '';\r\n            this.isDifferedFromDefault(value !== defaultValue);\r\n        },\r\n\r\n        /**\r\n         * @param {Boolean} state\r\n         */\r\n        toggleUseDefault: function (state) {\r\n            this.disabled(state);\r\n        },\r\n\r\n        /**\r\n         *  Callback when value is changed by user\r\n         */\r\n        userChanges: function() {\r\n            this.valueChangedByUser = true;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/boolean.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    './abstract'\r\n], function (Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            checked: false,\r\n            links: {\r\n                checked: 'value'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @returns {*|void|Element}\r\n         */\r\n        initObservable: function () {\r\n            return this._super()\r\n                    .observe('checked');\r\n        },\r\n\r\n        /**\r\n         * Converts provided value to boolean.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        normalizeData: function () {\r\n            return !!+this._super();\r\n        },\r\n\r\n        /**\r\n         * Calls 'onUpdate' method of parent, if value is defined and instance's\r\n         *     'unique' property set to true, calls 'setUnique' method\r\n         *\r\n         * @return {Object} - reference to instance\r\n         */\r\n        onUpdate: function () {\r\n            if (this.hasUnique) {\r\n                this.setUnique();\r\n            }\r\n\r\n            return this._super();\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/checkbox-set.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    './abstract'\r\n], function (_, utils, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            template: 'ui/form/element/checkbox-set',\r\n            multiple: false,\r\n            multipleScopeValue: null\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n\r\n            this.value = this.normalizeData(this.value);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initLinks: function () {\r\n            var scope = this.source.get(this.dataScope);\r\n\r\n            this.multipleScopeValue = this.multiple && _.isArray(scope) ? utils.copy(scope) : undefined;\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        reset: function () {\r\n            this.value(utils.copy(this.initialValue));\r\n            this.error(false);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        clear: function () {\r\n            var value = this.multiple ? [] : '';\r\n\r\n            this.value(value);\r\n            this.error(false);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        normalizeData: function (value) {\r\n            if (!this.multiple) {\r\n                return this._super();\r\n            }\r\n\r\n            return _.isArray(value) ? utils.copy(value) : [];\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        setInitialValue: function () {\r\n            this._super();\r\n\r\n            this.initialValue = utils.copy(this.initialValue);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        getInitialValue: function () {\r\n            var values = [this.multipleScopeValue, this.default, this.value.peek(), []],\r\n                value;\r\n\r\n            if (!this.multiple) {\r\n                return this._super();\r\n            }\r\n\r\n            values.some(function (v) {\r\n                return _.isArray(v) && (value = utils.copy(v));\r\n            });\r\n\r\n            return value;\r\n        },\r\n\r\n        /**\r\n         * Returns labels which matches current value.\r\n         *\r\n         * @returns {String|Array}\r\n         */\r\n        getPreview: function () {\r\n            var option;\r\n\r\n            if (!this.multiple) {\r\n                option = this.getOption(this.value());\r\n\r\n                return option ? option.label : '';\r\n            }\r\n\r\n            return this.value.map(function (value) {\r\n                return this.getOption(value).label;\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Returns option object assoctiated with provided value.\r\n         *\r\n         * @param {String} value\r\n         * @returns {Object}\r\n         */\r\n        getOption: function (value) {\r\n            return _.findWhere(this.options, {\r\n                value: value\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        hasChanged: function () {\r\n            var value = this.value(),\r\n                initial = this.initialValue;\r\n\r\n            return this.multiple ?\r\n                !utils.equalArrays(value, initial) :\r\n                this._super();\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/country.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    './select'\r\n], function (_, registry, Select) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        defaults: {\r\n            imports: {\r\n                update: '${ $.parentName }.website_id:value'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Filters 'initialOptions' property by 'field' and 'value' passed,\r\n         * calls 'setOptions' passing the result to it\r\n         *\r\n         * @param {*} value\r\n         * @param {String} field\r\n         */\r\n        filter: function (value, field) {\r\n            var result;\r\n\r\n            if (!field) { //validate field, if we are on update\r\n                field = this.filterBy.field;\r\n            }\r\n\r\n            this._super(value, field);\r\n            result = _.filter(this.initialOptions, function (item) {\r\n\r\n                if (item[field]) {\r\n                    return ~item[field].indexOf(value);\r\n                }\r\n\r\n                return false;\r\n            });\r\n\r\n            this.setOptions(result);\r\n        }\r\n    });\r\n});\r\n\r\n","Magento_Ui/js/form/element/date.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'moment',\r\n    'mageUtils',\r\n    './abstract',\r\n    'moment-timezone-with-data'\r\n], function (moment, utils, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            options: {},\r\n\r\n            storeTimeZone: 'UTC',\r\n\r\n            validationParams: {\r\n                dateFormat: '${ $.outputDateFormat }'\r\n            },\r\n\r\n            /**\r\n             * Format of date that comes from the\r\n             * server (ICU Date Format).\r\n             *\r\n             * Used only in date picker mode\r\n             * (this.options.showsTime == false).\r\n             *\r\n             * @type {String}\r\n             */\r\n            inputDateFormat: 'y-MM-dd',\r\n\r\n            /**\r\n             * Format of date that should be sent to the\r\n             * server (ICU Date Format).\r\n             *\r\n             * Used only in date picker mode\r\n             * (this.options.showsTime == false).\r\n             *\r\n             * @type {String}\r\n             */\r\n            outputDateFormat: 'MM/dd/y',\r\n\r\n            /**\r\n             * Date/time format that is used to display date in\r\n             * the input field.\r\n             *\r\n             * @type {String}\r\n             */\r\n            pickerDateTimeFormat: '',\r\n\r\n            pickerDefaultDateFormat: 'MM/dd/y', // ICU Date Format\r\n            pickerDefaultTimeFormat: 'h:mm a', // ICU Time Format\r\n\r\n            /**\r\n             * Format needed by moment timezone for conversion.\r\n             */\r\n            timezoneFormat: 'YYYY-MM-DD HH:mm',\r\n\r\n            elementTmpl: 'ui/form/element/date',\r\n\r\n            listens: {\r\n                'value': 'onValueChange',\r\n                'shiftedValue': 'onShiftedValueChange'\r\n            },\r\n\r\n            /**\r\n             * Date/time value shifted to corresponding timezone\r\n             * according to this.storeTimeZone property. This value\r\n             * will be sent to the server.\r\n             *\r\n             * @type {String}\r\n             */\r\n            shiftedValue: ''\r\n        },\r\n\r\n        /**\r\n         * Initializes regular properties of instance.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n\r\n            if (!this.options.dateFormat) {\r\n                this.options.dateFormat = this.pickerDefaultDateFormat;\r\n            }\r\n\r\n            if (!this.options.timeFormat) {\r\n                this.options.timeFormat = this.pickerDefaultTimeFormat;\r\n            }\r\n\r\n            this.prepareDateTimeFormats();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initObservable: function () {\r\n            return this._super().observe(['shiftedValue']);\r\n        },\r\n\r\n        /**\r\n         * Prepares and sets date/time value that will be displayed\r\n         * in the input field.\r\n         *\r\n         * @param {String} value\r\n         */\r\n        onValueChange: function (value) {\r\n            var dateFormat,\r\n                shiftedValue;\r\n\r\n            if (value) {\r\n                if (this.options.showsTime) {\r\n                    shiftedValue = moment.tz(value, 'UTC').tz(this.storeTimeZone);\r\n                } else {\r\n                    dateFormat = this.shiftedValue() ? this.outputDateFormat : this.inputDateFormat;\r\n\r\n                    shiftedValue = moment(value, dateFormat);\r\n                }\r\n\r\n                shiftedValue = shiftedValue.format(this.pickerDateTimeFormat);\r\n            } else {\r\n                shiftedValue = '';\r\n            }\r\n\r\n            if (shiftedValue !== this.shiftedValue()) {\r\n                this.shiftedValue(shiftedValue);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Prepares and sets date/time value that will be sent\r\n         * to the server.\r\n         *\r\n         * @param {String} shiftedValue\r\n         */\r\n        onShiftedValueChange: function (shiftedValue) {\r\n            var value,\r\n                formattedValue,\r\n                momentValue;\r\n\r\n            if (shiftedValue) {\r\n                momentValue = moment(shiftedValue, this.pickerDateTimeFormat);\r\n\r\n                if (this.options.showsTime) {\r\n                    formattedValue = moment(momentValue).format(this.timezoneFormat);\r\n                    value = moment.tz(formattedValue, this.storeTimeZone).tz('UTC').toISOString();\r\n                } else {\r\n                    value = momentValue.format(this.outputDateFormat);\r\n                }\r\n            } else {\r\n                value = '';\r\n            }\r\n\r\n            if (value !== this.value()) {\r\n                this.value(value);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Prepares and converts all date/time formats to be compatible\r\n         * with moment.js library.\r\n         */\r\n        prepareDateTimeFormats: function () {\r\n            this.pickerDateTimeFormat = this.options.dateFormat;\r\n\r\n            if (this.options.showsTime) {\r\n                this.pickerDateTimeFormat += ' ' + this.options.timeFormat;\r\n            }\r\n\r\n            this.pickerDateTimeFormat = utils.convertToMomentFormat(this.pickerDateTimeFormat);\r\n\r\n            if (this.options.dateFormat) {\r\n                this.outputDateFormat = this.options.dateFormat;\r\n            }\r\n\r\n            this.inputDateFormat = utils.convertToMomentFormat(this.inputDateFormat);\r\n            this.outputDateFormat = utils.convertToMomentFormat(this.outputDateFormat);\r\n\r\n            this.validationParams.dateFormat = this.outputDateFormat;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/file-uploader.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mageUtils',\r\n    'Magento_Ui/js/modal/alert',\r\n    'Magento_Ui/js/lib/validation/validator',\r\n    'Magento_Ui/js/form/element/abstract',\r\n    'jquery/file-uploader'\r\n], function ($, _, utils, uiAlert, validator, Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            value: [],\r\n            maxFileSize: false,\r\n            isMultipleFiles: false,\r\n            allowedExtensions: false,\r\n            previewTmpl: 'ui/form/element/uploader/preview',\r\n            dropZone: '[data-role=drop-zone]',\r\n            isLoading: false,\r\n            uploaderConfig: {\r\n                dataType: 'json',\r\n                sequentialUploads: true,\r\n                formData: {\r\n                    'form_key': window.FORM_KEY\r\n                }\r\n            },\r\n            tracks: {\r\n                isLoading: true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes file uploader plugin on provided input element.\r\n         *\r\n         * @param {HTMLInputElement} fileInput\r\n         * @returns {FileUploader} Chainable.\r\n         */\r\n        initUploader: function (fileInput) {\r\n            this.$fileInput = fileInput;\r\n\r\n            _.extend(this.uploaderConfig, {\r\n                dropZone:   $(fileInput).closest(this.dropZone),\r\n                change:     this.onFilesChoosed.bind(this),\r\n                drop:       this.onFilesChoosed.bind(this),\r\n                add:        this.onBeforeFileUpload.bind(this),\r\n                done:       this.onFileUploaded.bind(this),\r\n                start:      this.onLoadingStart.bind(this),\r\n                stop:       this.onLoadingStop.bind(this)\r\n            });\r\n\r\n            $(fileInput).fileupload(this.uploaderConfig);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Defines initial value of the instance.\r\n         *\r\n         * @returns {FileUploader} Chainable.\r\n         */\r\n        setInitialValue: function () {\r\n            var value = this.getInitialValue();\r\n\r\n            value = value.map(this.processFile, this);\r\n\r\n            this.initialValue = value.slice();\r\n\r\n            this.value(value);\r\n            this.on('value', this.onUpdate.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Empties files list.\r\n         *\r\n         * @returns {FileUploader} Chainable.\r\n         */\r\n        clear: function () {\r\n            this.value.removeAll();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if files list contains any items.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasData: function () {\r\n            return !!this.value().length;\r\n        },\r\n\r\n        /**\r\n         * Resets files list to its' initial value.\r\n         *\r\n         * @returns {FileUploader}\r\n         */\r\n        reset: function () {\r\n            var value = this.initialValue.slice();\r\n\r\n            this.value(value);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds provided file to the files list.\r\n         *\r\n         * @param {Object} file\r\n         * @returns {FileUploder} Chainable.\r\n         */\r\n        addFile: function (file) {\r\n            file = this.processFile(file);\r\n\r\n            this.isMultipleFiles ?\r\n                this.value.push(file) :\r\n                this.value([file]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Retrieves from the list file which matches\r\n         * search criteria implemented in iterator function.\r\n         *\r\n         * @param {Function} fn - Function that will be invoked\r\n         *      for each file in the list.\r\n         * @returns {Object}\r\n         */\r\n        getFile: function (fn) {\r\n            return _.find(this.value(), fn);\r\n        },\r\n\r\n        /**\r\n         * Removes provided file from thes files list.\r\n         *\r\n         * @param {Object} file\r\n         * @returns {FileUploader} Chainable.\r\n         */\r\n        removeFile: function (file) {\r\n            this.value.remove(file);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * May perform modifications on the provided\r\n         * file object before adding it to the files list.\r\n         *\r\n         * @param {Object} file\r\n         * @returns {Object} Modified file object.\r\n         */\r\n        processFile: function (file) {\r\n            this.observe.call(file, true, [\r\n                'previewWidth',\r\n                'previewHeight'\r\n            ]);\r\n\r\n            return file;\r\n        },\r\n\r\n        /**\r\n         * Formats incoming bytes value to a readable format.\r\n         *\r\n         * @param {Number} bytes\r\n         * @returns {String}\r\n         */\r\n        formatSize: function (bytes) {\r\n            var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'],\r\n                i;\r\n\r\n            if (bytes === 0) {\r\n                return '0 Byte';\r\n            }\r\n\r\n            i = window.parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\r\n\r\n            return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];\r\n        },\r\n\r\n        /**\r\n         * Returns path to the file's preview image.\r\n         *\r\n         * @param {Object} file\r\n         * @returns {String}\r\n         */\r\n        getFilePreview: function (file) {\r\n            return file.url;\r\n        },\r\n\r\n        /**\r\n         * Returns path to the file's preview template.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getPreviewTmpl: function () {\r\n            return this.previewTmpl;\r\n        },\r\n\r\n        /**\r\n         * Checks if provided file is allowed to be uploaded.\r\n         *\r\n         * @param {Object} file\r\n         * @returns {Object} Validation result.\r\n         */\r\n        isFileAllowed: function (file) {\r\n            var result;\r\n\r\n            _.every([\r\n                this.isExtensionAllowed(file),\r\n                this.isSizeExceeded(file)\r\n            ], function (value) {\r\n                result = value;\r\n\r\n                return value.passed;\r\n            });\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Checks if extension of provided file is allowed.\r\n         *\r\n         * @param {Object} file - File to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isExtensionAllowed: function (file) {\r\n            return validator('validate-file-type', file.name, this.allowedExtensions);\r\n        },\r\n\r\n        /**\r\n         * Checks if size of provided file exceeds\r\n         * defined in configuration size limits.\r\n         *\r\n         * @param {Object} file - File to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isSizeExceeded: function (file) {\r\n            return validator('validate-max-size', file.size, this.maxFileSize);\r\n        },\r\n\r\n        /**\r\n         * Displays provided error message.\r\n         *\r\n         * @param {String} msg\r\n         * @returns {FileUploader} Chainable.\r\n         */\r\n        notifyError: function (msg) {\r\n            uiAlert({\r\n                content: msg\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Performs data type conversions.\r\n         *\r\n         * @param {*} value\r\n         * @returns {Array}\r\n         */\r\n        normalizeData: function (value) {\r\n            return utils.isEmpty(value) ? [] : value;\r\n        },\r\n\r\n        /**\r\n         * Checks if files list is different\r\n         * from its' initial value.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasChanged: function () {\r\n            var value = this.value(),\r\n                initial = this.initialValue;\r\n\r\n            return !utils.equalArrays(value, initial);\r\n        },\r\n\r\n        /**\r\n         * Abstract handler which is invoked when files are choosed for upload.\r\n         * May be used for implementation of additional validation rules,\r\n         * e.g. total files and a total size rules.\r\n         *\r\n         * @abstract\r\n         */\r\n        onFilesChoosed: function () {},\r\n\r\n        /**\r\n         * Handler which is invoked prior to the start of a file upload.\r\n         *\r\n         * @param {Event} e - Event obejct.\r\n         * @param {Object} data - File data that will be uploaded.\r\n         */\r\n        onBeforeFileUpload: function (e, data) {\r\n            var file     = data.files[0],\r\n                allowed  = this.isFileAllowed(file),\r\n                target   = $(e.target);\r\n\r\n            if (allowed.passed) {\r\n                target.on('fileuploadsend', function (event, postData) {\r\n                    postData.data.append('param_name', this.paramName);\r\n                    $(event.currentTarget).off('fileuploadsend');\r\n                }.bind(data));\r\n\r\n                target.fileupload('process', data).done(function () {\r\n                    data.submit();\r\n                });\r\n            } else {\r\n                this.notifyError(allowed.message);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handler of the file upload complete event.\r\n         *\r\n         * @param {Event} e\r\n         * @param {Object} data\r\n         */\r\n        onFileUploaded: function (e, data) {\r\n            var file    = data.result,\r\n                error   = file.error;\r\n\r\n            error ?\r\n                this.notifyError(error) :\r\n                this.addFile(file);\r\n        },\r\n\r\n        /**\r\n         * Load start event handler.\r\n         */\r\n        onLoadingStart: function () {\r\n            this.isLoading = true;\r\n        },\r\n\r\n        /**\r\n         * Load stop event handler.\r\n         */\r\n        onLoadingStop: function () {\r\n            this.isLoading = false;\r\n        },\r\n\r\n        /**\r\n         * Handler function which is supposed to be invoked when\r\n         * file input element has been rendered.\r\n         *\r\n         * @param {HTMLInputElement} fileInput\r\n         */\r\n        onElementRender: function (fileInput) {\r\n            this.initUploader(fileInput);\r\n        },\r\n\r\n        /**\r\n         * Handler of the preview image load event.\r\n         *\r\n         * @param {Object} file - File associated with an image.\r\n         * @param {Event} e\r\n         */\r\n        onPreviewLoad: function (file, e) {\r\n            var img = e.currentTarget;\r\n\r\n            file.previewWidth = img.naturalHeight;\r\n            file.previewHeight = img.naturalWidth;\r\n        },\r\n\r\n        /**\r\n         * Restore value to default\r\n         */\r\n        restoreToDefault: function () {\r\n            var defaultValue = utils.copy(this.default);\r\n\r\n            defaultValue.map(this.processFile, this);\r\n            this.value(defaultValue);\r\n        },\r\n\r\n        /**\r\n         * Update whether value differs from default value\r\n         */\r\n        setDifferedFromDefault: function () {\r\n            var value = utils.copy(this.value());\r\n\r\n            this.isDifferedFromDefault(!_.isEqual(value, this.default));\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/media.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'mageUtils',\r\n    './abstract'\r\n], function (utils, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            links: {\r\n                value: ''\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes file component.\r\n         *\r\n         * @returns {Media} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initFormId();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Defines form ID with which file input will be associated.\r\n         *\r\n         * @returns {Media} Chainable.\r\n         */\r\n        initFormId: function () {\r\n            var namespace;\r\n\r\n            if (this.formId) {\r\n                return this;\r\n            }\r\n\r\n            namespace   = this.name.split('.');\r\n            this.formId = namespace[0];\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/multiselect.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    './select'\r\n], function (_, utils, Select) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        defaults: {\r\n            size: 5,\r\n            elementTmpl: 'ui/form/element/multiselect',\r\n            listens: {\r\n                value: 'setDifferedFromDefault setPrepareToSendData'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        setInitialValue: function () {\r\n            this._super();\r\n\r\n            this.initialValue = utils.copy(this.initialValue);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        normalizeData: function (value) {\r\n            if (utils.isEmpty(value)) {\r\n                value = [];\r\n            }\r\n\r\n            return _.isString(value) ? value.split(',') : value;\r\n        },\r\n\r\n        /**\r\n         * Sets the prepared data to dataSource\r\n         * by path, where key is component link to dataSource with\r\n         * suffix \"-prepared-for-send\".\r\n         *\r\n         * @param {Array} data - current component value\r\n         */\r\n        setPrepareToSendData: function (data) {\r\n            if (_.isUndefined(data) || !data.length) {\r\n                data = '';\r\n            }\r\n\r\n            this.source.set(this.dataScope + '-prepared-for-send', data);\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        getInitialValue: function () {\r\n            var values = [\r\n                    this.normalizeData(this.source.get(this.dataScope)),\r\n                    this.normalizeData(this.default)\r\n                ],\r\n                value;\r\n\r\n            values.some(function (v) {\r\n                return _.isArray(v) && (value = utils.copy(v)) && !_.isEmpty(v);\r\n            });\r\n\r\n            return value;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        hasChanged: function () {\r\n            var value = this.value(),\r\n                initial = this.initialValue;\r\n\r\n            return !utils.equalArrays(value, initial);\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        reset: function () {\r\n            this.value(utils.copy(this.initialValue));\r\n            this.error(false);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        clear: function () {\r\n            this.value([]);\r\n            this.error(false);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/post-code.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    './abstract'\r\n], function (_, registry, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            imports: {\r\n                update: '${ $.parentName }.country_id:value'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {String} value\r\n         */\r\n        update: function (value) {\r\n            var country = registry.get(this.parentName + '.' + 'country_id'),\r\n                options = country.indexedOptions,\r\n                option;\r\n\r\n            if (!value) {\r\n                return;\r\n            }\r\n\r\n            option = options[value];\r\n\r\n            if (option['is_zipcode_optional']) {\r\n                this.error(false);\r\n                this.validation = _.omit(this.validation, 'required-entry');\r\n            } else {\r\n                this.validation['required-entry'] = true;\r\n            }\r\n\r\n            this.required(!option['is_zipcode_optional']);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/region.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    './select'\r\n], function (_, registry, Select) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        defaults: {\r\n            skipValidation: false,\r\n            imports: {\r\n                update: '${ $.parentName }.country_id:value'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {String} value\r\n         */\r\n        update: function (value) {\r\n            var country = registry.get(this.parentName + '.' + 'country_id'),\r\n                options = country.indexedOptions,\r\n                option;\r\n\r\n            if (!value) {\r\n                return;\r\n            }\r\n\r\n            option = options[value];\r\n\r\n            if (this.skipValidation) {\r\n                this.validation['required-entry'] = false;\r\n                this.required(false);\r\n            } else {\r\n                if (!option['is_region_required']) {\r\n                    this.error(false);\r\n                    this.validation = _.omit(this.validation, 'required-entry');\r\n                } else {\r\n                    this.validation['required-entry'] = true;\r\n                }\r\n\r\n                this.required(!!option['is_region_required']);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Filters 'initialOptions' property by 'field' and 'value' passed,\r\n         * calls 'setOptions' passing the result to it\r\n         *\r\n         * @param {*} value\r\n         * @param {String} field\r\n         */\r\n        filter: function (value, field) {\r\n            var country = registry.get(this.parentName + '.' + 'country_id'),\r\n                option = country.indexedOptions[value];\r\n\r\n            if (country) {\r\n                this._super(value, field);\r\n\r\n                if (option && option['is_region_visible'] === false) {\r\n                    // hide select and corresponding text input field if region must not be shown for selected country\r\n                    this.setVisible(false);\r\n\r\n                    if (this.customEntry) {\r\n                        this.toggleInput(false);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n});\r\n\r\n","Magento_Ui/js/form/element/select.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiRegistry',\r\n    './abstract',\r\n    'uiLayout'\r\n], function (_, utils, registry, Abstract, layout) {\r\n    'use strict';\r\n\r\n    var inputNode = {\r\n        parent: '${ $.$data.parentName }',\r\n        component: 'Magento_Ui/js/form/element/abstract',\r\n        template: '${ $.$data.template }',\r\n        provider: '${ $.$data.provider }',\r\n        name: '${ $.$data.index }_input',\r\n        dataScope: '${ $.$data.customEntry }',\r\n        customScope: '${ $.$data.customScope }',\r\n        sortOrder: {\r\n            after: '${ $.$data.name }'\r\n        },\r\n        displayArea: 'body',\r\n        label: '${ $.$data.label }'\r\n    };\r\n\r\n    /**\r\n     * Parses incoming options, considers options with undefined value property\r\n     *     as caption\r\n     *\r\n     * @param  {Array} nodes\r\n     * @return {Object}\r\n     */\r\n    function parseOptions(nodes, captionValue) {\r\n        var caption,\r\n            value;\r\n\r\n        nodes = _.map(nodes, function (node) {\r\n            value = node.value;\r\n\r\n            if (value === null || value === captionValue) {\r\n                if (_.isUndefined(caption)) {\r\n                    caption = node.label;\r\n                }\r\n            }\r\n\r\n            return node;\r\n        });\r\n\r\n        return {\r\n            options: _.compact(nodes),\r\n            caption: _.isString(caption) ? caption : false\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Recursively loops over data to find non-undefined, non-array value\r\n     *\r\n     * @param  {Array} data\r\n     * @return {*} - first non-undefined value in array\r\n     */\r\n    function findFirst(data) {\r\n        var value;\r\n\r\n        data.some(function (node) {\r\n            value = node.value;\r\n\r\n            if (Array.isArray(value)) {\r\n                value = findFirst(value);\r\n            }\r\n\r\n            return !_.isUndefined(value);\r\n        });\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Recursively set to object item like value and item.value like key.\r\n     *\r\n     * @param {Array} data\r\n     * @param {Object} result\r\n     * @returns {Object}\r\n     */\r\n    function indexOptions(data, result) {\r\n        var value;\r\n\r\n        result = result || {};\r\n\r\n        data.forEach(function (item) {\r\n            value = item.value;\r\n\r\n            if (Array.isArray(value)) {\r\n                indexOptions(value, result);\r\n            } else {\r\n                result[value] = item;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            customName: '${ $.parentName }.${ $.index }_input',\r\n            elementTmpl: 'ui/form/element/select',\r\n            caption: '',\r\n            options: []\r\n        },\r\n\r\n        /**\r\n         * Extends instance with defaults, extends config with formatted values\r\n         *     and options, and invokes initialize method of AbstractElement class.\r\n         *     If instance's 'customEntry' property is set to true, calls 'initInput'\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            if (this.customEntry) {\r\n                registry.get(this.name, this.initInput.bind(this));\r\n            }\r\n\r\n            if (this.filterBy) {\r\n                this.initFilter();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent, initializes 'options' and 'initialOptions'\r\n         *     properties, calls 'setOptions' passing options to it\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super();\r\n\r\n            this.initialOptions = this.options;\r\n\r\n            this.observe('options caption')\r\n                .setOptions(this.options());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Set link for filter.\r\n         *\r\n         * @returns {Object} Chainable\r\n         */\r\n        initFilter: function () {\r\n            var filter = this.filterBy;\r\n\r\n            this.filter(this.default, filter.field);\r\n            this.setLinks({\r\n                filter: filter.target\r\n            }, 'imports');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates input from template, renders it via renderer.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initInput: function () {\r\n            layout([utils.template(inputNode, this)]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Matches specfied value with existing options\r\n         * or, if value is not specified, returns value of the first option.\r\n         *\r\n         * @returns {*}\r\n         */\r\n        normalizeData: function () {\r\n            var value = this._super(),\r\n                option;\r\n\r\n            if (value !== '') {\r\n                option = this.getOption(value);\r\n\r\n                return option && option.value;\r\n            }\r\n\r\n            if (!this.caption()) {\r\n                return findFirst(this.options);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Filters 'initialOptions' property by 'field' and 'value' passed,\r\n         * calls 'setOptions' passing the result to it\r\n         *\r\n         * @param {*} value\r\n         * @param {String} field\r\n         */\r\n        filter: function (value, field) {\r\n            var source = this.initialOptions,\r\n                result;\r\n\r\n            field = field || this.filterBy.field;\r\n\r\n            result = _.filter(source, function (item) {\r\n                return item[field] === value || item.value === '';\r\n            });\r\n\r\n            this.setOptions(result);\r\n        },\r\n\r\n        /**\r\n         * Change visibility for input.\r\n         *\r\n         * @param {Boolean} isVisible\r\n         */\r\n        toggleInput: function (isVisible) {\r\n            registry.get(this.customName, function (input) {\r\n                input.setVisible(isVisible);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Sets 'data' to 'options' observable array, if instance has\r\n         * 'customEntry' property set to true, calls 'setHidden' method\r\n         *  passing !options.length as a parameter\r\n         *\r\n         * @param {Array} data\r\n         * @returns {Object} Chainable\r\n         */\r\n        setOptions: function (data) {\r\n            var captionValue = this.captionValue || '',\r\n                result = parseOptions(data, captionValue),\r\n                isVisible;\r\n\r\n            this.indexedOptions = indexOptions(result.options);\r\n\r\n            this.options(result.options);\r\n\r\n            if (!this.caption()) {\r\n                this.caption(result.caption);\r\n            }\r\n\r\n            if (this.customEntry) {\r\n                isVisible = !!result.options.length;\r\n\r\n                this.setVisible(isVisible);\r\n                this.toggleInput(!isVisible);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Processes preview for option by it's value, and sets the result\r\n         * to 'preview' observable\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        getPreview: function () {\r\n            var value = this.value(),\r\n                option = this.indexedOptions[value],\r\n                preview = option ? option.label : '';\r\n\r\n            this.preview(preview);\r\n\r\n            return preview;\r\n        },\r\n\r\n        getOption: function (value) {\r\n            return this.indexedOptions[value];\r\n        },\r\n\r\n        /**\r\n         * Select first available option\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        clear: function () {\r\n            var value = this.caption() ? '' : findFirst(this.options);\r\n\r\n            this.value(value);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties of instance.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        setInitialValue: function () {\r\n            if (_.isUndefined(this.value()) && !this.default) {\r\n                this.clear();\r\n            }\r\n\r\n            return this._super();\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/single-checkbox-toggle-notice.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox'\r\n], function (SingleCheckbox) {\r\n    'use strict';\r\n\r\n    return SingleCheckbox.extend({\r\n        defaults: {\r\n            notices: [],\r\n            tracks: {\r\n                notice: true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Choose notice on initialization\r\n         *\r\n         * @returns {*|void|Element}\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .chooseNotice();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Choose notice function\r\n         *\r\n         * @returns void\r\n         */\r\n        chooseNotice: function () {\r\n            var checkedNoticeNumber = Number(this.checked());\r\n\r\n            this.notice = this.notices[checkedNoticeNumber];\r\n        },\r\n\r\n        /**\r\n         * Choose notice on update\r\n         *\r\n         * @returns void\r\n         */\r\n        onUpdate: function () {\r\n            this._super();\r\n            this.chooseNotice();\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/single-checkbox-use-config.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox'\r\n], function (Component) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            isUseDefault: false,\r\n            isUseConfig: false,\r\n            listens: {\r\n                'isUseConfig': 'toggleElement',\r\n                'isUseDefault': 'toggleElement'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initObservable: function () {\r\n\r\n            return this\r\n                ._super()\r\n                .observe('isUseConfig');\r\n        },\r\n\r\n        /**\r\n         * Toggle element\r\n         */\r\n        toggleElement: function () {\r\n            this.disabled(this.isUseDefault() || this.isUseConfig());\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/single-checkbox.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract',\r\n    'underscore',\r\n    'mage/translate'\r\n], function (AbstractField, _, $t) {\r\n    'use strict';\r\n\r\n    return AbstractField.extend({\r\n        defaults: {\r\n            template: 'ui/form/components/single/field',\r\n            checked: false,\r\n            initialChecked: false,\r\n            multiple: false,\r\n            prefer: 'checkbox', // 'radio' | 'checkbox' | 'toggle'\r\n            valueMap: {},\r\n\r\n            templates: {\r\n                radio: 'ui/form/components/single/radio',\r\n                checkbox: 'ui/form/components/single/checkbox',\r\n                toggle: 'ui/form/components/single/switcher'\r\n            },\r\n\r\n            listens: {\r\n                'checked': 'onCheckedChanged',\r\n                'value': 'onExtendedValueChanged'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initConfig: function (config) {\r\n            this._super();\r\n\r\n            if (!config.elementTmpl) {\r\n                if (!this.prefer && !this.multiple) {\r\n                    this.elementTmpl = this.templates.radio;\r\n                } else if (this.prefer === 'radio') {\r\n                    this.elementTmpl = this.templates.radio;\r\n                } else if (this.prefer === 'checkbox') {\r\n                    this.elementTmpl = this.templates.checkbox;\r\n                } else if (this.prefer === 'toggle') {\r\n                    this.elementTmpl = this.templates.toggle;\r\n                } else {\r\n                    this.elementTmpl = this.templates.checkbox;\r\n                }\r\n            }\r\n\r\n            if (this.prefer === 'toggle' && _.isEmpty(this.toggleLabels)) {\r\n                this.toggleLabels = {\r\n                    'on': $t('Yes'),\r\n                    'off': $t('No')\r\n                };\r\n            }\r\n\r\n            if (typeof this.default === 'undefined' || this.default === null) {\r\n                this.default = '';\r\n            }\r\n\r\n            if (typeof this.value === 'undefined' || this.value === null) {\r\n                this.value = _.isEmpty(this.valueMap) || this.default !== '' ? this.default : this.valueMap.false;\r\n                this.initialValue = this.value;\r\n            } else {\r\n                this.initialValue = this.value;\r\n            }\r\n\r\n            if (this.multiple && !_.isArray(this.value)) {\r\n                this.value = []; // needed for correct observable assignment\r\n            }\r\n\r\n            this.initialChecked = this.checked;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initObservable: function () {\r\n            return this\r\n                ._super()\r\n                .observe('checked');\r\n        },\r\n\r\n        /**\r\n         * Get true/false key from valueMap by value.\r\n         *\r\n         * @param {*} value\r\n         * @returns {Boolean|undefined}\r\n         */\r\n        getReverseValueMap: function getReverseValueMap(value) {\r\n            var bool = false;\r\n\r\n            _.some(this.valueMap, function (iValue, iBool) {\r\n                if (iValue === value) {\r\n                    bool = iBool === 'true';\r\n\r\n                    return true;\r\n                }\r\n            });\r\n\r\n            return bool;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        setInitialValue: function () {\r\n            if (_.isEmpty(this.valueMap)) {\r\n                this.on('value', this.onUpdate.bind(this));\r\n            } else {\r\n                this._super();\r\n                this.checked(this.getReverseValueMap(this.value()));\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Handle dataScope changes for checkbox / radio button.\r\n         *\r\n         * @param {*} newExportedValue\r\n         */\r\n        onExtendedValueChanged: function (newExportedValue) {\r\n            var isMappedUsed = !_.isEmpty(this.valueMap),\r\n                oldChecked = this.checked.peek(),\r\n                oldValue = this.initialValue,\r\n                newChecked;\r\n\r\n            if (this.multiple) {\r\n                newChecked = newExportedValue.indexOf(oldValue) !== -1;\r\n            } else if (isMappedUsed) {\r\n                newChecked = this.getReverseValueMap(newExportedValue);\r\n            } else if (typeof newExportedValue === 'boolean') {\r\n                newChecked = newExportedValue;\r\n            } else {\r\n                newChecked = newExportedValue === oldValue;\r\n            }\r\n\r\n            if (newChecked !== oldChecked) {\r\n                this.checked(newChecked);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle checked state changes for checkbox / radio button.\r\n         *\r\n         * @param {Boolean} newChecked\r\n         */\r\n        onCheckedChanged: function (newChecked) {\r\n            var isMappedUsed = !_.isEmpty(this.valueMap),\r\n                oldValue = this.initialValue,\r\n                newValue;\r\n\r\n            if (isMappedUsed) {\r\n                newValue = this.valueMap[newChecked];\r\n            } else {\r\n                newValue = oldValue;\r\n            }\r\n\r\n            if (!this.multiple && newChecked) {\r\n                this.value(newValue);\r\n            } else if (!this.multiple && !newChecked) {\r\n                if (typeof newValue === 'boolean') {\r\n                    this.value(newChecked);\r\n                } else if (newValue === this.value.peek()) {\r\n                    this.value('');\r\n                }\r\n\r\n                if (isMappedUsed) {\r\n                    this.value(newValue);\r\n                }\r\n            } else if (this.multiple && newChecked && this.value.indexOf(newValue) === -1) {\r\n                this.value.push(newValue);\r\n            } else if (this.multiple && !newChecked && this.value.indexOf(newValue) !== -1) {\r\n                this.value.splice(this.value.indexOf(newValue), 1);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        onUpdate: function () {\r\n            if (this.hasUnique) {\r\n                this.setUnique();\r\n            }\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        reset: function () {\r\n            if (this.multiple && this.initialChecked) {\r\n                this.value.push(this.initialValue);\r\n            } else if (this.multiple && !this.initialChecked) {\r\n                this.value.splice(this.value.indexOf(this.initialValue), 1);\r\n            } else {\r\n                this.value(this.initialValue);\r\n            }\r\n\r\n            this.error(false);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        clear: function () {\r\n            if (this.multiple) {\r\n                this.value([]);\r\n            } else {\r\n                this.value('');\r\n            }\r\n\r\n            this.error(false);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/text.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiElement',\r\n    'mageUtils'\r\n], function (Element, utils) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            visible: true,\r\n            label: '',\r\n            error: '',\r\n            uid: utils.uniqueid(),\r\n            disabled: false,\r\n            links: {\r\n                value: '${ $.provider }:${ $.dataScope }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Has service\r\n         *\r\n         * @returns {Boolean} false.\r\n         */\r\n        hasService: function () {\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Has addons\r\n         *\r\n         * @returns {Boolean} false.\r\n         */\r\n        hasAddons: function () {\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('disabled visible value');\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/textarea.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    './abstract'\r\n], function (Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            cols: 15,\r\n            rows: 2,\r\n            elementTmpl: 'ui/form/element/textarea'\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/ui-select.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    './abstract',\r\n    'Magento_Ui/js/lib/key-codes',\r\n    'mage/translate',\r\n    'ko',\r\n    'jquery',\r\n    'Magento_Ui/js/lib/view/utils/async'\r\n], function (_, Abstract, keyCodes, $t, ko, $) {\r\n    'use strict';\r\n\r\n    var isTouchDevice = typeof document.ontouchstart !== 'undefined';\r\n\r\n    /**\r\n     * Processing options list\r\n     *\r\n     * @param {Array} array - Property array\r\n     * @param {String} separator - Level separator\r\n     * @param {Array} created - list to add new options\r\n     *\r\n     * @return {Array} Plain options list\r\n     */\r\n    function flattenCollection(array, separator, created) {\r\n        var i = 0,\r\n            length,\r\n            childCollection;\r\n\r\n        array = _.compact(array);\r\n        length = array.length;\r\n        created = created || [];\r\n\r\n        for (i; i < length; i++) {\r\n            created.push(array[i]);\r\n\r\n            if (array[i].hasOwnProperty(separator)) {\r\n                childCollection = array[i][separator];\r\n                delete array[i][separator];\r\n                flattenCollection.call(this, childCollection, separator, created);\r\n            }\r\n        }\r\n\r\n        return created;\r\n    }\r\n\r\n    /**\r\n     * Set levels to options list\r\n     *\r\n     * @param {Array} array - Property array\r\n     * @param {String} separator - Level separator\r\n     * @param {Number} level - Starting level\r\n     * @param {String} path - path to root\r\n     *\r\n     * @returns {Array} Array with levels\r\n     */\r\n    function setProperty(array, separator, level, path) {\r\n        var i = 0,\r\n            length,\r\n            nextLevel,\r\n            nextPath;\r\n\r\n        array = _.compact(array);\r\n        length = array.length;\r\n        level = level || 0;\r\n        path = path || '';\r\n\r\n        for (i; i < length; i++) {\r\n            if (array[i]) {\r\n                _.extend(array[i], {\r\n                    level: level,\r\n                    path: path\r\n                });\r\n            }\r\n\r\n            if (array[i].hasOwnProperty(separator)) {\r\n                nextLevel = level + 1;\r\n                nextPath = path ? path + '.' + array[i].label : array[i].label;\r\n                setProperty.call(this, array[i][separator], separator, nextLevel, nextPath);\r\n            }\r\n        }\r\n\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * Preprocessing options list\r\n     *\r\n     * @param {Array} nodes - Options list\r\n     *\r\n     * @return {Object} Object with property - options(options list)\r\n     *      and cache options with plain and tree list\r\n     */\r\n    function parseOptions(nodes) {\r\n        var caption,\r\n            value,\r\n            cacheNodes,\r\n            copyNodes;\r\n\r\n        nodes = setProperty(nodes, 'optgroup');\r\n        copyNodes = JSON.parse(JSON.stringify(nodes));\r\n        cacheNodes = flattenCollection(copyNodes, 'optgroup');\r\n\r\n        nodes = _.map(nodes, function (node) {\r\n            value = node.value;\r\n\r\n            if (value == null || value === '') {\r\n                if (_.isUndefined(caption)) {\r\n                    caption = node.label;\r\n                }\r\n            } else {\r\n                return node;\r\n            }\r\n        });\r\n\r\n        return {\r\n            options: _.compact(nodes),\r\n            cacheOptions: {\r\n                plain: _.compact(cacheNodes),\r\n                tree: _.compact(nodes)\r\n            }\r\n        };\r\n    }\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            options: [],\r\n            listVisible: false,\r\n            value: [],\r\n            filterOptions: false,\r\n            chipsEnabled: true,\r\n            itemsQuantity: '',\r\n            filterInputValue: '',\r\n            filterOptionsFocus: false,\r\n            multiselectFocus: false,\r\n            multiple: true,\r\n            selectType: 'tree',\r\n            lastSelectable: false,\r\n            showFilteredQuantity: true,\r\n            showCheckbox: true,\r\n            levelsVisibility: true,\r\n            openLevelsAction: true,\r\n            showOpenLevelsActionIcon: true,\r\n            optgroupLabels: false,\r\n            closeBtn: true,\r\n            showPath: true,\r\n            labelsDecoration: false,\r\n            disableLabel: false,\r\n            filterRateLimit: 500,\r\n            closeBtnLabel: $t('Done'),\r\n            optgroupTmpl: 'ui/grid/filters/elements/ui-select-optgroup',\r\n            quantityPlaceholder: $t('options'),\r\n            hoverClass: '_hover',\r\n            rootListSelector: 'ul.admin__action-multiselect-menu-inner._root',\r\n            visibleOptionSelector: 'li.admin__action-multiselect-menu-inner-item:visible',\r\n            actionTargetSelector: '.action-menu-item',\r\n            selectedPlaceholders: {\r\n                defaultPlaceholder: $t('Select...'),\r\n                lotPlaceholders: $t('Selected')\r\n            },\r\n            separator: 'optgroup',\r\n            listens: {\r\n                listVisible: 'cleanHoveredElement',\r\n                filterInputValue: 'filterOptionsList',\r\n                options: 'checkOptionsList'\r\n            },\r\n            presets: {\r\n                single: {\r\n                    showCheckbox: false,\r\n                    chipsEnabled: false,\r\n                    closeBtn: false\r\n                },\r\n                optgroup: {\r\n                    showCheckbox: false,\r\n                    lastSelectable: true,\r\n                    optgroupLabels: true,\r\n                    openLevelsAction: false,\r\n                    labelsDecoration: true,\r\n                    showOpenLevelsActionIcon: false\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes UISelect component.\r\n         *\r\n         * @returns {UISelect} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            $.async(\r\n                this.rootListSelector,\r\n                this,\r\n                this.onRootListRender.bind(this)\r\n            );\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Parses options and merges the result with instance\r\n         * Set defaults according to mode and levels configuration\r\n         *\r\n         * @param  {Object} config\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initConfig: function (config) {\r\n            var result = parseOptions(config.options),\r\n                defaults = this.constructor.defaults,\r\n                multiple = _.isBoolean(config.multiple) ? config.multiple : defaults.multiple,\r\n                type = config.selectType || defaults.selectType,\r\n                showOpenLevelsActionIcon = _.isBoolean(config.showOpenLevelsActionIcon) ?\r\n                    config.showOpenLevelsActionIcon :\r\n                    defaults.showOpenLevelsActionIcon,\r\n                openLevelsAction = _.isBoolean(config.openLevelsAction) ?\r\n                    config.openLevelsAction :\r\n                    defaults.openLevelsAction;\r\n\r\n            multiple = !multiple ? 'single' : false;\r\n            config.showOpenLevelsActionIcon = showOpenLevelsActionIcon && openLevelsAction;\r\n            _.extend(config, result, defaults.presets[multiple], defaults.presets[type]);\r\n            this._super();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Check child optgroup\r\n         */\r\n        hasChildList: function () {\r\n            return _.find(this.options(), function (option) {\r\n                return !!option[this.separator];\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Check tree mode\r\n         */\r\n        isTree: function () {\r\n            return this.hasChildList() && this.selectType !== 'optgroup';\r\n        },\r\n\r\n        /**\r\n         * Add option to lastOptions array\r\n         *\r\n         * @param {Object} data\r\n         * @returns {Boolean}\r\n         */\r\n        addLastElement: function (data) {\r\n            if (!data.hasOwnProperty(this.separator)) {\r\n                !this.cacheOptions.lastOptions ? this.cacheOptions.lastOptions = [] : false;\r\n\r\n                if (!_.findWhere(this.cacheOptions.lastOptions, {value: data.value})) {\r\n                    this.cacheOptions.lastOptions.push(data);\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Check options length and set to cache\r\n         * if some options is added\r\n         *\r\n         * @param {Array} options - ui select options\r\n         */\r\n        checkOptionsList: function (options) {\r\n            if (options.length > this.cacheOptions.plain.length) {\r\n                this.cacheOptions.plain = options;\r\n                this.setCaption();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Check label decoration\r\n         */\r\n        isLabelDecoration: function (data) {\r\n            return data.hasOwnProperty(this.separator) && this.labelsDecoration;\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent, initializes 'options' and 'initialOptions'\r\n         *     properties, calls 'setOptions' passing options to it\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super();\r\n            this.observe([\r\n                'listVisible',\r\n                'placeholder',\r\n                'multiselectFocus',\r\n                'options',\r\n                'itemsQuantity',\r\n                'filterInputValue',\r\n                'filterOptionsFocus'\r\n            ]);\r\n\r\n            this.filterInputValue.extend({rateLimit: this.filterRateLimit});\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * object with key - keyname and value - handler function for this key\r\n         *\r\n         * @returns {Object} Object with handlers function name.\r\n         */\r\n        keyDownHandlers: function () {\r\n            return {\r\n                enterKey: this.enterKeyHandler,\r\n                escapeKey: this.escapeKeyHandler,\r\n                spaceKey: this.enterKeyHandler,\r\n                pageUpKey: this.pageUpKeyHandler,\r\n                pageDownKey: this.pageDownKeyHandler\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Processing level visibility for levels\r\n         *\r\n         * @param {Object} data - element data\r\n         *\r\n         * @returns {Boolean} level visibility.\r\n         */\r\n        showLevels: function (data) {\r\n            var curLevel = ++data.level,\r\n                isVisible;\r\n\r\n            if (data.visible) {\r\n                isVisible = data.visible();\r\n            } else {\r\n                isVisible = !!data.hasOwnProperty(this.separator) &&\r\n                    _.isBoolean(this.levelsVisibility) &&\r\n                    this.levelsVisibility ||\r\n                    data.hasOwnProperty(this.separator) && parseInt(this.levelsVisibility, 10) >= curLevel;\r\n\r\n                data.visible = ko.observable(isVisible);\r\n                data.isVisited = isVisible;\r\n            }\r\n\r\n            return isVisible;\r\n        },\r\n\r\n        /**\r\n         * Processing level visibility for levels\r\n         *\r\n         * @param {Object} data - element data\r\n         *\r\n         * @returns {Boolean} level visibility.\r\n         */\r\n        getLevelVisibility: function (data) {\r\n            if (data.visible) {\r\n                return data.visible();\r\n            }\r\n\r\n            return this.showLevels(data);\r\n        },\r\n\r\n        /**\r\n         * Set option to options array.\r\n         *\r\n         * @param {Object} option\r\n         * @param {Array} options\r\n         */\r\n        setOption: function (option, options) {\r\n            var copyOptionsTree;\r\n\r\n            options = options || this.cacheOptions.tree;\r\n\r\n            _.each(options, function (opt) {\r\n                if (opt.value == option.parent) { /* eslint eqeqeq:0 */\r\n                    delete  option.parent;\r\n                    opt[this.separator] ? opt[this.separator].push(option) : opt[this.separator] = [option];\r\n                    copyOptionsTree = JSON.parse(JSON.stringify(this.cacheOptions.tree));\r\n                    this.cacheOptions.plain = flattenCollection(copyOptionsTree, this.separator);\r\n                    this.options(this.cacheOptions.tree);\r\n                } else if (opt[this.separator]) {\r\n                    this.setOption(option, opt[this.separator]);\r\n                }\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Handler outerClick event. Closed options list\r\n         */\r\n        outerClick: function () {\r\n            this.listVisible() ? this.listVisible(false) : false;\r\n\r\n            if(isTouchDevice) {\r\n               this.multiselectFocus(false);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handler keydown event to filter options input\r\n         *\r\n         * @returns {Boolean} Returned true for emersion events\r\n         */\r\n        filterOptionsKeydown: function (data, event) {\r\n            var key = keyCodes[event.keyCode];\r\n\r\n            !this.isTabKey(event) ? event.stopPropagation() : false;\r\n\r\n            if (key === 'pageDownKey' || key === 'pageUpKey') {\r\n                event.preventDefault();\r\n                this.filterOptionsFocus(false);\r\n                this.cacheUiSelect.focus();\r\n            }\r\n\r\n            this.keydownSwitcher(data, event);\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Filtered options list by value from filter options list\r\n         */\r\n        filterOptionsList: function () {\r\n            var value = this.filterInputValue().trim().toLowerCase(),\r\n                array = [];\r\n\r\n            if (value && value.length < 2) {\r\n                return false;\r\n            }\r\n\r\n            this.cleanHoveredElement();\r\n\r\n            if (!value) {\r\n                this.renderPath = false;\r\n                this.options(this.cacheOptions.tree);\r\n                this._setItemsQuantity(false);\r\n\r\n                return false;\r\n            }\r\n\r\n            this.showPath ? this.renderPath = true : false;\r\n\r\n            if (this.filterInputValue()) {\r\n\r\n                array = this.selectType === 'optgroup' ?\r\n                    this._getFilteredArray(this.cacheOptions.lastOptions, value) :\r\n                    this._getFilteredArray(this.cacheOptions.plain, value);\r\n\r\n                if (!value.length) {\r\n                    this.options(this.cacheOptions.plain);\r\n                    this._setItemsQuantity(this.cacheOptions.plain.length);\r\n                } else {\r\n                    this.options(array);\r\n                    this._setItemsQuantity(array.length);\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            this.options(this.cacheOptions.plain);\r\n        },\r\n\r\n        /**\r\n         * Filtered options list by value from filter options list\r\n         *\r\n         * @param {Array} list - option list\r\n         * @param {String} value\r\n         *\r\n         * @returns {Array} filters result\r\n         */\r\n        _getFilteredArray: function (list, value) {\r\n            var i = 0,\r\n                array = [],\r\n                curOption;\r\n\r\n            for (i; i < list.length; i++) {\r\n                curOption = list[i].label.toLowerCase();\r\n\r\n                if (curOption.indexOf(value) > -1) {\r\n                    array.push(list[i]); /*eslint max-depth: [2, 4]*/\r\n                }\r\n            }\r\n\r\n            return array;\r\n        },\r\n\r\n        /**\r\n         * Get path to current option\r\n         *\r\n         * @param {Object} data - option data\r\n         * @returns {String} path\r\n         */\r\n        getPath: function (data) {\r\n            var pathParts,\r\n                createdPath = '';\r\n\r\n            if (this.renderPath) {\r\n                pathParts = data.path.split('.');\r\n                _.each(pathParts, function (curData) {\r\n                    createdPath = createdPath ? createdPath + ' / ' + curData : curData;\r\n                });\r\n\r\n                return createdPath;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set filtered items quantity\r\n         *\r\n         * @param {Object} data - option data\r\n         */\r\n        _setItemsQuantity: function (data) {\r\n            if (this.showFilteredQuantity) {\r\n                data || parseInt(data, 10) === 0 ?\r\n                    this.itemsQuantity(data + ' ' + this.quantityPlaceholder) :\r\n                    this.itemsQuantity('');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Remove element from selected array\r\n         */\r\n        removeSelected: function (value, data, event) {\r\n            event ? event.stopPropagation() : false;\r\n            this.value.remove(value);\r\n        },\r\n\r\n        /**\r\n         * Checked key name\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isTabKey: function (event) {\r\n            return keyCodes[event.keyCode] === 'tabKey';\r\n        },\r\n\r\n        /**\r\n         * Clean hoveredElement variable\r\n         *\r\n         * @returns {Object} Chainable\r\n         */\r\n        cleanHoveredElement: function () {\r\n            if (this.hoveredElement) {\r\n                $(this.hoveredElement)\r\n                    .children(this.actionTargetSelector)\r\n                    .removeClass(this.hoverClass);\r\n\r\n                this.hoveredElement = null;\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Check selected option\r\n         *\r\n         * @param {String} value - option value\r\n         * @return {Boolean}\r\n         */\r\n        isSelected: function (value) {\r\n            return this.multiple ? _.contains(this.value(), value) : this.value() === value;\r\n        },\r\n\r\n        /**\r\n         * Check optgroup label\r\n         *\r\n         * @param {Object} data - element data\r\n         * @return {Boolean}\r\n         */\r\n        isOptgroupLabels: function (data) {\r\n            return data.hasOwnProperty(this.separator) && this.optgroupLabels;\r\n        },\r\n\r\n        /**\r\n         * Check hovered option\r\n         *\r\n         * @param {Object} data - element data\r\n         * @return {Boolean}\r\n         */\r\n        isHovered: function (data) {\r\n            var element = this.hoveredElement,\r\n                elementData;\r\n\r\n            if (!element) {\r\n                return false;\r\n            }\r\n\r\n            elementData = ko.dataFor(this.hoveredElement);\r\n\r\n            return data.value === elementData.value;\r\n        },\r\n\r\n        /**\r\n         * Toggle list visibility\r\n         *\r\n         * @returns {Object} Chainable\r\n         */\r\n        toggleListVisible: function () {\r\n            this.listVisible(!this.listVisible());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Get selected element labels\r\n         *\r\n         * @returns {Array} array labels\r\n         */\r\n        getSelected: function () {\r\n            var selected = this.value();\r\n\r\n            return this.cacheOptions.plain.filter(function (opt) {\r\n                return _.isArray(selected) ?\r\n                    _.contains(selected, opt.value) :\r\n                selected == opt.value;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Toggle activity list element\r\n         *\r\n         * @param {Object} data - selected option data\r\n         * @returns {Object} Chainable\r\n         */\r\n        toggleOptionSelected: function (data) {\r\n            var isSelected = this.isSelected(data.value);\r\n\r\n            if (this.lastSelectable && data.hasOwnProperty(this.separator)) {\r\n                return this;\r\n            }\r\n\r\n            if (!this.multiple) {\r\n                if (!isSelected) {\r\n                    this.value(data.value);\r\n                }\r\n                this.listVisible(false);\r\n            } else {\r\n                if (!isSelected) { /*eslint no-lonely-if: 0*/\r\n                    this.value.push(data.value);\r\n                } else {\r\n                    this.value(_.without(this.value(), data.value));\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Change visibility to child level\r\n         *\r\n         * @param {Object} data - element data\r\n         */\r\n        openChildLevel: function (data) {\r\n            var contextElement = data,\r\n                isVisible;\r\n\r\n            if (\r\n                this.openLevelsAction &&\r\n                data.hasOwnProperty(this.separator) && _.isBoolean(this.levelsVisibility) ||\r\n                this.openLevelsAction &&\r\n                data.hasOwnProperty(this.separator) && parseInt(this.levelsVisibility, 10) <= data.level\r\n            ) {\r\n                isVisible = !contextElement.visible();\r\n\r\n                if (isVisible && !contextElement.isVisited) {\r\n                    contextElement.isVisited = true;\r\n                }\r\n\r\n                contextElement.visible(isVisible);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Check selected elements\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasData: function () {\r\n            if (!this.value()) {\r\n                this.value([]);\r\n            }\r\n\r\n            return this.value() ? !!this.value().length : false;\r\n        },\r\n\r\n        /**\r\n         * @deprecated\r\n         */\r\n        onMousemove: function () {},\r\n\r\n        /**\r\n         * Handles hover on list items.\r\n         *\r\n         * @param {Object} event - mousemove event\r\n         */\r\n        onDelegatedMouseMouve: function (event) {\r\n            var target = $(event.currentTarget).closest(this.visibleOptionSelector)[0];\r\n\r\n            if (this.isCursorPositionChange(event) || this.hoveredElement === target) {\r\n                return;\r\n            }\r\n\r\n            this._hoverTo(target);\r\n            this.setCursorPosition(event);\r\n        },\r\n\r\n        /**\r\n         * Get option index\r\n         *\r\n         * @param {Object} data - object with data about this element\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        getOptionIndex: function (data) {\r\n            var index;\r\n\r\n            _.each(this.cacheOptions.plain, function (opt, id) {\r\n                if (data.value === opt.value) {\r\n                    index = id;\r\n                }\r\n            });\r\n\r\n            return index;\r\n        },\r\n\r\n        /**\r\n         * Set X and Y cursor position\r\n         *\r\n         * @param {Object} event - mousemove event\r\n         */\r\n        setCursorPosition: function (event) {\r\n            this.cursorPosition = {\r\n                x: event.pageX,\r\n                y: event.pageY\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Check previous and current cursor position\r\n         *\r\n         * @param {Object} event - mousemove event\r\n         * @returns {Boolean}\r\n         */\r\n        isCursorPositionChange: function (event) {\r\n            return this.cursorPosition &&\r\n                this.cursorPosition.x === event.pageX &&\r\n                this.cursorPosition.y === event.pageY;\r\n        },\r\n\r\n        /**\r\n         * Set true to observable variable multiselectFocus\r\n         * @param {Object} ctx\r\n         * @param {Object} event - focus event\r\n         */\r\n        onFocusIn: function (ctx, event) {\r\n            !this.cacheUiSelect ? this.cacheUiSelect = event.target : false;\r\n            this.multiselectFocus(true);\r\n        },\r\n\r\n        /**\r\n         * Set false to observable variable multiselectFocus\r\n         * and close list\r\n         */\r\n        onFocusOut: function () {\r\n            this.multiselectFocus(false);\r\n        },\r\n\r\n        /**\r\n         * Handler enter key, if select list is closed - open select,\r\n         * if select list is open toggle selected current option\r\n         */\r\n        enterKeyHandler: function () {\r\n\r\n            if (this.filterOptionsFocus()) {\r\n                return false;\r\n            }\r\n\r\n            if (this.listVisible()) {\r\n                if (this.hoveredElement) {\r\n                    this.toggleOptionSelected(ko.dataFor(this.hoveredElement));\r\n                }\r\n            } else {\r\n                this.setListVisible(true);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handler escape key, if select list is open - closes it,\r\n         */\r\n        escapeKeyHandler: function () {\r\n            this.listVisible() ? this.setListVisible(false) : false;\r\n        },\r\n\r\n        /**\r\n         * Handler pageDown key, selected next option in list, if current option is last\r\n         * selected first option in list\r\n         */\r\n        pageDownKeyHandler: function () {\r\n            this._setHoverToElement(1);\r\n        },\r\n\r\n        /**\r\n         * Get jQuery element by option data\r\n         *\r\n         * @param {Object} data - option data\r\n         *\r\n         * @returns {Object} jQuery element\r\n         */\r\n        _getElemByData: function (data) {\r\n            var i = 0,\r\n                list = $(this.cacheUiSelect).find('li'),\r\n                length = this.options().length,\r\n                result;\r\n\r\n            for (i; i < length; i++) {\r\n                if (this.options()[i].value === data.value) {\r\n                    result = $(list[i]);\r\n                }\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Set hover to visible element\r\n         *\r\n         * @param {Number} direction - iterator\r\n         */\r\n        _setHoverToElement: function (direction) {\r\n            var element;\r\n\r\n            if (direction ===  1) {\r\n                element = this._getNextElement();\r\n            } else if (direction === -1) {\r\n                element = this._getPreviousElement();\r\n            }\r\n\r\n            if (element) {\r\n                this._hoverTo(element);\r\n                this._scrollTo(element);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Find current hovered element\r\n         * and change scroll position\r\n         *\r\n         * @param {Number} index - element index\r\n         */\r\n        _scrollTo: function (element) {\r\n            var curEl = $(element).children(this.actionTargetSelector),\r\n                wrapper = $(this.rootList),\r\n                curElPos = {},\r\n                wrapperPos = {};\r\n\r\n            curElPos.start = curEl.offset().top;\r\n            curElPos.end = curElPos.start + curEl.outerHeight();\r\n\r\n            wrapperPos.start = wrapper.offset().top;\r\n            wrapperPos.end = wrapperPos.start + wrapper.height();\r\n\r\n            if (curElPos.start < wrapperPos.start) {\r\n                wrapper.scrollTop(wrapper.scrollTop() - (wrapperPos.start - curElPos.start));\r\n            } else if (curElPos.end > wrapperPos.end) {\r\n                wrapper.scrollTop(wrapper.scrollTop() + curElPos.end - wrapperPos.end);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handler pageUp key, selected previous option in list, if current option is first -\r\n         * selected last option in list\r\n         */\r\n        pageUpKeyHandler: function () {\r\n            this._setHoverToElement(-1);\r\n        },\r\n\r\n        /**\r\n         * Switcher to parse keydown event and delegate event to needful method\r\n         *\r\n         * @param {Object} data - element data\r\n         * @param {Object} event - keydown event\r\n         * @returns {Boolean} if handler for this event doesn't found return true\r\n         */\r\n        keydownSwitcher: function (data, event) {\r\n            var keyName = keyCodes[event.keyCode];\r\n\r\n            if (this.isTabKey(event)) {\r\n                if (!this.filterOptionsFocus() && this.listVisible() && this.filterOptions) {\r\n                    this.cacheUiSelect.blur();\r\n                    this.filterOptionsFocus(true);\r\n                    this.cleanHoveredElement();\r\n\r\n                    return false;\r\n                }\r\n                this.listVisible(false);\r\n\r\n                return true;\r\n            }\r\n\r\n            if (this.keyDownHandlers().hasOwnProperty(keyName)) {\r\n                this.keyDownHandlers()[keyName].apply(this, arguments);\r\n            } else {\r\n                return true;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set caption\r\n         */\r\n        setCaption: function () {\r\n            var length;\r\n\r\n            if (!_.isArray(this.value()) && this.value()) {\r\n                length = 1;\r\n            } else if (this.value()) {\r\n                length = this.value().length;\r\n            } else {\r\n                this.value([]);\r\n                length = 0;\r\n            }\r\n\r\n            if (length > 1) {\r\n                this.placeholder(length + ' ' + this.selectedPlaceholders.lotPlaceholders);\r\n            } else if (length && this.getSelected().length) {\r\n                this.placeholder(this.getSelected()[0].label);\r\n            } else {\r\n                this.placeholder(this.selectedPlaceholders.defaultPlaceholder);\r\n            }\r\n\r\n            return this.placeholder();\r\n        },\r\n\r\n        /**\r\n         * Set list status, open or close\r\n         *\r\n         * @param {Boolean} value - variable for set list visible status\r\n         */\r\n        setListVisible: function (value) {\r\n            this.listVisible(value);\r\n        },\r\n\r\n        /**\r\n         * Processes preview for option by it's value, and sets the result\r\n         * to 'preview' observable\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getPreview: function () {\r\n            var selected = this.getSelected();\r\n\r\n            return selected.map(function (option) {\r\n                return option.label;\r\n            }).join(', ');\r\n        },\r\n\r\n        /**\r\n         * Defines previous option element to\r\n         * the one that is currently hovered.\r\n         *\r\n         * @returns {Element}\r\n         */\r\n        _getPreviousElement: function () {\r\n            var currentElement = this.hoveredElement,\r\n                lastElement    = this._getLastIn(this.rootList),\r\n                previousElement;\r\n\r\n            if (!currentElement) {\r\n                return lastElement;\r\n            }\r\n\r\n            previousElement = $(currentElement).prev()[0];\r\n\r\n            return (\r\n                this._getLastIn(previousElement) ||\r\n                previousElement ||\r\n                this._getFirstParentOf(currentElement) ||\r\n                lastElement\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Defines next option element to\r\n         * the one that is currently hovered.\r\n         *\r\n         * @returns {Element}\r\n         */\r\n        _getNextElement: function () {\r\n            var currentElement = this.hoveredElement,\r\n                firstElement   = this._getFirstIn(this.rootList);\r\n\r\n            if (!currentElement) {\r\n                return firstElement;\r\n            }\r\n\r\n            return (\r\n                this._getFirstIn(currentElement) ||\r\n                $(currentElement).next()[0] ||\r\n                this._getParentsOf(currentElement).next()[0] ||\r\n                firstElement\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Returns first option element in provided scope.\r\n         *\r\n         * @param {Element} scope\r\n         * @returns {Element}\r\n         */\r\n        _getFirstIn: function (scope) {\r\n            return $(scope).find(this.visibleOptionSelector)[0];\r\n        },\r\n\r\n        /**\r\n         * Returns last descendant option element in provided scope.\r\n         *\r\n         * @param {Element} scope\r\n         * @returns {Element}\r\n         */\r\n        _getLastIn: function (scope) {\r\n            return $(scope).find(this.visibleOptionSelector).last()[0];\r\n        },\r\n\r\n        /**\r\n         * Returns a collection of parent option elements.\r\n         *\r\n         * @param {Element} scope\r\n         * @returns {jQueryCollection}\r\n         */\r\n        _getParentsOf: function (scope) {\r\n            return $(scope).parents(this.visibleOptionSelector);\r\n        },\r\n\r\n        /**\r\n         * Returns first parent option element.\r\n         *\r\n         * @param {Element} scope\r\n         * @returns {Element}\r\n         */\r\n        _getFirstParentOf: function (scope) {\r\n            return this._getParentsOf(scope)[0];\r\n        },\r\n\r\n        /**\r\n         * Sets hover class to provided option element.\r\n         *\r\n         * @param {Element} element\r\n         */\r\n        _hoverTo: function(element) {\r\n            if (this.hoveredElement) {\r\n                $(this.hoveredElement)\r\n                    .children(this.actionTargetSelector)\r\n                    .removeClass(this.hoverClass);\r\n            }\r\n\r\n            $(element)\r\n                .children(this.actionTargetSelector)\r\n                .addClass(this.hoverClass);\r\n\r\n            this.hoveredElement = element;\r\n        },\r\n\r\n        /**\r\n         * Callback which fires when root list element is rendered.\r\n         *\r\n         * @param {Element} element\r\n         */\r\n        onRootListRender: function (element) {\r\n            var targetSelector = 'li > ' + this.actionTargetSelector;\r\n\r\n            this.rootList = element;\r\n\r\n            $(this.rootList).on(\r\n                'mousemove',\r\n                targetSelector,\r\n                this.onDelegatedMouseMouve.bind(this)\r\n            );\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/website.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    './select'\r\n], function (_, registry, Select) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        defaults: {\r\n            customerId: null,\r\n            isGlobalScope: 0\r\n        },\r\n\r\n        /**\r\n         * Website component constructor.\r\n         * @returns {exports}\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            if (this.customerId || this.isGlobalScope) {\r\n                this.disable(true);\r\n            }\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/form/element/wysiwyg.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'underscore',\r\n    'ko',\r\n    './abstract',\r\n    'Magento_Variable/variables'\r\n], function ($, _, ko, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            elementSelector: 'textarea',\r\n            value: '',\r\n            links: {\r\n                value: '${ $.provider }:${ $.dataScope }'\r\n            },\r\n            template: 'ui/form/field',\r\n            elementTmpl: 'ui/form/element/wysiwyg',\r\n            content:        '',\r\n            showSpinner:    false,\r\n            loading:        false\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @returns {} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initNodeListener();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @returns {exports}\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('value');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @returns {} Chainable.\r\n         */\r\n        initNodeListener: function () {\r\n            $.async({\r\n                component: this,\r\n                selector: this.elementSelector\r\n            }, this.setElementNode.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        setElementNode: function (node) {\r\n            $(node).bindings({\r\n                value: this.value\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/data-storage.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiClass'\r\n], function ($, _, utils, Class) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n            cacheRequests: true,\r\n            cachedRequestDelay: 50,\r\n            indexField: 'entity_id',\r\n            requestConfig: {\r\n                url: '${ $.updateUrl }',\r\n                method: 'GET',\r\n                dataType: 'json'\r\n            },\r\n            dataScope: '',\r\n            data: {}\r\n        },\r\n\r\n        /**\r\n         * Initializes dataStorage configuration.\r\n         *\r\n         * @returns {DataStorage} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            var scope;\r\n\r\n            this._super();\r\n\r\n            scope = this.dataScope;\r\n\r\n            if (typeof scope === 'string') {\r\n                this.dataScope = scope ? [scope] : [];\r\n            }\r\n\r\n            this._requests = [];\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Extracts data which matches specified set of identifiers.\r\n         *\r\n         * @param {Array} ids - Records identifiers.\r\n         * @returns {Array|Boolean}\r\n         */\r\n        getByIds: function (ids) {\r\n            var result = [],\r\n                hasData;\r\n\r\n            hasData = ids.every(function (id) {\r\n                var item = this.data[id];\r\n\r\n                return item ? result.push(item) : false;\r\n            }, this);\r\n\r\n            return hasData ? result : false;\r\n        },\r\n\r\n        /**\r\n         * Extracts identifiers of provided records.\r\n         * If no records were provided then full list of\r\n         * current data id's will be returned.\r\n         *\r\n         * @param {Object|Array} [data=this.data]\r\n         * @returns {Array}\r\n         */\r\n        getIds: function (data) {\r\n            data = data || this.data;\r\n\r\n            return _.pluck(data, this.indexField);\r\n        },\r\n\r\n        /**\r\n         * Extracts data which matches specified parameters.\r\n         *\r\n         * @param {Object} params - Request parameters.\r\n         * @param {Object} [options={}]\r\n         * @returns {jQueryPromise}\r\n         */\r\n        getData: function (params, options) {\r\n            var cachedRequest;\r\n\r\n            if (this.hasScopeChanged(params)) {\r\n                this.clearRequests();\r\n            } else {\r\n                cachedRequest = this.getRequest(params);\r\n            }\r\n\r\n            options = options || {};\r\n\r\n            return !options.refresh && cachedRequest ?\r\n                this.getRequestData(cachedRequest) :\r\n                this.requestData(params);\r\n        },\r\n\r\n        /**\r\n         * Tells whether one of the parameters defined in the \"dataScope\" has\r\n         * changed since the last request.\r\n         *\r\n         * @param {Object} params - Request parameters.\r\n         * @returns {Boolean}\r\n         */\r\n        hasScopeChanged: function (params) {\r\n            var lastRequest = _.last(this._requests),\r\n                keys,\r\n                diff;\r\n\r\n            if (!lastRequest) {\r\n                return false;\r\n            }\r\n\r\n            diff = utils.compare(lastRequest.params, params);\r\n\r\n            keys = _.pluck(diff.changes, 'path');\r\n            keys = keys.concat(Object.keys(diff.containers));\r\n\r\n            return _.intersection(this.dataScope, keys).length > 0;\r\n        },\r\n\r\n        /**\r\n         * Extends records of current data object\r\n         * with the provided records collection.\r\n         *\r\n         * @param {Array} data - An array of records.\r\n         * @returns {DataStorage} Chainable.\r\n         */\r\n        updateData: function (data) {\r\n            var records = _.indexBy(data || [], this.indexField);\r\n\r\n            _.extend(this.data, records);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sends request to the server with provided parameters.\r\n         *\r\n         * @param {Object} params - Request parameters.\r\n         * @returns {jQueryPromise}\r\n         */\r\n        requestData: function (params) {\r\n            var query = utils.copy(params),\r\n                handler = this.onRequestComplete.bind(this, query),\r\n                request;\r\n\r\n            this.requestConfig.data = query;\r\n            request = $.ajax(this.requestConfig).done(handler);\r\n\r\n            return request;\r\n        },\r\n\r\n        /**\r\n         * Returns request's instance which\r\n         * contains provided parameters.\r\n         *\r\n         * @param {Object} params - Request parameters.\r\n         * @returns {Object} Instance of request.\r\n         */\r\n        getRequest: function (params) {\r\n            return _.find(this._requests, function (request) {\r\n                return _.isEqual(params, request.params);\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Forms data object associated with provided request.\r\n         *\r\n         * @param {Object} request - Request object.\r\n         * @returns {jQueryPromise}\r\n         */\r\n        getRequestData: function (request) {\r\n            var defer = $.Deferred(),\r\n                resolve = defer.resolve.bind(defer),\r\n                delay = this.cachedRequestDelay,\r\n                result;\r\n\r\n            result = {\r\n                items: this.getByIds(request.ids),\r\n                totalRecords: request.totalRecords\r\n            };\r\n\r\n            delay ?\r\n                _.delay(resolve, delay, result) :\r\n                resolve(result);\r\n\r\n            return defer.promise();\r\n        },\r\n\r\n        /**\r\n         * Caches requests object with provdided parameters\r\n         * and data object associated with it.\r\n         *\r\n         * @param {Object} data - Data associated with request.\r\n         * @param {Object} params - Request parameters.\r\n         * @returns {DataStorage} Chainable.\r\n         */\r\n        cacheRequest: function (data, params) {\r\n            var cached = this.getRequest(params);\r\n\r\n            if (cached) {\r\n                this.removeRequest(cached);\r\n            }\r\n\r\n            this._requests.push({\r\n                ids: this.getIds(data.items),\r\n                params: params,\r\n                totalRecords: data.totalRecords\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Clears all cached requests.\r\n         *\r\n         * @returns {DataStorage} Chainable.\r\n         */\r\n        clearRequests: function () {\r\n            this._requests.splice(0);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes provided request object from cached requests list.\r\n         *\r\n         * @param {Object} request - Request object.\r\n         * @returns {DataStorage} Chainable.\r\n         */\r\n        removeRequest: function (request) {\r\n            var requests = this._requests,\r\n                index = requests.indexOf(request);\r\n\r\n            if (~index) {\r\n                requests.splice(index, 1);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if request with a specified parameters was cached.\r\n         *\r\n         * @param {Object} params - Parameters of the request.\r\n         * @returns {Boolean}\r\n         */\r\n        wasRequested: function (params) {\r\n            return !!this.getRequest(params);\r\n        },\r\n\r\n        /**\r\n         * Handles successful data request.\r\n         *\r\n         * @param {Object} params - Request parameters.\r\n         * @param {Object} data - Response data.\r\n         */\r\n        onRequestComplete: function (params, data) {\r\n            this.updateData(data.items);\r\n\r\n            if (this.cacheRequests) {\r\n                this.cacheRequest(data, params);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/dnd.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'underscore',\r\n    'uiRegistry',\r\n    'uiClass'\r\n], function (ko, $, _, registry, Class) {\r\n    'use strict';\r\n\r\n    var isTouchDevice = typeof document.ontouchstart !== 'undefined',\r\n        transformProp;\r\n\r\n    /**\r\n     * Defines supported css 'transform' property.\r\n     *\r\n     * @returns {String|Undefined}\r\n     */\r\n    transformProp = (function () {\r\n        var style = document.body.style,\r\n            base = 'Transform',\r\n            vendors = ['webkit', 'moz', 'ms', 'o'],\r\n            vi = vendors.length,\r\n            property;\r\n\r\n        if (typeof style.transform != 'undefined') {\r\n            return 'transform';\r\n        }\r\n\r\n        while (vi--) {\r\n            property = vendors[vi] + base;\r\n\r\n            if (typeof style[property] != 'undefined') {\r\n                return property;\r\n            }\r\n        }\r\n    })();\r\n\r\n    /**\r\n     * Returns first touch data if it's available.\r\n     *\r\n     * @param {(MouseEvent|TouchEvent)} e - Event object.\r\n     * @returns {Object}\r\n     */\r\n    function getTouch(e) {\r\n        return e.touches ? e.touches[0] : e;\r\n    }\r\n\r\n    /**\r\n     * Moves specified DOM element to the x and y coordinates.\r\n     *\r\n     * @param {HTMLElement} elem - Element to be relocated.\r\n     * @param {Number} x - X coordinate.\r\n     * @param {Number} y - Y coordinate.\r\n     */\r\n    function locate(elem, x, y) {\r\n        var value = 'translate(' + x + 'px,' + y + 'px)';\r\n\r\n        elem.style[transformProp] = value;\r\n    }\r\n\r\n    /*eslint-disable no-extra-parens*/\r\n    /**\r\n     * Checks if specified coordinate is inside of the provided area.\r\n     *\r\n     * @param {Number} x - X coordinate.\r\n     * @param {Number} y - Y coordinate.\r\n     * @param {Object} area - Object which represents area.\r\n     * @returns {Boolean}\r\n     */\r\n    function isInside(x, y, area) {\r\n        return (\r\n            area &&\r\n            x >= area.left && x <= area.right &&\r\n            y >= area.top && y <= area.bottom\r\n        );\r\n    }\r\n\r\n    /*eslint-enable no-extra-parens*/\r\n\r\n    /**\r\n     * Calculates distance between two points.\r\n     *\r\n     * @param {Number} x1 - X coordinate of a first point.\r\n     * @param {Number} y1 - Y coordinate of a first point.\r\n     * @param {Number} x2 - X coordinate of a second point.\r\n     * @param {Number} y2 - Y coordinate of a second point.\r\n     * @returns {Number} Distance between points.\r\n     */\r\n    function distance(x1, y1, x2, y2) {\r\n        var dx = x2 - x1,\r\n            dy = y2 - y1;\r\n\r\n        dx *= dx;\r\n        dy *= dy;\r\n\r\n        return Math.sqrt(dx + dy);\r\n    }\r\n\r\n    /**\r\n     * Returns viewModel associated with a provided DOM element.\r\n     *\r\n     * @param {HTMLElement} elem\r\n     * @returns {Object|Array}\r\n     */\r\n    function getModel(elem) {\r\n        return ko.dataFor(elem);\r\n    }\r\n\r\n    /**\r\n     * Checks whether cols are identical\r\n     *\r\n     * @param {HTMLElement} c1\r\n     * @param {HTMLElement} c2\r\n     * @returns {Boolean}\r\n     */\r\n    function compareCols(c1, c2) {\r\n        return c1.cellIndex === c2.cellIndex;\r\n    }\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n            rootSelector: '${ $.columnsProvider }:.admin__data-grid-wrap',\r\n            tableSelector: '${ $.rootSelector } -> table.data-grid',\r\n            mainTableSelector: '[data-role=\"grid\"]',\r\n            columnSelector: '${ $.tableSelector } thead tr th',\r\n            noSelectClass: '_no-select',\r\n            hiddenClass: '_hidden',\r\n            fixedX: false,\r\n            fixedY: true,\r\n            minDistance: 2,\r\n            columns: []\r\n        },\r\n\r\n        /**\r\n         * Initializes Dnd component.\r\n         *\r\n         * @returns {Dnd} Chainable.\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(\r\n                this,\r\n                'initTable',\r\n                'initColumn',\r\n                'removeColumn',\r\n                'onMouseMove',\r\n                'onMouseUp',\r\n                'onMouseDown'\r\n            );\r\n\r\n            this.$body = $('body');\r\n\r\n            this._super()\r\n                .initListeners();\r\n\r\n            $.async(this.tableSelector, this.initTable);\r\n            $.async(this.columnSelector, this.initColumn);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Binds necessary events listeners.\r\n         *\r\n         * @returns {Dnd} Chainbale.\r\n         */\r\n        initListeners: function () {\r\n            if (isTouchDevice) {\r\n                $(document).on({\r\n                    touchmove: this.onMouseMove,\r\n                    touchend: this.onMouseUp,\r\n                    touchleave: this.onMouseUp\r\n                });\r\n            } else {\r\n                $(document).on({\r\n                    mousemove: this.onMouseMove,\r\n                    mouseup: this.onMouseUp\r\n                });\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Defines specified table element as a main container.\r\n         *\r\n         * @param {HTMLTableElement} table\r\n         * @returns {Dnd} Chainable.\r\n         */\r\n        initTable: function (table) {\r\n            this.table =  $(table).is(this.mainTableSelector) ?  table : this.table;\r\n\r\n            $(table).addClass('data-grid-draggable');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets specified column as a draggable element.\r\n         *\r\n         * @param {HTMLTableHeaderCellElement} column - Columns header element.\r\n         * @returns {Dnd} Chainable.\r\n         */\r\n        initColumn: function (column) {\r\n            var model = getModel(column),\r\n                eventName;\r\n\r\n            if (!model || !model.draggable) {\r\n                return this;\r\n            }\r\n\r\n            if (!ko.es5.isTracked(model, 'dragover')) {\r\n                model.track('dragover');\r\n            }\r\n\r\n            this.columns.push(column);\r\n\r\n            $(column).bindings({\r\n                css: {\r\n                    '_dragover-left': ko.computed(function () {\r\n                        return model.dragover === 'right';\r\n                    }),\r\n                    '_dragover-right': ko.computed(function () {\r\n                        return model.dragover === 'left';\r\n                    })\r\n                }\r\n            });\r\n\r\n            eventName = isTouchDevice ?\r\n                'touchstart' :\r\n                'mousedown';\r\n\r\n            $(column).on(eventName, this.onMouseDown);\r\n            $.async.remove(column, this.removeColumn);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes specified column element from the columns array.\r\n         *\r\n         * @param {HTMLTableHeaderCellElement} column - Columns header element.\r\n         * @returns {Dnd} Chainable.\r\n         */\r\n        removeColumn: function (column) {\r\n            var columns = this.columns,\r\n                index = columns.indexOf(column);\r\n\r\n            if (~index) {\r\n                columns.splice(index, 1);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns index of column.\r\n         *\r\n         * @param {HTMLTableHeaderCellElement} elem\r\n         * @returns {Number}\r\n         */\r\n        _getColumnIndex: function (elem) {\r\n            return _.toArray(elem.parentNode.cells).indexOf(elem);\r\n        },\r\n\r\n        /**\r\n         * Calculates coordinates of draggable elements.\r\n         *\r\n         * @returns {Dnd} Chainbale.\r\n         */\r\n        _cacheCoords: function () {\r\n            var container   = this.table.getBoundingClientRect(),\r\n                bodyRect    = document.body.getBoundingClientRect(),\r\n                grabbed     = this.grabbed,\r\n                dragElem    = grabbed.elem,\r\n                cells       = _.toArray(dragElem.parentNode.cells),\r\n                rect;\r\n\r\n            this.coords = this.columns.map(function (column) {\r\n                var data,\r\n                    colIndex = _.findIndex(cells, function (cell) {\r\n                        return compareCols(cell, column);\r\n                    });\r\n\r\n                rect = column.getBoundingClientRect();\r\n\r\n                data = {\r\n                    index: colIndex,\r\n                    target: column,\r\n                    orig: rect,\r\n                    left: rect.left - bodyRect.left,\r\n                    right: rect.right - bodyRect.left,\r\n                    top: rect.top - bodyRect.top,\r\n                    bottom: container.bottom - bodyRect.top\r\n                };\r\n\r\n                if (column === dragElem) {\r\n                    this.dragArea = data;\r\n\r\n                    grabbed.shiftX = rect.left - grabbed.x;\r\n                    grabbed.shiftY = rect.top - grabbed.y;\r\n                }\r\n\r\n                return data;\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates clone of a target table with only specified column visible.\r\n         *\r\n         * @param {HTMLTableHeaderCellElement} elem - Dragging column.\r\n         * @returns {Dnd} Chainbale.\r\n         */\r\n        _cloneTable: function (elem) {\r\n            var clone       = this.table.cloneNode(true),\r\n                columnIndex = this._getColumnIndex(elem),\r\n                headRow     = clone.tHead.firstElementChild,\r\n                headCells   = _.toArray(headRow.cells),\r\n                tableBody   = clone.tBodies[0],\r\n                bodyRows    = _.toArray(tableBody.children),\r\n                origTrs     = this.table.tBodies[0].children;\r\n\r\n            clone.style.width = elem.offsetWidth + 'px';\r\n\r\n            headCells.forEach(function (th, index) {\r\n                if (index !== columnIndex) {\r\n                    headRow.removeChild(th);\r\n                }\r\n            });\r\n\r\n            headRow.cells[0].style.height = elem.offsetHeight + 'px';\r\n\r\n            bodyRows.forEach(function (row, rowIndex) {\r\n                var cells = row.cells,\r\n                    cell;\r\n\r\n                if (cells.length !== headCells.length) {\r\n                    tableBody.removeChild(row);\r\n\r\n                    return;\r\n                }\r\n\r\n                cell = row.cells[columnIndex].cloneNode(true);\r\n\r\n                while (row.firstElementChild) {\r\n                    row.removeChild(row.firstElementChild);\r\n                }\r\n\r\n                cell.style.height = origTrs[rowIndex].cells[columnIndex].offsetHeight + 'px';\r\n\r\n                row.appendChild(cell);\r\n            });\r\n\r\n            this.dragTable = clone;\r\n\r\n            $(clone)\r\n                .addClass('_dragging-copy')\r\n                .appendTo('body');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Matches provided coordinates to available areas.\r\n         *\r\n         * @param {Number} x - X coordinate of a mouse pointer.\r\n         * @param {Number} y - Y coordinate of a mouse pointer.\r\n         * @returns {Object|Undefined} Matched area.\r\n         */\r\n        _getDropArea: function (x, y) {\r\n            return _.find(this.coords, function (area) {\r\n                return isInside(x, y, area);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Updates state of hovered areas.\r\n         *\r\n         * @param {Number} x - X coordinate of a mouse pointer.\r\n         * @param {Number} y - Y coordinate of a mouse pointer.\r\n         */\r\n        _updateAreas: function (x, y) {\r\n            var leavedArea = this.dropArea,\r\n                area = this.dropArea = this._getDropArea(x, y);\r\n\r\n            if (leavedArea) {\r\n                this.dragleave(leavedArea);\r\n            }\r\n\r\n            if (area && !compareCols(area.target, this.dragArea.target)) {\r\n                this.dragenter(area);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Grab action handler.\r\n         *\r\n         * @param {Number} x - X coordinate of a grabbed point.\r\n         * @param {Number} y - Y coordinate of a grabbed point.\r\n         * @param {HTMLElement} elem - Grabbed elemenet.\r\n         */\r\n        grab: function (x, y, elem) {\r\n            this.initDrag = true;\r\n\r\n            this.grabbed = {\r\n                x: x,\r\n                y: y,\r\n                elem: elem\r\n            };\r\n\r\n            this.$body.addClass(this.noSelectClass);\r\n        },\r\n\r\n        /**\r\n         * Dragstart action handler.\r\n         *\r\n         * @param {HTMLTableHeaderCellElement} elem - Element which is dragging.\r\n         */\r\n        dragstart: function (elem) {\r\n            this.initDrag = false;\r\n            this.dropArea = false;\r\n            this.dragging = true;\r\n\r\n            getModel(elem).dragging(true);\r\n\r\n            this._cacheCoords()\r\n                ._cloneTable(elem);\r\n        },\r\n\r\n        /**\r\n         * Drag action handler. Locates draggable\r\n         * grid at a specified coordinates.\r\n         *\r\n         * @param {Number} x - X coordinate.\r\n         * @param {Number} y - Y coordinate.\r\n         */\r\n        drag: function (x, y) {\r\n            var grabbed  = this.grabbed,\r\n                dragArea = this.dragArea,\r\n                posX     = x + grabbed.shiftX,\r\n                posY     = y + grabbed.shiftY;\r\n\r\n            if (this.fixedX) {\r\n                x    = dragArea.left;\r\n                posX = dragArea.orig.left;\r\n            }\r\n\r\n            if (this.fixedY) {\r\n                y    = dragArea.top;\r\n                posY = dragArea.orig.top;\r\n            }\r\n\r\n            locate(this.dragTable, posX, posY);\r\n\r\n            if (!isInside(x, y, this.dropArea)) {\r\n                this._updateAreas(x, y);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Dragenter action handler.\r\n         *\r\n         * @param {Object} dropArea\r\n         */\r\n        dragenter: function (dropArea) {\r\n            var direction = this.dragArea.index < dropArea.index ?\r\n                'left' :\r\n                'right';\r\n\r\n            getModel(dropArea.target).dragover = direction;\r\n        },\r\n\r\n        /**\r\n         * Dragleave action handler.\r\n         *\r\n         * @param {Object} dropArea\r\n         */\r\n        dragleave: function (dropArea) {\r\n            getModel(dropArea.target).dragover = false;\r\n        },\r\n\r\n        /**\r\n         * Dragend action handler.\r\n         *\r\n         * @param {Object} dragArea\r\n         */\r\n        dragend: function (dragArea) {\r\n            var dropArea = this.dropArea,\r\n                dragElem = dragArea.target;\r\n\r\n            this.dragging = false;\r\n\r\n            document.body.removeChild(this.dragTable);\r\n\r\n            getModel(dragElem).dragging(false);\r\n\r\n            if (dropArea && !compareCols(dropArea.target, dragElem)) {\r\n                this.drop(dropArea, dragArea);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Drop action handler.\r\n         *\r\n         * @param {Object} dropArea\r\n         * @param {Object} dragArea\r\n         */\r\n        drop: function (dropArea, dragArea) {\r\n            var dropModel = getModel(dropArea.target),\r\n                dragModel = getModel(dragArea.target);\r\n\r\n            getModel(this.table).insertChild(dragModel, dropModel);\r\n            dropModel.dragover = false;\r\n        },\r\n\r\n        /**\r\n         * Documents' 'mousemove' event handler.\r\n         *\r\n         * @param {(MouseEvent|TouchEvent)} e - Event object.\r\n         */\r\n        onMouseMove: function (e) {\r\n            var grab    = this.grabbed,\r\n                touch   = getTouch(e),\r\n                x       = touch.pageX,\r\n                y       = touch.pageY;\r\n\r\n            if (this.initDrag || this.dragging) {\r\n                e.preventDefault();\r\n            }\r\n\r\n            if (this.initDrag && distance(x, y, grab.x, grab.y) >= this.minDistance) {\r\n                this.dragstart(grab.elem);\r\n            }\r\n\r\n            if (this.dragging) {\r\n                this.drag(x, y);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Documents' 'mouseup' event handler.\r\n         */\r\n        onMouseUp: function () {\r\n            if (this.initDrag || this.dragging) {\r\n                this.initDrag = false;\r\n                this.$body.removeClass(this.noSelectClass);\r\n            }\r\n\r\n            if (this.dragging) {\r\n                this.dragend(this.dragArea);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Columns' 'mousedown' event handler.\r\n         *\r\n         * @param {(MouseEvent|TouchEvent)} e - Event object.\r\n         */\r\n        onMouseDown: function (e) {\r\n            var touch = getTouch(e);\r\n\r\n            this.grab(touch.pageX, touch.pageY, e.currentTarget);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/export.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'uiElement'\r\n], function ($, _, Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            template: 'ui/grid/exportButton',\r\n            selectProvider: 'ns = ${ $.ns }, index = ids',\r\n            checked: '',\r\n            modules: {\r\n                selections: '${ $.selectProvider }'\r\n            }\r\n        },\r\n\r\n        initialize: function () {\r\n            this._super()\r\n                .initChecked();\r\n        },\r\n\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('checked');\r\n\r\n            return this;\r\n        },\r\n\r\n        initChecked: function () {\r\n            if (!this.checked()) {\r\n                this.checked(\r\n                    this.options[0].value\r\n                );\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        getParams: function () {\r\n            var selections = this.selections(),\r\n                data = selections ? selections.getSelections() : null,\r\n                itemsType,\r\n                result = {};\r\n\r\n            if (data) {\r\n                itemsType = data.excludeMode ? 'excluded' : 'selected';\r\n                result.filters = data.params.filters;\r\n                result.search = data.params.search;\r\n                result.namespace = data.params.namespace;\r\n                result[itemsType] = data[itemsType];\r\n\r\n                if (!result[itemsType].length) {\r\n                    result[itemsType] = false;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        getActiveOption: function () {\r\n            return _.findWhere(this.options, {\r\n                value: this.checked()\r\n            });\r\n        },\r\n\r\n        buildOptionUrl: function (option) {\r\n            var params = this.getParams();\r\n\r\n            if (!params) {\r\n                return 'javascript:void(0);';\r\n            }\r\n\r\n            return option.url + '?' + $.param(params);\r\n            //TODO: MAGETWO-40250\r\n        },\r\n\r\n        applyOption: function () {\r\n            var option = this.getActiveOption(),\r\n                url = this.buildOptionUrl(option);\r\n\r\n            location.href = url;\r\n\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/listing.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'Magento_Ui/js/lib/spinner',\r\n    'rjsResolver',\r\n    'uiLayout',\r\n    'uiCollection'\r\n], function (ko, _, loader, resolver, layout, Collection) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            template: 'ui/grid/listing',\r\n            stickyTmpl: 'ui/grid/sticky/listing',\r\n            viewSwitcherTmpl: 'ui/grid/view-switcher',\r\n            positions: false,\r\n            displayMode: 'grid',\r\n            displayModes: {\r\n                grid: {\r\n                    value: 'grid',\r\n                    label: 'Grid',\r\n                    template: '${ $.template }'\r\n                }\r\n            },\r\n            dndConfig: {\r\n                name: '${ $.name }_dnd',\r\n                component: 'Magento_Ui/js/grid/dnd',\r\n                columnsProvider: '${ $.name }',\r\n                enabled: true\r\n            },\r\n            editorConfig: {\r\n                name: '${ $.name }_editor',\r\n                component: 'Magento_Ui/js/grid/editing/editor',\r\n                columnsProvider: '${ $.name }',\r\n                dataProvider: '${ $.provider }',\r\n                enabled: false\r\n            },\r\n            resizeConfig: {\r\n                name: '${ $.name }_resize',\r\n                columnsProvider: '${ $.name }',\r\n                component: 'Magento_Ui/js/grid/resize',\r\n                enabled: false\r\n            },\r\n            imports: {\r\n                rows: '${ $.provider }:data.items'\r\n            },\r\n            listens: {\r\n                elems: 'updatePositions updateVisible',\r\n                '${ $.provider }:reload': 'onBeforeReload',\r\n                '${ $.provider }:reloaded': 'onDataReloaded'\r\n            },\r\n            modules: {\r\n                dnd: '${ $.dndConfig.name }',\r\n                resize: '${ $.resizeConfig.name }'\r\n            },\r\n            tracks: {\r\n                displayMode: true\r\n            },\r\n            statefull: {\r\n                displayMode: true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes Listing component.\r\n         *\r\n         * @returns {Listing} Chainable.\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(this, 'updateVisible');\r\n\r\n            this._super()\r\n                .initDnd()\r\n                .initEditor()\r\n                .initResize();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Listing} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track({\r\n                    rows: [],\r\n                    visibleColumns: []\r\n                });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates drag&drop widget instance.\r\n         *\r\n         * @returns {Listing} Chainable.\r\n         */\r\n        initDnd: function () {\r\n            if (this.dndConfig.enabled) {\r\n                layout([this.dndConfig]);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes resize component.\r\n         *\r\n         * @returns {Listing} Chainable.\r\n         */\r\n        initResize: function () {\r\n            if (this.resizeConfig.enabled) {\r\n                layout([this.resizeConfig]);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates inline editing component.\r\n         *\r\n         * @returns {Listing} Chainable.\r\n         */\r\n        initEditor: function () {\r\n            if (this.editorConfig.enabled) {\r\n                layout([this.editorConfig]);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Called when another element was added to current component.\r\n         *\r\n         * @returns {Listing} Chainable.\r\n         */\r\n        initElement: function (element) {\r\n            var currentCount = this.elems().length,\r\n                totalCount = this.initChildCount;\r\n\r\n            if (totalCount === currentCount) {\r\n                this.initPositions();\r\n            }\r\n\r\n            element.on('visible', this.updateVisible);\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Defines initial order of child elements.\r\n         *\r\n         * @returns {Listing} Chainable.\r\n         */\r\n        initPositions: function () {\r\n            this.on('positions', this.applyPositions.bind(this));\r\n\r\n            this.setStatefull('positions');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates current state of child positions.\r\n         *\r\n         * @returns {Listing} Chainable.\r\n         */\r\n        updatePositions: function () {\r\n            var positions = {};\r\n\r\n            this.elems.each(function (elem, index) {\r\n                positions[elem.index] = index;\r\n            });\r\n\r\n            this.set('positions', positions);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Resorts child elements array according to provided positions.\r\n         *\r\n         * @param {Object} positions - Object where key represents child\r\n         *      index and value is its' position.\r\n         * @returns {Listing} Chainable.\r\n         */\r\n        applyPositions: function (positions) {\r\n            var sorting;\r\n\r\n            sorting = this.elems.map(function (elem) {\r\n                return {\r\n                    elem: elem,\r\n                    position: positions[elem.index]\r\n                };\r\n            });\r\n\r\n            this.insertChild(sorting);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns reference to 'visibleColumns' array.\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getVisible: function () {\r\n            var observable = ko.getObservable(this, 'visibleColumns');\r\n\r\n            return observable || this.visibleColumns;\r\n        },\r\n\r\n        /**\r\n         * Returns path to the template\r\n         * defined for a current display mode.\r\n         *\r\n         * @returns {String} Path to the template.\r\n         */\r\n        getTemplate: function () {\r\n            var mode = this.displayModes[this.displayMode];\r\n\r\n            return mode.template;\r\n        },\r\n\r\n        /**\r\n         * Returns an array of available display modes.\r\n         *\r\n         * @returns {Array<Object>}\r\n         */\r\n        getDisplayModes: function () {\r\n            var modes = this.displayModes;\r\n\r\n            return _.values(modes);\r\n        },\r\n\r\n        /**\r\n         * Sets display mode to provided value.\r\n         *\r\n         * @param {String} index\r\n         * @returns {Listing} Chainable\r\n         */\r\n        setDisplayMode: function (index) {\r\n            this.displayMode = index;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns total number of displayed columns in grid.\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        countVisible: function () {\r\n            return this.visibleColumns.length;\r\n        },\r\n\r\n        /**\r\n         * Updates array of visible columns.\r\n         *\r\n         * @returns {Listing} Chainable.\r\n         */\r\n        updateVisible: function () {\r\n            this.visibleColumns = this.elems.filter('visible');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if grid has data.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasData: function () {\r\n            return !!this.rows && !!this.rows.length;\r\n        },\r\n\r\n        /**\r\n         * Hides loader.\r\n         */\r\n        hideLoader: function () {\r\n            loader.get(this.name).hide();\r\n        },\r\n\r\n        /**\r\n         * Shows loader.\r\n         */\r\n        showLoader: function () {\r\n            loader.get(this.name).show();\r\n        },\r\n\r\n        /**\r\n         * Handler of the data providers' 'reload' event.\r\n         */\r\n        onBeforeReload: function () {\r\n            this.showLoader();\r\n        },\r\n\r\n        /**\r\n         * Handler of the data providers' 'reloaded' event.\r\n         */\r\n        onDataReloaded: function () {\r\n            resolver(this.hideLoader, this);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/massactions.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    'mageUtils',\r\n    'Magento_Ui/js/lib/collapsible',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'Magento_Ui/js/modal/alert',\r\n    'mage/translate'\r\n], function (_, registry, utils, Collapsible, confirm, alert, $t) {\r\n    'use strict';\r\n\r\n    return Collapsible.extend({\r\n        defaults: {\r\n            template: 'ui/grid/actions',\r\n            stickyTmpl: 'ui/grid/sticky/actions',\r\n            selectProvider: 'ns = ${ $.ns }, index = ids',\r\n            actions: [],\r\n            noItemsMsg: $t('You haven\\'t selected any items!'),\r\n            modules: {\r\n                selections: '${ $.selectProvider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Massactions} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('actions');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Applies specified action.\r\n         *\r\n         * @param {String} actionIndex - Actions' identifier.\r\n         * @returns {Massactions} Chainable.\r\n         */\r\n        applyAction: function (actionIndex) {\r\n            var data = this.getSelections(),\r\n                action,\r\n                callback;\r\n\r\n            if (!data.total) {\r\n                alert({\r\n                    content: this.noItemsMsg\r\n                });\r\n\r\n                return this;\r\n            }\r\n\r\n            action   = this.getAction(actionIndex);\r\n            callback = this._getCallback(action, data);\r\n\r\n            action.confirm ?\r\n                this._confirm(action, callback) :\r\n                callback();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Retrieves selections data from the selections provider.\r\n         *\r\n         * @returns {Object|Undefined}\r\n         */\r\n        getSelections: function () {\r\n            var provider = this.selections(),\r\n                selections = provider && provider.getSelections();\r\n\r\n            return selections;\r\n        },\r\n\r\n        /**\r\n         * Retrieves action object associated with a specified index.\r\n         *\r\n         * @param {String} actionIndex - Actions' identifier.\r\n         * @returns {Object} Action object.\r\n         */\r\n        getAction: function (actionIndex) {\r\n            return _.findWhere(this.actions(), {\r\n                type: actionIndex\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Adds new action. If action with a specfied identifier\r\n         * already exists, than the original one will be overrided.\r\n         *\r\n         * @param {Object} action - Action object.\r\n         * @returns {Massactions} Chainable.\r\n         */\r\n        addAction: function (action) {\r\n            var actions = this.actions(),\r\n                index = _.findIndex(actions, {\r\n                    type: action.type\r\n                });\r\n\r\n            ~index ?\r\n                actions[index] = action :\r\n                actions.push(action);\r\n\r\n            this.actions(actions);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates action callback based on its' data. If action doesn't spicify\r\n         * a callback function than the default one will be used.\r\n         *\r\n         * @private\r\n         * @param {Object} action - Actions' object.\r\n         * @param {Object} selections - Selections data.\r\n         * @returns {Function} Callback function.\r\n         */\r\n        _getCallback: function (action, selections) {\r\n            var callback = action.callback,\r\n                args     = [action, selections];\r\n\r\n            if (utils.isObject(callback)) {\r\n                args.unshift(callback.target);\r\n\r\n                callback = registry.async(callback.provider);\r\n            } else if (typeof callback != 'function') {\r\n                callback = this.defaultCallback.bind(this);\r\n            }\r\n\r\n            return function () {\r\n                callback.apply(null, args);\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Default action callback. Sends selections data\r\n         * via POST request.\r\n         *\r\n         * @param {Object} action - Action data.\r\n         * @param {Object} data - Selections data.\r\n         */\r\n        defaultCallback: function (action, data) {\r\n            var itemsType = data.excludeMode ? 'excluded' : 'selected',\r\n                selections = {};\r\n\r\n            selections[itemsType] = data[itemsType];\r\n\r\n            if (!selections[itemsType].length) {\r\n                selections[itemsType] = false;\r\n            }\r\n\r\n            _.extend(selections, data.params || {});\r\n\r\n            utils.submit({\r\n                url: action.url,\r\n                data: selections\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Shows actions' confirmation window.\r\n         *\r\n         * @param {Object} action - Actions' data.\r\n         * @param {Function} callback - Callback that will be\r\n         *      invoked if action is confirmed.\r\n         */\r\n        _confirm: function (action, callback) {\r\n            var confirmData = action.confirm;\r\n\r\n            confirm({\r\n                title: confirmData.title,\r\n                content: confirmData.message,\r\n                actions: {\r\n                    confirm: callback\r\n                }\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/provider.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mageUtils',\r\n    'rjsResolver',\r\n    'uiLayout',\r\n    'Magento_Ui/js/modal/alert',\r\n    'mage/translate',\r\n    'uiElement'\r\n], function ($, _, utils, resolver, layout, alert, $t, Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            firstLoad: true,\r\n            storageConfig: {\r\n                component: 'Magento_Ui/js/grid/data-storage',\r\n                provider: '${ $.storageConfig.name }',\r\n                name: '${ $.name }_storage',\r\n                updateUrl: '${ $.update_url }'\r\n            },\r\n            listens: {\r\n                params: 'onParamsChange',\r\n                requestConfig: 'updateRequestConfig'\r\n            },\r\n            ignoreTmpls: {\r\n                data: true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes provider component.\r\n         *\r\n         * @returns {Provider} Chainable.\r\n         */\r\n        initialize: function () {\r\n            utils.limit(this, 'onParamsChange', 5);\r\n            _.bindAll(this, 'onReload');\r\n\r\n            this._super()\r\n                .initStorage()\r\n                .clearData();\r\n\r\n            // Load data when there will\r\n            // be no more pending assets.\r\n            resolver(this.reload, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes storage component.\r\n         *\r\n         * @returns {Provider} Chainable.\r\n         */\r\n        initStorage: function () {\r\n            layout([this.storageConfig]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Clears provider's data properties.\r\n         *\r\n         * @returns {Provider} Chainable.\r\n         */\r\n        clearData: function () {\r\n            this.setData({\r\n                items: [],\r\n                totalRecords: 0\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Overrides current data with a provided one.\r\n         *\r\n         * @param {Object} data - New data object.\r\n         * @returns {Provider} Chainable.\r\n         */\r\n        setData: function (data) {\r\n            data = this.processData(data);\r\n\r\n            this.set('data', data);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Processes data before applying it.\r\n         *\r\n         * @param {Object} data - Data to be processed.\r\n         * @returns {Object}\r\n         */\r\n        processData: function (data) {\r\n            var items = data.items;\r\n\r\n            _.each(items, function (record, index) {\r\n                record._rowIndex = index;\r\n            });\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Reloads data with current parameters.\r\n         *\r\n         * @returns {Promise} Reload promise object.\r\n         */\r\n        reload: function (options) {\r\n            var request = this.storage().getData(this.params, options);\r\n\r\n            this.trigger('reload');\r\n\r\n            request\r\n                .done(this.onReload)\r\n                .fail(this.onError);\r\n\r\n            return request;\r\n        },\r\n\r\n        /**\r\n         * Handles changes of 'params' object.\r\n         */\r\n        onParamsChange: function () {\r\n            // It's necessary to make a reload only\r\n            // after the initial loading has been made.\r\n            if (!this.firstLoad) {\r\n                this.reload();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handles reload error.\r\n         */\r\n        onError: function (xhr) {\r\n            if (xhr.statusText === 'abort') {\r\n                return;\r\n            }\r\n\r\n            alert({\r\n                content: $t('Something went wrong.')\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Handles successful data reload.\r\n         *\r\n         * @param {Object} data - Retrieved data object.\r\n         */\r\n        onReload: function (data) {\r\n            this.firstLoad = false;\r\n\r\n            this.setData(data)\r\n                .trigger('reloaded');\r\n        },\r\n\r\n        /**\r\n         * Updates storage's request configuration\r\n         *\r\n         * @param {Object} requestConfig\r\n         */\r\n        updateRequestConfig: function (requestConfig) {\r\n            if (this.storage()) {\r\n                _.extend(this.storage().requestConfig, requestConfig);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/resize.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'ko',\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiRegistry',\r\n    'Magento_Ui/js/lib/knockout/extender/bound-nodes',\r\n    'uiElement'\r\n], function ($, ko, _, utils, registry, boundedNodes, Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            rootSelector: '${ $.columnsProvider }:.admin__data-grid-wrap',\r\n            tableSelector: '${ $.rootSelector } -> table.data-grid',\r\n            mainTableSelector: '[data-role=\"grid\"]',\r\n            columnSelector: '${ $.tableSelector } thead tr th',\r\n            fieldSelector: '${ $.tableSelector } tbody tr td',\r\n\r\n            imports: {\r\n                storageColumnsData: '${ $.storageConfig.path }.storageColumnsData'\r\n            },\r\n            storageColumnsData: {},\r\n            columnsElements: {},\r\n            tableWidth: 0,\r\n            sumColumnsWidth: 0,\r\n            showLines: 4,\r\n            resizableElementClass: 'shadow-div',\r\n            resizingColumnClass: '_resizing',\r\n            fixedLayoutClass: '_layout-fixed',\r\n            inResizeClass: '_in-resize',\r\n            visibleClass: '_resize-visible',\r\n            cellContentElement: 'div.data-grid-cell-content',\r\n            minColumnWidth: 40,\r\n            layoutFixedPolyfillIterator: 0,\r\n            windowResize: false,\r\n            resizable: false,\r\n            resizeConfig: {\r\n                maxRowsHeight: [],\r\n                curResizeElem: {},\r\n                depResizeElem: {},\r\n                previousWidth: null\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initialize application -\r\n         * binding functions context,\r\n         * set handlers for table elements\r\n         *\r\n         * @returns {Object} Chainable\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(\r\n                this,\r\n                'initTable',\r\n                'initColumn',\r\n                'mousedownHandler',\r\n                'mousemoveHandler',\r\n                'mouseupHandler',\r\n                'refreshLastColumn',\r\n                'refreshMaxRowHeight',\r\n                'preprocessingWidth',\r\n                '_eventProxy',\r\n                'checkAfterResize'\r\n            );\r\n\r\n            this._super();\r\n            this.observe(['maxRowsHeight']);\r\n            this.maxRowsHeight([]);\r\n\r\n            $.async(this.tableSelector, this.initTable);\r\n            $.async(this.columnSelector, this.initColumn);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Set table element and adds handler to mousedown on headers\r\n         *\r\n         * @returns {Object} Chainable\r\n         */\r\n        initTable: function (table) {\r\n            if ($(table).is(this.mainTableSelector))\r\n            {\r\n                this.table = table;\r\n                this.tableWidth = $(table).outerWidth();\r\n                $(window).resize(this.checkAfterResize);\r\n            }\r\n\r\n            //TODO - Must be deleted when Firefox fixed problem with table-layout: fixed\r\n            //ticket to Firefox: https://bugs.webkit.org/show_bug.cgi?id=90068\r\n            if (navigator.userAgent.search(/Firefox/) > -1) {\r\n                this._layoutFixedPolyfill();\r\n            }\r\n\r\n            $(table).addClass(this.fixedLayoutClass);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Window resize handler,\r\n         * check changes on table width and\r\n         * set new width to variable\r\n         * after window resize start preprocessingWidth method\r\n         */\r\n        checkAfterResize: function () {\r\n            var tableWidth,\r\n                self = this;\r\n\r\n            setTimeout(function () {\r\n                tableWidth = $(self.table).outerWidth();\r\n\r\n                if (self.tableWidth !== tableWidth) {\r\n                    self.tableWidth = tableWidth;\r\n                } else {\r\n                    self.preprocessingWidth();\r\n                }\r\n            }, 300);\r\n        },\r\n\r\n        /**\r\n         * Check conditions to set minimal width\r\n         */\r\n        checkSumColumnsWidth: function () {\r\n            var table = $(this.table),\r\n                elems = table.find('th:not([style*=\"width: auto\"]):visible'),\r\n                elemsWidthMin = table.find('th[style*=\"width: ' + (this.minColumnWidth - 1) + 'px\"]:visible'),\r\n                elemsWidthAuto = table.find('th[style*=\"width: auto\"]:visible'),\r\n                model;\r\n\r\n            this.sumColumnsWidth = 0;\r\n            _.each(elems, function (elem) {\r\n                model = ko.dataFor(elem);\r\n                model.width && model.width !== 'auto' ? this.sumColumnsWidth += model.width : false;\r\n            }, this);\r\n\r\n            if (\r\n                    this.sumColumnsWidth + elemsWidthAuto.length *\r\n                    this.minColumnWidth + elemsWidthMin.length *\r\n                    this.minColumnWidth > this.tableWidth\r\n            ) {\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Set minimal width to element with \"auto\" width\r\n         */\r\n        setWidthToColumnsWidthAuto: function () {\r\n            var elemsWidthAuto = $(this.table).find('th[style*=\"width: auto\"]:visible');\r\n\r\n            _.each(elemsWidthAuto, function (elem) {\r\n                $(elem).outerWidth(this.minColumnWidth - 1);\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Check conditions to set auto width\r\n         */\r\n        hasMinimal: function () {\r\n            var table = $(this.table),\r\n                elemsWidthMin = table.find('th[style*=\"width: ' + (this.minColumnWidth - 1) + 'px\"]:visible'),\r\n                elemsWidthAuto = table.find('th[style*=\"width: auto\"]:visible');\r\n\r\n            if (\r\n                    elemsWidthAuto && this.sumColumnsWidth + elemsWidthAuto.length *\r\n                    this.minColumnWidth + elemsWidthMin.length * this.minColumnWidth + 5 < this.tableWidth\r\n            ) {\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Set \"auto\" width to element with minimal width\r\n         */\r\n        setAuto: function () {\r\n            var elemsWidthAuto = $(this.table).find('th[style*=\"width: ' + (this.minColumnWidth - 1) + 'px\"]:visible');\r\n\r\n            _.each(elemsWidthAuto, function (elem) {\r\n                $(elem).outerWidth('auto');\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Check columns width and preprocessing\r\n         */\r\n        preprocessingWidth: function () {\r\n            if (this.checkSumColumnsWidth()) {\r\n                this.setWidthToColumnsWidthAuto();\r\n            } else if (this.hasMinimal()) {\r\n                this.setAuto();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Init columns elements,\r\n         * set width to current column element,\r\n         * add resizable element to columns header,\r\n         * check and add no-resize class to last column,\r\n         * stop parents events,\r\n         * add handler to visibility column\r\n         *\r\n         * @param {Object} column - columns header element (th)\r\n         */\r\n        initColumn: function (column) {\r\n            var model = ko.dataFor(column),\r\n                ctxIndex = this.getCtxIndex(ko.contextFor(column)),\r\n                table = this.table;\r\n\r\n            model.width = this.getDefaultWidth(column);\r\n\r\n            if (!this.hasColumn(model, ctxIndex, false)) {\r\n                this.columnsElements[model.index] = this.columnsElements[model.index] || {};\r\n                this.columnsElements[model.index][ctxIndex] = column;\r\n                this.initResizableElement(column);\r\n                this.setStopPropagationHandler(column);\r\n                $(column).outerWidth(model.width);\r\n            }\r\n\r\n            this.refreshLastColumn(column);\r\n            this.preprocessingWidth();\r\n\r\n            model.on('visible', this.refreshLastColumn.bind(this, column));\r\n            model.on('visible', this.preprocessingWidth.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Hack for mozilla firefox\r\n         */\r\n        _layoutFixedPolyfill: function () {\r\n            var self = this;\r\n\r\n            setTimeout(function () {\r\n                if (self.layoutFixedPolyfillIterator < 20) {\r\n                    $(window).resize();\r\n                    self.layoutFixedPolyfillIterator++;\r\n                    self._layoutFixedPolyfill();\r\n                } else {\r\n                    return false;\r\n                }\r\n            }, 500);\r\n        },\r\n\r\n        /**\r\n         * Check element is resizable or not\r\n         * and append resizable element to DOM\r\n         *\r\n         * @param {Object} column - columns header element (th)\r\n         * @returns {Boolean}\r\n         */\r\n        initResizableElement: function (column) {\r\n            var model = ko.dataFor(column),\r\n                ctx = ko.contextFor(column),\r\n                tempalteDragElement = '<div class=\"' + ctx.$parent.resizeConfig.classResize + '\"></div>';\r\n\r\n            if (_.isUndefined(model.resizeEnabled) || model.resizeEnabled) {\r\n                $(column).append(tempalteDragElement);\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Check event target and if need stop parents event,\r\n         *\r\n         * @param {Object} column - columns header element (th)\r\n         * @returns {Boolean}\r\n         */\r\n        setStopPropagationHandler: function (column) {\r\n            var events,\r\n                click,\r\n                mousedown;\r\n\r\n            $(column).on('click', this._eventProxy);\r\n            $(column).on('mousedown', this._eventProxy);\r\n\r\n            events = $._data(column, 'events');\r\n\r\n            click = events.click;\r\n            mousedown = events.mousedown;\r\n            click.unshift(click.pop());\r\n            mousedown.unshift(mousedown.pop());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Check event target and stop event if need\r\n         *\r\n         * @param {Object} event\r\n         */\r\n        _eventProxy: function (event) {\r\n            if ($(event.target).is('.' + this.resizableElementClass)) {\r\n\r\n                if (event.type === 'click') {\r\n                    event.stopImmediatePropagation();\r\n                } else if (event.type === 'mousedown') {\r\n                    this.mousedownHandler(event);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Check visible columns and set disable class to resizable elements,\r\n         *\r\n         * @param {Object} column - columns header element (th)\r\n         */\r\n        refreshLastColumn: function (column) {\r\n            var i = 0,\r\n                columns = $(column).parent().children().not(':hidden'),\r\n                length = columns.length;\r\n\r\n            $('.' + this.visibleClass).removeClass(this.visibleClass);\r\n\r\n            $(column).parent().children().not(':hidden').last().addClass(this.visibleClass);\r\n\r\n            for (i; i < length; i++) {\r\n\r\n                if (!columns.eq(i).find('.' + this.resizableElementClass).length && i) {\r\n                    columns.eq(i - 1).addClass(this.visibleClass);\r\n                }\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * Refresh max height to row elements,\r\n         *\r\n         * @param {Object} elem - (td)\r\n         */\r\n        refreshMaxRowHeight: function (elem) {\r\n            var rowsH = this.maxRowsHeight(),\r\n                curEL = $(elem).find('div'),\r\n                height,\r\n                obj = this.hasRow($(elem).parent()[0], true);\r\n\r\n            curEL.css('white-space', 'nowrap');\r\n            height = curEL.height() * this.showLines;\r\n            curEL.css('white-space', 'normal');\r\n\r\n            if (obj) {\r\n                if (obj.maxHeight < height) {\r\n                    rowsH[_.indexOf(rowsH, obj)].maxHeight = height;\r\n                } else {\r\n                    return false;\r\n                }\r\n            } else {\r\n                rowsH.push({\r\n                    elem: $(elem).parent()[0],\r\n                    maxHeight: height\r\n                });\r\n            }\r\n\r\n            $(elem).parent().children().find(this.cellContentElement).css('max-height', height + 'px');\r\n            this.maxRowsHeight(rowsH);\r\n        },\r\n\r\n        /**\r\n         * Set resize class to elements when resizable\r\n         */\r\n        _setResizeClass: function () {\r\n            var rowElements = $(this.table).find('tr');\r\n\r\n            rowElements\r\n                .find('td:eq(' + this.resizeConfig.curResizeElem.ctx.$index() + ')')\r\n                .addClass(this.resizingColumnClass);\r\n            rowElements\r\n                .find('td:eq(' + this.resizeConfig.depResizeElem.ctx.$index() + ')')\r\n                .addClass(this.resizingColumnClass);\r\n        },\r\n\r\n        /**\r\n         * Remove resize class to elements when resizable\r\n         */\r\n        _removeResizeClass: function () {\r\n            var rowElements = $(this.table).find('tr');\r\n\r\n            rowElements\r\n                .find('td:eq(' + this.resizeConfig.curResizeElem.ctx.$index() + ')')\r\n                .removeClass(this.resizingColumnClass);\r\n            rowElements\r\n                .find('td:eq(' + this.resizeConfig.depResizeElem.ctx.$index() + ')')\r\n                .removeClass(this.resizingColumnClass);\r\n        },\r\n\r\n        /**\r\n         * Check conditions to resize\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        _canResize: function (column) {\r\n            if (\r\n                $(column).hasClass(this.visibleClass) ||\r\n                !$(this.resizeConfig.depResizeElem.elems[0]).find('.' + this.resizableElementClass).length\r\n            ) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Mouse down event handler,\r\n         * find current and dep column to resize\r\n         *\r\n         * @param {Object} event\r\n         */\r\n        mousedownHandler: function (event) {\r\n            var target = event.target,\r\n                column = $(target).parent()[0],\r\n                cfg = this.resizeConfig,\r\n                body = $('body');\r\n\r\n            event.stopImmediatePropagation();\r\n            cfg.curResizeElem.model = ko.dataFor(column);\r\n            cfg.curResizeElem.ctx = ko.contextFor(column);\r\n            cfg.curResizeElem.elems = this.hasColumn(cfg.curResizeElem.model, false, true);\r\n            cfg.curResizeElem.position = event.pageX;\r\n            cfg.depResizeElem.elems = this.getNextElements(cfg.curResizeElem.elems[0]);\r\n            cfg.depResizeElem.model = ko.dataFor(cfg.depResizeElem.elems[0]);\r\n            cfg.depResizeElem.ctx = ko.contextFor(cfg.depResizeElem.elems[0]);\r\n\r\n            this._setResizeClass();\r\n\r\n            if (!this._canResize(column)) {\r\n                return false;\r\n            }\r\n\r\n            event.stopPropagation();\r\n            this.resizable = true;\r\n            cfg.curResizeElem.model.width = $(cfg.curResizeElem.elems[0]).outerWidth();\r\n            cfg.depResizeElem.model.width = $(cfg.depResizeElem.elems[0]).outerWidth();\r\n            body.addClass(this.inResizeClass);\r\n            body.bind('mousemove', this.mousemoveHandler);\r\n            $(window).bind('mouseup', this.mouseupHandler);\r\n        },\r\n\r\n        /**\r\n         * Mouse move event handler,\r\n         * change columns width\r\n         *\r\n         * @param {Object} event\r\n         */\r\n        mousemoveHandler: function (event) {\r\n            var cfg = this.resizeConfig,\r\n                width = event.pageX - cfg.curResizeElem.position,\r\n                self = this;\r\n\r\n            event.stopPropagation();\r\n            event.preventDefault();\r\n\r\n            if (\r\n                this.resizable &&\r\n                this.minColumnWidth < cfg.curResizeElem.model.width + width &&\r\n                this.minColumnWidth < cfg.depResizeElem.model.width - width &&\r\n                cfg.previousWidth !== width\r\n            ) {\r\n                cfg.curResizeElem.model.width += width;\r\n                cfg.depResizeElem.model.width -= width;\r\n\r\n                cfg.curResizeElem.elems.forEach(function (el) {\r\n                    $(el).outerWidth(cfg.curResizeElem.model.width);\r\n                });\r\n                cfg.depResizeElem.elems.forEach(function (el) {\r\n                    $(el).outerWidth(cfg.depResizeElem.model.width);\r\n                });\r\n\r\n                cfg.previousWidth = width;\r\n                cfg.curResizeElem.position = event.pageX;\r\n            } else if (width <= -(cfg.curResizeElem.model.width - this.minColumnWidth)) {\r\n\r\n                cfg.curResizeElem.elems.forEach(function (el) {\r\n                    $(el).outerWidth(self.minColumnWidth);\r\n                });\r\n                cfg.depResizeElem.elems.forEach(function (el) {\r\n                    $(el).outerWidth(\r\n                    cfg.depResizeElem.model.width +\r\n                    cfg.curResizeElem.model.width -\r\n                    self.minColumnWidth);\r\n                });\r\n\r\n            } else if (width >= cfg.depResizeElem.model.width - this.minColumnWidth) {\r\n\r\n                cfg.depResizeElem.elems.forEach(function (el) {\r\n                    $(el).outerWidth(self.minColumnWidth);\r\n                });\r\n                cfg.curResizeElem.elems.forEach(function (el) {\r\n                    $(el).outerWidth(\r\n                        cfg.curResizeElem.model.width +\r\n                        cfg.depResizeElem.model.width -\r\n                        self.minColumnWidth\r\n                    );\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Mouse up event handler,\r\n         * change columns width\r\n         *\r\n         * @param {Object} event\r\n         */\r\n        mouseupHandler: function (event) {\r\n            var cfg = this.resizeConfig,\r\n                body = $('body');\r\n\r\n            event.stopPropagation();\r\n            event.preventDefault();\r\n\r\n            this._removeResizeClass();\r\n            this.storageColumnsData[cfg.curResizeElem.model.index] = cfg.curResizeElem.model.width;\r\n            this.storageColumnsData[cfg.depResizeElem.model.index] = cfg.depResizeElem.model.width;\r\n            this.resizable = false;\r\n\r\n            this.store('storageColumnsData');\r\n\r\n            body.removeClass(this.inResizeClass);\r\n            body.unbind('mousemove', this.mousemoveHandler);\r\n            $(window).unbind('mouseup', this.mouseupHandler);\r\n        },\r\n\r\n        /**\r\n         * Find dependency element\r\n         *\r\n         * @param {Object} element - current element\r\n         * @returns {Object} next element data\r\n         */\r\n        getNextElements: function (element) {\r\n            var nextElem = $(element).next()[0],\r\n                nextElemModel = ko.dataFor(nextElem),\r\n                nextElemData = this.hasColumn(nextElemModel, false, true);\r\n\r\n            if (nextElemData) {\r\n                if (nextElemModel.visible) {\r\n                    return nextElemData;\r\n                }\r\n\r\n                return this.getNextElements(nextElem);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get default width\r\n         *\r\n         * @param {Object} column - (th) element\r\n         * @return {String} width for current column\r\n         */\r\n        getDefaultWidth: function (column) {\r\n            var model = ko.dataFor(column);\r\n\r\n            if (this.storageColumnsData[model.index]) {\r\n                return this.storageColumnsData[model.index];\r\n            }\r\n\r\n            if (model.resizeDefaultWidth) {\r\n                return parseInt(model.resizeDefaultWidth, 10);\r\n            }\r\n\r\n            return 'auto';\r\n        },\r\n\r\n        /**\r\n         * Check column is render or not\r\n         *\r\n         * @param {Object} model - cur column model\r\n         * @param {String|Boolean} ctxIndex - index of context, or false, if want to get cols from all ctx\r\n         * @param {Boolean} returned - need return column object or not\r\n         * @return {Boolean} if returned param is false, returned boolean value, else return current object data\r\n         */\r\n        hasColumn: function (model, ctxIndex, returned) {\r\n            var colElem = this.columnsElements[model.index] || {},\r\n                getFromAllCtx = ctxIndex === false;\r\n\r\n            if (colElem && (getFromAllCtx || colElem.hasOwnProperty(ctxIndex))) {\r\n\r\n                if (returned) {\r\n                    return getFromAllCtx ?\r\n                        _.values(colElem) :\r\n                        colElem[ctxIndex];\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Check row is render or not\r\n         *\r\n         * @param {Object} elem - cur column element\r\n         * @param {Boolean} returned - need return column object or not\r\n         * @return {Boolean} if returned param is false, returned boolean falue, else return current object data\r\n         */\r\n        hasRow: function (elem, returned) {\r\n            var i = 0,\r\n                el = this.maxRowsHeight(),\r\n                length = el.length;\r\n\r\n            for (i; i < length; i++) {\r\n\r\n                if (this.maxRowsHeight()[i].elem === elem) {\r\n\r\n                    if (returned) {\r\n                        return this.maxRowsHeight()[i];\r\n                    }\r\n\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Generate index that will indentify context\r\n         *\r\n         * @param {Object} ctx\r\n         * @return {String}\r\n         */\r\n        getCtxIndex: function (ctx)\r\n        {\r\n            return ctx ? ctx.$parents.reduce(function (pv, cv) {\r\n                return (pv.index || pv) + (cv || {}).index;\r\n            }) : ctx;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/toolbar.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'Magento_Ui/js/lib/view/utils/raf',\r\n    'rjsResolver',\r\n    'uiCollection'\r\n], function (_, $, raf, resolver, Collection) {\r\n    'use strict';\r\n\r\n    var transformProp;\r\n\r\n    /**\r\n     * Defines supported css 'transform' property.\r\n     *\r\n     * @returns {String|Undefined}\r\n     */\r\n    transformProp = (function () {\r\n        var style = document.documentElement.style,\r\n            base = 'Transform',\r\n            vendors = ['webkit', 'moz', 'ms', 'o'],\r\n            vi = vendors.length,\r\n            property;\r\n\r\n        if (typeof style.transform != 'undefined') {\r\n            return 'transform';\r\n        }\r\n\r\n        while (vi--) {\r\n            property = vendors[vi] + base;\r\n\r\n            if (typeof style[property] != 'undefined') {\r\n                return property;\r\n            }\r\n        }\r\n    })();\r\n\r\n    /**\r\n     * Moves specified DOM element to the x and y coordinates.\r\n     *\r\n     * @param {HTMLElement} elem - Element to be relocated.\r\n     * @param {Number} x - X coordinate.\r\n     * @param {Number} y - Y coordinate.\r\n     */\r\n    function locate(elem, x, y) {\r\n        var value = 'translate(' + x + 'px,' + y + 'px)';\r\n\r\n        elem.style[transformProp] = value;\r\n    }\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            template: 'ui/grid/toolbar',\r\n            stickyTmpl: 'ui/grid/sticky/sticky',\r\n            tableSelector: 'table',\r\n            columnsProvider: 'ns = ${ $.ns }, componentType = columns',\r\n            refreshFPS: 15,\r\n            sticky: false,\r\n            visible: false,\r\n            _resized: true,\r\n            _scrolled: true,\r\n            _tableScrolled: true,\r\n            _requiredNodes: {\r\n                '$stickyToolbar': true,\r\n                '$stickyTable': true,\r\n                '$table': true,\r\n                '$sticky': true\r\n            },\r\n            stickyClass: {\r\n                'sticky-header': true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes sticky toolbar component.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            if (this.sticky) {\r\n                this.waitDOMElements()\r\n                    .then(this.run.bind(this));\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Establishes DOM elements wait process.\r\n         *\r\n         * @returns {jQueryPromise} Promise which will be resolved\r\n         *      when all of the required DOM elements are defined.\r\n         */\r\n        waitDOMElements: function () {\r\n            var _domPromise = $.Deferred();\r\n\r\n            _.bindAll(this, 'setStickyTable', 'setTableNode');\r\n\r\n            $.async({\r\n                ctx: ':not([data-role=\"sticky-el-root\"])',\r\n                component: this.columnsProvider,\r\n                selector: this.tableSelector\r\n            }, this.setTableNode);\r\n\r\n            $.async({\r\n                ctx: '[data-role=\"sticky-el-root\"]',\r\n                component: this.columnsProvider,\r\n                selector: this.tableSelector\r\n            }, this.setStickyTable);\r\n\r\n            this._domPromise = _domPromise;\r\n\r\n            return _domPromise.promise();\r\n        },\r\n\r\n        /**\r\n         * Defines left caption element.\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        setLeftCap: function (node) {\r\n            this.$leftCap = node;\r\n        },\r\n\r\n        /**\r\n         * Defines right caption element.\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        setRightCap: function (node) {\r\n            this.$rightCap = node;\r\n        },\r\n\r\n        /**\r\n         * Defines original table element.\r\n         *\r\n         * @param {HTMLTableElement} node\r\n         */\r\n        setTableNode: function (node) {\r\n            this.$cols = node.tHead.children[0].cells;\r\n            this.$tableContainer = node.parentNode;\r\n\r\n            this.setNode('$table', node);\r\n        },\r\n\r\n        /**\r\n         * Defines sticky table element.\r\n         *\r\n         * @param {HTMLTableElement} node\r\n         */\r\n        setStickyTable: function (node) {\r\n            this.$stickyCols = node.tHead.children[0].cells;\r\n\r\n            this.setNode('$stickyTable', node);\r\n        },\r\n\r\n        /**\r\n         * Defines sticky toolbar node.\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        setStickyToolbarNode: function (node) {\r\n            this.setNode('$stickyToolbar', node);\r\n        },\r\n\r\n        /**\r\n         * Defines sticky element container.\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        setStickyNode: function (node) {\r\n            this.setNode('$sticky', node);\r\n        },\r\n\r\n        /**\r\n         * Defines toolbar element container.\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        setToolbarNode: function (node) {\r\n            this.$toolbar = node;\r\n        },\r\n\r\n        /**\r\n         * Sets provided node as a value of 'key' property and\r\n         * performs check for required DOM elements.\r\n         *\r\n         * @param {String} key - Properties key.\r\n         * @param {HTMLElement} node - DOM element.\r\n         */\r\n        setNode: function (key, node) {\r\n            var nodes = this._requiredNodes,\r\n                promise = this._domPromise,\r\n                defined;\r\n\r\n            this[key] = node;\r\n\r\n            defined = _.every(nodes, function (enabled, name) {\r\n                return enabled ? this[name] : true;\r\n            }, this);\r\n\r\n            if (defined) {\r\n                resolver(promise.resolve, promise);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Starts refresh process of the sticky element\r\n         * and assigns DOM elements events handlers.\r\n         */\r\n        run: function () {\r\n            _.bindAll(\r\n                this,\r\n                'refresh',\r\n                '_onWindowResize',\r\n                '_onWindowScroll',\r\n                '_onTableScroll'\r\n            );\r\n\r\n            $(window).on({\r\n                scroll: this._onWindowScroll,\r\n                resize: this._onWindowResize\r\n            });\r\n\r\n            $(this.$tableContainer).on('scroll', this._onTableScroll);\r\n\r\n            this.refresh();\r\n            this.checkTableWidth();\r\n        },\r\n\r\n        /**\r\n         * Refreshes state of the sticky element and\r\n         * invokes DOM elements events handlers\r\n         * if corresponding event has been triggered.\r\n         */\r\n        refresh: function () {\r\n            if (!raf(this.refresh, this.refreshFPS)) {\r\n                return;\r\n            }\r\n\r\n            if (this._scrolled) {\r\n                this.onWindowScroll();\r\n            }\r\n\r\n            if (this._tableScrolled) {\r\n                this.onTableScroll();\r\n            }\r\n\r\n            if (this._resized) {\r\n                this.onWindowResize();\r\n            }\r\n\r\n            if (this.visible) {\r\n                this.checkTableWidth();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Shows sticky toolbar.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        show: function () {\r\n            this.visible = true;\r\n\r\n            this.$sticky.style.display = '';\r\n            this.$toolbar.style.visibility = 'hidden';\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Hides sticky toolbar.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        hide: function () {\r\n            this.visible = false;\r\n\r\n            this.$sticky.style.display = 'none';\r\n            this.$toolbar.style.visibility = '';\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if sticky toolbar covers original elements.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isCovered: function () {\r\n            var stickyTop = this._stickyTableTop + this._wScrollTop;\r\n\r\n            return stickyTop > this._tableTop;\r\n        },\r\n\r\n        /**\r\n         * Updates offset of the sticky table element.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        updateStickyTableOffset: function () {\r\n            var style,\r\n                top;\r\n\r\n            if (this.visible) {\r\n                top = this.$stickyTable.getBoundingClientRect().top;\r\n            } else {\r\n                style = this.$sticky.style;\r\n\r\n                style.visibility = 'hidden';\r\n                style.display = '';\r\n\r\n                top = this.$stickyTable.getBoundingClientRect().top;\r\n\r\n                style.display = 'none';\r\n                style.visibility = '';\r\n            }\r\n\r\n            this._stickyTableTop = top;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates offset of the original table element.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        updateTableOffset: function () {\r\n            var box = this.$table.getBoundingClientRect(),\r\n                top = box.top + this._wScrollTop;\r\n\r\n            if (this._tableTop !== top) {\r\n                this._tableTop = top;\r\n\r\n                this.onTableTopChange(top);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if width of the table or it's columns has changed.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        checkTableWidth: function () {\r\n            var cols        = this.$cols,\r\n                total       = cols.length,\r\n                rightBorder = cols[total - 2].offsetLeft,\r\n                tableWidth  = this.$table.offsetWidth;\r\n\r\n            if (this._tableWidth !== tableWidth) {\r\n                this._tableWidth = tableWidth;\r\n\r\n                this.onTableWidthChange(tableWidth);\r\n            }\r\n\r\n            if (this._rightBorder !== rightBorder) {\r\n                this._rightBorder = rightBorder;\r\n\r\n                this.onColumnsWidthChange();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates width of the sticky table.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        updateTableWidth: function () {\r\n            this.$stickyTable.style.width = this._tableWidth + 'px';\r\n\r\n            if (this._tableWidth < this._toolbarWidth) {\r\n                this.checkToolbarSize();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates width of the sticky columns.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        updateColumnsWidth: function () {\r\n            var cols        = this.$cols,\r\n                index       = cols.length,\r\n                stickyCols  = this.$stickyCols;\r\n\r\n            while (index--) {\r\n                stickyCols[index].width = cols[index].offsetWidth;\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Upadates size of the sticky toolbar element\r\n         * and invokes corresponding 'change' event handlers.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        checkToolbarSize: function () {\r\n            var width = this.$tableContainer.offsetWidth;\r\n\r\n            if (this._toolbarWidth !== width) {\r\n                this._toolbarWidth = width;\r\n\r\n                this.onToolbarWidthChange(width);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Toggles sticky toolbar visibility if it's necessary.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        updateVisibility: function () {\r\n            if (this.visible !== this.isCovered()) {\r\n                this.visible ? this.hide() : this.show();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates position of the left cover area.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        updateLeftCap: function () {\r\n            locate(this.$leftCap, -this._wScrollLeft, 0);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates position of the right cover area.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        updateRightCap: function () {\r\n            var left = this._toolbarWidth - this._wScrollLeft;\r\n\r\n            locate(this.$rightCap, left, 0);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates position of the sticky table.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        updateTableScroll: function () {\r\n            var container = this.$tableContainer,\r\n                left = container.scrollLeft + this._wScrollLeft;\r\n\r\n            locate(this.$stickyTable, -left, 0);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates width of the toolbar element.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        updateToolbarWidth: function () {\r\n            this.$stickyToolbar.style.width = this._toolbarWidth + 'px';\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Handles changes of the toolbar element's width.\r\n         */\r\n        onToolbarWidthChange: function () {\r\n            this.updateToolbarWidth()\r\n                .updateRightCap();\r\n        },\r\n\r\n        /**\r\n         * Handles changes of the table top position.\r\n         */\r\n        onTableTopChange: function () {\r\n            this.updateStickyTableOffset();\r\n        },\r\n\r\n        /**\r\n         * Handles change of the table width.\r\n         */\r\n        onTableWidthChange: function () {\r\n            this.updateTableWidth();\r\n        },\r\n\r\n        /**\r\n         * Handles change of the table columns width.\r\n         */\r\n        onColumnsWidthChange: function () {\r\n            this.updateColumnsWidth();\r\n        },\r\n\r\n        /**\r\n         * Handles changes of the window's size.\r\n         */\r\n        onWindowResize: function () {\r\n            this.checkToolbarSize();\r\n\r\n            this._resized = false;\r\n        },\r\n\r\n        /**\r\n         * Handles changes of the original table scroll position.\r\n         */\r\n        onTableScroll: function () {\r\n            this.updateTableScroll();\r\n\r\n            this._tableScrolled = false;\r\n        },\r\n\r\n        /**\r\n         * Handles changes of window's scroll position.\r\n         */\r\n        onWindowScroll: function () {\r\n            var scrollTop = window.pageYOffset,\r\n                scrollLeft = window.pageXOffset;\r\n\r\n            if (this._wScrollTop !== scrollTop) {\r\n                this._wScrollTop = scrollTop;\r\n\r\n                this.onWindowScrollTop(scrollTop);\r\n            }\r\n\r\n            if (this._wScrollLeft !== scrollLeft) {\r\n                this._wScrollLeft = scrollLeft;\r\n\r\n                this.onWindowScrollLeft(scrollLeft);\r\n            }\r\n\r\n            this._scrolled = false;\r\n        },\r\n\r\n        /**\r\n         * Handles changes of windows' top scroll postion.\r\n         */\r\n        onWindowScrollTop: function () {\r\n            this.updateTableOffset()\r\n                .updateVisibility();\r\n        },\r\n\r\n        /**\r\n         * Handles changes of windows' left scroll position.\r\n         */\r\n        onWindowScrollLeft: function () {\r\n            this.updateRightCap()\r\n                .updateLeftCap()\r\n                .updateTableScroll();\r\n        },\r\n\r\n        /**\r\n         * Original window 'scroll' event handler.\r\n         * Sets 'scrolled' flag to 'true'.\r\n         *\r\n         * @private\r\n         */\r\n        _onWindowScroll: function () {\r\n            this._scrolled = true;\r\n        },\r\n\r\n        /**\r\n         * Original window 'resize' event handler.\r\n         * Sets 'resized' flag to 'true'.\r\n         *\r\n         * @private\r\n         */\r\n        _onWindowResize: function () {\r\n            this._resized = true;\r\n        },\r\n\r\n        /**\r\n         * Original table 'scroll' event handler.\r\n         * Sets '_tableScrolled' flag to 'true'.\r\n         *\r\n         * @private\r\n         */\r\n        _onTableScroll: function () {\r\n            this._tableScrolled = true;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/tree-massactions.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'Magento_Ui/js/grid/massactions'\r\n], function (ko, _, Massactions) {\r\n    'use strict';\r\n\r\n    return Massactions.extend({\r\n        defaults: {\r\n            template: 'ui/grid/tree-massactions',\r\n            submenuTemplate: 'ui/grid/submenu',\r\n            listens: {\r\n                opened: 'hideSubmenus'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Massactions} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .recursiveObserveActions(this.actions());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Recursive initializes observable actions.\r\n         *\r\n         * @param {Array} actions - Action objects.\r\n         * @returns {Massactions} Chainable.\r\n         */\r\n        recursiveObserveActions: function (actions) {\r\n            _.each(actions, function (action) {\r\n                if (action.actions) {\r\n                    action.visible = ko.observable(false);\r\n                    action.parent = actions;\r\n                    this.recursiveObserveActions(action.actions);\r\n                }\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Applies specified action.\r\n         *\r\n         * @param {String} actionIndex - Actions' identifier.\r\n         * @returns {Massactions} Chainable.\r\n         */\r\n        applyAction: function (actionIndex) {\r\n            var action = this.getAction(actionIndex),\r\n                visibility;\r\n\r\n            if (action.visible) {\r\n                visibility = action.visible();\r\n\r\n                this.hideSubmenus(action.parent);\r\n                action.visible(!visibility);\r\n\r\n                return this;\r\n            }\r\n\r\n            return this._super(actionIndex);\r\n        },\r\n\r\n        /**\r\n         * Retrieves action object associated with a specified index.\r\n         *\r\n         * @param {String} actionIndex - Actions' identifier.\r\n         * @param {Array} actions - Action objects.\r\n         * @returns {Object} Action object.\r\n         */\r\n        getAction: function (actionIndex, actions) {\r\n            var currentActions = actions || this.actions(),\r\n                result = false;\r\n\r\n            _.find(currentActions, function (action) {\r\n                if (action.type === actionIndex) {\r\n                    result = action;\r\n\r\n                    return true;\r\n                }\r\n\r\n                if (action.actions) {\r\n                    result = this.getAction(actionIndex, action.actions);\r\n\r\n                    return result;\r\n                }\r\n            }, this);\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Recursive hide all sub folders in given array.\r\n         *\r\n         * @param {Array} actions - Action objects.\r\n         * @returns {Massactions} Chainable.\r\n         */\r\n        hideSubmenus: function (actions) {\r\n            var currentActions = actions || this.actions();\r\n\r\n            _.each(currentActions, function (action) {\r\n                if (action.visible && action.visible()) {\r\n                    action.visible(false);\r\n                }\r\n\r\n                if (action.actions) {\r\n                    this.hideSubmenus(action.actions);\r\n                }\r\n            }, this);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/actions.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiRegistry',\r\n    './column',\r\n    'Magento_Ui/js/modal/confirm'\r\n], function (_, utils, registry, Column, confirm) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'ui/grid/cells/actions',\r\n            sortable: false,\r\n            draggable: false,\r\n            actions: [],\r\n            rows: [],\r\n            rowsProvider: '${ $.parentName }',\r\n            fieldClass: {\r\n                'data-grid-actions-cell': true\r\n            },\r\n            templates: {\r\n                actions: {}\r\n            },\r\n            imports: {\r\n                rows: '${ $.rowsProvider }:rows'\r\n            },\r\n            listens: {\r\n                rows: 'updateActions'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {ActionsColumn} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track('actions');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns specific action of a specified row\r\n         * or all action objects associated with it.\r\n         *\r\n         * @param {Number} rowIndex - Index of a row.\r\n         * @param {String} [actionIndex] - Action identifier.\r\n         * @returns {Array|Object}\r\n         */\r\n        getAction: function (rowIndex, actionIndex) {\r\n            var rowActions = this.actions[rowIndex];\r\n\r\n            return rowActions && actionIndex ?\r\n                rowActions[actionIndex] :\r\n                rowActions;\r\n        },\r\n\r\n        /**\r\n         * Returns visible actions for a specified row.\r\n         *\r\n         * @param {Number} rowIndex - Index of a row.\r\n         * @returns {Array} Visible actions.\r\n         */\r\n        getVisibleActions: function (rowIndex) {\r\n            var rowActions = this.getAction(rowIndex);\r\n\r\n            return _.filter(rowActions, this.isActionVisible, this);\r\n        },\r\n\r\n        /**\r\n         * Adds new action. If action with a specfied identifier\r\n         * already exists, than the original will be overrided.\r\n         *\r\n         * @param {String} index - Actions' identifier.\r\n         * @param {Object} action - Actions' data.\r\n         * @returns {ActionsColumn} Chainable.\r\n         */\r\n        addAction: function (index, action) {\r\n            var actionTmpls = this.templates.actions;\r\n\r\n            actionTmpls[index] = action;\r\n\r\n            this.updateActions();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Recreates actions for each row.\r\n         *\r\n         * @returns {ActionsColumn} Chainable.\r\n         */\r\n        updateActions: function () {\r\n            this.actions = this.rows.map(this._formatActions, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Processes actions, setting additional information to them and\r\n         * evaluating ther properties as a string templates.\r\n         *\r\n         * @private\r\n         * @param {Object} row - Row object.\r\n         * @param {Number} rowIndex - Index of a row.\r\n         * @returns {Array}\r\n         */\r\n        _formatActions: function (row, rowIndex) {\r\n            var rowActions      = row[this.index] || {},\r\n                recordId        = row[this.indexField],\r\n                customActions   = this.templates.actions;\r\n\r\n            /**\r\n             * Actions iterator.\r\n             */\r\n            function iterate(action, index) {\r\n                action = utils.extend({\r\n                    index: index,\r\n                    rowIndex: rowIndex,\r\n                    recordId: recordId\r\n                }, action);\r\n\r\n                return utils.template(action, row, true);\r\n            }\r\n\r\n            rowActions      = _.mapObject(rowActions, iterate);\r\n            customActions   = _.map(customActions, iterate);\r\n\r\n            customActions.forEach(function (action) {\r\n                rowActions[action.index] = action;\r\n            });\r\n\r\n            return rowActions;\r\n        },\r\n\r\n        /**\r\n         * Applies specified action.\r\n         *\r\n         * @param {String} actionIndex - Actions' identifier.\r\n         * @param {Number} rowIndex - Index of a row.\r\n         * @returns {ActionsColumn} Chainable.\r\n         */\r\n        applyAction: function (actionIndex, rowIndex) {\r\n            var action = this.getAction(rowIndex, actionIndex),\r\n                callback = this._getCallback(action);\r\n\r\n            action.confirm ?\r\n                this._confirm(action, callback) :\r\n                callback();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates handler for the provided action if it's required.\r\n         *\r\n         * @param {Object} action - Action object.\r\n         * @returns {Function|Undefined}\r\n         */\r\n        getActionHandler: function (action) {\r\n            var index = action.index,\r\n                rowIndex = action.rowIndex;\r\n\r\n            if (this.isHandlerRequired(index, rowIndex)) {\r\n                return this.applyAction.bind(this, index, rowIndex);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Checks if specified action requires a handler function.\r\n         *\r\n         * @param {String} actionIndex - Actions' identifier.\r\n         * @param {Number} rowIndex - Index of a row.\r\n         * @returns {Boolean}\r\n         */\r\n        isHandlerRequired: function (actionIndex, rowIndex) {\r\n            var action = this.getAction(rowIndex, actionIndex);\r\n\r\n            return _.isObject(action.callback) || action.confirm || !action.href;\r\n        },\r\n\r\n        /**\r\n         * Creates action callback based on its' data. If action doesn't spicify\r\n         * a callback function than the default one will be used.\r\n         *\r\n         * @private\r\n         * @param {Object} action - Actions' object.\r\n         * @returns {Function} Callback function.\r\n         */\r\n        _getCallback: function (action) {\r\n            var args = [action.index, action.recordId, action],\r\n                callback = action.callback;\r\n\r\n            if (utils.isObject(callback)) {\r\n                args.unshift(callback.target);\r\n\r\n                callback = registry.async(callback.provider);\r\n            } else if (_.isArray(callback)) {\r\n                return this._getCallbacks(action);\r\n            } else if (!_.isFunction(callback)) {\r\n                callback = this.defaultCallback.bind(this);\r\n            }\r\n\r\n            return function () {\r\n                callback.apply(callback, args);\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Creates action callback for multiple actions.\r\n         *\r\n         * @private\r\n         * @param {Object} action - Actions' object.\r\n         * @returns {Function} Callback function.\r\n         */\r\n        _getCallbacks: function (action) {\r\n            var callback = action.callback,\r\n                callbacks = [],\r\n                tmpCallback;\r\n\r\n            _.each(callback, function (cb) {\r\n                tmpCallback = {\r\n                    action: registry.async(cb.provider),\r\n                    args: _.compact([cb.target, cb.params])\r\n                };\r\n                callbacks.push(tmpCallback);\r\n            });\r\n\r\n            return function () {\r\n                _.each(callbacks, function (cb) {\r\n                    cb.action.apply(cb.action, cb.args);\r\n                });\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Default action callback. Redirects to\r\n         * the specified in actions' data url.\r\n         *\r\n         * @param {String} actionIndex - Actions' identifier.\r\n         * @param {(Number|String)} recordId - Id of the record accociated\r\n         *      with a specfied action.\r\n         * @param {Object} action - Actions' data.\r\n         */\r\n        defaultCallback: function (actionIndex, recordId, action) {\r\n            window.location.href = action.href;\r\n        },\r\n\r\n        /**\r\n         * Shows actions' confirmation window.\r\n         *\r\n         * @param {Object} action - Actions' data.\r\n         * @param {Function} callback - Callback that will be\r\n         *      invoked if action is confirmed.\r\n         */\r\n        _confirm: function (action, callback) {\r\n            var confirmData = action.confirm;\r\n\r\n            confirm({\r\n                title: confirmData.title,\r\n                content: confirmData.message,\r\n                actions: {\r\n                    confirm: callback\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Checks if row has only one visible action.\r\n         *\r\n         * @param {Number} rowIndex - Row index.\r\n         * @returns {Boolean}\r\n         */\r\n        isSingle: function (rowIndex) {\r\n            return this.getVisibleActions(rowIndex).length === 1;\r\n        },\r\n\r\n        /**\r\n         * Checks if row has more than one visible action.\r\n         *\r\n         * @param {Number} rowIndex - Row index.\r\n         * @returns {Boolean}\r\n         */\r\n        isMultiple: function (rowIndex) {\r\n            return this.getVisibleActions(rowIndex).length > 1;\r\n        },\r\n\r\n        /**\r\n         * Checks if action should be displayed.\r\n         *\r\n         * @param {Object} action - Action object.\r\n         * @returns {Boolean}\r\n         */\r\n        isActionVisible: function (action) {\r\n            return action.hidden !== true;\r\n        },\r\n\r\n        /**\r\n         * Overrides base method, because this component\r\n         * can't have global field action.\r\n         *\r\n         * @returns {Boolean} False.\r\n         */\r\n        hasFieldAction: function () {\r\n            return false;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/column.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    'mageUtils',\r\n    'uiElement'\r\n], function (_, registry, utils, Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            headerTmpl: 'ui/grid/columns/text',\r\n            bodyTmpl: 'ui/grid/cells/text',\r\n            disableAction: false,\r\n            controlVisibility: true,\r\n            sortable: true,\r\n            sorting: false,\r\n            visible: true,\r\n            draggable: true,\r\n            fieldClass: {},\r\n            ignoreTmpls: {\r\n                fieldAction: true\r\n            },\r\n            statefull: {\r\n                visible: true,\r\n                sorting: true\r\n            },\r\n            imports: {\r\n                exportSorting: 'sorting'\r\n            },\r\n            listens: {\r\n                '${ $.provider }:params.sorting.field': 'onSortChange'\r\n            },\r\n            modules: {\r\n                source: '${ $.provider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes column component.\r\n         *\r\n         * @returns {Column} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initFieldClass();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Column} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track([\r\n                    'visible',\r\n                    'sorting',\r\n                    'disableAction'\r\n                ])\r\n                .observe([\r\n                    'dragging'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Extends list of field classes.\r\n         *\r\n         * @returns {Column} Chainable.\r\n         */\r\n        initFieldClass: function () {\r\n            _.extend(this.fieldClass, {\r\n                _dragging: this.dragging\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Applies specified stored state of a column or one of its' properties.\r\n         *\r\n         * @param {String} state - Defines what state should be used: saved or default.\r\n         * @param {String} [property] - Defines what columns' property should be applied.\r\n         *      If not specified, then all columns stored properties will be used.\r\n         * @returns {Column} Chainable.\r\n         */\r\n        applyState: function (state, property) {\r\n            var namespace = this.storageConfig.root;\r\n\r\n            if (property) {\r\n                namespace += '.' + property;\r\n            }\r\n\r\n            this.storage('applyStateOf', state, namespace);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets columns' sorting. If column is currently sorted,\r\n         * than its' direction will be toggled.\r\n         *\r\n         * @param {*} [enable=true] - If false, than sorting will\r\n         *      be removed from a column.\r\n         * @returns {Column} Chainable.\r\n         */\r\n        sort: function (enable) {\r\n            if (!this.sortable) {\r\n                return this;\r\n            }\r\n\r\n            enable !== false ?\r\n                this.toggleSorting() :\r\n                this.sorting = false;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets descending columns' sorting.\r\n         *\r\n         * @returns {Column} Chainable.\r\n         */\r\n        sortDescending: function () {\r\n            if (this.sortable) {\r\n                this.sorting = 'desc';\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets ascending columns' sorting.\r\n         *\r\n         * @returns {Column} Chainable.\r\n         */\r\n        sortAscending: function () {\r\n            if (this.sortable) {\r\n                this.sorting = 'asc';\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Toggles sorting direction.\r\n         *\r\n         * @returns {Column} Chainable.\r\n         */\r\n        toggleSorting: function () {\r\n            this.sorting === 'asc' ?\r\n                this.sortDescending() :\r\n                this.sortAscending();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if column is sorted.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isSorted: function () {\r\n            return !!this.sorting;\r\n        },\r\n\r\n        /**\r\n         * Exports sorting data to the dataProvider if\r\n         * sorting of a column is enabled.\r\n         */\r\n        exportSorting: function () {\r\n            if (!this.sorting) {\r\n                return;\r\n            }\r\n\r\n            this.source('set', 'params.sorting', {\r\n                field: this.index,\r\n                direction: this.sorting\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Checks if column has an assigned action that will\r\n         * be performed when clicking on one of its' fields.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasFieldAction: function () {\r\n            return !!this.fieldAction || !!this.fieldActions;\r\n        },\r\n\r\n        /**\r\n         * Applies action described in a 'fieldAction' property\r\n         * or actions described in 'fieldActions' property.\r\n         *\r\n         * @param {Number} rowIndex - Index of a row which initiates action.\r\n         * @returns {Column} Chainable.\r\n         *\r\n         * @example Example of fieldAction definition, which is equivalent to\r\n         *      referencing to external component named 'listing.multiselect'\r\n         *      and calling its' method 'toggleSelect' with params [rowIndex, true] =>\r\n         *\r\n         *      {\r\n         *          provider: 'listing.multiselect',\r\n         *          target: 'toggleSelect',\r\n         *          params: ['${ $.$data.rowIndex }', true]\r\n         *      }\r\n         */\r\n        applyFieldAction: function (rowIndex) {\r\n            if (!this.hasFieldAction() || this.disableAction) {\r\n                return this;\r\n            }\r\n\r\n            if (this.fieldActions) {\r\n                this.fieldActions.forEach(this.applySingleAction.bind(this, rowIndex), this);\r\n            } else {\r\n                this.applySingleAction(rowIndex);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Applies single action\r\n         *\r\n         * @param {Number} rowIndex - Index of a row which initiates action.\r\n         * @param {Object} action - Action (fieldAction) to be applied\r\n         *\r\n         */\r\n        applySingleAction: function (rowIndex, action) {\r\n            var callback;\r\n\r\n            action = action || this.fieldAction;\r\n            action = utils.template(action, {\r\n                column: this,\r\n                rowIndex: rowIndex\r\n            }, true);\r\n\r\n            callback = this._getFieldCallback(action);\r\n\r\n            if (_.isFunction(callback)) {\r\n                callback();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Returns field action handler if it was specified.\r\n         *\r\n         * @param {Object} record - Record object with which action is associated.\r\n         * @returns {Function|Undefined}\r\n         */\r\n        getFieldHandler: function (record) {\r\n            if (this.hasFieldAction()) {\r\n                return this.applyFieldAction.bind(this, record._rowIndex);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Creates action callback based on its' data.\r\n         *\r\n         * @param {Object} action - Actions' object.\r\n         * @returns {Function|Boolean} Callback function or false\r\n         *      value if it was impossible create a callback.\r\n         */\r\n        _getFieldCallback: function (action) {\r\n            var args     = action.params || [],\r\n                callback = action.target;\r\n\r\n            if (action.provider && action.target) {\r\n                args.unshift(action.target);\r\n\r\n                callback = registry.async(action.provider);\r\n            }\r\n\r\n            if (!_.isFunction(callback)) {\r\n                return false;\r\n            }\r\n\r\n            return function () {\r\n                callback.apply(callback, args);\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Ment to preprocess data associated with a current columns' field.\r\n         *\r\n         * @param {Object} record - Data to be preprocessed.\r\n         * @returns {String}\r\n         */\r\n        getLabel: function (record) {\r\n            return record[this.index];\r\n        },\r\n\r\n        /**\r\n         * Returns list of classes that should be applied to a field.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getFieldClass: function () {\r\n            return this.fieldClass;\r\n        },\r\n\r\n        /**\r\n         * Returns path to the columns' header template.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getHeader: function () {\r\n            return this.headerTmpl;\r\n        },\r\n\r\n        /**\r\n         * Returns path to the columns' body template.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getBody: function () {\r\n            return this.bodyTmpl;\r\n        },\r\n\r\n        /**\r\n         * Listener of the providers' sorting state changes.\r\n         *\r\n         * @param {Srting} field - Field by which current sorting is performed.\r\n         */\r\n        onSortChange: function (field) {\r\n            if (field !== this.index) {\r\n                this.sort(false);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/date.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'mageUtils',\r\n    'moment',\r\n    './column'\r\n], function (utils, moment, Column) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            dateFormat: 'MMM d, YYYY h:mm:ss A'\r\n        },\r\n\r\n        /**\r\n         * Overrides base method to normalize date format.\r\n         *\r\n         * @returns {DateColumn} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n\r\n            this.dateFormat = utils.normalizeDate(this.dateFormat);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Formats incoming date based on the 'dateFormat' property.\r\n         *\r\n         * @returns {String} Formatted date.\r\n         */\r\n        getLabel: function (value, format) {\r\n            var date = moment(this._super());\r\n\r\n            date = date.isValid() && value[this.index] ?\r\n                date.format(format || this.dateFormat) :\r\n                '';\r\n\r\n            return date;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/multiselect.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mage/translate',\r\n    './column'\r\n], function (_, $t, Column) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            headerTmpl: 'ui/grid/columns/multiselect',\r\n            bodyTmpl: 'ui/grid/cells/multiselect',\r\n            controlVisibility: false,\r\n            sortable: false,\r\n            draggable: false,\r\n            menuVisible: false,\r\n            excludeMode: false,\r\n            allSelected: false,\r\n            indetermine: false,\r\n            preserveSelectionsOnFilter: false,\r\n            disabled: [],\r\n            selected: [],\r\n            excluded: [],\r\n            fieldClass: {\r\n                'data-grid-checkbox-cell': true\r\n            },\r\n            actions: [{\r\n                value: 'selectAll',\r\n                label: $t('Select All')\r\n            }, {\r\n                value: 'deselectAll',\r\n                label: $t('Deselect All')\r\n            }, {\r\n                value: 'selectPage',\r\n                label: $t('Select All on This Page')\r\n            }, {\r\n                value: 'deselectPage',\r\n                label: $t('Deselect All on This Page')\r\n            }],\r\n\r\n            imports: {\r\n                totalRecords: '${ $.provider }:data.totalRecords',\r\n                rows: '${ $.provider }:data.items'\r\n            },\r\n\r\n            listens: {\r\n                '${ $.provider }:params.filters': 'onFilter',\r\n                selected: 'onSelectedChange',\r\n                rows: 'onRowsChange'\r\n            },\r\n\r\n            modules: {\r\n                source: '${ $.provider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'disabled',\r\n                    'selected',\r\n                    'excluded',\r\n                    'excludeMode',\r\n                    'totalSelected',\r\n                    'allSelected',\r\n                    'indetermine',\r\n                    'totalRecords',\r\n                    'rows'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Selects specified record.\r\n         *\r\n         * @param {*} id - See definition of 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See definition of 'getId' method.\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        select: function (id, isIndex) {\r\n            this._setSelection(id, isIndex, true);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Deselects specified record.\r\n         *\r\n         * @param {*} id - See definition of 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See definition of 'getId' method.\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        deselect: function (id, isIndex) {\r\n            this._setSelection(id, isIndex, false);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Toggles selection of a specified record.\r\n         *\r\n         * @param {*} id - See definition of 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See definition of 'getId' method.\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        toggleSelect: function (id, isIndex) {\r\n            this._setSelection(id, isIndex, !this.isSelected(id, isIndex));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if specified record is selected.\r\n         *\r\n         * @param {*} id - See definition of 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See definition of 'getId' method.\r\n         * @returns {Boolean}\r\n         */\r\n        isSelected: function (id, isIndex) {\r\n            id = this.getId(id, isIndex);\r\n\r\n            return this.selected.contains(id);\r\n        },\r\n\r\n        /**\r\n         * Selects/deselects specified record base on a 'select' parameter value.\r\n         *\r\n         * @param {*} id - See definition of 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See definition of 'getId' method.\r\n         * @param {Boolean} select - Whether to select/deselect record.\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        _setSelection: function (id, isIndex, select) {\r\n            var selected = this.selected;\r\n\r\n            id = this.getId(id, isIndex);\r\n\r\n            if (!select && this.isSelected(id)) {\r\n                selected.remove(id);\r\n            } else if (select) {\r\n                selected.push(id);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Selects all records, even those that\r\n         * are not visible on the page.\r\n         *\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        selectAll: function () {\r\n            this.excludeMode(true);\r\n\r\n            this.clearExcluded()\r\n                .selectPage();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Deselects all records.\r\n         *\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        deselectAll: function () {\r\n            this.excludeMode(false);\r\n\r\n            this.clearExcluded();\r\n            this.selected.removeAll();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Selects or deselects all records.\r\n         *\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        toggleSelectAll: function () {\r\n            this.allSelected() ?\r\n                this.deselectAll() :\r\n                this.selectAll();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Selects all records on the current page.\r\n         *\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        selectPage: function () {\r\n            var selected = _.union(this.selected(), this.getIds());\r\n\r\n            selected = _.difference(selected, this.disabled());\r\n\r\n            this.selected(selected);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Deselects all records on the current page.\r\n         *\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        deselectPage: function () {\r\n            var pageIds = this.getIds();\r\n\r\n            this.selected.remove(function (value) {\r\n                return !!~pageIds.indexOf(value);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Clears the array of not selected records.\r\n         *\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        clearExcluded: function () {\r\n            this.excluded.removeAll();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Retrieve all id's from available records.\r\n         *\r\n         * @param {Boolean} [exclude] - Whether to exclude not selected ids' from result.\r\n         * @returns {Array} An array of ids'.\r\n         */\r\n        getIds: function (exclude) {\r\n            var items = this.rows(),\r\n                ids = _.pluck(items, this.indexField);\r\n\r\n            return exclude ?\r\n                _.difference(ids, this.excluded()) :\r\n                ids;\r\n        },\r\n\r\n        /**\r\n         * Returns identifier of a record.\r\n         *\r\n         * @param {*} id - Id of a record or its' index in a rows array.\r\n         * @param {Boolean} [isIndex=false] - Flag that specifies whith what\r\n         *      kind of identifier we are dealing with.\r\n         * @returns {*}\r\n         */\r\n        getId: function (id, isIndex) {\r\n            var record = this.rows()[id];\r\n\r\n            if (isIndex && record) {\r\n                id = record[this.indexField];\r\n            }\r\n\r\n            return id;\r\n        },\r\n\r\n        /**\r\n         * Recalculates list of the excluded records.\r\n         * Changes value of `excluded`.\r\n         *\r\n         * @param {Array} selected - List of the currently selected records.\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        updateExcluded: function (selected) {\r\n            var excluded = this.excluded(),\r\n                fromPage = _.difference(this.getIds(), selected);\r\n\r\n            excluded = _.union(excluded, fromPage);\r\n            excluded = _.difference(excluded, selected);\r\n\r\n            this.excluded(excluded);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calculates number of selected records and\r\n         * updates 'totalSelected' property.\r\n         *\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        countSelected: function () {\r\n            var total = this.totalRecords(),\r\n                excluded = this.excluded().length,\r\n                selected = this.selected().length;\r\n\r\n            if (this.excludeMode()) {\r\n                selected = total - excluded;\r\n            }\r\n\r\n            this.totalSelected(selected);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns selected items on a current page.\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getPageSelections: function () {\r\n            var ids = this.getIds();\r\n\r\n            return this.selected.filter(function (id) {\r\n                return _.contains(ids, id);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Returns selections data.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getSelections: function () {\r\n            return {\r\n                excluded: this.excluded(),\r\n                selected: this.selected(),\r\n                total: this.totalSelected(),\r\n                excludeMode: this.excludeMode(),\r\n                params: this.getFiltering()\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Extracts filtering data from data provider.\r\n         *\r\n         * @returns {Object} Current filters state.\r\n         */\r\n        getFiltering: function () {\r\n            var source = this.source(),\r\n                keys = ['filters', 'search', 'namespace'];\r\n\r\n            if (!source) {\r\n                return {};\r\n            }\r\n\r\n            return _.pick(source.get('params'), keys);\r\n        },\r\n\r\n        /**\r\n         * Defines if provided select/deselect actions is relevant.\r\n         * E.g. there is no need in a 'select page' action if only one\r\n         * page is available.\r\n         *\r\n         * @param {String} actionId - Id of the action to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isActionRelevant: function (actionId) {\r\n            var pageIds         = this.getIds().length,\r\n                multiplePages   = pageIds < this.totalRecords(),\r\n                relevant        = true;\r\n\r\n            switch (actionId) {\r\n                case 'selectPage':\r\n                    relevant = multiplePages && !this.isPageSelected(true);\r\n                    break;\r\n\r\n                case 'deselectPage':\r\n                    relevant =  multiplePages && this.isPageSelected();\r\n                    break;\r\n\r\n                case 'selectAll':\r\n                    relevant = !this.allSelected();\r\n                    break;\r\n\r\n                case 'deselectAll':\r\n                    relevant = this.totalSelected() > 0;\r\n            }\r\n\r\n            return relevant;\r\n        },\r\n\r\n        /**\r\n         * Checks if current page has selected records.\r\n         *\r\n         * @param {Boolean} [all=false] - If set to 'true' checks that every\r\n         *      record on the page is selected. Otherwise checks that\r\n         *      page has some selected records.\r\n         * @returns {Boolean}\r\n         */\r\n        isPageSelected: function (all) {\r\n            var pageIds = this.getIds(),\r\n                selected = this.selected(),\r\n                excluded = this.excluded(),\r\n                iterator = all ? 'every' : 'some';\r\n\r\n            if (this.allSelected()) {\r\n                return true;\r\n            }\r\n\r\n            if (this.excludeMode()) {\r\n                return pageIds[iterator](function (id) {\r\n                    return !~excluded.indexOf(id);\r\n                });\r\n            }\r\n\r\n            return pageIds[iterator](function (id) {\r\n                return !!~selected.indexOf(id);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Updates values of the 'allSelected'\r\n         * and 'indetermine' properties.\r\n         *\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        updateState: function () {\r\n            var selected        = this.selected().length,\r\n                excluded        = this.excluded().length,\r\n                totalSelected   = this.totalSelected(),\r\n                totalRecords    = this.totalRecords(),\r\n                allSelected     = totalRecords && totalSelected === totalRecords;\r\n\r\n            if (this.excludeMode()) {\r\n                if (excluded === totalRecords && !this.preserveSelectionsOnFilter) {\r\n                    this.deselectAll();\r\n                }\r\n            } else if (totalRecords && selected === totalRecords && !this.preserveSelectionsOnFilter) {\r\n                this.selectAll();\r\n            }\r\n\r\n            this.allSelected(allSelected);\r\n            this.indetermine(totalSelected && !allSelected);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Overrides base method, because this component\r\n         * can't have global field action.\r\n         *\r\n         * @returns {Boolean} False.\r\n         */\r\n        hasFieldAction: function () {\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Callback method to handle changes of selected items.\r\n         *\r\n         * @param {Array} selected - An array of currently selected items.\r\n         */\r\n        onSelectedChange: function (selected) {\r\n            this.updateExcluded(selected)\r\n                .countSelected()\r\n                .updateState();\r\n        },\r\n\r\n        /**\r\n         * Is invoked when rows has changed. Recalculates selected items\r\n         * based on \"selectMode\" property.\r\n         */\r\n        onRowsChange: function () {\r\n            var newSelections;\r\n\r\n            if (this.excludeMode()) {\r\n                newSelections = _.union(this.getIds(true), this.selected());\r\n\r\n                this.selected(newSelections);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Is invoked when filtration is applied or removed\r\n         */\r\n        onFilter: function () {\r\n            if (!this.preserveSelectionsOnFilter) {\r\n                this.deselectAll();\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/onoff.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mage/translate',\r\n    './multiselect',\r\n    'uiRegistry'\r\n], function (_, $t, Column, registry) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            headerTmpl: 'ui/grid/columns/onoff',\r\n            bodyTmpl: 'ui/grid/cells/onoff',\r\n            fieldClass: {\r\n                'admin__scope-old': true,\r\n                'data-grid-onoff-cell': true,\r\n                'data-grid-checkbox-cell': false\r\n            },\r\n            imports: {\r\n                selectedData: '${ $.provider }:data.selectedData'\r\n            },\r\n            listens: {\r\n                '${ $.provider }:reloaded': 'setDefaultSelections'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Number} id\r\n         * @returns {*}\r\n         */\r\n        getLabel: function (id) {\r\n            return this.selected.indexOf(id) !== -1 ? $t('On') : $t('Off');\r\n        },\r\n\r\n        /**\r\n         * Sets the ids for preselected elements\r\n         * @returns void\r\n         */\r\n        setDefaultSelections: function () {\r\n            var positionCacheValid = registry.get('position_cache_valid'),\r\n                selectedFromCache = registry.get('selected_cache'),\r\n                key,\r\n                i;\r\n\r\n            if (positionCacheValid && this.selected().length === 0) {\r\n                // Check selected data\r\n                selectedFromCache = JSON.parse(selectedFromCache);\r\n\r\n                for (i = 0; i < selectedFromCache.length; i++) {\r\n                    this.selected.push(selectedFromCache[i]);\r\n                }\r\n\r\n                registry.set('position_cache_valid', true);\r\n                registry.set('selected_cache', JSON.stringify(this.selected()));\r\n\r\n                return;\r\n            }\r\n\r\n            if (positionCacheValid && this.selected().length > 0) {\r\n                registry.set('position_cache_valid', true);\r\n                registry.set('selected_cache', JSON.stringify(this.selected()));\r\n\r\n                return;\r\n            }\r\n\r\n            if (this.selectedData.length === 0) {\r\n                registry.set('position_cache_valid', true);\r\n                registry.set('selected_cache', JSON.stringify([]));\r\n\r\n                return;\r\n            }\r\n\r\n            // Check selected data\r\n            for (key in this.selectedData) {\r\n                if (this.selectedData.hasOwnProperty(key) && this.selected().indexOf(key) === -1) {\r\n                    this.selected.push(key);\r\n                }\r\n            }\r\n            // Uncheck unselected data\r\n            for (i = 0; i < this.selected().length; i++) {\r\n                key = this.selected()[i];\r\n                this.selectedData.hasOwnProperty(key) || this.selected.splice(this.selected().indexOf(key), 1);\r\n                this.selectedData.hasOwnProperty(key) || i--;\r\n            }\r\n            registry.set('position_cache_valid', true);\r\n            registry.set('selected_cache', JSON.stringify(this.selected()));\r\n        },\r\n\r\n        /**\r\n         * Show/hide action in the massaction menu\r\n         * @param {Number} actionId\r\n         * @returns {Boolean}\r\n         */\r\n        isActionRelevant: function (actionId) {\r\n            var relevant = true;\r\n\r\n            switch (actionId) {\r\n                case 'selectPage':\r\n                    relevant = !this.isPageSelected(true);\r\n                    break;\r\n\r\n                case 'deselectPage':\r\n                    relevant =  this.isPageSelected();\r\n                    break;\r\n            }\r\n\r\n            return relevant;\r\n        },\r\n\r\n        /**\r\n         * Updates values of the 'allSelected'\r\n         * and 'indetermine' properties.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        updateState: function () {\r\n            var positionCacheValid = registry.get('position_cache_valid'),\r\n                totalRecords    = this.totalRecords(),\r\n                selected        = this.selected().length,\r\n                excluded        = this.excluded().length,\r\n                totalSelected   = this.totalSelected(),\r\n                allSelected;\r\n\r\n            if (positionCacheValid && this.selected().length > 0) {\r\n                registry.set('position_cache_valid', true);\r\n                registry.set('selected_cache', JSON.stringify(this.selected()));\r\n            }\r\n\r\n            // When filters are enabled then totalRecords is unknown\r\n            if (this.getFiltering()) {\r\n                if (this.getFiltering().search !== '') {\r\n                    totalRecords = -1;\r\n                }\r\n            }\r\n\r\n            allSelected = totalRecords && totalSelected === totalRecords;\r\n\r\n            if (this.excludeMode()) {\r\n                if (excluded === totalRecords) {\r\n                    this.deselectAll();\r\n                }\r\n            } else if (totalRecords && selected === totalRecords) {\r\n                this.selectAll();\r\n            }\r\n\r\n            this.allSelected(allSelected);\r\n            this.indetermine(totalSelected && !allSelected);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/select.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    './column'\r\n], function (_, Column) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n\r\n        /*eslint-disable eqeqeq*/\r\n        /**\r\n         * Retrieves label associated with a provided value.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getLabel: function () {\r\n            var options = this.options || [],\r\n                values = this._super(),\r\n                label = [];\r\n\r\n            if (_.isString(values)) {\r\n                values = values.split(',');\r\n            }\r\n\r\n            if (!Array.isArray(values)) {\r\n                values = [values];\r\n            }\r\n\r\n            values = values.map(function (value) {\r\n                return value + '';\r\n            });\r\n\r\n            options.forEach(function (item) {\r\n                if (_.contains(values, item.value + '')) {\r\n                    label.push(item.label);\r\n                }\r\n            });\r\n\r\n            return label.join(', ');\r\n        }\r\n\r\n        /*eslint-enable eqeqeq*/\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/thumbnail.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    './column',\r\n    'jquery',\r\n    'mage/template',\r\n    'text!Magento_Ui/templates/grid/cells/thumbnail/preview.html',\r\n    'underscore',\r\n    'Magento_Ui/js/modal/modal',\r\n    'mage/translate'\r\n], function (Column, $, mageTemplate, thumbnailPreviewTemplate, _) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'ui/grid/cells/thumbnail',\r\n            fieldClass: {\r\n                'data-grid-thumbnail-cell': true\r\n            }\r\n        },\r\n        getSrc: function (row) {\r\n            return row[this.index + '_src']\r\n        },\r\n        getOrigSrc: function (row) {\r\n            return row[this.index + '_orig_src'];\r\n        },\r\n        getLink: function (row) {\r\n            return row[this.index + '_link'];\r\n        },\r\n        getAlt: function (row) {\r\n            return _.escape(row[this.index + '_alt']);\r\n        },\r\n        isPreviewAvailable: function() {\r\n            return this.has_preview || false;\r\n        },\r\n        preview: function (row) {\r\n            var modalHtml = mageTemplate(\r\n                thumbnailPreviewTemplate,\r\n                {\r\n                    src: this.getOrigSrc(row), alt: this.getAlt(row), link: this.getLink(row),\r\n                    linkText: $.mage.__('Go to Details Page')\r\n                }\r\n            );\r\n            var previewPopup = $('<div/>').html(modalHtml);\r\n            previewPopup.modal({\r\n                title: this.getAlt(row),\r\n                innerScroll: true,\r\n                modalClass: '_image-box',\r\n                buttons: []}).trigger('openModal');\r\n        },\r\n        getFieldHandler: function (row) {\r\n            if (this.isPreviewAvailable()) {\r\n                return this.preview.bind(this, row);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/controls/columns.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'mage/translate',\r\n    'uiCollection'\r\n], function (_, utils, $t, Collection) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            template: 'ui/grid/controls/columns',\r\n            minVisible: 1,\r\n            maxVisible: 30,\r\n            viewportSize: 18,\r\n            displayArea: 'dataGridActions',\r\n            columnsProvider: 'ns = ${ $.ns }, componentType = columns',\r\n            imports: {\r\n                addColumns: '${ $.columnsProvider }:elems'\r\n            },\r\n            templates: {\r\n                headerMsg: $t('${ $.visible } out of ${ $.total } visible')\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Resets columns visibility to theirs default state.\r\n         *\r\n         * @returns {Columns} Chainable.\r\n         */\r\n        reset: function () {\r\n            this.elems.each('applyState', 'default', 'visible');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Applies last saved state of columns visibility.\r\n         *\r\n         * @returns {Columns} Chainable.\r\n         */\r\n        cancel: function () {\r\n            this.elems.each('applyState', '', 'visible');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds columns whose visibility can be controlled to the component.\r\n         *\r\n         * @param {Array} columns - Elements array that will be added to component.\r\n         * @returns {Columns} Chainable.\r\n         */\r\n        addColumns: function (columns) {\r\n            columns = _.where(columns, {\r\n                controlVisibility: true\r\n            });\r\n\r\n            this.insertChild(columns);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Defines whether child elements array length\r\n         * is greater than the 'viewportSize' property.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasOverflow: function () {\r\n            return this.elems().length > this.viewportSize;\r\n        },\r\n\r\n        /**\r\n         * Helper, checks\r\n         *  - if less than one item choosen\r\n         *  - if more then viewportMaxSize choosen\r\n         *\r\n         * @param {Object} elem\r\n         * @returns {Boolean}\r\n         */\r\n        isDisabled: function (elem) {\r\n            var visible = this.countVisible();\r\n\r\n            return elem.visible ?\r\n                    visible === this.minVisible :\r\n                    visible === this.maxVisible;\r\n        },\r\n\r\n        /**\r\n         * Counts number of visible columns.\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        countVisible: function () {\r\n            return this.elems.filter('visible').length;\r\n        },\r\n\r\n        /**\r\n         * Compile header message from headerMessage setting.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getHeaderMessage: function () {\r\n            return utils.template(this.templates.headerMsg, {\r\n                visible: this.countVisible(),\r\n                total: this.elems().length\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/controls/bookmarks/bookmarks.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'mage/translate',\r\n    'rjsResolver',\r\n    'uiLayout',\r\n    'uiCollection'\r\n], function (_, utils, $t, resolver, layout, Collection) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Removes 'current' namespace from a 'path' string.\r\n     *\r\n     * @param {String} path\r\n     * @returns {String} Path without namespace.\r\n     */\r\n    function removeStateNs(path) {\r\n        path = typeof path == 'string' ? path.split('.') : [];\r\n\r\n        if (path[0] === 'current') {\r\n            path.shift();\r\n        }\r\n\r\n        return path.join('.');\r\n    }\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            template: 'ui/grid/controls/bookmarks/bookmarks',\r\n            viewTmpl: 'ui/grid/controls/bookmarks/view',\r\n            newViewLabel: $t('New View'),\r\n            defaultIndex: 'default',\r\n            activeIndex: 'default',\r\n            viewsArray: [],\r\n            storageConfig: {\r\n                provider: '${ $.storageConfig.name }',\r\n                name: '${ $.name }_storage',\r\n                component: 'Magento_Ui/js/grid/controls/bookmarks/storage'\r\n            },\r\n            views: {\r\n                default: {\r\n                    label: $t('Default View'),\r\n                    index: 'default',\r\n                    editable: false\r\n                }\r\n            },\r\n            tracks: {\r\n                editing: true,\r\n                viewsArray: true,\r\n                activeView: true,\r\n                hasChanges: true,\r\n                customLabel: true,\r\n                customVisible: true\r\n            },\r\n            listens: {\r\n                activeIndex: 'onActiveIndexChange',\r\n                activeView: 'checkState',\r\n                current: 'onStateChange'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes bookmarks component.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        initialize: function () {\r\n            utils.limit(this, 'checkState', 5);\r\n            utils.limit(this, 'saveState', 2000);\r\n\r\n            this._super()\r\n                .restore()\r\n                .initStorage()\r\n                .initViews();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates custom storage instance.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        initStorage: function () {\r\n            layout([this.storageConfig]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Defines default data if it wasn't gathered previously.\r\n         *\r\n         * @private\r\n         * @returns {Bookmarks} Chainbale.\r\n         */\r\n        initDefaultView: function () {\r\n            var data = this.getViewData(this.defaultIndex);\r\n\r\n            if (!_.size(data)) {\r\n                this.setViewData(this.defaultIndex, this.current)\r\n                    .saveView(this.defaultIndex);\r\n            }\r\n\r\n            this.defaultDefined = true;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates instances of a previously saved views.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        initViews: function () {\r\n            _.each(this.views, function (config) {\r\n                this.addView(config);\r\n            }, this);\r\n\r\n            this.activeView = this.getActiveView();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates complete configuration for a view.\r\n         *\r\n         * @param {Object} [config] - Additional configuration object.\r\n         * @returns {Object}\r\n         */\r\n        buildView: function (config) {\r\n            var view = {\r\n                label: this.newViewLabel,\r\n                index: '_' + Date.now(),\r\n                editable: true\r\n            };\r\n\r\n            utils.extend(view, config || {});\r\n\r\n            view.data   = view.data || utils.copy(this.current);\r\n            view.value  = view.label;\r\n\r\n            this.observe.call(view, true, 'label value');\r\n\r\n            return view;\r\n        },\r\n\r\n        /**\r\n         * Creates instance of a view with a provided configuration.\r\n         *\r\n         * @param {Object} [config] - View configuration.\r\n         * @param {Boolean} [saveView=false] - Whether to save created view automatically or not.\r\n         * @param {Boolean} [applyView=false] - Whether to apply created view automatically or not.\r\n         * @returns {View} Created view.\r\n         */\r\n        addView: function (config, saveView, applyView) {\r\n            var view    = this.buildView(config),\r\n                index   = view.index;\r\n\r\n            this.views[index] = view;\r\n\r\n            if (saveView) {\r\n                this.saveView(index);\r\n            }\r\n\r\n            if (applyView) {\r\n                this.applyView(index);\r\n            }\r\n\r\n            this.updateArray();\r\n\r\n            return view;\r\n        },\r\n\r\n        /**\r\n         * Removes specified view.\r\n         *\r\n         * @param {String} index - Index of a view to be removed.\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        removeView: function (index) {\r\n            var viewPath = this.getViewPath(index);\r\n\r\n            if (this.isViewActive(index)) {\r\n                this.applyView(this.defaultIndex);\r\n            }\r\n\r\n            this.endEdit(index)\r\n                .remove(viewPath)\r\n                .removeStored(viewPath)\r\n                .updateArray();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Saves data of a specified view.\r\n         *\r\n         * @param {String} index - Index of a view to be saved.\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        saveView: function (index) {\r\n            var viewPath = this.getViewPath(index);\r\n\r\n            this.updateViewLabel(index)\r\n                .endEdit(index)\r\n                .store(viewPath)\r\n                .checkState();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets specified view as active\r\n         * and applies its' state.\r\n         *\r\n         * @param {String} index - Index of a view to be applied.\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        applyView: function (index) {\r\n            this.applyStateOf(index)\r\n                .set('activeIndex', index);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates data of a specified view if it's\r\n         * currently active and saves its' data.\r\n         *\r\n         * @param {String} index - Index of a view.\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        updateAndSave: function (index) {\r\n            if (this.isViewActive(index)) {\r\n                this.updateActiveView(index);\r\n            }\r\n\r\n            this.saveView(index);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns instance of a specified view.\r\n         *\r\n         * @param {String} index - Index of a view to be retrieved.\r\n         * @returns {View}\r\n         */\r\n        getView: function (index) {\r\n            return this.views[index];\r\n        },\r\n\r\n        /**\r\n         * Returns instance of an active view.\r\n         *\r\n         * @returns {View}\r\n         */\r\n        getActiveView: function () {\r\n            return this.views[this.activeIndex];\r\n        },\r\n\r\n        /**\r\n         * Checks if specified view is active.\r\n         *\r\n         * @param {String} index - Index of a view to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isViewActive: function (index) {\r\n            return this.activeView === this.getView(index);\r\n        },\r\n\r\n        /**\r\n         * Sets current state as a data of an active view.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        updateActiveView: function () {\r\n            this.setViewData(this.activeIndex, this.current);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Replaces label a view with a provided one.\r\n         * If new label is not specified, then views'\r\n         * 'value' property will be taken.\r\n         *\r\n         * @param {String} index - Index of a view.\r\n         * @param {String} [label=view.value] - New labels' value.\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        updateViewLabel: function (index, label) {\r\n            var view    = this.getView(index),\r\n                current = view.label;\r\n\r\n            label = (label || view.value).trim() || current;\r\n            label = this.uniqueLabel(label, current);\r\n\r\n            view.label = view.value = label;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Retrieves data of a specified view.\r\n         *\r\n         * @param {String} index - Index of a view whose data should be retrieved.\r\n         * @param {String} [property] - If not specified then whole views' data will be retrieved.\r\n         * @returns {Object} Views' data.\r\n         */\r\n        getViewData: function (index, property) {\r\n            var view = this.getView(index),\r\n                data = view.data;\r\n\r\n            if (property) {\r\n                data = utils.nested(data, property);\r\n            }\r\n\r\n            return utils.copy(data);\r\n        },\r\n\r\n        /**\r\n         * Sets data to the specified view.\r\n         *\r\n         * @param {String} index - Index of a view whose data will be replaced.\r\n         * @param {Object} data - New view data.\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        setViewData: function (index, data) {\r\n            var path = this.getViewPath(index) + '.data';\r\n\r\n            this.set(path, utils.copy(data));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Starts editing of a specified view.\r\n         *\r\n         * @param {String} index - Index of a view.\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        editView: function (index) {\r\n            this.editing = index;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Ends editing of specified view\r\n         * and restores its' label.\r\n         *\r\n         * @param {String} index - Index of a view.\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        endEdit: function (index) {\r\n            var view;\r\n\r\n            if (!this.isEditing(index)) {\r\n                return this;\r\n            }\r\n\r\n            index   = index || this.editing;\r\n            view    = this.getView(index);\r\n\r\n            view.value = view.label;\r\n\r\n            this.editing = false;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if specified view is in editing state.\r\n         *\r\n         * @param {String} index - Index of a view to be checked.\r\n         * @returns {Bollean}\r\n         */\r\n        isEditing: function (index) {\r\n            return this.editing === index;\r\n        },\r\n\r\n        /**\r\n         * Generates label unique among present views, based\r\n         * on the incoming label pattern.\r\n         *\r\n         * @param {String} [label=this.newViewLabel] - Label pattern.\r\n         * @param {String} [exclude]\r\n         * @returns {String}\r\n         */\r\n        uniqueLabel: function (label, exclude) {\r\n            var labels      = _.pluck(this.views, 'label'),\r\n                hasParenth  = _.last(label) === ')',\r\n                index       = 2,\r\n                result,\r\n                suffix;\r\n\r\n            labels = _.without(labels, exclude);\r\n            result = label = label || this.newViewLabel;\r\n\r\n            for (index = 2; _.contains(labels, result); index++) {\r\n                suffix = '(' + index + ')';\r\n\r\n                if (!hasParenth) {\r\n                    suffix = ' ' + suffix;\r\n                }\r\n\r\n                result = label + suffix;\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Applies state of a specified view, without\r\n         * making it active.\r\n         *\r\n         * @param {String} [state=this.activeIndex]\r\n         * @param {String} [property]\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        applyStateOf: function (state, property) {\r\n            var index    = state || this.activeIndex,\r\n                dataPath = removeStateNs(property),\r\n                viewData = this.getViewData(index, dataPath);\r\n\r\n            dataPath = dataPath ?\r\n                'current.' + dataPath :\r\n                'current';\r\n\r\n            this.set(dataPath, viewData);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Saves current state.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        saveState: function () {\r\n            this.store('current');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Applies state of an active view.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        resetState: function () {\r\n            this.applyStateOf(this.activeIndex);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if current state is different\r\n         * from the state of an active view.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        checkState: function () {\r\n            var viewData = this.getViewData(this.activeIndex),\r\n                diff     = utils.compare(viewData, this.current);\r\n\r\n            this.hasChanges = !diff.equal;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns path to the view instance,\r\n         * based on a provided index.\r\n         *\r\n         * @param {String} index - Index of a view.\r\n         * @returns {String}\r\n         */\r\n        getViewPath: function (index) {\r\n            return 'views.' + index;\r\n        },\r\n\r\n        /**\r\n         * Updates the array of views.\r\n         *\r\n         * @returns {Bookmarks} Chainable\r\n         */\r\n        updateArray: function () {\r\n            this.viewsArray = _.values(this.views);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Shows custom view field and creates unique label for it.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        showCustom: function () {\r\n            this.customLabel    = this.uniqueLabel();\r\n            this.customVisible  = true;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Hides custom view field.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        hideCustom: function () {\r\n            this.customVisible = false;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if custom view field is visible.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isCustomVisible: function () {\r\n            return this.customVisible;\r\n        },\r\n\r\n        /**\r\n         * Creates new view instance with a label specified\r\n         * in a custom view field.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        applyCustom: function () {\r\n            var label = this.customLabel.trim();\r\n\r\n            this.hideCustom()\r\n                .addView({\r\n                    label: this.uniqueLabel(label)\r\n                }, true, true);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Listener of the activeIndex property.\r\n         */\r\n        onActiveIndexChange: function () {\r\n            this.activeView = this.getActiveView();\r\n\r\n            this.store('activeIndex');\r\n        },\r\n\r\n        /**\r\n         * Listener of the activeIndex property.\r\n         */\r\n        onStateChange: function () {\r\n            this.checkState();\r\n            this.saveState();\r\n\r\n            if (!this.defaultDefined) {\r\n                resolver(this.initDefaultView, this);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/controls/bookmarks/storage.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'mageUtils',\r\n    'Magento_Ui/js/lib/core/storage/local',\r\n    'uiClass'\r\n], function ($, utils, storage, Class) {\r\n    'use strict';\r\n\r\n    function removeNs(ns, path) {\r\n        return path.replace(ns + '.', '');\r\n    }\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n            ajaxSettings: {\r\n                method: 'POST',\r\n                data: {\r\n                    namespace: '${ $.namespace }'\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Delegates call to the localStorage adapter.\r\n         */\r\n        get: function () {\r\n            return {};\r\n        },\r\n\r\n        /**\r\n         * Sends request to store specified data.\r\n         *\r\n         * @param {String} path - Path by which data should be stored.\r\n         * @param {*} value - Value to be sent.\r\n         */\r\n        set: function (path, value) {\r\n            var property = removeNs(this.namespace, path),\r\n                data = {},\r\n                config;\r\n\r\n            utils.nested(data, property, value);\r\n\r\n            config = utils.extend({\r\n                url: this.saveUrl,\r\n                data: {\r\n                    data: JSON.stringify(data)\r\n                }\r\n            }, this.ajaxSettings);\r\n\r\n            $.ajax(config);\r\n        },\r\n\r\n        /**\r\n         * Sends request to remove specified data.\r\n         *\r\n         * @param {String} path - Path to the property to be removed.\r\n         */\r\n        remove: function (path) {\r\n            var property = removeNs(this.namespace, path),\r\n                config;\r\n\r\n            config = utils.extend({\r\n                url: this.deleteUrl,\r\n                data: {\r\n                    data: property\r\n                }\r\n            }, this.ajaxSettings);\r\n\r\n            $.ajax(config);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/controls/button/split.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return function (data, element) {\r\n\r\n        $(element).on('click.splitDefault', '.action-default', function () {\r\n            $(this).siblings('.dropdown-menu').find('.item-default').trigger('click');\r\n        });\r\n    };\r\n});\r\n","Magento_Ui/js/grid/editing/bulk.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    './record'\r\n], function (_, utils, Record) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Removes empty properties from the provided object.\r\n     *\r\n     * @param {Object} data - Object to be processed.\r\n     * @returns {Object}\r\n     */\r\n    function removeEmpty(data) {\r\n        data = utils.flatten(data);\r\n        data = _.omit(data, utils.isEmpty);\r\n\r\n        return utils.unflatten(data);\r\n    }\r\n\r\n    return Record.extend({\r\n        defaults: {\r\n            template: 'ui/grid/editing/bulk',\r\n            active: false,\r\n            templates: {\r\n                fields: {\r\n                    select: {\r\n                        caption: ' '\r\n                    }\r\n                }\r\n            },\r\n            imports: {\r\n                active: '${ $.editorProvider }:isMultiEditing'\r\n            },\r\n            listens: {\r\n                data: 'updateState',\r\n                active: 'updateState'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Bulk} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track({\r\n                    hasData: false\r\n                });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Extends original method to disable possible\r\n         * 'required-entry' validation rule.\r\n         *\r\n         * @returns {Object} Columns' field definition.\r\n         */\r\n        buildField: function () {\r\n            var field = this._super(),\r\n                rules = field.validation;\r\n\r\n            if (rules) {\r\n                delete rules['required-entry'];\r\n            }\r\n\r\n            return field;\r\n        },\r\n\r\n        /**\r\n         * Applies current data to all active records.\r\n         *\r\n         * @returns {Bulk} Chainable.\r\n         */\r\n        apply: function () {\r\n            if (this.isValid()) {\r\n                this.applyData()\r\n                    .clear();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets available data to all active records.\r\n         *\r\n         * @param {Object} [data] -  If not specified, then current fields data will be used.\r\n         * @returns {Bulk} Chainable.\r\n         */\r\n        applyData: function (data) {\r\n            data = data || this.getData();\r\n\r\n            this.editor('setData', data, true);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns data of all non-empty fields.\r\n         *\r\n         * @returns {Object} Fields data without empty values.\r\n         */\r\n        getData: function () {\r\n            return removeEmpty(this._super());\r\n        },\r\n\r\n        /**\r\n         * Updates own 'hasData' property and defines\r\n         * whether regular rows editing can be resumed.\r\n         *\r\n         * @returns {Bulk} Chainable.\r\n         */\r\n        updateState: function () {\r\n            var fields  = _.keys(this.getData()),\r\n                hasData = !!fields.length;\r\n\r\n            this.hasData = hasData;\r\n\r\n            if (!this.active()) {\r\n                fields = [];\r\n            }\r\n\r\n            this.editor('disableFields', fields);\r\n            this.editor('canSave', !fields.length);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/editing/client.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiClass'\r\n], function ($, _, utils, Class) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n            validateBeforeSave: true,\r\n            requestConfig: {\r\n                dataType: 'json',\r\n                type: 'POST'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes client instance.\r\n         *\r\n         * @returns {Client} Chainable.\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(this, 'onSuccess', 'onError');\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Sends XMLHttpRequest with a provided configuration.\r\n         *\r\n         * @param {Object} config - Configuration of request.\r\n         * @returns {jQueryPromise}\r\n         */\r\n        send: function (config) {\r\n            var deffer  = $.Deferred();\r\n\r\n            config = utils.extend({}, this.requestConfig, config);\r\n\r\n            $.ajax(config)\r\n                .done(_.partial(this.onSuccess, deffer))\r\n                .fail(_.partial(this.onError, deffer));\r\n\r\n            return deffer.promise();\r\n        },\r\n\r\n        /**\r\n         * Proxy save method which might invoke\r\n         * data valiation prior to its' saving.\r\n         *\r\n         * @param {Object} data - Data to be processed.\r\n         * @returns {jQueryPromise}\r\n         */\r\n        save: function (data) {\r\n            var save = this._save.bind(this, data);\r\n\r\n            return this.validateBeforeSave ?\r\n                this.validate(data).pipe(save) :\r\n                save();\r\n        },\r\n\r\n        /**\r\n         * Sends request to validate provided data.\r\n         *\r\n         * @param {Object} data - Data to be validated.\r\n         * @returns {jQueryPromise}\r\n         */\r\n        validate: function (data) {\r\n            return this.send({\r\n                url: this.validateUrl,\r\n                data: data\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Sends request to save provided data.\r\n         *\r\n         * @private\r\n         * @param {Object} data - Data to be validated.\r\n         * @returns {jQueryPromise}\r\n         */\r\n        _save: function (data) {\r\n            return this.send({\r\n                url: this.saveUrl,\r\n                data: data\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Creates error object with a provided message.\r\n         *\r\n         * @param {String} msg - Errors' message.\r\n         * @returns {Object}\r\n         */\r\n        createError: function (msg) {\r\n            return {\r\n                type: 'error',\r\n                message: msg\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Handles ajax error callback.\r\n         *\r\n         * @param {jQueryPromise} promise - Promise to be rejected.\r\n         * @param {jQueryXHR} xhr - See 'jquery' ajax error callback.\r\n         * @param {String} status - See 'jquery' ajax error callback.\r\n         * @param {(String|Object)} err - See 'jquery' ajax error callback.\r\n         */\r\n        onError: function (promise, xhr, status, err) {\r\n            var msg;\r\n\r\n            msg = xhr.status !== 200 ?\r\n                xhr.status + ' (' + xhr.statusText + ')' :\r\n                err;\r\n\r\n            promise.reject(this.createError(msg));\r\n        },\r\n\r\n        /**\r\n         * Handles ajax success callback.\r\n         *\r\n         * @param {jQueryPromise} promise - Promise to be resoloved.\r\n         * @param {*} data - See 'jquery' ajax success callback.\r\n         */\r\n        onSuccess: function (promise, data) {\r\n            var errors;\r\n\r\n            if (data.error) {\r\n                errors = _.map(data.messages, this.createError, this);\r\n\r\n                promise.reject(errors);\r\n            } else {\r\n                promise.resolve(data);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/editing/editor-view.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'underscore',\r\n    'uiRegistry',\r\n    'uiClass'\r\n], function (ko, $, _, registry, Class) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n            rootSelector: '${ $.columnsProvider }:.admin__data-grid-wrap',\r\n            tableSelector: '${ $.rootSelector } -> table',\r\n            rowSelector: '${ $.tableSelector } tbody tr.data-row',\r\n            headerButtonsTmpl:\r\n                '<!-- ko template: headerButtonsTmpl --><!-- /ko -->',\r\n            bulkTmpl:\r\n                '<!-- ko scope: bulk -->' +\r\n                    '<!-- ko template: getTemplate() --><!-- /ko -->' +\r\n                '<!-- /ko -->',\r\n            rowTmpl:\r\n                '<!-- ko with: _editor -->' +\r\n                    '<!-- ko if: isActive($row()._rowIndex, true) -->' +\r\n                        '<!-- ko with: getRecord($row()._rowIndex, true) -->' +\r\n                            '<!-- ko template: rowTmpl --><!-- /ko -->' +\r\n                        '<!-- /ko -->' +\r\n                        '<!-- ko if: isSingleEditing && singleEditingButtons -->' +\r\n                            '<!-- ko template: rowButtonsTmpl --><!-- /ko -->' +\r\n                        '<!-- /ko -->' +\r\n                    '<!-- /ko -->' +\r\n               '<!-- /ko -->'\r\n        },\r\n\r\n        /**\r\n         * Initializes view component.\r\n         *\r\n         * @returns {View} Chainable.\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(\r\n                this,\r\n                'initRoot',\r\n                'initTable',\r\n                'initRow',\r\n                'rowBindings',\r\n                'tableBindings'\r\n            );\r\n\r\n            this._super();\r\n\r\n            this.model = registry.get(this.model);\r\n\r\n            $.async(this.rootSelector, this.initRoot);\r\n            $.async(this.tableSelector, this.initTable);\r\n            $.async(this.rowSelector, this.initRow);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes columns root container.\r\n         *\r\n         * @param {HTMLElement} node\r\n         * @returns {View} Chainable.\r\n         */\r\n        initRoot: function (node) {\r\n            $(this.headerButtonsTmpl)\r\n                .insertBefore(node)\r\n                .applyBindings(this.model);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes table element.\r\n         *\r\n         * @param {HTMLTableElement} table\r\n         * @returns {View} Chainable.\r\n         */\r\n        initTable: function (table) {\r\n            $(table).bindings(this.tableBindings);\r\n\r\n            this.initBulk(table);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes bulk editor element\r\n         * for the provided table.\r\n         *\r\n         * @param {HTMLTableElement} table\r\n         * @returns {View} Chainable.\r\n         */\r\n        initBulk: function (table) {\r\n            var tableBody = $('tbody', table)[0];\r\n\r\n            $(this.bulkTmpl)\r\n                .prependTo(tableBody)\r\n                .applyBindings(this.model);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes table row.\r\n         *\r\n         * @param {HTMLTableRowElement} row\r\n         * @returns {View} Chainable.\r\n         */\r\n        initRow: function (row) {\r\n            var $editingRow;\r\n\r\n            $(row).extendCtx({\r\n                    _editor: this.model\r\n                }).bindings(this.rowBindings);\r\n\r\n            $editingRow = $(this.rowTmpl)\r\n                .insertBefore(row)\r\n                .applyBindings(row);\r\n\r\n            ko.utils.domNodeDisposal.addDisposeCallback(row, this.removeEditingRow.bind(this, $editingRow));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns row bindings.\r\n         *\r\n         * @param {Object} ctx - Current context of a row.\r\n         * @returns {Object}\r\n         */\r\n        rowBindings: function (ctx) {\r\n            var model = this.model;\r\n\r\n            return {\r\n                visible: ko.computed(function () {\r\n                    var record = ctx.$row(),\r\n                        index = record && record._rowIndex;\r\n\r\n                    return !model.isActive(index, true);\r\n                })\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Returns table bindings.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        tableBindings: function () {\r\n            var model = this.model;\r\n\r\n            return {\r\n                css: {\r\n                    '_in-edit': ko.computed(function () {\r\n                        return model.hasActive() && !model.permanentlyActive;\r\n                    })\r\n                }\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Removes specified array of nodes.\r\n         *\r\n         * @param {ArrayLike} row\r\n         */\r\n        removeEditingRow: function (row) {\r\n            _.toArray(row).forEach(ko.removeNode);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/editing/editor.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiLayout',\r\n    'mage/translate',\r\n    'uiCollection'\r\n], function (_, utils, layout, $t, Collection) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            rowButtonsTmpl: 'ui/grid/editing/row-buttons',\r\n            headerButtonsTmpl: 'ui/grid/editing/header-buttons',\r\n            successMsg: $t('You have successfully saved your edits.'),\r\n            errorsCount: 0,\r\n            bulkEnabled: true,\r\n            multiEditingButtons: true,\r\n            singleEditingButtons: true,\r\n            isMultiEditing: false,\r\n            isSingleEditing: false,\r\n            permanentlyActive: false,\r\n            rowsData: [],\r\n            fields: {},\r\n\r\n            templates: {\r\n                record: {\r\n                    parent: '${ $.$data.editor.name }',\r\n                    name: '${ $.$data.recordId }',\r\n                    component: 'Magento_Ui/js/grid/editing/record',\r\n                    columnsProvider: '${ $.$data.editor.columnsProvider }',\r\n                    editorProvider: '${ $.$data.editor.name }',\r\n                    preserveFields: {\r\n                        '${ $.$data.editor.indexField }': true\r\n                    }\r\n                }\r\n            },\r\n            bulkConfig: {\r\n                component: 'Magento_Ui/js/grid/editing/bulk',\r\n                name: '${ $.name }_bulk',\r\n                editorProvider: '${ $.name }',\r\n                columnsProvider: '${ $.columnsProvider }'\r\n            },\r\n            clientConfig: {\r\n                component: 'Magento_Ui/js/grid/editing/client',\r\n                name: '${ $.name }_client'\r\n            },\r\n            viewConfig: {\r\n                component: 'Magento_Ui/js/grid/editing/editor-view',\r\n                name: '${ $.name }_view',\r\n                model: '${ $.name }',\r\n                columnsProvider: '${ $.columnsProvider }'\r\n            },\r\n            imports: {\r\n                rowsData: '${ $.dataProvider }:data.items'\r\n            },\r\n            listens: {\r\n                '${ $.dataProvider }:reloaded': 'cancel',\r\n                '${ $.selectProvider }:selected': 'onSelectionsChange'\r\n            },\r\n            modules: {\r\n                source: '${ $.dataProvider }',\r\n                client: '${ $.clientConfig.name }',\r\n                columns: '${ $.columnsProvider }',\r\n                bulk: '${ $.bulkConfig.name }',\r\n                selections: '${ $.selectProvider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes editor component.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(this, 'updateState', 'countErrors', 'onDataSaved', 'onSaveError');\r\n\r\n            this._super()\r\n                .initBulk()\r\n                .initClient()\r\n                .initView();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track([\r\n                    'errorsCount',\r\n                    'isMultiEditing',\r\n                    'isSingleEditing',\r\n                    'isSingleColumnEditing',\r\n                    'changed'\r\n                ])\r\n                .observe({\r\n                    canSave: true,\r\n                    activeRecords: [],\r\n                    messages: []\r\n                });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes bulk editing component.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        initBulk: function () {\r\n            if (this.bulkEnabled) {\r\n                layout([this.bulkConfig]);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes editors' view component.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        initView: function () {\r\n            layout([this.viewConfig]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes client component.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        initClient: function () {\r\n            layout([this.clientConfig]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates instance of a new record.\r\n         *\r\n         * @param {(Number|String)} id - See 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See 'getId' method.\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        initRecord: function (id, isIndex) {\r\n            var record = this.buildRecord(id, isIndex);\r\n\r\n            layout([record]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds listeners on a new recrod.\r\n         *\r\n         * @param {Record} record\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        initElement: function (record) {\r\n            record.on({\r\n                'active': this.updateState,\r\n                'errorsCount': this.countErrors\r\n            });\r\n\r\n            this.updateState();\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Creates configuration for a new record associated with a row data.\r\n         *\r\n         * @param {(Number|String)} id - See 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See 'getId' method.\r\n         * @returns {Object} Record configuration.\r\n         */\r\n        buildRecord: function (id, isIndex) {\r\n            var recordId = this.getId(id, isIndex),\r\n                recordTmpl = this.templates.record,\r\n                record;\r\n\r\n            if (this.getRecord(recordId)) {\r\n                return this;\r\n            }\r\n\r\n            record = utils.template(recordTmpl, {\r\n                editor: this,\r\n                recordId: id\r\n            });\r\n\r\n            record.recordId = id;\r\n            record.data     = this.getRowData(id);\r\n\r\n            return record;\r\n        },\r\n\r\n        /**\r\n         * Starts editing of a specfied record. If records'\r\n         * instance doesn't exist, than it will be created.\r\n         *\r\n         * @param {(Number|String)} id - See 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See 'getId' method.\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        edit: function (id, isIndex) {\r\n            var recordId = this.getId(id, isIndex),\r\n                record   = this.getRecord(recordId);\r\n\r\n            record ?\r\n                record.active(true) :\r\n                this.initRecord(recordId);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Drops list of selections while activating only the specified record.\r\n         *\r\n         * @param {(Number|String)} id - See 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See 'getId' method.\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        startEdit: function (id, isIndex) {\r\n            var recordId = this.getId(id, isIndex);\r\n\r\n            this.selections()\r\n                .deselectAll()\r\n                .select(recordId);\r\n\r\n            return this.edit(recordId);\r\n        },\r\n\r\n        /**\r\n         * Hides records and resets theirs data.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        cancel: function () {\r\n            this.reset()\r\n                .hide()\r\n                .clearMessages()\r\n                .bulk('clear');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Hides records.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        hide: function () {\r\n            this.activeRecords.each('active', false);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Resets active records.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        reset: function () {\r\n            this.elems.each(function (record) {\r\n                this.resetRecord(record.recordId);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Validates and saves data of active records.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        save: function () {\r\n            var data;\r\n\r\n            if (!this.isValid()) {\r\n                return this;\r\n            }\r\n\r\n            data = {\r\n                items: this.getData()\r\n            };\r\n\r\n            this.clearMessages()\r\n                .columns('showLoader');\r\n\r\n            this.client()\r\n                .save(data)\r\n                .done(this.onDataSaved)\r\n                .fail(this.onSaveError);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Validates all active records.\r\n         *\r\n         * @returns {Array} An array of records and theirs validation results.\r\n         */\r\n        validate: function () {\r\n            return this.activeRecords.map(function (record) {\r\n                return {\r\n                    target: record,\r\n                    valid: record.isValid()\r\n                };\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Checks if all active records are valid.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isValid: function () {\r\n            return _.every(this.validate(), 'valid');\r\n        },\r\n\r\n        /**\r\n         * Returns active records data, indexed by a theirs ids.\r\n         *\r\n         * @returns {Object} Collection of records data.\r\n         */\r\n        getData: function () {\r\n            var data = this.activeRecords.map('getData');\r\n\r\n            return _.indexBy(data, this.indexField);\r\n        },\r\n\r\n        /**\r\n         * Sets provided data to all active records.\r\n         *\r\n         * @param {Object} data - See 'setData' method of a 'Record'.\r\n         * @param {Boolean} partial - See 'setData' method of a 'Record'.\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        setData: function (data, partial) {\r\n            this.activeRecords.each('setData', data, partial);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Resets specific records' data\r\n         * to the data present in asscotiated row.\r\n         *\r\n         * @param {(Number|String)} id - See 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See 'getId' method.\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        resetRecord: function (id, isIndex) {\r\n            var record  = this.getRecord(id, isIndex),\r\n                data    = this.getRowData(id, isIndex);\r\n\r\n            if (record && data) {\r\n                record.setData(data);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns instance of a specified record.\r\n         *\r\n         * @param {(Number|String)} id - See 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See 'getId' method.\r\n         * @returns {Record}\r\n         */\r\n        getRecord: function (id, isIndex) {\r\n            return this.elems.findWhere({\r\n                recordId: this.getId(id, isIndex)\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Creates record name based on a provided id.\r\n         *\r\n         * @param {(Number|String)} id - See 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See 'getId' method.\r\n         * @returns {String}\r\n         */\r\n        formRecordName: function (id, isIndex) {\r\n            id = this.getId(id, isIndex);\r\n\r\n            return this.name + '.' + id;\r\n        },\r\n\r\n        /**\r\n         * Disables editing of specfied fields.\r\n         *\r\n         * @param {Array} fields - An array of fields indeces to be disabled.\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        disableFields: function (fields) {\r\n            var columns = this.columns().elems(),\r\n                data    = utils.copy(this.fields);\r\n\r\n            columns.forEach(function (column) {\r\n                var index = column.index,\r\n                    field = data[index] = data[index] || {};\r\n\r\n                field.disabled = _.contains(fields, index);\r\n            });\r\n\r\n            this.set('fields', data);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Converts index of a row into the record id.\r\n         *\r\n         * @param {(Number|String)} id - Records' identifier or its' index in the rows array.\r\n         * @param {Boolean} [isIndex=false] - Flag that indicates if first\r\n         *      parameter is an index or identifier.\r\n         * @returns {String} Records' id.\r\n         */\r\n        getId: function (id, isIndex) {\r\n            var rowsData = this.rowsData,\r\n                record;\r\n\r\n            if (isIndex === true) {\r\n                record  = rowsData[id];\r\n                id      = record ? record[this.indexField] : false;\r\n            }\r\n\r\n            return id;\r\n        },\r\n\r\n        /**\r\n         * Returns data of a specified row.\r\n         *\r\n         * @param {(Number|String)} id - See 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See 'getId' method.\r\n         * @returns {Object}\r\n         */\r\n        getRowData: function (id, isIndex) {\r\n            id = this.getId(id, isIndex);\r\n\r\n            return _.find(this.rowsData, function (row) {\r\n                return row[this.indexField] === id;\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Checks if specified record is active.\r\n         *\r\n         * @param {(Number|String)} id - See 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See'getId' method.\r\n         * @returns {Boolean}\r\n         */\r\n        isActive: function (id, isIndex) {\r\n            var record = this.getRecord(id, isIndex);\r\n\r\n            return _.contains(this.activeRecords(), record);\r\n        },\r\n\r\n        /**\r\n         * Checks if editor has active records.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasActive: function () {\r\n            return !!this.activeRecords().length || this.permanentlyActive;\r\n        },\r\n\r\n        /**\r\n         * Counts number of active records.\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        countActive: function () {\r\n            return this.activeRecords().length;\r\n        },\r\n\r\n        /**\r\n         * Counts number of invalid fields accros all active records.\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        countErrors: function () {\r\n            var errorsCount = 0;\r\n\r\n            this.activeRecords.each(function (record) {\r\n                errorsCount += record.errorsCount;\r\n            });\r\n\r\n            this.errorsCount = errorsCount;\r\n\r\n            return errorsCount;\r\n        },\r\n\r\n        /**\r\n         * Checks if editor has any errors.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasErrors: function () {\r\n            return !!this.countErrors();\r\n        },\r\n\r\n        /**\r\n         * Handles changes of the records 'active' property.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        updateState: function () {\r\n            var active      = this.elems.filter('active'),\r\n                activeCount = active.length,\r\n                columns     = this.columns().elems;\r\n\r\n            columns.each('disableAction', !!activeCount);\r\n\r\n            this.isMultiEditing = activeCount > 1;\r\n            this.isSingleEditing = activeCount === 1;\r\n\r\n            this.activeRecords(active);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns list of selections from a current page.\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getSelections: function () {\r\n            return this.selections().getPageSelections();\r\n        },\r\n\r\n        /**\r\n         * Starts editing of selected records. If record\r\n         * is not in the selections list, then it will get hidden.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        editSelected: function () {\r\n            var selections = this.getSelections();\r\n\r\n            this.elems.each(function (record) {\r\n                if (!_.contains(selections, record.recordId)) {\r\n                    record.active(false);\r\n                }\r\n            });\r\n\r\n            selections.forEach(function (id) {\r\n                this.edit(id);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if there is any additional messages.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasMessages: function () {\r\n            return this.messages().length;\r\n        },\r\n\r\n        /**\r\n         * Adds new additional message or a set of messages.\r\n         *\r\n         * @param {(Object|Array)} message - Messages to be added.\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        addMessage: function (message) {\r\n            var messages = this.messages();\r\n\r\n            Array.isArray(message) ?\r\n                messages.push.apply(messages, message) :\r\n                messages.push(message);\r\n\r\n            this.messages(messages);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes all additional messages.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        clearMessages: function () {\r\n            this.messages.removeAll();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Listener of the selections data changes.\r\n         */\r\n        onSelectionsChange: function () {\r\n            if (this.hasActive()) {\r\n                this.editSelected();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handles successful save request.\r\n         */\r\n        onDataSaved: function () {\r\n            var msg = {\r\n                type: 'success',\r\n                message: this.successMsg\r\n            };\r\n\r\n            this.addMessage(msg)\r\n                .source('reload', {\r\n                    refresh: true\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Handles failed save request.\r\n         *\r\n         * @param {(Array|Object)} errors - List of errors or a single error object.\r\n         */\r\n        onSaveError: function (errors) {\r\n            this.addMessage(errors)\r\n                .columns('hideLoader');\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/editing/record.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiLayout',\r\n    'uiCollection'\r\n], function (_, utils, layout, Collection) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            active: true,\r\n            hasChanges: false,\r\n            fields: [],\r\n            errorsCount: 0,\r\n            fieldTmpl: 'ui/grid/editing/field',\r\n            rowTmpl: 'ui/grid/editing/row',\r\n            templates: {\r\n                fields: {\r\n                    base: {\r\n                        parent: '${ $.$data.record.name }',\r\n                        name: '${ $.$data.column.index }',\r\n                        provider: '${ $.$data.record.name }',\r\n                        dataScope: 'data.${ $.$data.column.index }',\r\n                        imports: {\r\n                            disabled: '${ $.$data.record.parentName }:fields.${ $.$data.column.index }.disabled'\r\n                        },\r\n                        isEditor: true\r\n                    },\r\n                    text: {\r\n                        component: 'Magento_Ui/js/form/element/abstract',\r\n                        template: 'ui/form/element/input'\r\n                    },\r\n                    date: {\r\n                        component: 'Magento_Ui/js/form/element/date',\r\n                        template: 'ui/form/element/date',\r\n                        dateFormat: 'MMM d, y h:mm:ss a'\r\n                    },\r\n                    select: {\r\n                        component: 'Magento_Ui/js/form/element/select',\r\n                        template: 'ui/form/element/select',\r\n                        options: '${ JSON.stringify($.$data.column.options) }'\r\n                    }\r\n                }\r\n            },\r\n            listens: {\r\n                elems: 'updateFields',\r\n                data: 'updateState'\r\n            },\r\n            imports: {\r\n                onColumnsUpdate: '${ $.columnsProvider }:elems'\r\n            },\r\n            modules: {\r\n                columns: '${ $.columnsProvider }',\r\n                editor: '${ $.editorProvider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes record component.\r\n         *\r\n         * @returns {Record} Chainable.\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(this, 'countErrors');\r\n            utils.limit(this, 'updateState', 10);\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Record} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track('errorsCount hasChanges')\r\n                .observe('active fields');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds listeners on a field.\r\n         *\r\n         * @returns {Record} Chainable.\r\n         */\r\n        initElement: function (field) {\r\n            field.on('error', this.countErrors);\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Creates new instance of a field.\r\n         *\r\n         * @param {Column} column - Column instance which contains field definition.\r\n         * @returns {Record} Chainable.\r\n         */\r\n        initField: function (column) {\r\n            var field = this.buildField(column);\r\n\r\n            layout([field]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Builds fields' configuration described in a provided column.\r\n         *\r\n         * @param {Column} column - Column instance which contains field definition.\r\n         * @returns {Object} Complete fields' configuration.\r\n         */\r\n        buildField: function (column) {\r\n            var fields = this.templates.fields,\r\n                field  = column.editor;\r\n\r\n            if (_.isObject(field) && field.editorType) {\r\n                field = utils.extend({}, fields[field.editorType], field);\r\n            } else if (_.isString(field)) {\r\n                field = fields[field];\r\n            }\r\n\r\n            field = utils.extend({}, fields.base, field);\r\n\r\n            return utils.template(field, {\r\n                record: this,\r\n                column: column\r\n            }, true, true);\r\n        },\r\n\r\n        /**\r\n         * Creates fields for the specfied columns.\r\n         *\r\n         * @param {Array} columns - An array of column instances.\r\n         * @returns {Record} Chainable.\r\n         */\r\n        createFields: function (columns) {\r\n            columns.forEach(function (column) {\r\n                if (column.editor && !this.hasChild(column.index)) {\r\n                    this.initField(column);\r\n                }\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns instance of a column found by provided index.\r\n         *\r\n         * @param {String} index - Index of a column (e.g. 'title').\r\n         * @returns {Column}\r\n         */\r\n        getColumn: function (index) {\r\n            return this.columns().getChild(index);\r\n        },\r\n\r\n        /**\r\n         * Returns records' current data object.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getData: function () {\r\n            return this.filterData(this.data);\r\n        },\r\n\r\n        /**\r\n         * Returns saved records' data. Data will be processed\r\n         * with a 'filterData' and 'normalizeData' methods.\r\n         *\r\n         * @returns {Object} Saved records' data.\r\n         */\r\n        getSavedData: function () {\r\n            var editor      = this.editor(),\r\n                savedData   = editor.getRowData(this.index);\r\n\r\n            savedData = this.filterData(savedData);\r\n\r\n            return this.normalizeData(savedData);\r\n        },\r\n\r\n        /**\r\n         * Replaces current records' data with the provided one.\r\n         *\r\n         * @param {Object} data - New records data.\r\n         * @param {Boolean} [partial=false] - Flag that defines whether\r\n         *      to completely replace current data or to extend it.\r\n         * @returns {Record} Chainable.\r\n         */\r\n        setData: function (data, partial) {\r\n            var currentData = partial ? this.data : {};\r\n\r\n            data = this.normalizeData(data);\r\n            data = utils.extend({}, currentData, data);\r\n\r\n            this.set('data', data)\r\n                .updateState();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Filters provided object extracting from it values\r\n         * that can be matched with an existing fields.\r\n         *\r\n         * @param {Object} data - Object to be processed.\r\n         * @returns {Object}\r\n         */\r\n        filterData: function (data) {\r\n            var fields = _.pluck(this.elems(), 'index');\r\n\r\n            _.each(this.preserveFields, function (enabled, field) {\r\n                if (enabled && !_.contains(fields, field)) {\r\n                    fields.push(field);\r\n                }\r\n            });\r\n\r\n            return _.pick(data, fields);\r\n        },\r\n\r\n        /**\r\n         * Parses values of a provided object with\r\n         * a 'normalizeData' method of a corresponding field.\r\n         *\r\n         * @param {Object} data - Data to be processed.\r\n         * @returns {Object}\r\n         */\r\n        normalizeData: function (data) {\r\n            var index;\r\n\r\n            this.elems.each(function (elem) {\r\n                index = elem.index;\r\n\r\n                if (data.hasOwnProperty(index)) {\r\n                    data[index] = elem.normalizeData(data[index]);\r\n                }\r\n            });\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Clears values of all fields.\r\n         *\r\n         * @returns {Record} Chainable.\r\n         */\r\n        clear: function () {\r\n            this.elems.each('clear');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Validates all of the available fields.\r\n         *\r\n         * @returns {Array} An array with validatation results.\r\n         */\r\n        validate: function () {\r\n            return this.elems.map('validate');\r\n        },\r\n\r\n        /**\r\n         * Checks if all fields are valid.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isValid: function () {\r\n            return _.every(this.validate(), 'valid');\r\n        },\r\n\r\n        /**\r\n         * Counts total errors ammount accros all fields.\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        countErrors: function () {\r\n            var errorsCount = this.elems.filter('error').length;\r\n\r\n            this.errorsCount = errorsCount;\r\n\r\n            return errorsCount;\r\n        },\r\n\r\n        /**\r\n         * Returns difference between current data and its'\r\n         * initial state, retrieved from the records collection.\r\n         *\r\n         * @returns {Object} Object with changes descriptions.\r\n         */\r\n        checkChanges: function () {\r\n            var savedData   = this.getSavedData(),\r\n                data        = this.normalizeData(this.getData());\r\n\r\n            return utils.compare(savedData, data);\r\n        },\r\n\r\n        /**\r\n         * Updates 'fields' array filling it with available edtiors\r\n         * or with column instances if associated field is not present.\r\n         *\r\n         * @returns {Record} Chainable.\r\n         */\r\n        updateFields: function () {\r\n            var fields;\r\n\r\n            fields = this.columns().elems.map(function (column) {\r\n                return this.getChild(column.index) || column;\r\n            }, this);\r\n\r\n            this.fields(fields);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates state of a 'hasChanges' property.\r\n         *\r\n         * @returns {Record} Chainable.\r\n         */\r\n        updateState: function () {\r\n            var diff = this.checkChanges(),\r\n                changed = {};\r\n\r\n            this.hasChanges = !diff.equal;\r\n            changed[this.index] = this.data;\r\n            this.editor().set('changed', [changed]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if provided column is an actions column.\r\n         *\r\n         * @param {Column} column - Column to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isActionsColumn: function (column) {\r\n            return column.dataType === 'actions';\r\n        },\r\n\r\n        /**\r\n         * Listener of columns provider child array changes.\r\n         *\r\n         * @param {Array} columns - Modified child elements array.\r\n         */\r\n        onColumnsUpdate: function (columns) {\r\n            this.createFields(columns)\r\n                .updateFields();\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/filters/chips.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiCollection'\r\n], function (_, Collection) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            template: 'ui/grid/filters/chips',\r\n            componentType: 'filtersChips'\r\n        },\r\n\r\n        /**\r\n         * Defines if some of components' children has available previews.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasPreviews: function () {\r\n            return this.elems().some(function (elem) {\r\n                return !!elem.previews.length;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Calls clear method on all of its' children.\r\n         *\r\n         * @returns {Chips} Chainable.\r\n         */\r\n        clear: function () {\r\n            _.invoke(this.elems(), 'clear');\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/filters/filters.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiLayout',\r\n    'uiCollection'\r\n], function (_, utils, layout, Collection) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Extracts and formats preview of an element.\r\n     *\r\n     * @param {Object} elem - Element whose preview should be extracted.\r\n     * @returns {Object} Formatted data.\r\n     */\r\n    function extractPreview(elem) {\r\n        return {\r\n            label: elem.label,\r\n            preview: elem.getPreview(),\r\n            elem: elem\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Removes empty properties from the provided object.\r\n     *\r\n     * @param {Object} data - Object to be processed.\r\n     * @returns {Object}\r\n     */\r\n    function removeEmpty(data) {\r\n        return utils.mapRecursive(data, utils.removeEmptyValues.bind(utils));\r\n    }\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            template: 'ui/grid/filters/filters',\r\n            stickyTmpl: 'ui/grid/sticky/filters',\r\n            _processed: [],\r\n            columnsProvider: 'ns = ${ $.ns }, componentType = columns',\r\n            applied: {\r\n                placeholder: true\r\n            },\r\n            filters: {\r\n                placeholder: true\r\n            },\r\n            templates: {\r\n                filters: {\r\n                    base: {\r\n                        parent: '${ $.$data.filters.name }',\r\n                        name: '${ $.$data.column.index }',\r\n                        provider: '${ $.$data.filters.name }',\r\n                        dataScope: '${ $.$data.column.index }',\r\n                        label: '${ $.$data.column.label }',\r\n                        imports: {\r\n                            visible: '${ $.$data.column.name }:visible'\r\n                        }\r\n                    },\r\n                    text: {\r\n                        component: 'Magento_Ui/js/form/element/abstract',\r\n                        template: 'ui/grid/filters/field'\r\n                    },\r\n                    select: {\r\n                        component: 'Magento_Ui/js/form/element/select',\r\n                        template: 'ui/grid/filters/field',\r\n                        options: '${ JSON.stringify($.$data.column.options) }',\r\n                        caption: ' '\r\n                    },\r\n                    dateRange: {\r\n                        component: 'Magento_Ui/js/grid/filters/range',\r\n                        rangeType: 'date'\r\n                    },\r\n                    textRange: {\r\n                        component: 'Magento_Ui/js/grid/filters/range',\r\n                        rangeType: 'text'\r\n                    }\r\n                }\r\n            },\r\n            chipsConfig: {\r\n                name: '${ $.name }_chips',\r\n                provider: '${ $.chipsConfig.name }',\r\n                component: 'Magento_Ui/js/grid/filters/chips'\r\n            },\r\n            listens: {\r\n                active: 'updatePreviews',\r\n                applied: 'cancel updateActive'\r\n            },\r\n            statefull: {\r\n                applied: true\r\n            },\r\n            exports: {\r\n                applied: '${ $.provider }:params.filters'\r\n            },\r\n            imports: {\r\n                'onColumnsUpdate': '${ $.columnsProvider }:elems'\r\n            },\r\n            modules: {\r\n                columns: '${ $.columnsProvider }',\r\n                chips: '${ $.chipsConfig.provider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes filters component.\r\n         *\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(this, 'updateActive');\r\n\r\n            this._super()\r\n                .initChips()\r\n                .cancel();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track({\r\n                    active: [],\r\n                    previews: []\r\n                });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes chips component.\r\n         *\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        initChips: function () {\r\n            layout([this.chipsConfig]);\r\n\r\n            this.chips('insertChild', this.name);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Called when another element was added to filters collection.\r\n         *\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        initElement: function (elem) {\r\n            this._super();\r\n\r\n            elem.on('elems', this.updateActive);\r\n\r\n            this.updateActive();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Clears filters data.\r\n         *\r\n         * @param {Object} [filter] - If provided, then only specified\r\n         *      filter will be cleared. Otherwise, clears all data.\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        clear: function (filter) {\r\n            filter ?\r\n                filter.clear() :\r\n                _.invoke(this.active, 'clear');\r\n\r\n            this.apply();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets filters data to the applied state.\r\n         *\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        apply: function () {\r\n            this.set('applied', removeEmpty(this.filters));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Resets filters to the last applied state.\r\n         *\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        cancel: function () {\r\n            this.set('filters', utils.copy(this.applied));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets provided data to filter components (without applying it).\r\n         *\r\n         * @param {Object} data - Filters data.\r\n         * @param {Boolean} [partial=false] - Flag that defines whether\r\n         *      to completely replace current filters data or to extend it.\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        setData: function (data, partial) {\r\n            var filters = partial ? this.filters : {};\r\n\r\n            data = utils.extend({}, filters, data);\r\n\r\n            this.set('filters', data);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates instance of a filter associated with the provided column.\r\n         *\r\n         * @param {Column} column - Column component for which to create a filter.\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        addFilter: function (column) {\r\n            var index       = column.index,\r\n                processed   = this._processed,\r\n                filter;\r\n\r\n            if (!column.filter || _.contains(processed, index)) {\r\n                return this;\r\n            }\r\n\r\n            filter = this.buildFilter(column);\r\n\r\n            processed.push(index);\r\n\r\n            layout([filter]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates filter component configuration associated with the provided column.\r\n         *\r\n         * @param {Column} column - Column component whith a basic filter declaration.\r\n         * @returns {Object} Filters' configuration.\r\n         */\r\n        buildFilter: function (column) {\r\n            var filters = this.templates.filters,\r\n                filter  = column.filter,\r\n                type    = filters[filter.filterType];\r\n\r\n            if (_.isObject(filter) && type) {\r\n                filter = utils.extend({}, type, filter);\r\n            } else if (_.isString(filter)) {\r\n                filter = filters[filter];\r\n            }\r\n\r\n            filter = utils.extend({}, filters.base, filter);\r\n\r\n            return utils.template(filter, {\r\n                filters: this,\r\n                column: column\r\n            }, true, true);\r\n        },\r\n\r\n        /**\r\n         * Returns an array of range filters.\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getRanges: function () {\r\n            return this.elems.filter(function (filter) {\r\n                return filter.isRange;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Returns an array of non-range filters.\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getPlain: function () {\r\n            return this.elems.filter(function (filter) {\r\n                return !filter.isRange;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Tells wether specified filter should be visible.\r\n         *\r\n         * @param {Object} filter\r\n         * @returns {Boolean}\r\n         */\r\n        isFilterVisible: function (filter) {\r\n            return filter.visible() || this.isFilterActive(filter);\r\n        },\r\n\r\n        /**\r\n         * Checks if specified filter is active.\r\n         *\r\n         * @param {Object} filter\r\n         * @returns {Boolean}\r\n         */\r\n        isFilterActive: function (filter) {\r\n            return _.contains(this.active, filter);\r\n        },\r\n\r\n        /**\r\n         * Checks if collection has visible filters.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasVisible: function () {\r\n            return this.elems.some(this.isFilterVisible, this);\r\n        },\r\n\r\n        /**\r\n         * Finds filters whith a not empty data\r\n         * and sets them to the 'active' filters array.\r\n         *\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        updateActive: function () {\r\n            var applied = _.keys(this.applied);\r\n\r\n            this.active = this.elems.filter(function (elem) {\r\n                return _.contains(applied, elem.index);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns number of applied filters.\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        countActive: function () {\r\n            return this.active.length;\r\n        },\r\n\r\n        /**\r\n         * Extract previews of a specified filters.\r\n         *\r\n         * @param {Array} filters - Filters to be processed.\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        updatePreviews: function (filters) {\r\n            var previews = filters.map(extractPreview);\r\n\r\n            this.previews = _.compact(previews);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Listener of the columns provider children array changes.\r\n         *\r\n         * @param {Array} columns - Current columns list.\r\n         */\r\n        onColumnsUpdate: function (columns) {\r\n            columns.forEach(this.addFilter, this);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/filters/range.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiLayout',\r\n    'mageUtils',\r\n    'Magento_Ui/js/form/components/group'\r\n], function (_, layout, utils, Group) {\r\n    'use strict';\r\n\r\n    return Group.extend({\r\n        defaults: {\r\n            template: 'ui/grid/filters/elements/group',\r\n            isRange: true,\r\n            templates: {\r\n                base: {\r\n                    parent: '${ $.$data.group.name }',\r\n                    provider: '${ $.$data.group.provider }',\r\n                    template: 'ui/grid/filters/field'\r\n                },\r\n                date: {\r\n                    component: 'Magento_Ui/js/form/element/date',\r\n                    dateFormat: 'MM/dd/YYYY'\r\n                },\r\n                text: {\r\n                    component: 'Magento_Ui/js/form/element/abstract'\r\n                },\r\n                ranges: {\r\n                    from: {\r\n                        label: 'from',\r\n                        dataScope: 'from'\r\n                    },\r\n                    to: {\r\n                        label: 'to',\r\n                        dataScope: 'to'\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes range component.\r\n         *\r\n         * @returns {Range} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initChildren();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates instances of child components.\r\n         *\r\n         * @returns {Range} Chainable.\r\n         */\r\n        initChildren: function () {\r\n            var children = this.buildChildren();\r\n\r\n            layout(children);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates configuration for the child components.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        buildChildren: function () {\r\n            var templates   = this.templates,\r\n                typeTmpl    = templates[this.rangeType],\r\n                tmpl        = utils.extend({}, templates.base, typeTmpl),\r\n                children    = {};\r\n\r\n            _.each(templates.ranges, function (range, key) {\r\n                children[key] = utils.extend({}, tmpl, range);\r\n            });\r\n\r\n            return utils.template(children, {\r\n                group: this\r\n            }, true, true);\r\n        },\r\n\r\n        /**\r\n         * Clears childrens data.\r\n         *\r\n         * @returns {Range} Chainable.\r\n         */\r\n        clear: function () {\r\n            this.elems.each('clear');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if some children has data.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasData: function () {\r\n            return this.elems.some('hasData');\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/paging/paging.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiLayout',\r\n    'uiElement'\r\n], function (ko, _, utils, layout, Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            template: 'ui/grid/paging/paging',\r\n            totalTmpl: 'ui/grid/paging-total',\r\n            pageSize: 20,\r\n            current: 1,\r\n            selectProvider: 'ns = ${ $.ns }, index = ids',\r\n\r\n            sizesConfig: {\r\n                component: 'Magento_Ui/js/grid/paging/sizes',\r\n                name: '${ $.name }_sizes',\r\n                storageConfig: {\r\n                    provider: '${ $.storageConfig.provider }',\r\n                    namespace: '${ $.storageConfig.namespace }'\r\n                }\r\n            },\r\n\r\n            imports: {\r\n                pageSize: '${ $.sizesConfig.name }:value',\r\n                totalSelected: '${ $.selectProvider }:totalSelected',\r\n                totalRecords: '${ $.provider }:data.totalRecords'\r\n            },\r\n\r\n            exports: {\r\n                pageSize: '${ $.provider }:params.paging.pageSize',\r\n                current: '${ $.provider }:params.paging.current'\r\n            },\r\n\r\n            listens: {\r\n                'pages': 'onPagesChange',\r\n                'pageSize': 'onPageSizeChange',\r\n                'totalRecords': 'updateCounter',\r\n                '${ $.provider }:params.filters': 'goFirst'\r\n            },\r\n\r\n            modules: {\r\n                sizes: '${ $.sizesConfig.name }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes paging component.\r\n         *\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initSizes()\r\n                .updateCounter();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track([\r\n                    'totalSelected',\r\n                    'totalRecords',\r\n                    'pageSize',\r\n                    'pages',\r\n                    'current'\r\n                ]);\r\n\r\n            this._current = ko.pureComputed({\r\n                read: ko.getObservable(this, 'current'),\r\n\r\n                /**\r\n                 * Validates page change according to user's input.\r\n                 * Sets current observable to result of validation.\r\n                 * Calls reload method then.\r\n                 */\r\n                write: function (value) {\r\n                    this.setPage(value)\r\n                        ._current.notifySubscribers(this.current);\r\n                },\r\n\r\n                owner: this\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes sizes component.\r\n         *\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        initSizes: function () {\r\n            layout([this.sizesConfig]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Gets first item index on current page.\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        getFirstItemIndex: function () {\r\n            return this.pageSize * (this.current - 1) + 1;\r\n        },\r\n\r\n        /**\r\n         * Gets last item index on current page.\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        getLastItemIndex: function () {\r\n            var lastItem = this.getFirstItemIndex() + this.pageSize - 1;\r\n\r\n            return this.totalRecords < lastItem ? this.totalRecords : lastItem;\r\n        },\r\n\r\n        /**\r\n         * Sets cursor to the provied value.\r\n         *\r\n         * @param {(Number|String)} value - New value of the cursor.\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        setPage: function (value) {\r\n            this.current = this.normalize(value);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Increments current page value.\r\n         *\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        next: function () {\r\n            this.setPage(this.current + 1);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Decrements current page value.\r\n         *\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        prev: function () {\r\n            this.setPage(this.current - 1);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Goes to the first page.\r\n         *\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        goFirst: function () {\r\n            this.current = 1;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Goes to the last page.\r\n         *\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        goLast: function () {\r\n            this.current = this.pages;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if current page is the first one.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isFirst: function () {\r\n            return this.current === 1;\r\n        },\r\n\r\n        /**\r\n         * Checks if current page is the last one.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isLast: function () {\r\n            return this.current === this.pages;\r\n        },\r\n\r\n        /**\r\n         * Updates number of pages.\r\n         */\r\n        updateCounter: function () {\r\n            this.pages = Math.ceil(this.totalRecords / this.pageSize) || 1;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calculates new page cursor based on the\r\n         * previous and current page size values.\r\n         *\r\n         * @returns {Number} Updated cursor value.\r\n         */\r\n        updateCursor: function () {\r\n            var cursor  = this.current - 1,\r\n                size    = this.pageSize,\r\n                oldSize = this.previousSize,\r\n                delta   = cursor * (oldSize  - size) / size;\r\n\r\n            delta = size > oldSize ?\r\n                Math.ceil(delta) :\r\n                Math.floor(delta);\r\n\r\n            cursor += delta + 1;\r\n\r\n            this.previousSize = size;\r\n\r\n            this.setPage(cursor);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Converts provided value to a number and puts\r\n         * it in range between 1 and total amount of pages.\r\n         *\r\n         * @param {(Number|String)} value - Value to be normalized.\r\n         * @returns {Number}\r\n         */\r\n        normalize: function (value) {\r\n            value = +value;\r\n\r\n            if (isNaN(value)) {\r\n                return 1;\r\n            }\r\n\r\n            return utils.inRange(Math.round(value), 1, this.pages);\r\n        },\r\n\r\n        /**\r\n         * Handles changes of the page size.\r\n         */\r\n        onPageSizeChange: function () {\r\n            this.updateCounter()\r\n                .updateCursor();\r\n        },\r\n\r\n        /**\r\n         * Handles changes of the pages amount.\r\n         */\r\n        onPagesChange: function () {\r\n            this.updateCursor();\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/paging/sizes.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiElement'\r\n], function (ko, _, utils, Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            template: 'ui/grid/paging/sizes',\r\n            value: 20,\r\n            minSize: 1,\r\n            maxSize: 999,\r\n            options: {\r\n                '20': {\r\n                    value: 20,\r\n                    label: 20\r\n                },\r\n                '30': {\r\n                    value: 30,\r\n                    label: 30\r\n                },\r\n                '50': {\r\n                    value: 50,\r\n                    label: 50\r\n                },\r\n                '100': {\r\n                    value: 100,\r\n                    label: 100\r\n                },\r\n                '200': {\r\n                    value: 200,\r\n                    label: 200\r\n                }\r\n            },\r\n            statefull: {\r\n                options: true,\r\n                value: true\r\n            },\r\n            listens: {\r\n                value: 'onValueChange',\r\n                options: 'onSizesChange'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes sizes component.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .updateArray();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track([\r\n                    'value',\r\n                    'editing',\r\n                    'customVisible',\r\n                    'customValue'\r\n                ])\r\n                .track({\r\n                    optionsArray: []\r\n                });\r\n\r\n            this._value = ko.pureComputed({\r\n                read: ko.getObservable(this, 'value'),\r\n\r\n                /**\r\n                 * Validates input field prior to updating 'value' property.\r\n                 */\r\n                write: function (value) {\r\n                    value = this.normalize(value);\r\n\r\n                    this.value = value;\r\n                    this._value.notifySubscribers(value);\r\n                },\r\n\r\n                owner: this\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Starts editing of the specified size.\r\n         *\r\n         * @param {Number} value - Value of the size.\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        edit: function (value) {\r\n            this.editing = value;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Discards changes made to the currently editable size.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        discardEditing: function () {\r\n            var value = this.editing;\r\n\r\n            if (value) {\r\n                this.updateSize(value, value);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Invokes 'discardEditing' and 'discardCustom' actions.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        discardAll: function () {\r\n            this.discardEditing()\r\n                .discardCustom();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns value of the first size.\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        getFirst: function () {\r\n            return this.optionsArray[0].value;\r\n        },\r\n\r\n        /**\r\n         * Returns size which matches specified value.\r\n         *\r\n         * @param {Number} value - Value of the item.\r\n         * @returns {Object|Undefined}\r\n         */\r\n        getSize: function (value) {\r\n            return this.options[value];\r\n        },\r\n\r\n        /**\r\n         * Sets current size to the specified value.\r\n         *\r\n         * @param {Number} value - Value of the size.\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        setSize: function (value) {\r\n            this.value = value;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds a new value to sizes list.\r\n         *\r\n         * @param {Number} value - Value to be added.\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        addSize: function (value) {\r\n            var size;\r\n\r\n            if (!this.hasSize(value)) {\r\n                size = this.createSize(value);\r\n\r\n                this.set('options.' + value, size);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes provided value from the sizes list.\r\n         *\r\n         * @param {Number} value - Value to be removed.\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        removeSize: function (value) {\r\n            if (!this.hasSize(value)) {\r\n                return this;\r\n            }\r\n\r\n            this.remove('options.' + value);\r\n\r\n            if (this.isSelected(value)) {\r\n                this.setSize(this.getFirst());\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates existing value to the provided one. If new value\r\n         * is not specified, then sizes' '_value' property will be taken.\r\n         *\r\n         * @param {Number} value - Existing value that should be updated.\r\n         * @param {(Number|String)} [newValue=size._value] - New size value.\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        updateSize: function (value, newValue) {\r\n            var size = this.getSize(value);\r\n\r\n            if (!size) {\r\n                return this;\r\n            }\r\n\r\n            newValue = newValue || size._value;\r\n\r\n            if (isNaN(+newValue)) {\r\n                this.discardEditing();\r\n\r\n                return this;\r\n            }\r\n\r\n            newValue = this.normalize(newValue);\r\n\r\n            this.remove('options.' + value)\r\n                .addSize(newValue);\r\n\r\n            if (this.isSelected(value)) {\r\n                this.setSize(newValue);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates new editable size instance with the provided value.\r\n         *\r\n         * @param {Number} value - Value of the size.\r\n         * @returns {Object}\r\n         */\r\n        createSize: function (value) {\r\n            return {\r\n                value: value,\r\n                label: value,\r\n                _value: value,\r\n                editable: true\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Checks if provided value exists in the sizes list.\r\n         *\r\n         * @param {Number} value - Value to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        hasSize: function (value) {\r\n            return !!this.getSize(value);\r\n        },\r\n\r\n        /**\r\n         * Hides and clears custom field.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        discardCustom: function () {\r\n            this.hideCustom()\r\n                .clearCustom();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Shows custom field.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        showCustom: function () {\r\n            this.customVisible = true;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Hides custom field.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        hideCustom: function () {\r\n            this.customVisible = false;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Empties value of the custom field.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        clearCustom: function () {\r\n            this.customValue = '';\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds a new size specified in the custom field.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        applyCustom: function () {\r\n            var value = this.customValue;\r\n\r\n            value = this.normalize(value);\r\n\r\n            this.addSize(value)\r\n                .setSize(value)\r\n                .discardCustom();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if custom field is visible.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isCustomVisible: function () {\r\n            return this.customVisible;\r\n        },\r\n\r\n        /**\r\n         * Converts provided value to a number and puts\r\n         * it in range between 'minSize' and 'maxSize' properties.\r\n         *\r\n         * @param {(Number|String)} value - Value to be normalized.\r\n         * @returns {Number}\r\n         */\r\n        normalize: function (value) {\r\n            value = +value;\r\n\r\n            if (isNaN(value)) {\r\n                return this.getFirst();\r\n            }\r\n\r\n            return utils.inRange(Math.round(value), this.minSize, this.maxSize);\r\n        },\r\n\r\n        /**\r\n         * Updates the array of options.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        updateArray: function () {\r\n            var array = _.values(this.options);\r\n\r\n            this.optionsArray = _.sortBy(array, 'value');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if provided value is in editing state.\r\n         *\r\n         * @param {Number} value - Value to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isEditing: function (value) {\r\n            return this.editing === value;\r\n        },\r\n\r\n        /**\r\n         * Checks if provided value is selected.\r\n         *\r\n         * @param {Number} value - Value to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isSelected: function (value) {\r\n            return this.value === value;\r\n        },\r\n\r\n        /**\r\n         * Listener of the 'value' property changes.\r\n         */\r\n        onValueChange: function () {\r\n            this.discardAll()\r\n                .trigger('close');\r\n        },\r\n\r\n        /**\r\n         * Listener of the 'options' object changes.\r\n         */\r\n        onSizesChange: function () {\r\n            this.editing = false;\r\n\r\n            this.updateArray();\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/search/search.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiLayout',\r\n    'mage/translate',\r\n    'mageUtils',\r\n    'uiElement'\r\n], function (_, layout, $t, utils, Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            template: 'ui/grid/search/search',\r\n            placeholder: $t('Search by keyword'),\r\n            label: $t('Keyword'),\r\n            value: '',\r\n            previews: [],\r\n            chipsProvider: 'componentType = filtersChips, ns = ${ $.ns }',\r\n            statefull: {\r\n                value: true\r\n            },\r\n            tracks: {\r\n                value: true,\r\n                previews: true,\r\n                inputValue: true\r\n            },\r\n            imports: {\r\n                inputValue: 'value',\r\n                updatePreview: 'value'\r\n            },\r\n            exports: {\r\n                value: '${ $.provider }:params.search'\r\n            },\r\n            modules: {\r\n                chips: '${ $.chipsProvider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes search component.\r\n         *\r\n         * @returns {Search} Chainable.\r\n         */\r\n        initialize: function () {\r\n            var urlParams = window.location.href.slice(window.location.href.search('[\\&\\?](search=)')).split('&'),\r\n                searchTerm = [];\r\n\r\n            this._super()\r\n                .initChips();\r\n\r\n            if (urlParams[0]) {\r\n                searchTerm = urlParams[0].split('=');\r\n\r\n                if (searchTerm[1]) {\r\n                    this.apply(decodeURIComponent(searchTerm[1]));\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes chips component.\r\n         *\r\n         * @returns {Search} Chainbale.\r\n         */\r\n        initChips: function () {\r\n            this.chips('insertChild', this, 0);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Clears search.\r\n         *\r\n         * @returns {Search} Chainable.\r\n         */\r\n        clear: function () {\r\n            this.value = '';\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Resets input value to the last applied state.\r\n         *\r\n         * @returns {Search} Chainable.\r\n         */\r\n        cancel: function () {\r\n            this.inputValue = this.value;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Applies search query.\r\n         *\r\n         * @param {String} [value=inputValue] - If not specfied, then\r\n         *      value of the input field will be used.\r\n         * @returns {Search} Chainable.\r\n         */\r\n        apply: function (value) {\r\n            value = value || this.inputValue;\r\n\r\n            this.value = this.inputValue = value;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates preview data.\r\n         *\r\n         * @returns {Search} Chainable.\r\n         */\r\n        updatePreview: function () {\r\n            var preview = [];\r\n\r\n            if (this.value) {\r\n                preview.push({\r\n                    elem: this,\r\n                    label: this.label,\r\n                    preview: this.value\r\n                });\r\n            }\r\n\r\n            this.previews = preview;\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/sticky/sticky.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'underscore',\r\n    'uiComponent',\r\n    'Magento_Ui/js/lib/view/utils/raf'\r\n], function ($, _, Component, raf) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            listingSelector: '${ $.listingProvider }::not([data-role = \"sticky-el-root\"])',\r\n            toolbarSelector: '${ $.toolbarProvider }::not([data-role = \"sticky-el-root\"])',\r\n            bulkRowSelector: '[data-role = \"data-grid-bulk-row\"]',\r\n            bulkRowHeaderSelector: '.data-grid-info-panel:visible',\r\n            tableSelector: 'table',\r\n            columnSelector: 'thead tr th',\r\n            rowSelector: 'tbody tr',\r\n            toolbarCollapsiblesSelector: '[data-role=\"toolbar-menu-item\"]',\r\n            toolbarCollapsiblesActiveClass: '_active',\r\n            template: 'ui/grid/sticky/sticky',\r\n            stickyContainerSelector: '.sticky-header',\r\n            stickyElementSelector: '[data-role = \"sticky-el-root\"]',\r\n            leftDataGridCapSelector: '.data-grid-cap-left',\r\n            rightDataGridCapSelector: '.data-grid-cap-right',\r\n            visible: false,\r\n            enableToolbar: true,\r\n            enableHeader: true,\r\n            modules: {\r\n                toolbar: '${ $.toolbarProvider }',\r\n                listing: '${ $.listingProvider }'\r\n            },\r\n            otherStickyElsSize: 77,\r\n            containerNode: null,\r\n            listingNode: null,\r\n            toolbarNode: null,\r\n            stickyListingNode: null,\r\n            stickyToolbarNode: null,\r\n            storedOriginalToolbarElements: [],\r\n            cache: {},\r\n            flags: {},\r\n            dirtyFlag: 'dirty'\r\n        },\r\n\r\n        /**\r\n         * Initializes Sticky component.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            _.bindAll(this,\r\n                'adjustStickyElems',\r\n                'initListingNode',\r\n                'initToolbarNode',\r\n                'initContainerNode',\r\n                'initColumns',\r\n                'initStickyListingNode',\r\n                'initStickyToolbarNode',\r\n                'initLeftDataGridCap',\r\n                'initRightDataGridCap'\r\n            );\r\n\r\n            $.async(this.listingSelector,\r\n                this.initListingNode);\r\n            $.async(this.toolbarSelector,\r\n                this.initToolbarNode);\r\n\r\n            $.async(this.stickyContainerSelector,\r\n                this,\r\n                this.initContainerNode);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Init observables\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track('visible');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Init original listing node\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        initListingNode: function (node) {\r\n            if ($(node).is(this.stickyElementSelector)) {\r\n                return;\r\n            }\r\n            this.listingNode = $(node);\r\n            $.async(this.columnSelector, node, this.initColumns);\r\n        },\r\n\r\n        /**\r\n         * Init original toolbar node\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        initToolbarNode: function (node) {\r\n            if ($(node).is(this.stickyElementSelector)) {\r\n                return;\r\n            }\r\n            this.toolbarNode = $(node);\r\n        },\r\n\r\n        /**\r\n         * Init sticky listing node\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        initStickyListingNode: function (node) {\r\n            this.stickyListingNode = $(node);\r\n            this.checkPos();\r\n            this.initListeners();\r\n        },\r\n\r\n        /**\r\n         * Init sticky toolbar node\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        initStickyToolbarNode: function (node) {\r\n            this.stickyToolbarNode = $(node);\r\n        },\r\n\r\n        /**\r\n         * Init sticky header container node\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        initContainerNode: function (node) {\r\n            this.containerNode = $(node);\r\n\r\n            $.async(this.leftDataGridCapSelector,\r\n                node,\r\n                this.initLeftDataGridCap);\r\n            $.async(this.rightDataGridCapSelector,\r\n                node,\r\n                this.initRightDataGridCap);\r\n\r\n            $.async(this.stickyElementSelector,\r\n                this.listing(),\r\n                this.initStickyListingNode);\r\n            $.async(this.stickyElementSelector,\r\n                this.toolbar(),\r\n                this.initStickyToolbarNode);\r\n        },\r\n\r\n        /**\r\n         * Init columns (each time when amount of columns is changed)\r\n         *\r\n         */\r\n        initColumns: function () {\r\n            this.columns = this.listingNode.find(this.columnSelector);\r\n        },\r\n\r\n        /**\r\n         * Init left DataGridCap\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        initLeftDataGridCap: function (node) {\r\n            this.leftDataGridCap = $(node);\r\n        },\r\n\r\n        /**\r\n         * Init right DataGridCap\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        initRightDataGridCap: function (node) {\r\n            this.rightDataGridCap = $(node);\r\n        },\r\n\r\n        /**\r\n         * Init listeners\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initListeners: function () {\r\n            this.adjustStickyElems();\r\n            this.initOnResize()\r\n                .initOnScroll()\r\n                .initOnListingScroll();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Start to listen to window scroll event\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initOnScroll: function () {\r\n            this.lastHorizontalScrollPos = $(window).scrollLeft();\r\n            document.addEventListener('scroll', function () {\r\n                this.flags.scrolled = true;\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Start to listen to original listing scroll event\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initOnListingScroll: function () {\r\n            $(this.listingNode).scroll(function (e) {\r\n                this.flags.listingScrolled = true;\r\n                this.flags.listingScrolledValue = $(e.target).scrollLeft();\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Start to listen to window resize event\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initOnResize: function () {\r\n            $(window).resize(function () {\r\n                this.flags.resized = true;\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adjust sticky header elements according to flags of the events that have happened in the endless RAF loop\r\n         */\r\n        adjustStickyElems: function () {\r\n            if (this.flags.resized ||\r\n                this.flags.scrolled) {\r\n                this.checkPos();\r\n            }\r\n\r\n            if (this.visible) {\r\n                this.checkTableElemsWidth();\r\n\r\n                if (this.flags.originalWidthChanged) {\r\n                    this.adjustContainerElemsWidth();\r\n                }\r\n\r\n                if (this.flags.resized) {\r\n                    this.onResize();\r\n                }\r\n\r\n                if (this.flags.scrolled) {\r\n                    this.onWindowScroll();\r\n                }\r\n\r\n                if (this.flags.listingScrolled) {\r\n                    this.onListingScroll(this.flags.listingScrolledValue);\r\n                }\r\n            }\r\n            _.each(this.flags, function (val, key) {\r\n                if (val === this.dirtyFlag) {\r\n                    this.flags[key] = false;\r\n                } else if (val) {\r\n                    this.flags[key] = this.dirtyFlag;\r\n                }\r\n            }, this);\r\n\r\n            raf(this.adjustStickyElems);\r\n        },\r\n\r\n        /**\r\n         * Handles window scroll\r\n         */\r\n        onWindowScroll: function () {\r\n            var scrolled = $(window).scrollLeft(),\r\n                horizontal = this.lastHorizontalScrollPos !== scrolled;\r\n\r\n            if (horizontal) {\r\n                this.adjustOffset()\r\n                    .adjustDataGridCapPositions();\r\n                this.lastHorizontalScrollPos = scrolled;\r\n            } else {\r\n                this.checkPos();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handles original listing scroll\r\n         *\r\n         * @param {Number} scrolled\r\n         */\r\n        onListingScroll: function (scrolled) {\r\n            this.adjustOffset(scrolled);\r\n        },\r\n\r\n        /**\r\n         * Handles window resize\r\n         */\r\n        onResize: function () {\r\n            this.checkPos();\r\n            this.adjustContainerElemsWidth()\r\n                .adjustDataGridCapPositions();\r\n        },\r\n\r\n        /**\r\n         * Check if original table or columns change it dimensions and sets appropriate flag\r\n         */\r\n        checkTableElemsWidth: function () {\r\n            var newWidth = this.getTableWidth();\r\n\r\n            if (this.cache.tableWidth !== newWidth) {\r\n                this.cache.tableWidth = newWidth;\r\n                this.flags.originalWidthChanged = true;\r\n            } else if (this.cache.colChecksum !== this.getColsChecksum()) {\r\n                this.cache.colChecksum = this.getColsChecksum();\r\n                this.flags.originalWidthChanged = true;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get the checksum of original columns width\r\n         *\r\n         * @returns {Number}.\r\n         */\r\n        getColsChecksum: function () {\r\n            return _.reduce(this.columns,\r\n            function (pv, cv) {\r\n                return ($(pv).width() || pv) + '' + $(cv).width();\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Get the width of the sticky table wrapper\r\n         *\r\n         * @returns {Number}.\r\n         */\r\n        getListingWidth: function () {\r\n            return this.listingNode.width();\r\n        },\r\n\r\n        /**\r\n         * Get the width of the original table\r\n         *\r\n         * @returns {Number}.\r\n         */\r\n        getTableWidth: function () {\r\n            return this.listingNode.find(this.tableSelector).width();\r\n        },\r\n\r\n        /**\r\n         * Get the top elem: header or toolbar\r\n         *\r\n         * @returns {HTMLElement}.\r\n         */\r\n        getTopElement: function () {\r\n            return this.toolbarNode || this.listingNode;\r\n        },\r\n\r\n        /**\r\n         * Get the height of the other sticky elem (Page header)\r\n         *\r\n         * @returns {Number}.\r\n         */\r\n        getOtherStickyElementsSize: function () {\r\n            return this.otherStickyElsSize;\r\n        },\r\n\r\n        /**\r\n         * Get original bulk row height, if is visible\r\n         *\r\n         * @returns {Number}.\r\n         */\r\n        getBulkRowHeight: function () {\r\n            return this.listingNode.find(this.bulkRowSelector).filter(':visible').height();\r\n        },\r\n\r\n        /**\r\n         * Get top Y coord of the sticky header\r\n         *\r\n         * @returns {Number}.\r\n         */\r\n        getListingTopYCoord: function () {\r\n            var bulkRowHeight = this.getBulkRowHeight();\r\n\r\n            return this.listingNode.find('tbody').offset().top -\r\n                this.containerNode.height() -\r\n                $(window).scrollTop() +\r\n                bulkRowHeight;\r\n        },\r\n\r\n        /**\r\n         * Check if sticky header must be visible\r\n         *\r\n         * @returns {Boolean}.\r\n         */\r\n        getMustBeSticky: function () {\r\n            var stickyTopCondition = this.getListingTopYCoord() - this.getOtherStickyElementsSize(),\r\n                stickyBottomCondition = this.listingNode.offset().top +\r\n                    this.listingNode.height() -\r\n                    $(window).scrollTop() +\r\n                    this.getBulkRowHeight() -\r\n                    this.getOtherStickyElementsSize();\r\n\r\n            return stickyTopCondition < 0 && stickyBottomCondition > 0;\r\n        },\r\n\r\n        /**\r\n         * Resize sticky header and cols\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        adjustContainerElemsWidth: function () {\r\n            this.resizeContainer()\r\n                .resizeCols()\r\n                .resizeBulk();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Resize sticky header\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        resizeContainer: function () {\r\n            var listingWidth = this.getListingWidth();\r\n\r\n            this.stickyListingNode.innerWidth(listingWidth);\r\n            this.stickyListingNode.find(this.tableSelector).innerWidth(this.getTableWidth());\r\n\r\n            if (this.stickyToolbarNode) {\r\n                this.stickyToolbarNode.innerWidth(listingWidth);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Resize sticky cols\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        resizeCols: function () {\r\n            var cols = this.listingNode.find(this.columnSelector);\r\n\r\n            this.stickyListingNode.find(this.columnSelector).each(function (ind) {\r\n                var originalColWidth =  $(cols[ind]).width();\r\n\r\n                $(this).width(originalColWidth);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Resize bulk row header\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        resizeBulk: function () {\r\n            var bulk = this.containerNode.find(this.bulkRowHeaderSelector)[0];\r\n\r\n            if (bulk) {\r\n                $(bulk).innerWidth(this.getListingWidth());\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Reset viewport to the top of listing\r\n         */\r\n        resetToTop: function () {\r\n            var posOfTopEl = this.getTopElement().offset().top - this.getOtherStickyElementsSize() || 0;\r\n\r\n            $(window).scrollTop(posOfTopEl);\r\n        },\r\n\r\n        /**\r\n         * Adjust sticky header offset\r\n         *\r\n         * @param {Number} val\r\n         * @returns {Object} Chainable.\r\n         */\r\n        adjustOffset: function (val) {\r\n            val = val || this.listingNode.scrollLeft();\r\n            this.stickyListingNode.offset({\r\n                left: this.listingNode.offset().left - val\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adjust both DataGridCap position\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        adjustDataGridCapPositions: function () {\r\n            this.adjustLeftDataGridCapPos()\r\n                .adjustRightDataGridCapPos();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adjust left DataGridCap position\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        adjustLeftDataGridCapPos: function () {\r\n            this.leftDataGridCap.offset({\r\n                left: this.listingNode.offset().left - this.leftDataGridCap.width()\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adjust right DataGridCap position\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        adjustRightDataGridCapPos: function () {\r\n            this.rightDataGridCap.offset({\r\n                left: this.listingNode.offset().left + this.listingNode.width()\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Hides the oiginal toolbar opened dropdowns/collapsibles etc\r\n         */\r\n        collapseOriginalElements: function () {\r\n            this.toolbarNode\r\n                .find(this.toolbarCollapsiblesSelector)\r\n                .css('visibility', 'hidden');\r\n            $(this.listingNode.find(this.bulkRowSelector)[0]).css('visibility', 'hidden');\r\n        },\r\n\r\n        /**\r\n         * Restores the oiginal toolbar opened dropdowns/collapsibles etc\r\n         */\r\n        restoreOriginalElements: function () {\r\n            this.toolbarNode\r\n                .find(this.toolbarCollapsiblesSelector)\r\n                .css('visibility', 'visible');\r\n            $(this.listingNode.find(this.bulkRowSelector)[0]).css('visibility', 'visible');\r\n        },\r\n\r\n        /**\r\n         * Toggle the visibility of sticky header\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        toggleContainerVisibility: function () {\r\n            this.visible = !this.visible;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks position of the listing to know if need to show/hide sticky header\r\n         *\r\n         * @returns {Boolean} whether the visibility of the sticky header was toggled.\r\n         */\r\n        checkPos: function () {\r\n            var isSticky = this.visible,\r\n                mustBeSticky = this.getMustBeSticky(),\r\n                needChange = isSticky !== mustBeSticky;\r\n\r\n            if (needChange) {\r\n                if (mustBeSticky) {\r\n                    this.collapseOriginalElements();\r\n                    this.toggleContainerVisibility();\r\n                    this.adjustContainerElemsWidth()\r\n                        .adjustOffset()\r\n                        .adjustDataGridCapPositions();\r\n\r\n                } else {\r\n                    this.toggleContainerVisibility();\r\n                    this.restoreOriginalElements();\r\n                }\r\n            }\r\n\r\n            return needChange;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/lib/collapsible.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'uiComponent'\r\n], function (Component) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            opened: false,\r\n            collapsible: true\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Collapsible} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('opened');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Toggles value of the 'opened' property.\r\n         *\r\n         * @returns {Collapsible} Chainable.\r\n         */\r\n        toggleOpened: function () {\r\n            this.opened() ?\r\n                this.close() :\r\n                this.open();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets 'opened' flag to false.\r\n         *\r\n         * @returns {Collapsible} Chainable.\r\n         */\r\n        close: function () {\r\n            if (this.collapsible) {\r\n                this.opened(false);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets 'opened' flag to true.\r\n         *\r\n         * @returns {Collapsible} Chainable.\r\n         */\r\n        open: function () {\r\n            if (this.collapsible) {\r\n                this.opened(true);\r\n            }\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/lib/key-codes.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    return {\r\n        13: 'enterKey',\r\n        27: 'escapeKey',\r\n        40: 'pageDownKey',\r\n        38: 'pageUpKey',\r\n        32: 'spaceKey',\r\n        9:  'tabKey',\r\n        37: 'pageLeftKey',\r\n        39: 'pageRightKey',\r\n        17: 'ctrlKey',\r\n        18: 'altKey',\r\n        16: 'shiftKey'\r\n    };\r\n});\r\n","Magento_Ui/js/lib/spinner.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    var selector = '[data-role=\"spinner\"]',\r\n        spinner = $(selector);\r\n\r\n    return {\r\n        show: function () {\r\n            spinner.show();\r\n        },\r\n\r\n        hide: function () {\r\n            spinner.hide();\r\n        },\r\n\r\n        get: function (id) {\r\n            return $(selector + '[data-component=\"' + id + '\"]');\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/step-wizard.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n// jscs:disable jsDoc\r\ndefine([\r\n    'uiRegistry',\r\n    'uiComponent',\r\n    'jquery',\r\n    'underscore',\r\n    'ko',\r\n    'mage/backend/notification'\r\n], function (uiRegistry, Component, $, _, ko) {\r\n    'use strict';\r\n\r\n    var Wizard;\r\n\r\n    ko.utils.domNodeDisposal.cleanExternalData = _.wrap(\r\n        ko.utils.domNodeDisposal.cleanExternalData,\r\n        function (func, node) {\r\n            if (!$(node).closest('[data-type=skipKO]').length) {\r\n                func(node);\r\n            }\r\n        }\r\n    );\r\n\r\n    Wizard = function (steps, modalClass) {\r\n        this.steps = steps;\r\n        this.index = 0;\r\n        this.data = {};\r\n        this.nextLabelText = 'Next';\r\n        this.prevLabelText = 'Back';\r\n        this.initSelectors = function (modalClass) {\r\n            var elementSelector = '[data-role=steps-wizard-main]';\r\n\r\n            this.nextLabel = '[data-role=\"step-wizard-next\"]';\r\n            this.prevLabel = '[data-role=\"step-wizard-prev\"]';\r\n\r\n            if (modalClass) {\r\n                this.nextLabel = '.' + modalClass + ' ' + this.nextLabel;\r\n                this.prevLabel = '.' + modalClass + ' ' + this.prevLabel;\r\n                elementSelector = '.' + modalClass + elementSelector;\r\n            }\r\n\r\n            this.element = $(elementSelector);\r\n            $(this.element).notification();\r\n        };\r\n        this.initSelectors(modalClass);\r\n        this.move = function (newIndex) {\r\n            if (!this.preventSwitch(newIndex)) {\r\n                if (newIndex > this.index) {\r\n                    this._next(newIndex);\r\n                } else if (newIndex < this.index) {\r\n                    this._prev(newIndex);\r\n                }\r\n            }\r\n            this.updateLabels(this.getStep());\r\n            this.showNotificationMessage();\r\n\r\n            return this.getStep().name;\r\n        };\r\n        this.next = function () {\r\n            this.move(this.index + 1);\r\n\r\n            return this.getStep().name;\r\n        };\r\n        this.prev = function () {\r\n            this.move(this.index - 1);\r\n\r\n            return this.getStep().name;\r\n        };\r\n        this.preventSwitch = function (newIndex) {\r\n            return newIndex < 0 || (newIndex - this.index) > 1;\r\n        };\r\n        this._next = function (newIndex) {\r\n            newIndex = _.isNumber(newIndex) ? newIndex : this.index + 1;\r\n\r\n            try {\r\n                this.getStep().force(this);\r\n\r\n                if (newIndex >= steps.length) {\r\n                    return false;\r\n                }\r\n            } catch (e) {\r\n                this.setNotificationMessage(e.message, true);\r\n\r\n                return false;\r\n            }\r\n            this.cleanErrorNotificationMessage();\r\n            this.index = newIndex;\r\n            this.cleanNotificationMessage();\r\n            this.render();\r\n        };\r\n        this._prev = function (newIndex) {\r\n            newIndex = _.isNumber(newIndex) ? newIndex : this.index - 1;\r\n            this.getStep().back(this);\r\n            this.index = newIndex;\r\n        };\r\n        this.getStep = function (stepIndex) {\r\n            return this.steps[stepIndex || this.index] || {};\r\n        };\r\n        this.notifyMessage = function (message, error) {\r\n            $(this.element).notification('clear').notification('add', {\r\n                error: error,\r\n                message: message\r\n            });\r\n        };\r\n        this.updateLabels = function (step) {\r\n            this.element.find(this.nextLabel).find('button').text(step.nextLabelText || this.nextLabelText);\r\n            this.element.find(this.prevLabel).find('button').text(step.prevLabelText || this.prevLabelText);\r\n        };\r\n        this.showNotificationMessage = function () {\r\n            if (!_.isEmpty(this.getStep())) {\r\n                this.hideNotificationMessage();\r\n\r\n                if (this.getStep().notificationMessage.text !== null) {\r\n                    this.notifyMessage(\r\n                        this.getStep().notificationMessage.text,\r\n                        this.getStep().notificationMessage.error\r\n                    );\r\n                }\r\n            }\r\n        };\r\n        this.cleanNotificationMessage = function () {\r\n            this.getStep().notificationMessage.text = null;\r\n            this.hideNotificationMessage();\r\n        };\r\n        this.cleanErrorNotificationMessage = function () {\r\n            if (this.getStep().notificationMessage.error === true) {\r\n                this.cleanNotificationMessage();\r\n            }\r\n        };\r\n        this.setNotificationMessage = function (text, error) {\r\n            error = error !== undefined;\r\n\r\n            if (!_.isEmpty(this.getStep())) {\r\n                this.getStep().notificationMessage.text = text;\r\n                this.getStep().notificationMessage.error = error;\r\n                this.showNotificationMessage();\r\n            }\r\n        };\r\n        this.hideNotificationMessage = function () {\r\n            $(this.element).notification('clear');\r\n        };\r\n        this.render = function () {\r\n            this.hideNotificationMessage();\r\n            this.getStep().render(this);\r\n        };\r\n        this.init = function () {\r\n            this.updateLabels(this.getStep());\r\n            this.render();\r\n        };\r\n        this.init();\r\n    };\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            modalClass: '',\r\n            initData: [],\r\n            stepsNames: [],\r\n            selectedStep: '',\r\n            steps: [],\r\n            disabled: true\r\n        },\r\n        initialize: function () {\r\n            this._super();\r\n            this.selectedStep.subscribe(this.wrapDisabledBackButton.bind(this));\r\n        },\r\n        initElement: function (step) {\r\n            step.initData = this.initData;\r\n            step.mode = _.all(this.initData, _.isEmpty) ? 'create' : 'edit';\r\n            this.steps[this.getStepIndexByName(step.name)] = step;\r\n        },\r\n        initObservable: function () {\r\n            this._super().observe([\r\n                'selectedStep',\r\n                'disabled'\r\n            ]);\r\n\r\n            return this;\r\n        },\r\n        destroy: function () {\r\n            _.each(this.steps, function (step) {\r\n                step.destroy();\r\n            });\r\n\r\n            this._super();\r\n        },\r\n        wrapDisabledBackButton: function (stepName) {\r\n            if (_.first(this.stepsNames) === stepName) {\r\n                this.disabled(true);\r\n            } else {\r\n                this.disabled(false);\r\n            }\r\n        },\r\n        getStepIndexByName: function (stepName) {\r\n            return _.indexOf(this.stepsNames, stepName);\r\n        },\r\n        //controls, todo to another object\r\n        next: function () {\r\n            this.selectedStep(this.wizard.next());\r\n        },\r\n        back: function () {\r\n            this.selectedStep(this.wizard.prev());\r\n        },\r\n        open: function () {\r\n            this.selectedStep(this.stepsNames.first());\r\n            this.wizard = new Wizard(this.steps, this.modalClass);\r\n        },\r\n        close: function () {\r\n            var modal =  uiRegistry.get(this.initData.configurableModal);\r\n            if (!_.isUndefined(modal)) {\r\n                modal.closeModal();\r\n            }\r\n        },\r\n        showSpecificStep: function () {\r\n            var index = _.indexOf(this.stepsNames, event.target.hash.substr(1)),\r\n                stepName = this.wizard.move(index);\r\n\r\n            this.selectedStep(stepName);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/lib/core/class.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'mage/utils/wrapper'\r\n], function (_, utils, wrapper) {\r\n    'use strict';\r\n\r\n    var Class;\r\n\r\n    /**\r\n     * Returns property of an object if\r\n     * it's his own property.\r\n     *\r\n     * @param {Object} obj - Object whose property should be retrieved.\r\n     * @param {String} prop - Name of the property.\r\n     * @returns {*} Value of the property or false.\r\n     */\r\n    function getOwn(obj, prop) {\r\n        return _.isObject(obj) && obj.hasOwnProperty(prop) && obj[prop];\r\n    }\r\n\r\n    /**\r\n     * Creates constructor function which allows\r\n     * initialization without usage of a 'new' operator.\r\n     *\r\n     * @param {Object} protoProps - Prototypal properties of a new constructor.\r\n     * @param {Function} constructor\r\n     * @returns {Function} Created constructor.\r\n     */\r\n    function createConstructor(protoProps, constructor) {\r\n        var UiClass = constructor;\r\n\r\n        if (!UiClass) {\r\n\r\n            /**\r\n             * Default constructor function.\r\n             */\r\n            UiClass = function () {\r\n                var obj = this;\r\n\r\n                if (!_.isObject(obj) || Object.getPrototypeOf(obj) !== UiClass.prototype) {\r\n                    obj = Object.create(UiClass.prototype);\r\n                }\r\n\r\n                obj.initialize.apply(obj, arguments);\r\n\r\n                return obj;\r\n            };\r\n        }\r\n\r\n        UiClass.prototype = protoProps;\r\n        UiClass.prototype.constructor = UiClass;\r\n\r\n        return UiClass;\r\n    }\r\n\r\n    Class = createConstructor({\r\n\r\n        /**\r\n         * Entry point to the initialization of constructors' instance.\r\n         *\r\n         * @param {Object} [options={}]\r\n         * @returns {Class} Chainable.\r\n         */\r\n        initialize: function (options) {\r\n            this.initConfig(options);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Recursively extends data specified in constructors' 'defaults'\r\n         * property with provided options object. Evaluates resulting\r\n         * object using string templates (see: mage/utils/template.js).\r\n         *\r\n         * @param {Object} [options={}]\r\n         * @returns {Class} Chainable.\r\n         */\r\n        initConfig: function (options) {\r\n            var defaults    = this.constructor.defaults,\r\n                config      = utils.extend({}, defaults, options || {}),\r\n                ignored     = config.ignoreTmpls || {},\r\n                cached      = utils.omit(config, ignored);\r\n\r\n            config = utils.template(config, this, false, true);\r\n\r\n            _.each(cached, function (value, key) {\r\n                utils.nested(config, key, value);\r\n            });\r\n\r\n            return _.extend(this, config);\r\n        }\r\n    });\r\n\r\n    _.extend(Class, {\r\n        defaults: {\r\n            ignoreTmpls: {\r\n                templates: true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Creates new constructor based on a current prototype properties,\r\n         * extending them with properties specified in 'exender' object.\r\n         *\r\n         * @param {Object} [extender={}]\r\n         * @returns {Function} New constructor.\r\n         */\r\n        extend: function (extender) {\r\n            var parent      = this,\r\n                parentProto = parent.prototype,\r\n                childProto  = Object.create(parentProto),\r\n                child       = createConstructor(childProto, getOwn(extender, 'constructor')),\r\n                defaults;\r\n\r\n            extender = extender || {};\r\n            defaults = extender.defaults;\r\n\r\n            delete extender.defaults;\r\n\r\n            _.each(extender, function (method, name) {\r\n                childProto[name] = wrapper.wrapSuper(parentProto[name], method);\r\n            });\r\n\r\n            child.defaults = utils.extend({}, parent.defaults || {});\r\n\r\n            if (defaults) {\r\n                utils.extend(child.defaults, defaults);\r\n                extender.defaults = defaults;\r\n            }\r\n\r\n            return _.extend(child, {\r\n                __super__:  parentProto,\r\n                extend:     parent.extend\r\n            });\r\n        }\r\n    });\r\n\r\n    return Class;\r\n});\r\n","Magento_Ui/js/lib/core/collection.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiRegistry',\r\n    'uiElement'\r\n], function (_, utils, registry, Element) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Removes non plain object items from the specfied array.\r\n     *\r\n     * @param {Array} container - Array whose value should be filtered.\r\n     * @returns {Array}\r\n     */\r\n    function compact(container) {\r\n        return container.filter(utils.isObject);\r\n    }\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            template: 'ui/collection',\r\n            _elems: [],\r\n            ignoreTmpls: {\r\n                childDefaults: true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Model} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe({\r\n                    elems: []\r\n                });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Called when another element was added to current component.\r\n         *\r\n         * @param {Object} elem - Instance of an element that was added.\r\n         * @returns {Collection} Chainable.\r\n         */\r\n        initElement: function (elem) {\r\n            elem.initContainer(this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns instance of a child found by provided index.\r\n         *\r\n         * @param {String} index - Index of a child.\r\n         * @returns {Object}\r\n         */\r\n        getChild: function (index) {\r\n            return _.findWhere(this.elems(), {\r\n                index: index\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Requests specified components to insert\r\n         * them into 'elems' array starting from provided position.\r\n         *\r\n         * @param {(String|Array)} elems - Name of the component to insert.\r\n         * @param {Number} [position=-1] - Position at which to insert elements.\r\n         * @returns {Collection} Chainable.\r\n         */\r\n        insertChild: function (elems, position) {\r\n            var container   = this._elems,\r\n                insert      = this._insert.bind(this),\r\n                update;\r\n\r\n            if (!Array.isArray(elems)) {\r\n                elems = [elems];\r\n            }\r\n\r\n            elems.map(function (item) {\r\n                return item.elem ?\r\n                    utils.insert(item.elem, container, item.position) :\r\n                    utils.insert(item, container, position);\r\n            }).forEach(function (item) {\r\n                if (item === true) {\r\n                    update = true;\r\n                } else if (_.isString(item)) {\r\n                    registry.get(item, insert);\r\n                } else if (utils.isObject(item)) {\r\n                    insert(item);\r\n                }\r\n            });\r\n\r\n            if (update) {\r\n                this._updateCollection();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes specified child from collection.\r\n         *\r\n         * @param {(Object|String)} elem - Child or index of a child to be removed.\r\n         * @param {Boolean} skipUpdate - skip collection update when element to be destroyed.\r\n         *\r\n         * @returns {Collection} Chainable.\r\n         */\r\n        removeChild: function (elem, skipUpdate) {\r\n            if (_.isString(elem)) {\r\n                elem = this.getChild(elem);\r\n            }\r\n\r\n            if (elem) {\r\n                utils.remove(this._elems, elem);\r\n\r\n                if (!skipUpdate) {\r\n                    this._updateCollection();\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Destroys collection children with its' elements.\r\n         */\r\n        destroyChildren: function () {\r\n            this.elems.each(function (elem) {\r\n                elem.destroy(true);\r\n            });\r\n\r\n            this._updateCollection();\r\n        },\r\n\r\n        /**\r\n         * Clear data. Call method \"clear\"\r\n         * in child components\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        clear: function () {\r\n            var elems = this.elems();\r\n\r\n            _.each(elems, function (elem) {\r\n                if (_.isFunction(elem.clear)) {\r\n                    elem.clear();\r\n                }\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if specified child exists in collection.\r\n         *\r\n         * @param {String} index - Index of a child.\r\n         * @returns {Boolean}\r\n         */\r\n        hasChild: function (index) {\r\n            return !!this.getChild(index);\r\n        },\r\n\r\n        /**\r\n         * Creates 'async' wrapper for the specified child\r\n         * using uiRegistry 'async' method and caches it\r\n         * in a '_requested' components  object.\r\n         *\r\n         * @param {String} index - Index of a child.\r\n         * @returns {Function} Async module wrapper.\r\n         */\r\n        requestChild: function (index) {\r\n            var name = this.formChildName(index);\r\n\r\n            return this.requestModule(name);\r\n        },\r\n\r\n        /**\r\n         * Creates complete child name based on a provided index.\r\n         *\r\n         * @param {String} index - Index of a child.\r\n         * @returns {String}\r\n         */\r\n        formChildName: function (index) {\r\n            return this.name + '.' + index;\r\n        },\r\n\r\n        /**\r\n         * Retrieves requested region.\r\n         * Creates region if it was not created yet\r\n         *\r\n         * @returns {ObservableArray}\r\n         */\r\n        getRegion: function (name) {\r\n            var regions = this.regions = this.regions || {};\r\n\r\n            if (!regions[name]) {\r\n                regions[name] = [];\r\n\r\n                this.observe.call(regions, name);\r\n            }\r\n\r\n            return regions[name];\r\n        },\r\n\r\n        /**\r\n         * Replaces specified regions' data with a provided one.\r\n         * Creates region if it was not created yet.\r\n         *\r\n         * @param {Array} items - New regions' data.\r\n         * @param {String} name - Name of the region.\r\n         * @returns {Collection} Chainable.\r\n         */\r\n        updateRegion: function (items, name) {\r\n            this.getRegion(name)(items);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Destroys collection along with its' elements.\r\n         */\r\n        destroy: function () {\r\n            this._super();\r\n\r\n            this.elems.each('destroy');\r\n        },\r\n\r\n        /**\r\n         * Inserts provided component into 'elems' array at a specified position.\r\n         * @private\r\n         *\r\n         * @param {Object} elem - Element to insert.\r\n         */\r\n        _insert: function (elem) {\r\n            var index = this._elems.indexOf(elem.name);\r\n\r\n            if (~index) {\r\n                this._elems[index] = elem;\r\n            }\r\n\r\n            this._updateCollection()\r\n                .initElement(elem);\r\n        },\r\n\r\n        /**\r\n         * Synchronizes multiple elements arrays with a core '_elems' container.\r\n         * Performs elemets grouping by theirs 'displayArea' property.\r\n         * @private\r\n         *\r\n         * @returns {Collection} Chainable.\r\n         */\r\n        _updateCollection: function () {\r\n            var _elems = compact(this._elems),\r\n                grouped;\r\n\r\n            grouped = _elems.filter(function (elem) {\r\n                return elem.displayArea && _.isString(elem.displayArea);\r\n            });\r\n            grouped = _.groupBy(grouped, 'displayArea');\r\n\r\n            _.each(grouped, this.updateRegion, this);\r\n\r\n            _.each(this.regions, function (items) {\r\n                var hasObsoleteComponents = items().length && !_.intersection(_elems, items()).length;\r\n\r\n                if (hasObsoleteComponents) {\r\n                    items.removeAll();\r\n                }\r\n            });\r\n\r\n            this.elems(_elems);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Tries to call specified method of a current component,\r\n         * otherwise delegates attempt to its' children.\r\n         *\r\n         * @param {String} target - Name of the method.\r\n         * @param {...*} parameters - Arguments that will be passed to method.\r\n         * @returns {*} Result of the method calls.\r\n         */\r\n        delegate: function (target) {\r\n            var args = _.toArray(arguments);\r\n\r\n            target = this[target];\r\n\r\n            if (_.isFunction(target)) {\r\n                return target.apply(this, args.slice(1));\r\n            }\r\n\r\n            return this._delegate(args);\r\n        },\r\n\r\n        /**\r\n         * Calls 'delegate' method of all of it's children components.\r\n         * @private\r\n         *\r\n         * @param {Array} args - An array of arguments to pass to the next delegation call.\r\n         * @returns {Array} An array of delegation resutls.\r\n         */\r\n        _delegate: function (args) {\r\n            var result;\r\n\r\n            result = this.elems.map(function (elem) {\r\n                var target;\r\n\r\n                if (!_.isFunction(elem.delegate)) {\r\n                    target = elem[args[0]];\r\n\r\n                    if (_.isFunction(target)) {\r\n                        return target.apply(elem, args.slice(1));\r\n                    }\r\n                } else {\r\n                    return elem.delegate.apply(elem, args);\r\n                }\r\n            });\r\n\r\n            return _.flatten(result);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/lib/core/events.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'es6-collections'\r\n], function (ko, _) {\r\n    'use strict';\r\n\r\n    var eventsMap = new WeakMap();\r\n\r\n    /**\r\n     * Returns events map or a specific event\r\n     * data associated with a provided object.\r\n     *\r\n     * @param {Object} obj - Key in the events weakmap.\r\n     * @param {String} [name] - Name of the event.\r\n     * @returns {Map|Array|Boolean}\r\n     */\r\n    function getEvents(obj, name) {\r\n        var events = eventsMap.get(obj);\r\n\r\n        if (!events) {\r\n            return false;\r\n        }\r\n\r\n        return name ? events.get(name) : events;\r\n    }\r\n\r\n    /**\r\n     * Adds new event handler.\r\n     *\r\n     * @param {Object} obj - Key in the events weakmap.\r\n     * @param {String} ns - Callback namespace.\r\n     * @param {Fucntion} callback - Event callback.\r\n     * @param {String} name - Name of the event.\r\n     */\r\n    function addHandler(obj, ns, callback, name) {\r\n        var events      = getEvents(obj),\r\n            observable,\r\n            data;\r\n\r\n        observable = !ko.isObservable(obj[name]) ?\r\n            ko.getObservable(obj, name) :\r\n            obj[name];\r\n\r\n        if (observable) {\r\n            observable.subscribe(callback);\r\n\r\n            return;\r\n        }\r\n\r\n        if (!events) {\r\n            events = new Map();\r\n\r\n            eventsMap.set(obj, events);\r\n        }\r\n\r\n        data = {\r\n            callback: callback,\r\n            ns: ns\r\n        };\r\n\r\n        events.has(name) ?\r\n            events.get(name).push(data) :\r\n            events.set(name, [data]);\r\n    }\r\n\r\n    /**\r\n     * Invokes provided callbacks with a specified arguments.\r\n     *\r\n     * @param {Array} handlers\r\n     * @param {Array} args\r\n     * @returns {Boolean}\r\n     */\r\n    function trigger(handlers, args) {\r\n        var bubble = true,\r\n            callback;\r\n\r\n        handlers.forEach(function (handler) {\r\n            callback = handler.callback;\r\n\r\n            if (callback.apply(null, args) === false) {\r\n                bubble = false;\r\n            }\r\n        });\r\n\r\n        return bubble;\r\n    }\r\n\r\n    return {\r\n\r\n        /**\r\n         * Calls callback when name event is triggered.\r\n         * @param  {String}   events\r\n         * @param  {Function} callback\r\n         * @return {Object} reference to this\r\n         */\r\n        on: function (events, callback, ns) {\r\n            var iterator;\r\n\r\n            if (arguments.length < 2) {\r\n                ns = callback;\r\n            }\r\n\r\n            iterator = addHandler.bind(null, this, ns);\r\n\r\n            _.isObject(events) ?\r\n                _.each(events, iterator) :\r\n                iterator(callback, events);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removed callback from listening to target event\r\n         * @param  {String} ns\r\n         * @return {Object} reference to this\r\n         */\r\n        off: function (ns) {\r\n            var storage = getEvents(this);\r\n\r\n            if (!storage) {\r\n                return this;\r\n            }\r\n\r\n            storage.forEach(function (handlers, name) {\r\n                handlers = handlers.filter(function (handler) {\r\n                    return !ns ? false : handler.ns !== ns;\r\n                });\r\n\r\n                handlers.length ?\r\n                    storage.set(name, handlers) :\r\n                    storage.delete(name);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Triggers event and executes all attached callbacks.\r\n         *\r\n         * @param {String} name - Name of the event to be triggered.\r\n         * @returns {Boolean}\r\n         */\r\n        trigger: function (name) {\r\n            var handlers,\r\n                args;\r\n\r\n            handlers = getEvents(this, name),\r\n            args = _.toArray(arguments).slice(1);\r\n\r\n            if (!handlers || !name) {\r\n                return true;\r\n            }\r\n\r\n            return trigger(handlers, args);\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/core/element/element.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiRegistry',\r\n    'uiEvents',\r\n    'uiClass',\r\n    './links',\r\n    '../storage/local'\r\n], function (ko, _, utils, registry, Events, Class, links) {\r\n    'use strict';\r\n\r\n    var Element;\r\n\r\n    /**\r\n     * Creates observable property using knockouts'\r\n     * 'observableArray' or 'observable' methods,\r\n     * depending on a type of 'value' parameter.\r\n     *\r\n     * @param {Object} obj - Object to whom property belongs.\r\n     * @param {String} key - Key of the property.\r\n     * @param {*} value - Initial value.\r\n     */\r\n    function observable(obj, key, value) {\r\n        var method = Array.isArray(value) ? 'observableArray' : 'observable';\r\n\r\n        if (_.isFunction(obj[key]) && !ko.isObservable(obj[key])) {\r\n            return;\r\n        }\r\n\r\n        if (ko.isObservable(value)) {\r\n            value = value();\r\n        }\r\n\r\n        ko.isObservable(obj[key]) ?\r\n            obj[key](value) :\r\n            obj[key] = ko[method](value);\r\n    }\r\n\r\n    /**\r\n     * Creates observable property using 'track' method.\r\n     *\r\n     * @param {Object} obj - Object to whom property belongs.\r\n     * @param {String} key - Key of the property.\r\n     * @param {*} value - Initial value.\r\n     */\r\n    function accessor(obj, key, value) {\r\n        if (_.isFunction(obj[key]) || ko.isObservable(obj[key])) {\r\n            return;\r\n        }\r\n\r\n        obj[key] = value;\r\n\r\n        if (!ko.es5.isTracked(obj, key)) {\r\n            ko.track(obj, [key]);\r\n        }\r\n    }\r\n\r\n    Element = _.extend({\r\n        defaults: {\r\n            _requested: {},\r\n            containers: [],\r\n            exports: {},\r\n            imports: {},\r\n            links: {},\r\n            listens: {},\r\n            name: '',\r\n            ns: '${ $.name.split(\".\")[0] }',\r\n            provider: '',\r\n            registerNodes: true,\r\n            source: null,\r\n            statefull: {},\r\n            template: '',\r\n            tracks: {},\r\n            storageConfig: {\r\n                provider: 'localStorage',\r\n                namespace: '${ $.name }',\r\n                path: '${ $.storageConfig.provider }:${ $.storageConfig.namespace }'\r\n            },\r\n            maps: {\r\n                imports: {},\r\n                exports: {}\r\n            },\r\n            modules: {\r\n                storage: '${ $.storageConfig.provider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes model instance.\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initObservable()\r\n                .initModules()\r\n                .initStatefull()\r\n                .initLinks()\r\n                .initUnique();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            _.each(this.tracks, function (enabled, key) {\r\n                if (enabled) {\r\n                    this.track(key);\r\n                }\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Parses 'modules' object and creates\r\n         * async wrappers for specified components.\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        initModules: function () {\r\n            _.each(this.modules, function (name, property) {\r\n                if (name) {\r\n                    this[property] = this.requestModule(name);\r\n                }\r\n            }, this);\r\n\r\n            if (!_.isFunction(this.source)) {\r\n                this.source = registry.get(this.provider);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Called when current element was injected to another component.\r\n         *\r\n         * @param {Object} parent - Instance of a 'parent' component.\r\n         * @returns {Collection} Chainable.\r\n         */\r\n        initContainer: function (parent) {\r\n            this.containers.push(parent);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes statefull properties\r\n         * based on the keys of 'statefull' object.\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        initStatefull: function () {\r\n            _.each(this.statefull, function (path, key) {\r\n                if (path) {\r\n                    this.setStatefull(key, path);\r\n                }\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes links between properties.\r\n         *\r\n         * @returns {Element} Chainbale.\r\n         */\r\n        initLinks: function () {\r\n            return this.setListeners(this.listens)\r\n                       .setLinks(this.links, 'imports')\r\n                       .setLinks(this.links, 'exports')\r\n                       .setLinks(this.exports, 'exports')\r\n                       .setLinks(this.imports, 'imports');\r\n        },\r\n\r\n        /**\r\n         * Initializes listeners of the unique property.\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        initUnique: function () {\r\n            var update = this.onUniqueUpdate.bind(this),\r\n                uniqueNs = this.uniqueNs;\r\n\r\n            this.hasUnique = this.uniqueProp && uniqueNs;\r\n\r\n            if (this.hasUnique) {\r\n                this.source.on(uniqueNs, update, this.name);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Makes specified property to be stored automatically.\r\n         *\r\n         * @param {String} key - Name of the property\r\n         *      that will be stored.\r\n         * @param {String} [path=key] - Path to the property in storage.\r\n         * @returns {Element} Chainable.\r\n         */\r\n        setStatefull: function (key, path) {\r\n            var link = {};\r\n\r\n            path        = !_.isString(path) || !path ? key : path;\r\n            link[key]   = this.storageConfig.path + '.' + path;\r\n\r\n            this.setLinks(link, 'imports')\r\n                .setLinks(link, 'exports');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates property specified in uniqueNs\r\n         * if elements' unique property is set to 'true'.\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        setUnique: function () {\r\n            var property = this.uniqueProp;\r\n\r\n            if (this[property]()) {\r\n                this.source.set(this.uniqueNs, this.name);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates 'async' wrapper for the specified component\r\n         * using uiRegistry 'async' method and caches it\r\n         * in a '_requested' components  object.\r\n         *\r\n         * @param {String} name - Name of requested component.\r\n         * @returns {Function} Async module wrapper.\r\n         */\r\n        requestModule: function (name) {\r\n            var requested = this._requested;\r\n\r\n            if (!requested[name]) {\r\n                requested[name] = registry.async(name);\r\n            }\r\n\r\n            return requested[name];\r\n        },\r\n\r\n        /**\r\n         * Returns path to elements' template.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getTemplate: function () {\r\n            return this.template;\r\n        },\r\n\r\n        /**\r\n         * Checks if template was specified for an element.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasTemplate: function () {\r\n            return !!this.template;\r\n        },\r\n\r\n        /**\r\n         * Returns value of the nested property.\r\n         *\r\n         * @param {String} path - Path to the property.\r\n         * @returns {*} Value of the property.\r\n         */\r\n        get: function (path) {\r\n            return utils.nested(this, path);\r\n        },\r\n\r\n        /**\r\n         * Sets provided value as a value of the specified nested property.\r\n         * Triggers changes notifications, if value has mutated.\r\n         *\r\n         * @param {String} path - Path to property.\r\n         * @param {*} value - New value of the property.\r\n         * @returns {Element} Chainable.\r\n         */\r\n        set: function (path, value) {\r\n            var data = this.get(path),\r\n                diffs;\r\n\r\n            diffs = !_.isFunction(data) && !this.isTracked(path) ?\r\n                utils.compare(data, value, path) :\r\n                false;\r\n\r\n            utils.nested(this, path, value);\r\n\r\n            if (diffs) {\r\n                this._notifyChanges(diffs);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes nested property from the object.\r\n         *\r\n         * @param {String} path - Path to the property.\r\n         * @returns {Element} Chainable.\r\n         */\r\n        remove: function (path) {\r\n            var data = utils.nested(this, path),\r\n                diffs;\r\n\r\n            if (_.isUndefined(data) || _.isFunction(data)) {\r\n                return this;\r\n            }\r\n\r\n            diffs = utils.compare(data, undefined, path);\r\n\r\n            utils.nestedRemove(this, path);\r\n\r\n            this._notifyChanges(diffs);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates observable properties for the current object.\r\n         *\r\n         * If 'useTrack' flag is set to 'true' then each property will be\r\n         * created with a ES5 get/set accessor descriptors, instead of\r\n         * making them an observable functions.\r\n         * See 'knockout-es5' library for more information.\r\n         *\r\n         * @param {Boolean} [useAccessors=false] - Whether to create an\r\n         *      observable function or to use property accesessors.\r\n         * @param {(Object|String|Array)} properties - List of observable properties.\r\n         * @returns {Element} Chainable.\r\n         *\r\n         * @example Sample declaration and equivalent knockout methods.\r\n         *      this.key = 'value';\r\n         *      this.array = ['value'];\r\n         *\r\n         *      this.observe(['key', 'array']);\r\n         *      =>\r\n         *          this.key = ko.observable('value');\r\n         *          this.array = ko.observableArray(['value']);\r\n         *\r\n         * @example Another syntaxes of the previous example.\r\n         *      this.observe({\r\n         *          key: 'value',\r\n         *          array: ['value']\r\n         *      });\r\n         */\r\n        observe: function (useAccessors, properties) {\r\n            var model = this,\r\n                trackMethod;\r\n\r\n            if (typeof useAccessors !== 'boolean') {\r\n                properties   = useAccessors;\r\n                useAccessors = false;\r\n            }\r\n\r\n            trackMethod = useAccessors ? accessor : observable;\r\n\r\n            if (_.isString(properties)) {\r\n                properties = properties.split(' ');\r\n            }\r\n\r\n            if (Array.isArray(properties)) {\r\n                properties.forEach(function (key) {\r\n                    trackMethod(model, key, model[key]);\r\n                });\r\n            } else if (typeof properties === 'object') {\r\n                _.each(properties, function (value, key) {\r\n                    trackMethod(model, key, value);\r\n                });\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Delegates call to 'observe' method but\r\n         * with a predefined 'useAccessors' flag.\r\n         *\r\n         * @param {(String|Array|Object)} properties - List of observable properties.\r\n         * @returns {Element} Chainable.\r\n         */\r\n        track: function (properties) {\r\n            this.observe(true, properties);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if specified property is tracked.\r\n         *\r\n         * @param {String} property - Property to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isTracked: function (property) {\r\n            return ko.es5.isTracked(this, property);\r\n        },\r\n\r\n        /**\r\n         * Invokes subscribers for the provided changes.\r\n         *\r\n         * @param {Object} diffs - Object with changes descriptions.\r\n         * @returns {Element} Chainable.\r\n         */\r\n        _notifyChanges: function (diffs) {\r\n            diffs.changes.forEach(function (change) {\r\n                this.trigger(change.path, change.value, change);\r\n            }, this);\r\n\r\n            _.each(diffs.containers, function (changes, name) {\r\n                var value = utils.nested(this, name);\r\n\r\n                this.trigger(name, value, changes);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Extracts all stored data and sets it to element.\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        restore: function () {\r\n            var ns = this.storageConfig.namespace,\r\n                storage = this.storage();\r\n\r\n            if (storage) {\r\n                utils.extend(this, storage.get(ns));\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Stores value of the specified property in components' storage module.\r\n         *\r\n         * @param {String} property\r\n         * @param {*} [data=this[property]]\r\n         * @returns {Element} Chainable.\r\n         */\r\n        store: function (property, data) {\r\n            var ns = this.storageConfig.namespace,\r\n                path = utils.fullPath(ns, property);\r\n\r\n            if (arguments.length < 2) {\r\n                data = this.get(property);\r\n            }\r\n\r\n            this.storage('set', path, data);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Extracts specified property from storage.\r\n         *\r\n         * @param {String} [property] - Name of the property\r\n         *      to be extracted. If not specified then all of the\r\n         *      stored will be returned.\r\n         * @returns {*}\r\n         */\r\n        getStored: function (property) {\r\n            var ns = this.storageConfig.namespace,\r\n                path = utils.fullPath(ns, property),\r\n                storage = this.storage(),\r\n                data;\r\n\r\n            if (storage) {\r\n                data = storage.get(path);\r\n            }\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Removes stored property.\r\n         *\r\n         * @param {String} property - Property to be removed from storage.\r\n         * @returns {Element} Chainable.\r\n         */\r\n        removeStored: function (property) {\r\n            var ns = this.storageConfig.namespace,\r\n                path = utils.fullPath(ns, property);\r\n\r\n            this.storage('remove', path);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Destroys current instance along with all of its' children.\r\n         * @param {Boolean} skipUpdate - skip collection update when element to be destroyed.\r\n         */\r\n        destroy: function (skipUpdate) {\r\n            this._dropHandlers()\r\n                ._clearRefs(skipUpdate);\r\n        },\r\n\r\n        /**\r\n         * Removes events listeners.\r\n         * @private\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        _dropHandlers: function () {\r\n            this.off();\r\n\r\n            if (_.isFunction(this.source)) {\r\n                this.source().off(this.name);\r\n            } else if (this.source) {\r\n                this.source.off(this.name);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes all references to current instance and\r\n         * calls 'destroy' method on all of its' children.\r\n         * @private\r\n         * @param {Boolean} skipUpdate - skip collection update when element to be destroyed.\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        _clearRefs: function (skipUpdate) {\r\n            registry.remove(this.name);\r\n\r\n            this.containers.forEach(function (parent) {\r\n                parent.removeChild(this, skipUpdate);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Overrides 'EventsBus.trigger' method to implement events bubbling.\r\n         *\r\n         * @param {...*} arguments - Any number of arguments that should be passed to the events' handler.\r\n         * @returns {Boolean} False if event bubbling was canceled.\r\n         */\r\n        bubble: function () {\r\n            var args = _.toArray(arguments),\r\n                bubble = this.trigger.apply(this, args),\r\n                result;\r\n\r\n            if (!bubble) {\r\n                return false;\r\n            }\r\n\r\n            this.containers.forEach(function (parent) {\r\n                result = parent.bubble.apply(parent, args);\r\n\r\n                if (result === false) {\r\n                    bubble = false;\r\n                }\r\n            });\r\n\r\n            return !!bubble;\r\n        },\r\n\r\n        /**\r\n         * Callback which fires when property under uniqueNs has changed.\r\n         */\r\n        onUniqueUpdate: function (name) {\r\n            var active = name === this.name,\r\n                property = this.uniqueProp;\r\n\r\n            this[property](active);\r\n        },\r\n\r\n        /**\r\n         * Clean data form data source.\r\n         *\r\n         * @returns {Element}\r\n         */\r\n        cleanData: function () {\r\n            if (this.source && this.source.componentType === 'dataSource') {\r\n                if (this.elems) {\r\n                    _.each(this.elems(), function (val) {\r\n                        val.cleanData();\r\n                    });\r\n                } else {\r\n                    this.source.remove(this.dataScope);\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Fallback data.\r\n         */\r\n        cacheData: function () {\r\n            this.cachedComponent = utils.copy(this);\r\n        },\r\n\r\n        /**\r\n         * Update configuration in component.\r\n         *\r\n         * @param {*} oldValue\r\n         * @param {*} newValue\r\n         * @param {String} path - path to value.\r\n         * @returns {Element}\r\n         */\r\n        updateConfig: function (oldValue, newValue, path) {\r\n            var names = path.split('.'),\r\n                index = _.lastIndexOf(names, 'config') + 1;\r\n\r\n            names = names.splice(index, names.length - index).join('.');\r\n            this.set(names, newValue);\r\n\r\n            return this;\r\n        }\r\n    }, Events, links);\r\n\r\n    return Class.extend(Element);\r\n});\r\n","Magento_Ui/js/lib/core/element/links.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiRegistry'\r\n], function (ko, _, utils, registry) {\r\n    'use strict';\r\n\r\n    function parseData(placeholder, data, direction) {\r\n        if (typeof data !== 'string') {\r\n            return false;\r\n        }\r\n\r\n        data = data.split(':');\r\n\r\n        if (!data[0]) {\r\n            return false;\r\n        }\r\n\r\n        if (!data[1]) {\r\n            data[1] = data[0];\r\n            data[0] = placeholder;\r\n        }\r\n\r\n        return {\r\n            target: data[0],\r\n            property: data[1],\r\n            direction: direction\r\n        };\r\n    }\r\n\r\n    function notEmpty(value) {\r\n        return typeof value !== 'undefined' && value != null;\r\n    }\r\n\r\n    function updateValue(data, owner, target, value) {\r\n        var component = target.component,\r\n            property = target.property,\r\n            linked = data.linked;\r\n\r\n        if (data.mute) {\r\n            return;\r\n        }\r\n\r\n        if (linked) {\r\n            linked.mute = true;\r\n        }\r\n\r\n        if (owner.component !== target.component) {\r\n            value = data.inversionValue ? !utils.copy(value) : utils.copy(value);\r\n        }\r\n\r\n        component.set(property, value, owner);\r\n\r\n        if (linked) {\r\n            linked.mute = false;\r\n        }\r\n    }\r\n\r\n    function getValue(owner) {\r\n        var component = owner.component,\r\n            property = owner.property;\r\n\r\n        return component.get(property);\r\n    }\r\n\r\n    function form(ownerComponent, targetComponent, ownerProp, targetProp, direction) {\r\n        var result,\r\n            tmp;\r\n\r\n        result = {\r\n            owner: {\r\n                component: ownerComponent,\r\n                property: ownerProp\r\n            },\r\n            target: {\r\n                component: targetComponent,\r\n                property: targetProp\r\n            }\r\n        };\r\n\r\n        if (direction === 'exports') {\r\n            tmp = result.owner;\r\n            result.owner = result.target;\r\n            result.target = tmp;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function setLinked(map, data) {\r\n        var match;\r\n\r\n        if (!map) {\r\n            return;\r\n        }\r\n\r\n        match = _.findWhere(map, {\r\n            linked: false,\r\n            target: data.target,\r\n            property: data.property\r\n        });\r\n\r\n        if (match) {\r\n            match.linked = data;\r\n            data.linked = match;\r\n        }\r\n    }\r\n\r\n    function setData(maps, property, data) {\r\n        var direction   = data.direction,\r\n            map         = maps[direction];\r\n\r\n        data.linked = false;\r\n\r\n        (map[property] = map[property] || []).push(data);\r\n\r\n        direction = direction === 'imports' ? 'exports' : 'imports';\r\n\r\n        setLinked(maps[direction][property], data);\r\n    }\r\n\r\n    function setLink(target, owner, data, property, immediate) {\r\n        var direction = data.direction,\r\n            formated = form(target, owner, data.property, property, direction),\r\n            callback,\r\n            value;\r\n\r\n        owner = formated.owner;\r\n        target = formated.target;\r\n\r\n        callback = updateValue.bind(null, data, owner, target);\r\n\r\n        owner.component.on(owner.property, callback, target.component.name);\r\n\r\n        if (immediate) {\r\n            value = getValue(owner);\r\n\r\n            if (notEmpty(value)) {\r\n                updateValue(data, owner, target, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    function transfer(owner, data) {\r\n        var args = _.toArray(arguments);\r\n\r\n        if (data.target.substr(0,1) === '!') {\r\n            data.target = data.target.substr(1);\r\n            data.inversionValue = true;\r\n        }\r\n\r\n        if (owner.name === data.target) {\r\n            args.unshift(owner);\r\n\r\n            setLink.apply(null, args);\r\n        } else {\r\n            registry.get(data.target, function (target) {\r\n                args.unshift(target);\r\n\r\n                setLink.apply(null, args);\r\n            });\r\n        }\r\n    }\r\n\r\n    return {\r\n        setListeners: function (listeners) {\r\n            var owner = this,\r\n                data;\r\n\r\n            _.each(listeners, function (callbacks, sources) {\r\n                sources = sources.split(' ');\r\n                callbacks = callbacks.split(' ');\r\n\r\n                sources.forEach(function (target) {\r\n                    callbacks.forEach(function (callback) {\r\n                        data = parseData(owner.name, target, 'imports');\r\n\r\n                        if (data) {\r\n                            setData(owner.maps, callback, data);\r\n                            transfer(owner, data, callback);\r\n                        }\r\n                    });\r\n                });\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        setLinks: function (links, direction) {\r\n            var owner = this,\r\n                property,\r\n                data;\r\n\r\n            for (property in links) {\r\n                if (links.hasOwnProperty(property)) {\r\n                    data = parseData(owner.name, links[property], direction);\r\n\r\n                    if (data) {\r\n                        setData(owner.maps, property, data);\r\n                        transfer(owner, data, property, true);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return this;\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/core/storage/local.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    'mageUtils',\r\n    'uiEvents'\r\n], function (_, registry, utils, EventsBus) {\r\n    'use strict';\r\n\r\n    var root = 'appData',\r\n        localStorage = window.localStorage,\r\n        hasSupport,\r\n        storage;\r\n\r\n    /**\r\n     * Flag which indicates whether localStorage is supported.\r\n     */\r\n    hasSupport = (function () {\r\n        var key = '_storageSupported';\r\n\r\n        try {\r\n            localStorage.setItem(key, 'true');\r\n\r\n            if (localStorage.getItem(key) === 'true') {\r\n                localStorage.removeItem(key);\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    })();\r\n\r\n    if (!hasSupport) {\r\n        localStorage = {\r\n            _data: {},\r\n\r\n            /**\r\n             * Sets value of the specified item.\r\n             *\r\n             * @param {String} key - Key of the property.\r\n             * @param {*} value - Properties' value.\r\n             */\r\n            setItem: function (key, value) {\r\n                this._data[key] = value + '';\r\n            },\r\n\r\n            /**\r\n             * Retrieves specfied item.\r\n             *\r\n             * @param {String} key - Key of the property to be retrieved.\r\n             */\r\n            getItem: function (key) {\r\n                return this._data[key];\r\n            },\r\n\r\n            /**\r\n             * Removes specfied item.\r\n             *\r\n             * @param {String} key - Key of the property to be removed.\r\n             */\r\n            removeItem: function (key) {\r\n                delete this._data[key];\r\n            },\r\n\r\n            /**\r\n             * Removes all items.\r\n             */\r\n            clear: function () {\r\n                this._data = {};\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Extracts and parses data stored in localStorage by the\r\n     * key specified in 'root' varaible.\r\n     *\r\n     * @returns {Object}\r\n     */\r\n    function getRoot() {\r\n        var data = localStorage.getItem(root);\r\n\r\n        return !_.isNull(data) ? JSON.parse(data) : {};\r\n    }\r\n\r\n    /**\r\n     * Writes provided data to the localStorage.\r\n     *\r\n     * @param {*} data - Data to be stored.\r\n     */\r\n    function setRoot(data) {\r\n        localStorage.setItem(root, JSON.stringify(data));\r\n    }\r\n\r\n    /**\r\n     * Provides methods to work with a localStorage\r\n     * as a single nested structure.\r\n     */\r\n    storage = _.extend({\r\n\r\n        /**\r\n         * Retrieves value of the specified property.\r\n         *\r\n         * @param {String} path - Path to the property.\r\n         *\r\n         * @example Retrieveing data.\r\n         *      localStoarge =>\r\n         *          'appData' => '\r\n         *              \"one\": {\"two\": \"three\"}\r\n         *          '\r\n         *      storage.get('one.two')\r\n         *      => \"three\"\r\n         *\r\n         *      storage.get('one')\r\n         *      => {\"two\": \"three\"}\r\n         */\r\n        get: function (path) {\r\n            var data = getRoot();\r\n\r\n            return utils.nested(data, path);\r\n        },\r\n\r\n        /**\r\n         * Sets specified data to the localStorage.\r\n         *\r\n         * @param {String} path - Path of the property.\r\n         * @param {*} value - Value of the property.\r\n         *\r\n         * @example Setting data.\r\n         *      storage.set('one.two', 'four');\r\n         *      => localStoarge =>\r\n         *          'appData' => '\r\n         *              \"one\": {\"two\": \"four\"}\r\n         *          '\r\n         */\r\n        set: function (path, value) {\r\n            var data = getRoot();\r\n\r\n            utils.nested(data, path, value);\r\n\r\n            setRoot(data);\r\n        },\r\n\r\n        /**\r\n         * Removes specified data from the localStorage.\r\n         *\r\n         * @param {String} path - Path to the property that should be removed.\r\n         *\r\n         * @example Removing data.\r\n         *      storage.remove('one.two', 'four');\r\n         *      => localStoarge =>\r\n         *          'appData' => '\r\n         *              \"one\": {}\r\n         *          '\r\n         */\r\n        remove: function (path) {\r\n            var data = getRoot();\r\n\r\n            utils.nestedRemove(data, path);\r\n\r\n            setRoot(data);\r\n        }\r\n    }, EventsBus);\r\n\r\n    registry.set('localStorage', storage);\r\n\r\n    return storage;\r\n});\r\n","Magento_Ui/js/lib/knockout/bootstrap.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/** Loads all available knockout bindings, sets custom template engine, initializes knockout on page */\r\n\r\ndefine([\r\n    'ko',\r\n    './template/engine',\r\n    'knockoutjs/knockout-es5',\r\n    './bindings/bootstrap',\r\n    './extender/observable_array',\r\n    './extender/bound-nodes',\r\n    'domReady!'\r\n], function (ko, templateEngine) {\r\n    'use strict';\r\n\r\n    ko.uid = 0;\r\n\r\n    ko.setTemplateEngine(templateEngine);\r\n    ko.applyBindings();\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/after-render.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    '../template/renderer'\r\n], function (ko, renderer) {\r\n    'use strict';\r\n\r\n    ko.bindingHandlers.afterRender = {\r\n\r\n        /**\r\n         * Binding init callback.\r\n         */\r\n        init: function (element, valueAccessor, allBindings, viewModel) {\r\n            var callback = valueAccessor();\r\n\r\n            if (typeof callback === 'function') {\r\n                callback.call(viewModel, element, viewModel);\r\n            }\r\n        }\r\n    };\r\n\r\n    renderer.addAttribute('afterRender');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/autoselect.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    '../template/renderer'\r\n], function (ko, $, renderer) {\r\n    'use strict';\r\n\r\n    /**\r\n     * 'Focus' event handler.\r\n     *\r\n     * @param {EventObject} e\r\n     */\r\n    function onFocus(e) {\r\n        e.target.select();\r\n    }\r\n\r\n    ko.bindingHandlers.autoselect = {\r\n\r\n        /**\r\n         * Adds event handler which automatically\r\n         * selects inputs' element text when field gets focused.\r\n         */\r\n        init: function (element, valueAccessor) {\r\n            var enabled = ko.unwrap(valueAccessor());\r\n\r\n            if (enabled !== false) {\r\n                $(element).on('focus', onFocus);\r\n            }\r\n        }\r\n    };\r\n\r\n    renderer.addAttribute('autoselect');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/bind-html.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'mage/apply/main',\r\n    '../template/renderer'\r\n], function (ko, _, mage, renderer) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Set html to node element.\r\n     *\r\n     * @param {HTMLElement} el - Element to apply bindings to.\r\n     * @param {Function} html - Observable html content.\r\n     */\r\n    function setHtml(el, html) {\r\n        ko.utils.emptyDomNode(el);\r\n        html = ko.utils.unwrapObservable(html);\r\n\r\n        if (!_.isNull(html) && !_.isUndefined(html)) {\r\n            if (!_.isString(html)) {\r\n                html = html.toString();\r\n            }\r\n\r\n            el.innerHTML = html;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Apply bindings and call magento attributes parser.\r\n     *\r\n     * @param {HTMLElement} el - Element to apply bindings to.\r\n     * @param {ko.bindingContext} ctx - Instance of ko.bindingContext, passed to binding initially.\r\n     */\r\n    function applyComponents(el, ctx) {\r\n        ko.utils.arrayForEach(el.childNodes, ko.cleanNode);\r\n        ko.applyBindingsToDescendants(ctx, el);\r\n        mage.apply();\r\n    }\r\n\r\n    ko.bindingHandlers.bindHtml = {\r\n        /**\r\n         * Scope binding's init method.\r\n         *\r\n         * @returns {Object} - Knockout declaration for it to let binding control descendants.\r\n         */\r\n        init: function () {\r\n            return {\r\n                controlsDescendantBindings: true\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Reads params passed to binding.\r\n         * Set html to node element, apply bindings and call magento attributes parser.\r\n         *\r\n         * @param {HTMLElement} el - Element to apply bindings to.\r\n         * @param {Function} valueAccessor - Function that returns value, passed to binding.\r\n         * @param {Object} allBindings - Object, which represents all bindings applied to element.\r\n         * @param {Object} viewModel - Object, which represents view model binded to el.\r\n         * @param {ko.bindingContext} bindingContext - Instance of ko.bindingContext, passed to binding initially.\r\n         */\r\n        update: function (el, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            setHtml(el, valueAccessor());\r\n            applyComponents(el, bindingContext);\r\n        }\r\n    };\r\n\r\n    renderer.addAttribute('bindHtml');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/bootstrap.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine(function (require) {\r\n    'use strict';\r\n\r\n    var renderer = require('../template/renderer');\r\n\r\n    renderer.addAttribute('repeat', renderer.handlers.wrapAttribute);\r\n\r\n    renderer.addAttribute('outerfasteach', {\r\n        binding: 'fastForEach',\r\n        handler: renderer.handlers.wrapAttribute\r\n    });\r\n\r\n    renderer\r\n        .addNode('repeat')\r\n        .addNode('fastForEach');\r\n\r\n    return {\r\n        resizable:      require('./resizable'),\r\n        i18n:           require('./i18n'),\r\n        scope:          require('./scope'),\r\n        range:          require('./range'),\r\n        mageInit:       require('./mage-init'),\r\n        keyboard:       require('./keyboard'),\r\n        optgroup:       require('./optgroup'),\r\n        aferRender:     require('./after-render'),\r\n        autoselect:     require('./autoselect'),\r\n        datepicker:     require('./datepicker'),\r\n        outerClick:     require('./outer_click'),\r\n        fadeVisible:    require('./fadeVisible'),\r\n        collapsible:    require('./collapsible'),\r\n        staticChecked:  require('./staticChecked'),\r\n        simpleChecked:  require('./simple-checked'),\r\n        bindHtml:       require('./bind-html'),\r\n        tooltip:        require('./tooltip'),\r\n        repeat:         require('knockoutjs/knockout-repeat'),\r\n        fastForEach:    require('knockoutjs/knockout-fast-foreach')\r\n    };\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/collapsible.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'underscore',\r\n    '../template/renderer'\r\n], function (ko, $, _, renderer) {\r\n    'use strict';\r\n\r\n    var collapsible,\r\n        defaults;\r\n\r\n    defaults = {\r\n        closeOnOuter: true,\r\n        onTarget: false,\r\n        openClass: '_active',\r\n        as: '$collapsible'\r\n    };\r\n\r\n    collapsible = {\r\n\r\n        /**\r\n         * Sets 'opened' property to true.\r\n         */\r\n        open: function () {\r\n            this.opened(true);\r\n        },\r\n\r\n        /**\r\n         * Sets 'opened' property to false.\r\n         */\r\n        close: function () {\r\n            this.opened(false);\r\n        },\r\n\r\n        /**\r\n         * Toggles value of the 'opened' property.\r\n         */\r\n        toggle: function () {\r\n            this.opened(!this.opened());\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Document click handler which in case if event target is not\r\n     * a descendant of provided container element, closes collapsible model.\r\n     *\r\n     * @param {HTMLElement} container\r\n     * @param {Object} model\r\n     * @param {EventObject} e\r\n     */\r\n    function onOuterClick(container, model, e) {\r\n        var target = e.target;\r\n\r\n        if (target !== container && !container.contains(target)) {\r\n            model.close();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates 'css' binding which toggles\r\n     * class specified in 'name' parameter.\r\n     *\r\n     * @param {Object} model\r\n     * @param {String} name\r\n     * @returns {Object}\r\n     */\r\n    function getClassBinding(model, name) {\r\n        var binding = {};\r\n\r\n        binding[name] = model.opened;\r\n\r\n        return {\r\n            css: binding\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Prepares configuration for the binding based\r\n     * on a default properties and provided options.\r\n     *\r\n     * @param {Object} [options={}]\r\n     * @returns {Object} Complete instance configuration.\r\n     */\r\n    function buildConfig(options) {\r\n        if (typeof options !== 'object') {\r\n            options = {};\r\n        }\r\n\r\n        return _.extend({}, defaults, options);\r\n    }\r\n\r\n    ko.bindingHandlers.collapsible = {\r\n\r\n        /**\r\n         * Initializes 'collapsible' binding.\r\n         */\r\n        init: function (element, valueAccessor, allBindings, viewModel, bindingCtx) {\r\n            var $collapsible = Object.create(collapsible),\r\n                config = buildConfig(valueAccessor()),\r\n                outerClick,\r\n                bindings;\r\n\r\n            _.bindAll($collapsible, 'open', 'close', 'toggle');\r\n\r\n            $collapsible.opened = ko.observable(!!config.opened);\r\n\r\n            bindingCtx[config.as] = $collapsible;\r\n\r\n            if (config.closeOnOuter) {\r\n                outerClick = onOuterClick.bind(null, element, $collapsible);\r\n\r\n                $(document).on('click', outerClick);\r\n\r\n                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\r\n                    $(document).off('click', outerClick);\r\n                });\r\n            }\r\n\r\n            if (config.openClass) {\r\n                bindings = getClassBinding($collapsible, config.openClass);\r\n\r\n                ko.applyBindingsToNode(element, bindings, bindingCtx);\r\n            }\r\n\r\n            if (config.onTarget) {\r\n                $(element).on('click', $collapsible.toggle);\r\n            }\r\n\r\n            if (viewModel && _.isFunction(viewModel.on)) {\r\n                viewModel.on({\r\n                    close:          $collapsible.close,\r\n                    open:           $collapsible.open,\r\n                    toggleOpened:   $collapsible.toggle\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    ko.bindingHandlers.closeCollapsible = {\r\n\r\n        /**\r\n         * Creates listener for the click event on provided DOM element,\r\n         * which closes associated with it collapsible model.\r\n         */\r\n        init: function (element, valueAccessor, allBindings, viewModel, bindingCtx) {\r\n            var name = valueAccessor() || defaults.as,\r\n                $collapsible = bindingCtx[name];\r\n\r\n            if ($collapsible) {\r\n                $(element).on('click', $collapsible.close);\r\n            }\r\n        }\r\n    };\r\n\r\n    ko.bindingHandlers.openCollapsible = {\r\n\r\n        /**\r\n         * Creates listener for the click event on provided DOM element,\r\n         * which opens associated with it collapsible model.\r\n         */\r\n        init: function (element, valueAccessor, allBindings, viewModel, bindingCtx) {\r\n            var name = valueAccessor() || defaults.as,\r\n                $collapsible = bindingCtx[name];\r\n\r\n            if ($collapsible) {\r\n                $(element).on('click', $collapsible.open);\r\n            }\r\n        }\r\n    };\r\n\r\n    ko.bindingHandlers.toggleCollapsible = {\r\n\r\n        /**\r\n         * Creates listener for the click event on provided DOM element,\r\n         * which toggles associated with it collapsible model.\r\n         */\r\n        init: function (element, valueAccessor, allBindings, viewModel, bindingCtx) {\r\n            var name = valueAccessor() || defaults.as,\r\n                $collapsible = bindingCtx[name];\r\n\r\n            if ($collapsible) {\r\n                $(element).on('click', $collapsible.toggle);\r\n            }\r\n        }\r\n    };\r\n\r\n    renderer\r\n        .addAttribute('collapsible')\r\n        .addAttribute('openCollapsible')\r\n        .addAttribute('closeCollapsible')\r\n        .addAttribute('toggleCollapsible');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/datepicker.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/** Creates datepicker binding and registers in to ko.bindingHandlers object */\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'jquery',\r\n    'mage/translate',\r\n    'mage/calendar'\r\n], function (ko, _, $, $t) {\r\n    'use strict';\r\n\r\n    var defaults = {\r\n        dateFormat: 'mm\\/dd\\/yyyy',\r\n        showsTime: false,\r\n        timeFormat: null,\r\n        buttonImage: null,\r\n        buttonImageOnly: null,\r\n        buttonText: $t('Select Date')\r\n    };\r\n\r\n    ko.bindingHandlers.datepicker = {\r\n        /**\r\n         * Initializes calendar widget on element and stores it's value to observable property.\r\n         * Datepicker binding takes either observable property or object\r\n         *  { storage: {ko.observable}, options: {Object} }.\r\n         * For more info about options take a look at \"mage/calendar\" and jquery.ui.datepicker widget.\r\n         * @param {HTMLElement} el - Element, that binding is applied to\r\n         * @param {Function} valueAccessor - Function that returns value, passed to binding\r\n         */\r\n        init: function (el, valueAccessor) {\r\n            var config = valueAccessor(),\r\n                observable,\r\n                options = {};\r\n\r\n            _.extend(options, defaults);\r\n\r\n            if (typeof config === 'object') {\r\n                observable = config.storage;\r\n\r\n                _.extend(options, config.options);\r\n            } else {\r\n                observable = config;\r\n            }\r\n\r\n            $(el).calendar(options);\r\n            observable() && $(el).datepicker('setDate', observable());\r\n            $(el).blur();\r\n\r\n            ko.utils.registerEventHandler(el, 'change', function () {\r\n                observable(this.value);\r\n            });\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/fadeVisible.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'ko',\r\n], function($, ko) {\r\n    ko.bindingHandlers.fadeVisible = {\r\n        init: function (element, valueAccessor) {\r\n            // Initially set the element to be instantly visible/hidden depending on the value\r\n            var value = valueAccessor();\r\n            $(element).toggle(ko.unwrap(value)); // Use \"unwrapObservable\" so we can handle values that may or may not be observable\r\n        },\r\n        update: function (element, valueAccessor) {\r\n            // Whenever the value subsequently changes, slowly fade the element in or out\r\n            var value = valueAccessor();\r\n            ko.unwrap(value) ? $(element).fadeIn() : $(element).fadeOut();\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/i18n.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'ko',\r\n    'module',\r\n    '../template/renderer',\r\n    'mage/translate'\r\n], function ($, ko, module, renderer) {\r\n    'use strict';\r\n\r\n    var locations = {\r\n            'legend': 'Caption for the fieldset element',\r\n            'label': 'Label for an input element.',\r\n            'button': 'Push button',\r\n            'a': 'Link label',\r\n            'b': 'Bold text',\r\n            'strong': 'Strong emphasized text',\r\n            'i': 'Italic text',\r\n            'em': 'Emphasized text',\r\n            'u': 'Underlined text',\r\n            'sup': 'Superscript text',\r\n            'sub': 'Subscript text',\r\n            'span': 'Span element',\r\n            'small': 'Smaller text',\r\n            'big': 'Bigger text',\r\n            'address': 'Contact information',\r\n            'blockquote': 'Long quotation',\r\n            'q': 'Short quotation',\r\n            'cite': 'Citation',\r\n            'caption': 'Table caption',\r\n            'abbr': 'Abbreviated phrase',\r\n            'acronym': 'An acronym',\r\n            'var': 'Variable part of a text',\r\n            'dfn': 'Term',\r\n            'strike': 'Strikethrough text',\r\n            'del': 'Deleted text',\r\n            'ins': 'Inserted text',\r\n            'h1': 'Heading level 1',\r\n            'h2': 'Heading level 2',\r\n            'h3': 'Heading level 3',\r\n            'h4': 'Heading level 4',\r\n            'h5': 'Heading level 5',\r\n            'h6': 'Heading level 6',\r\n            'center': 'Centered text',\r\n            'select': 'List options',\r\n            'img': 'Image',\r\n            'input': 'Form element'\r\n        },\r\n\r\n        /**\r\n         * Generates [data-translate] attribute's value\r\n         * @param {Object} translationData\r\n         * @param {String} location\r\n         */\r\n        composeTranslateAttr = function (translationData, location) {\r\n            var obj = [{\r\n                'shown': translationData.shown,\r\n                'translated': translationData.translated,\r\n                'original': translationData.original,\r\n                'location': locations[location] || 'Text'\r\n            }];\r\n\r\n            return JSON.stringify(obj);\r\n        },\r\n\r\n        /**\r\n         * Sets text for the element\r\n         * @param {Object} el\r\n         * @param {String} text\r\n         */\r\n        setText = function (el, text) {\r\n            $(el).text(text);\r\n        },\r\n\r\n        /**\r\n         * Sets [data-translate] attribute for the element\r\n         * @param {Object} el - The element which is binded\r\n         * @param {String} original - The original value of the element\r\n         */\r\n        setTranslateProp = function (el, original) {\r\n            var location = $(el).prop('tagName').toLowerCase(),\r\n                translated = $.mage.__(original),\r\n                translationData = {\r\n                    shown: translated,\r\n                    translated: translated,\r\n                    original: original\r\n                },\r\n                translateAttr = composeTranslateAttr(translationData, location);\r\n\r\n            $(el).attr('data-translate', translateAttr);\r\n\r\n            setText(el, translationData.shown);\r\n        },\r\n\r\n        /**\r\n         * Checks if node represents ko virtual node (nodeType === 8, nodeName === '#comment').\r\n         *\r\n         * @param {HTMLElement} node\r\n         * @returns {Boolean}\r\n         */\r\n        isVirtualElement = function (node) {\r\n            return node.nodeType === 8;\r\n        },\r\n\r\n        /**\r\n        * Checks if it's real DOM element\r\n        * in case of virtual element, returns span wrapper\r\n        * @param {Object} el\r\n        * @param {bool} isUpdate\r\n        * @return {Object} el\r\n        */\r\n        getRealElement = function (el, isUpdate) {\r\n            if (isVirtualElement(el)) {\r\n                if (isUpdate) {\r\n                    return $(el).next('span');\r\n                }\r\n\r\n                return $('<span/>').insertAfter(el);\r\n            }\r\n\r\n            return el;\r\n        },\r\n\r\n        /**\r\n         * execute i18n binding\r\n         * @param {Object} element\r\n         * @param {Function} valueAccessor\r\n         * @param {bool} isUpdate\r\n         */\r\n        execute = function (element, valueAccessor, isUpdate) {\r\n            var original = ko.unwrap(valueAccessor() || ''),\r\n                el = getRealElement(element, isUpdate),\r\n                inlineTranslation = (module.config() || {}).inlineTranslation;\r\n\r\n            if (inlineTranslation) {\r\n                setTranslateProp(el, original);\r\n            } else {\r\n                setText(el, $.mage.__(original));\r\n            }\r\n        };\r\n\r\n    /**\r\n     * i18n binding\r\n     * @property {Function}  init\r\n     * @property {Function}  update\r\n     */\r\n    ko.bindingHandlers.i18n = {\r\n\r\n        /**\r\n         * init i18n binding\r\n         * @param {Object} element\r\n         * @param {Function} valueAccessor\r\n         */\r\n        init: function (element, valueAccessor) {\r\n            execute(element, valueAccessor);\r\n        },\r\n\r\n        /**\r\n         * update i18n binding\r\n         * @param {Object} element\r\n         * @param {Function} valueAccessor\r\n         */\r\n        update: function (element, valueAccessor) {\r\n            execute(element, valueAccessor, true);\r\n        }\r\n    };\r\n\r\n    ko.virtualElements.allowedBindings.i18n = true;\r\n\r\n    renderer\r\n        .addNode('translate', {\r\n            binding: 'i18n'\r\n        })\r\n        .addAttribute('translate', {\r\n            binding: 'i18n'\r\n        });\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/keyboard.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    '../template/renderer'\r\n], function (ko, renderer) {\r\n    'use strict';\r\n\r\n    ko.bindingHandlers.keyboard = {\r\n\r\n        /**\r\n         * Attaches keypress handlers to element\r\n         * @param {HTMLElement} el - Element, that binding is applied to\r\n         * @param {Function} valueAccessor - Function that returns value, passed to binding\r\n         * @param  {Object} allBindings - all bindings object\r\n         * @param  {Object} viewModel - reference to viewmodel\r\n         */\r\n        init: function (el, valueAccessor, allBindings, viewModel) {\r\n            var map = valueAccessor();\r\n\r\n            ko.utils.registerEventHandler(el, 'keyup', function (e) {\r\n                var callback = map[e.keyCode];\r\n\r\n                if (callback) {\r\n                    return callback.call(viewModel, e);\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    renderer.addAttribute('keyboard');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/mage-init.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'mage/apply/main'\r\n], function (ko, _, mage) {\r\n    'use strict';\r\n\r\n    ko.bindingHandlers.mageInit = {\r\n        init: function (el, valueAccessor) {\r\n            var data = valueAccessor();\r\n\r\n            _.each(data, function (config, component) {\r\n                mage.applyFor(el, config, component);\r\n            });\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/optgroup.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'mageUtils'\r\n    ], function (ko, utils) {\r\n    'use strict';\r\n\r\n    var captionPlaceholder = {},\r\n        optgroupTmpl = '<optgroup label=\"${ $.label }\"></optgroup>',\r\n        nbspRe = /&nbsp;/g,\r\n        optionsText,\r\n        optionsValue,\r\n        optionTitle;\r\n\r\n    ko.bindingHandlers.optgroup = {\r\n        /**\r\n         * @param {*} element\r\n         * @returns {Object}\r\n         */\r\n        'init': function (element) {\r\n            if (ko.utils.tagNameLower(element) !== 'select') {\r\n                throw new Error('options binding applies only to SELECT elements');\r\n            }\r\n\r\n            // Remove all existing <option>s.\r\n            while (element.length > 0) {\r\n                element.remove(0);\r\n            }\r\n\r\n            // Ensures that the binding processor doesn't try to bind the options\r\n            return {\r\n                'controlsDescendantBindings': true\r\n            };\r\n        },\r\n\r\n        /**\r\n         * @param {*} element\r\n         * @param {*} valueAccessor\r\n         * @param {*} allBindings\r\n         */\r\n        'update': function (element, valueAccessor, allBindings) {\r\n            var selectWasPreviouslyEmpty = element.length == 0,\r\n                previousScrollTop = (!selectWasPreviouslyEmpty && element.multiple) ? element.scrollTop : null,\r\n                includeDestroyed = allBindings.get('optionsIncludeDestroyed'),\r\n                arrayToDomNodeChildrenOptions = {},\r\n                captionValue,\r\n                unwrappedArray = ko.utils.unwrapObservable(valueAccessor()),\r\n                filteredArray,\r\n                previousSelectedValues,\r\n                itemUpdate = false,\r\n                callback = setSelectionCallback,\r\n                nestedOptionsLevel = -1,\r\n                i, l;\r\n\r\n            optionsText = ko.utils.unwrapObservable(allBindings.get('optionsText')) || 'text';\r\n            optionsValue = ko.utils.unwrapObservable(allBindings.get('optionsValue')) || 'value';\r\n            optionTitle = optionsText + 'title';\r\n\r\n            if (element.multiple) {\r\n                previousSelectedValues = ko.utils.arrayMap(selectedOptions(), ko.selectExtensions.readValue);\r\n            } else {\r\n                previousSelectedValues = element.selectedIndex >= 0 ? [ko.selectExtensions.readValue(element.options[element.selectedIndex])] : [];\r\n            }\r\n\r\n            if (unwrappedArray) {\r\n                if (typeof unwrappedArray.length === 'undefined') { // Coerce single value into array\r\n                    unwrappedArray = [unwrappedArray];\r\n                }\r\n\r\n                // Filter out any entries marked as destroyed\r\n                filteredArray = ko.utils.arrayFilter(unwrappedArray, function (item) {\r\n                    if (item && !item.label) {\r\n                        return false;\r\n                    }\r\n\r\n                    return includeDestroyed || item === undefined || item === null || !ko.utils.unwrapObservable(item._destroy);\r\n                });\r\n                filteredArray.map(recursivePathBuilder, null);\r\n            }\r\n\r\n            /**\r\n             *\r\n             * @param {*} option\r\n             */\r\n            arrayToDomNodeChildrenOptions.beforeRemove = function (option) {\r\n                element.removeChild(option);\r\n            };\r\n\r\n            if (allBindings.has('optionsAfterRender')) {\r\n\r\n                /**\r\n                 * @param {*} arrayEntry\r\n                 * @param {*} newOptions\r\n                 */\r\n                callback = function (arrayEntry, newOptions) {\r\n                    setSelectionCallback(arrayEntry, newOptions);\r\n                    ko.dependencyDetection.ignore(allBindings.get('optionsAfterRender'), null, [newOptions[0], arrayEntry !== captionPlaceholder ? arrayEntry : undefined]);\r\n                }\r\n            }\r\n\r\n            filteredArray = formatOptions(filteredArray);\r\n            ko.utils.setDomNodeChildrenFromArrayMapping(element, filteredArray, optionNodeFromArray, arrayToDomNodeChildrenOptions, callback);\r\n\r\n            ko.dependencyDetection.ignore(function () {\r\n                var selectionChanged;\r\n\r\n                if (allBindings.get('valueAllowUnset') && allBindings.has('value')) {\r\n                    // The model value is authoritative, so make sure its value is the one selected\r\n                    ko.selectExtensions.writeValue(element, ko.utils.unwrapObservable(allBindings.get('value')), true /* allowUnset */);\r\n                } else {\r\n                    // Determine if the selection has changed as a result of updating the options list\r\n                    if (element.multiple) {\r\n                        // For a multiple-select box, compare the new selection count to the previous one\r\n                        // But if nothing was selected before, the selection can't have changed\r\n                        selectionChanged = previousSelectedValues.length && selectedOptions().length < previousSelectedValues.length;\r\n                    } else {\r\n                        // For a single-select box, compare the current value to the previous value\r\n                        // But if nothing was selected before or nothing is selected now, just look for a change in selection\r\n                        selectionChanged = (previousSelectedValues.length && element.selectedIndex >= 0) ?\r\n                            (ko.selectExtensions.readValue(element.options[element.selectedIndex]) !== previousSelectedValues[0])\r\n                            : (previousSelectedValues.length || element.selectedIndex >= 0);\r\n                    }\r\n\r\n                    // Ensure consistency between model value and selected option.\r\n                    // If the dropdown was changed so that selection is no longer the same,\r\n                    // notify the value or selectedOptions binding.\r\n                    if (selectionChanged) {\r\n                        ko.utils.triggerEvent(element, 'change');\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (previousScrollTop && Math.abs(previousScrollTop - element.scrollTop) > 20) {\r\n                element.scrollTop = previousScrollTop;\r\n            }\r\n            /**\r\n             *\r\n             * @returns {*}\r\n             */\r\n            function selectedOptions() {\r\n                return ko.utils.arrayFilter(element.options, function (node) {\r\n                    return node.selected;\r\n                });\r\n            }\r\n\r\n            /**\r\n             *\r\n             * @param {*} object\r\n             * @param {*} predicate\r\n             * @param {*} defaultValue\r\n             * @returns {*}\r\n             */\r\n            function applyToObject(object, predicate, defaultValue) {\r\n                var predicateType = typeof predicate;\r\n\r\n                if (predicateType === 'function') {   // Given a function; run it against the data value\r\n                    return predicate(object);\r\n                } else if (predicateType === 'string') { // Given a string; treat it as a property name on the data value\r\n                    return object[predicate];\r\n                } else {                      // Given no optionsText arg; use the data value itself\r\n                    return defaultValue;\r\n                }\r\n            }\r\n\r\n            /**\r\n             *\r\n             * @param {*} obj\r\n             */\r\n            function recursivePathBuilder(obj) {\r\n\r\n                obj[optionTitle] = (this && this[optionTitle] ? this[optionTitle] + '/' : '') + obj[optionsText].trim();\r\n\r\n                if (Array.isArray(obj[optionsValue])) {\r\n                    obj[optionsValue].map(recursivePathBuilder, obj);\r\n                }\r\n            }\r\n\r\n            /**\r\n             *\r\n             * @param {Array} arrayEntry\r\n             * @param {*} oldOptions\r\n             * @returns {*[]}\r\n             */\r\n            function optionNodeFromArray(arrayEntry, oldOptions) {\r\n                var option;\r\n\r\n                if (oldOptions.length) {\r\n                    previousSelectedValues = oldOptions[0].selected ? [ko.selectExtensions.readValue(oldOptions[0])] : [];\r\n                    itemUpdate = true;\r\n                }\r\n\r\n                if (arrayEntry === captionPlaceholder) { // empty value, label === caption\r\n                    option = element.ownerDocument.createElement('option');\r\n                    ko.utils.setTextContent(option, allBindings.get('optionsCaption'));\r\n                    ko.selectExtensions.writeValue(option, undefined);\r\n                } else if (typeof arrayEntry[optionsValue] === 'undefined') { // empty value === optgroup\r\n                    option = utils.template(optgroupTmpl, {\r\n                        label: arrayEntry[optionsText],\r\n                        title: arrayEntry[optionsText + 'title']\r\n                    });\r\n                    option = ko.utils.parseHtmlFragment(option)[0];\r\n\r\n                } else {\r\n                    option = element.ownerDocument.createElement('option');\r\n                    option.setAttribute('data-title', arrayEntry[optionsText + 'title']);\r\n                    ko.selectExtensions.writeValue(option, arrayEntry[optionsValue]);\r\n                    ko.utils.setTextContent(option, arrayEntry[optionsText]);\r\n                }\r\n\r\n                return [option];\r\n            }\r\n\r\n            /**\r\n             *\r\n             * @param {*} newOptions\r\n             */\r\n            function setSelectionCallback(newOptions) {\r\n                // IE6 doesn't like us to assign selection to OPTION nodes before they're added to the document.\r\n                // That's why we first added them without selection. Now it's time to set the selection.\r\n                if (previousSelectedValues.length) {\r\n                    var isSelected = ko.utils.arrayIndexOf(previousSelectedValues, ko.selectExtensions.readValue(newOptions.value)) >= 0;\r\n                    ko.utils.setOptionNodeSelectionState(newOptions.value, isSelected);\r\n\r\n                    // If this option was changed from being selected during a single-item update, notify the change\r\n                    if (itemUpdate && !isSelected) {\r\n                        ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, 'change']);\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             *\r\n             * @param {*} string, times\r\n             * @returns {Array}\r\n             */\r\n            function strPad(string, times) {\r\n                return  (new Array(times + 1)).join(string);\r\n            }\r\n\r\n            /**\r\n             *\r\n             * @param {*} options\r\n             * @returns {Array}\r\n             */\r\n            function formatOptions(options) {\r\n                var res = [];\r\n                nestedOptionsLevel++;\r\n\r\n                if (!nestedOptionsLevel) { // zero level\r\n                    // If caption is included, add it to the array\r\n                    if (allBindings.has('optionsCaption')) {\r\n                        captionValue = ko.utils.unwrapObservable(allBindings.get('optionsCaption'));\r\n                        // If caption value is null or undefined, don't show a caption\r\n                        if (captionValue !== null && captionValue !== undefined && captionValue !== false) {\r\n                            res.push(captionPlaceholder);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                ko.utils.arrayForEach(options, function (option) {\r\n                    var value = applyToObject(option, optionsValue, option),\r\n                        label = applyToObject(option, optionsText, value) || '',\r\n                        title = applyToObject(option, optionsText, value) || '',\r\n                        obj = {},\r\n                        space = '\\u2007\\u2007\\u2007';\r\n\r\n                    obj[optionTitle] = applyToObject(option, optionsText + 'title', value);\r\n\r\n                    label = label.replace(nbspRe, '').trim();\r\n\r\n                    if (Array.isArray(value)) {\r\n                        obj[optionsText] = strPad('&nbsp;', nestedOptionsLevel * 4) + label;\r\n                        res.push(obj);\r\n                        res = res.concat(formatOptions(value));\r\n                    } else {\r\n                        obj[optionsText] = strPad(space, nestedOptionsLevel * 2) + label;\r\n                        obj[optionsValue] = value;\r\n                        res.push(obj);\r\n                    }\r\n                });\r\n                nestedOptionsLevel--;\r\n\r\n                return res;\r\n            }\r\n        }\r\n    };\r\n    ko.bindingHandlers.selectedOptions.after.push('optgroup');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/outer_click.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/** Creates outerClick binding and registers in to ko.bindingHandlers object */\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'underscore',\r\n    '../template/renderer'\r\n], function (ko, $, _, renderer) {\r\n    'use strict';\r\n\r\n    var defaults = {\r\n        onlyIfVisible: true\r\n    };\r\n\r\n    /**\r\n     * Checks if element sis visible.\r\n     *\r\n     * @param {Element} el\r\n     * @returns {Boolean}\r\n     */\r\n    function isVisible(el) {\r\n        var style = window.getComputedStyle(el),\r\n            visibility = {\r\n                display: 'none',\r\n                visibility: 'hidden',\r\n                opacity: '0'\r\n            },\r\n            visible = true;\r\n\r\n        _.each(visibility, function (val, key) {\r\n            if (style[key] === val) {\r\n                visible = false;\r\n            }\r\n        });\r\n\r\n        return visible;\r\n    }\r\n\r\n    /**\r\n     * Document click handler which in case if event target is not\r\n     * a descendant of provided container element,\r\n     * invokes specfied in configuration callback.\r\n     *\r\n     * @param {HTMLElement} container\r\n     * @param {Object} config\r\n     * @param {EventObject} e\r\n     */\r\n    function onOuterClick(container, config, e) {\r\n        var target = e.target,\r\n            callback = config.callback;\r\n\r\n        if (container === target || container.contains(target)) {\r\n            return;\r\n        }\r\n\r\n        if (config.onlyIfVisible) {\r\n            if (!_.isNull(container.offsetParent) && isVisible(container)) {\r\n                callback();\r\n            }\r\n        } else {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepares configuration for the binding based\r\n     * on a default properties and provided options.\r\n     *\r\n     * @param {(Object|Function)} [options={}]\r\n     * @returns {Object}\r\n     */\r\n    function buildConfig(options) {\r\n        var config = {};\r\n\r\n        if (_.isFunction(options)) {\r\n            options = {\r\n                callback: options\r\n            };\r\n        } else if (!_.isObject(options)) {\r\n            options = {};\r\n        }\r\n\r\n        return _.extend(config, defaults, options);\r\n    }\r\n\r\n    ko.bindingHandlers.outerClick = {\r\n\r\n        /**\r\n         * Initializes outer click binding.\r\n         */\r\n        init: function (element, valueAccessor) {\r\n            var config = buildConfig(valueAccessor()),\r\n                outerClick = onOuterClick.bind(null, element, config),\r\n                isTouchDevice = typeof document.ontouchstart !== 'undefined';\r\n\r\n            if (isTouchDevice) {\r\n                $(document).on('touchstart', outerClick);\r\n\r\n                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\r\n                    $(document).off('touchstart', outerClick);\r\n                });\r\n            } else {\r\n                $(document).on('click', outerClick);\r\n\r\n                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\r\n                    $(document).off('click', outerClick);\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    renderer.addAttribute('outerClick');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/range.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'underscore',\r\n    '../template/renderer',\r\n    'jquery/ui'\r\n], function (ko, $, _, renderer) {\r\n    'use strict';\r\n\r\n    var isTouchDevice = !_.isUndefined(document.ontouchstart),\r\n        sliderFn = 'slider';\r\n\r\n    ko.bindingHandlers.range = {\r\n\r\n        /**\r\n         * Initializes binding and a slider update.\r\n         *\r\n         * @param {HTMLElement} element\r\n         * @param {Function} valueAccessor\r\n         */\r\n        init: function (element, valueAccessor) {\r\n            var config  = valueAccessor(),\r\n                value   = config.value;\r\n\r\n            _.extend(config, {\r\n                value: value(),\r\n\r\n                /**\r\n                 * Callback which is being called when sliders' value changes.\r\n                 *\r\n                 * @param {Event} event\r\n                 * @param {Object} ui\r\n                 */\r\n                slide: function (event, ui) {\r\n                    value(ui.value);\r\n                }\r\n            });\r\n\r\n            $(element)[sliderFn](config);\r\n        },\r\n\r\n        /**\r\n         * Updates sliders' plugin configuration.\r\n         *\r\n         * @param {HTMLElement} element\r\n         * @param {Function} valueAccessor\r\n         */\r\n        update: function (element, valueAccessor) {\r\n            var config = valueAccessor();\r\n\r\n            config.value = ko.unwrap(config.value);\r\n\r\n            $(element)[sliderFn]('option', config);\r\n        }\r\n    };\r\n\r\n    renderer.addAttribute('range');\r\n\r\n    if (!isTouchDevice) {\r\n        return;\r\n    }\r\n\r\n    $.widget('mage.touchSlider', $.ui.slider, {\r\n\r\n        /**\r\n         * Creates instance of widget.\r\n         *\r\n         * @override\r\n         */\r\n        _create: function () {\r\n            _.bindAll(\r\n                this,\r\n                '_mouseDown',\r\n                '_mouseMove',\r\n                '_onTouchEnd'\r\n            );\r\n\r\n            return this._superApply(arguments);\r\n        },\r\n\r\n        /**\r\n         * Initializes mouse events on element.\r\n         * @override\r\n         */\r\n        _mouseInit: function () {\r\n            var result = this._superApply(arguments);\r\n\r\n            this.element\r\n                .off('mousedown.' + this.widgetName)\r\n                .on('touchstart.' + this.widgetName, this._mouseDown);\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Elements' 'mousedown' event handler polyfill.\r\n         * @override\r\n         */\r\n        _mouseDown: function (event) {\r\n            var prevDelegate = this._mouseMoveDelegate,\r\n                result;\r\n\r\n            event = this._touchToMouse(event);\r\n            result = this._super(event);\r\n\r\n            if (prevDelegate === this._mouseMoveDelegate) {\r\n                return result;\r\n            }\r\n\r\n            $(document)\r\n                .off('mousemove.' + this.widgetName)\r\n                .off('mouseup.' + this.widgetName);\r\n\r\n            $(document)\r\n                .on('touchmove.' + this.widgetName, this._mouseMove)\r\n                .on('touchend.' + this.widgetName, this._onTouchEnd)\r\n                .on('tochleave.' + this.widgetName, this._onTouchEnd);\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Documents' 'mousemove' event handler polyfill.\r\n         *\r\n         * @override\r\n         * @param {Event} event - Touch event object.\r\n         */\r\n        _mouseMove: function (event) {\r\n            event = this._touchToMouse(event);\r\n\r\n            return this._super(event);\r\n        },\r\n\r\n        /**\r\n         * Documents' 'touchend' event handler.\r\n         */\r\n        _onTouchEnd: function (event) {\r\n            $(document).trigger('mouseup');\r\n\r\n            return this._mouseUp(event);\r\n        },\r\n\r\n        /**\r\n         * Removes previously assigned touch handlers.\r\n         *\r\n         * @override\r\n         */\r\n        _mouseUp: function () {\r\n            this._removeTouchHandlers();\r\n\r\n            return this._superApply(arguments);\r\n        },\r\n\r\n        /**\r\n         * Removes previously assigned touch handlers.\r\n         *\r\n         * @override\r\n         */\r\n        _mouseDestroy: function () {\r\n            this._removeTouchHandlers();\r\n\r\n            return this._superApply(arguments);\r\n        },\r\n\r\n        /**\r\n         * Removes touch events from document object.\r\n         */\r\n        _removeTouchHandlers: function () {\r\n            $(document)\r\n                .off('touchmove.' + this.widgetName)\r\n                .off('touchend.' + this.widgetName)\r\n                .off('touchleave.' + this.widgetName);\r\n        },\r\n\r\n        /**\r\n         * Adds properties to the touch event to mimic mouse event.\r\n         *\r\n         * @param {Event} event - Touch event object.\r\n         * @returns {Event}\r\n         */\r\n        _touchToMouse: function (event) {\r\n            var orig = event.originalEvent,\r\n                touch = orig.touches[0];\r\n\r\n            return _.extend(event, {\r\n                which:      1,\r\n                pageX:      touch.pageX,\r\n                pageY:      touch.pageY,\r\n                clientX:    touch.clientX,\r\n                clientY:    touch.clientY,\r\n                screenX:    touch.screenX,\r\n                screenY:    touch.screenY\r\n            });\r\n        }\r\n    });\r\n\r\n    sliderFn = 'touchSlider';\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/resizable.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'uiRegistry',\r\n    'underscore',\r\n    '../template/renderer',\r\n    'jquery/ui'\r\n], function (ko, $, async, registry, _, renderer) {\r\n    'use strict';\r\n\r\n    var sizeOptions = [\r\n            'minHeight',\r\n            'maxHeight',\r\n            'minWidth',\r\n            'maxWidth'\r\n        ],\r\n\r\n        handles = {\r\n            height: '.ui-resizable-s, .ui-resizable-n',\r\n            width: '.ui-resizable-w, .ui-resizable-e'\r\n        };\r\n\r\n    /**\r\n     * Recalcs visibility of handles, width and height of resizable based on content\r\n     * @param {HTMLElement} element\r\n     */\r\n    function adjustSize(element) {\r\n        var maxHeight,\r\n            maxWidth;\r\n\r\n        element = $(element);\r\n        maxHeight = element.resizable('option').maxHeight;\r\n        maxWidth = element.resizable('option').maxWidth;\r\n\r\n        if (maxHeight && element.height() > maxHeight) {\r\n            element.height(maxHeight + 1);\r\n            $(handles.height).hide();\r\n        } else {\r\n            $(handles.height).show();\r\n        }\r\n\r\n        if (maxWidth && element.width() > maxWidth) {\r\n            element.width(maxWidth + 1);\r\n            $(handles.width).hide();\r\n        } else {\r\n            $(handles.width).show();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Recalcs allowed min, max width and height based on configured selectors\r\n     * @param {Object} sizeConstraints\r\n     * @param {String} componentName\r\n     * @param {HTMLElement} element\r\n     * @param {Boolean} hasWidthUpdate\r\n     */\r\n    function recalcAllowedSize(sizeConstraints, componentName, element, hasWidthUpdate) {\r\n        var size;\r\n\r\n        element = $(element);\r\n\r\n        if (!element.data('resizable')) {\r\n            return;\r\n        }\r\n\r\n        if (!hasWidthUpdate) {\r\n            element.css('width', 'auto');\r\n        }\r\n\r\n        _.each(sizeConstraints, function (selector, key) {\r\n            async.async({\r\n                component: componentName,\r\n                selector: selector\r\n            }, function (elem) {\r\n                size = key.indexOf('Height') !== -1 ? $(elem).outerHeight(true) : $(elem).outerWidth(true);\r\n\r\n                if (element.data('resizable')) {\r\n                    element.resizable('option', key, size + 1);\r\n                }\r\n            });\r\n        }, this);\r\n\r\n        adjustSize(element);\r\n    }\r\n\r\n    /**\r\n     * Preprocess config to separate options,\r\n     * which must be processed further before applying\r\n     *\r\n     * @param {Object} config\r\n     * @param {Object} viewModel\r\n     * @param {*} element\r\n     * @return {Object} config\r\n     */\r\n    function processConfig(config, viewModel, element) {\r\n        var sizeConstraint,\r\n            sizeConstraints = {},\r\n            recalc,\r\n            hasWidthUpdate;\r\n\r\n        if (_.isEmpty(config)) {\r\n            return {};\r\n        }\r\n        _.each(sizeOptions, function (key) {\r\n            sizeConstraint = config[key];\r\n\r\n            if (sizeConstraint && !_.isNumber(sizeConstraint)) {\r\n                sizeConstraints[key] = sizeConstraint;\r\n                delete config[key];\r\n            }\r\n        });\r\n        hasWidthUpdate =  _.some(sizeConstraints, function (value, key) {\r\n            return key.indexOf('Width') !== -1;\r\n        });\r\n\r\n        recalc = recalcAllowedSize.bind(null, sizeConstraints, viewModel.name, element, hasWidthUpdate);\r\n        config.start = recalc;\r\n        $(window).on('resize.resizable', recalc);\r\n        registry.get(viewModel.provider).on('reloaded', recalc);\r\n\r\n        return config;\r\n    }\r\n\r\n    ko.bindingHandlers.resizable = {\r\n\r\n        /**\r\n         * Binding init callback.\r\n         *\r\n         * @param {*} element\r\n         * @param {Function} valueAccessor\r\n         * @param {Function} allBindings\r\n         * @param {Object} viewModel\r\n         */\r\n        init: function (element, valueAccessor, allBindings, viewModel) {\r\n            var config = processConfig(valueAccessor(), viewModel, element);\r\n\r\n            $(element).resizable(config);\r\n        }\r\n    };\r\n\r\n    renderer.addAttribute('resizable');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/scope.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/** Creates scope binding and registers in to ko.bindingHandlers object */\r\ndefine([\r\n    'ko',\r\n    'uiRegistry',\r\n    'mage/translate',\r\n    '../template/renderer'\r\n], function (ko, registry, $t, renderer) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Creates child context with passed component param as $data. Extends context with $t helper.\r\n     * Applies bindings to descendant nodes.\r\n     * @param {HTMLElement} el - element to apply bindings to.\r\n     * @param {ko.bindingContext} bindingContext - instance of ko.bindingContext, passed to binding initially.\r\n     * @param {Object} component - component instance to attach to new context\r\n     */\r\n    function applyComponents(el, bindingContext, component) {\r\n        component = bindingContext.createChildContext(component);\r\n\r\n        ko.utils.extend(component, {\r\n            $t: $t\r\n        });\r\n\r\n        ko.utils.arrayForEach(el.childNodes, ko.cleanNode);\r\n\r\n        ko.applyBindingsToDescendants(component, el);\r\n    }\r\n\r\n    ko.bindingHandlers.scope = {\r\n\r\n        /**\r\n         * Scope binding's init method.\r\n         * @returns {Object} - Knockout declaration for it to let binding control descendants.\r\n         */\r\n        init: function () {\r\n            return {\r\n                controlsDescendantBindings: true\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Reads params passed to binding, parses component declarations.\r\n         * Fetches for those found and attaches them to the new context.\r\n         * @param {HTMLElement} el - Element to apply bindings to.\r\n         * @param {Function} valueAccessor - Function that returns value, passed to binding.\r\n         * @param {Object} allBindings - Object, which represents all bindings applied to element.\r\n         * @param {Object} viewModel - Object, which represents view model binded to el.\r\n         * @param {ko.bindingContext} bindingContext - Instance of ko.bindingContext, passed to binding initially.\r\n         */\r\n        update: function (el, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            var component = valueAccessor(),\r\n                apply = applyComponents.bind(this, el, bindingContext);\r\n\r\n            if (typeof component === 'string') {\r\n                registry.get(component, apply);\r\n            } else if (typeof component === 'function') {\r\n                component(apply);\r\n            }\r\n        }\r\n    };\r\n\r\n    ko.virtualElements.allowedBindings.scope = true;\r\n\r\n    renderer\r\n        .addNode('scope')\r\n        .addAttribute('scope', {\r\n            name: 'ko-scope'\r\n        });\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/simple-checked.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    '../template/renderer'\r\n], function (ko, renderer) {\r\n    'use strict';\r\n\r\n    ko.bindingHandlers.simpleChecked = {\r\n        'after': ['attr'],\r\n\r\n        /**\r\n         * Implements same functionality as a standard 'simpleChecked' binding,\r\n         * but with a difference that it wont' change values array if\r\n         * value of DOM element changes.\r\n         */\r\n        init: function (element, valueAccessor) {\r\n            var isCheckbox = element.type === 'checkbox',\r\n                isRadio = element.type === 'radio',\r\n                updateView,\r\n                updateModel;\r\n\r\n            if (!isCheckbox && !isRadio) {\r\n                return;\r\n            }\r\n\r\n            /**\r\n             * Updates checked observable\r\n             */\r\n            updateModel = function () {\r\n                var  modelValue = ko.dependencyDetection.ignore(valueAccessor),\r\n                    isChecked = element.checked;\r\n\r\n                if (ko.computedContext.isInitial()) {\r\n                    return;\r\n                }\r\n\r\n                if (modelValue.peek() === isChecked) {\r\n                    return;\r\n                }\r\n\r\n                if (isRadio && !isChecked) {\r\n                    return;\r\n                }\r\n\r\n                modelValue(isChecked);\r\n            };\r\n\r\n            /**\r\n             * Updates checkbox state\r\n             */\r\n            updateView = function () {\r\n                var modelValue = ko.utils.unwrapObservable(valueAccessor());\r\n\r\n                element.checked = !!modelValue;\r\n            };\r\n\r\n            ko.utils.registerEventHandler(element, 'change', updateModel);\r\n\r\n            ko.computed(updateModel, null, {\r\n                disposeWhenNodeIsRemoved: element\r\n            });\r\n            ko.computed(updateView, null, {\r\n                disposeWhenNodeIsRemoved: element\r\n            });\r\n        }\r\n    };\r\n\r\n    ko.expressionRewriting.twoWayBindings.simpleChecked = true;\r\n\r\n    renderer.addAttribute('simpleChecked');\r\n    renderer.addAttribute('simple-checked', {\r\n        binding: 'simpleChecked'\r\n    });\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/staticChecked.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    '../template/renderer'\r\n], function (ko, renderer) {\r\n    'use strict';\r\n\r\n    ko.bindingHandlers.staticChecked = {\r\n        'after': ['value', 'attr'],\r\n\r\n        /**\r\n         * Implements same functionality as a standard 'checked' binding,\r\n         * but with a difference that it wont' change values array if\r\n         * value of DOM element changes.\r\n         */\r\n        init: function (element, valueAccessor, allBindings) {\r\n            var isCheckbox = element.type === 'checkbox',\r\n                isRadio = element.type === 'radio',\r\n                isValueArray,\r\n                oldElemValue,\r\n                useCheckedValue,\r\n                checkedValue,\r\n                updateModel,\r\n                updateView;\r\n\r\n            if (!isCheckbox && !isRadio) {\r\n                return;\r\n            }\r\n\r\n            checkedValue = ko.pureComputed(function () {\r\n                if (allBindings.has('checkedValue')) {\r\n                    return ko.utils.unwrapObservable(allBindings.get('checkedValue'));\r\n                } else if (allBindings.has('value')) {\r\n                    return ko.utils.unwrapObservable(allBindings.get('value'));\r\n                }\r\n\r\n                return element.value;\r\n            });\r\n\r\n            isValueArray = isCheckbox && ko.utils.unwrapObservable(valueAccessor()) instanceof Array;\r\n            oldElemValue = isValueArray ? checkedValue() : undefined;\r\n            useCheckedValue = isRadio || isValueArray;\r\n\r\n            /**\r\n             * Updates values array if it's necessary.\r\n             */\r\n            updateModel = function () {\r\n                var isChecked = element.checked,\r\n                    elemValue = useCheckedValue ? checkedValue() : isChecked,\r\n                    modelValue;\r\n\r\n                if (ko.computedContext.isInitial()) {\r\n                    return;\r\n                }\r\n\r\n                if (isRadio && !isChecked) {\r\n                    return;\r\n                }\r\n\r\n                modelValue = ko.dependencyDetection.ignore(valueAccessor);\r\n\r\n                if (isValueArray) {\r\n                    if (oldElemValue !== elemValue) {\r\n                        oldElemValue = elemValue;\r\n                    } else {\r\n                        ko.utils.addOrRemoveItem(modelValue, elemValue, isChecked);\r\n                    }\r\n                } else {\r\n                    ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'checked', elemValue, true);\r\n                }\r\n            };\r\n\r\n            /**\r\n             * Updates checkbox state.\r\n             */\r\n            updateView = function () {\r\n                var modelValue = ko.utils.unwrapObservable(valueAccessor());\r\n\r\n                if (isValueArray) {\r\n                    element.checked = ko.utils.arrayIndexOf(modelValue, checkedValue()) >= 0;\r\n                } else if (isCheckbox) {\r\n                    element.checked = modelValue;\r\n                } else {\r\n                    element.checked = checkedValue() === modelValue;\r\n                }\r\n            };\r\n\r\n            ko.computed(updateModel, null, {\r\n                disposeWhenNodeIsRemoved: element\r\n            });\r\n\r\n            ko.utils.registerEventHandler(element, 'click', updateModel);\r\n\r\n            ko.computed(updateView, null, {\r\n                disposeWhenNodeIsRemoved: element\r\n            });\r\n        }\r\n    };\r\n\r\n    ko.expressionRewriting.twoWayBindings.staticChecked = true;\r\n\r\n    renderer.addAttribute('staticChecked');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/tooltip.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'ko',\r\n    'underscore',\r\n    'mage/template',\r\n    'text!ui/template/tooltip/tooltip.html',\r\n    '../template/renderer'\r\n], function ($, ko, _, template, tooltipTmpl, renderer) {\r\n    'use strict';\r\n\r\n    var tooltip,\r\n        defaults,\r\n        positions,\r\n        transformProp,\r\n        checkedPositions = {},\r\n        iterator = 0,\r\n        previousTooltip,\r\n        tooltipData,\r\n        positionData = {},\r\n        tooltipsCollection = {},\r\n        isTouchDevice = (function () {\r\n            return 'ontouchstart' in document.documentElement;\r\n        })(),\r\n        CLICK_EVENT = (function () {\r\n            return isTouchDevice ? 'touchstart' : 'click';\r\n        })();\r\n\r\n    defaults = {\r\n        tooltipWrapper: '[data-tooltip=tooltip-wrapper]',\r\n        tooltipContentBlock: 'data-tooltip-content',\r\n        closeButtonClass: 'action-close',\r\n        tailClass: 'data-tooltip-tail',\r\n        action: 'hover',\r\n        delay: 300,\r\n        track: false,\r\n        step: 20,\r\n        position: 'top',\r\n        closeButton: false,\r\n        showed: false,\r\n        strict: true,\r\n        center: false\r\n    };\r\n\r\n    tooltipData = {\r\n        trigger: false,\r\n        timeout: 0,\r\n        element: false,\r\n        event: false,\r\n        targetElement: {},\r\n        showed: false,\r\n        currentID: 0\r\n    };\r\n\r\n    /**\r\n     * Polyfill for css transform\r\n     */\r\n    transformProp = (function () {\r\n        var style = document.createElement('div').style,\r\n            base = 'Transform',\r\n            vendors = ['webkit', 'moz', 'ms', 'o'],\r\n            vi = vendors.length,\r\n            property;\r\n\r\n        if (typeof style.transform !== 'undefined') {\r\n            return 'transform';\r\n        }\r\n\r\n        while (vi--) {\r\n            property = vendors[vi] + base;\r\n\r\n            if (typeof style[property] !== 'undefined') {\r\n                return property;\r\n            }\r\n        }\r\n    })();\r\n\r\n    positions = {\r\n\r\n        /*eslint max-depth: [0, 0]*/\r\n\r\n        map: {\r\n            horizontal: {\r\n                s: 'w',\r\n                p: 'left'\r\n            },\r\n            vertical: {\r\n                s: 'h',\r\n                p: 'top'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Wrapper function to get tooltip data (position, className, etc)\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        top: function (s) {\r\n            return positions._topLeftChecker(s, positions.map, 'vertical', '_bottom', 'top', 'right');\r\n        },\r\n\r\n        /**\r\n         * Wrapper function to get tooltip data (position, className, etc)\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        left: function (s) {\r\n            return positions._topLeftChecker(s, positions.map, 'horizontal', '_right', 'left', 'top');\r\n        },\r\n\r\n        /**\r\n         * Wrapper function to get tooltip data (position, className, etc)\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        bottom: function (s) {\r\n            return positions._bottomRightChecker(s, positions.map, 'vertical', '_top', 'bottom', 'left');\r\n        },\r\n\r\n        /**\r\n         * Wrapper function to get tooltip data (position, className, etc)\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        right: function (s) {\r\n            return positions._bottomRightChecker(s, positions.map, 'horizontal', '_left', 'right', 'bottom');\r\n        },\r\n\r\n        /**\r\n         * Check can tooltip setted on current position or not. If can't setted - delegate call.\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @param {Object} map - mapping for get direction positions\r\n         * @param {String} direction - vertical or horizontal\r\n         * @param {String} className - class whats should be setted to tooltip\r\n         * @param {String} side - parent method name\r\n         * @param {String} delegate - method name if tooltip can't be setted in current position\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        _topLeftChecker: function (s, map, direction, className, side, delegate) {\r\n            var result = {\r\n                    position: {}\r\n                },\r\n                config = tooltip.getTooltip(tooltipData.currentID),\r\n                startPosition = !config.strict ? s.eventPosition : s.elementPosition,\r\n                changedDirection;\r\n\r\n            checkedPositions[side] = true;\r\n\r\n            if (\r\n                startPosition[map[direction].p] - s.tooltipSize[map[direction].s] - config.step >\r\n                s.scrollPosition[map[direction].p]\r\n            ) {\r\n                result.position[map[direction].p] = startPosition[map[direction].p] - s.tooltipSize[map[direction].s] -\r\n                    config.step;\r\n                result.className = className;\r\n                result.side = side;\r\n                changedDirection = direction === 'vertical' ? 'horizontal' : 'vertical';\r\n                result = positions._normalize(s, result, config, delegate, map, changedDirection);\r\n            } else if (!checkedPositions[delegate]) {\r\n                result = positions[delegate].apply(null, arguments);\r\n            } else {\r\n                result = positions.positionCenter(s, result);\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Check can tooltip setted on current position or not. If can't setted - delegate call.\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @param {Object} map - mapping for get direction positions\r\n         * @param {String} direction - vertical or horizontal\r\n         * @param {String} className - class whats should be setted to tooltip\r\n         * @param {String} side - parent method name\r\n         * @param {String} delegate - method name if tooltip can't be setted in current position\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        _bottomRightChecker: function (s, map, direction, className, side, delegate) {\r\n            var result = {\r\n                    position: {}\r\n                },\r\n                config = tooltip.getTooltip(tooltipData.currentID),\r\n                startPosition = !config.strict ? s.eventPosition : {\r\n                    top: s.elementPosition.top + s.elementSize.h,\r\n                    left: s.elementPosition.left + s.elementSize.w\r\n                },\r\n                changedDirection;\r\n\r\n            checkedPositions[side] = true;\r\n\r\n            if (\r\n                startPosition[map[direction].p] + s.tooltipSize[map[direction].s] + config.step <\r\n                s.scrollPosition[map[direction].p] + s.windowSize[map[direction].s]\r\n            ) {\r\n                result.position[map[direction].p] = startPosition[map[direction].p] + config.step;\r\n                result.className = className;\r\n                result.side = side;\r\n                changedDirection = direction === 'vertical' ? 'horizontal' : 'vertical';\r\n                result = positions._normalize(s, result, config, delegate, map, changedDirection);\r\n            } else if (!checkedPositions[delegate]) {\r\n                result = positions[delegate].apply(null, arguments);\r\n            } else {\r\n                result = positions.positionCenter(s, result);\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Centered tooltip if tooltip does not fit in window\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @param {Object} data - current data (position, className, etc)\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        positionCenter: function (s, data) {\r\n            data = positions._positionCenter(s, data, 'horizontal', positions.map);\r\n            data = positions._positionCenter(s, data, 'vertical', positions.map);\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Centered tooltip side\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @param {Object} data - current data (position, className, etc)\r\n         * @param {String} direction - vertical or horizontal\r\n         * @param {Object} map - mapping for get direction positions\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        _positionCenter: function (s, data, direction, map) {\r\n            if (s.tooltipSize[map[direction].s] < s.windowSize[map[direction].s]) {\r\n                data.position[map[direction].p] = (s.windowSize[map[direction].s] -\r\n                    s.tooltipSize[map[direction].s]) / 2 + s.scrollPosition[map[direction].p];\r\n            } else {\r\n                data.position[map[direction].p] = s.scrollPosition[map[direction].p];\r\n                data.tooltipSize = {};\r\n                data.tooltipSize[map[direction].s] = s.windowSize[map[direction].s];\r\n            }\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Normalize horizontal or vertical position.\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @param {Object} data - current data (position, className, etc)\r\n         * @param {Object} config - tooltip config\r\n         * @param {String} delegate - method name if tooltip can't be setted in current position\r\n         * @param {Object} map - mapping for get direction positions\r\n         * @param {String} direction - vertical or horizontal\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        _normalize: function (s, data, config, delegate, map, direction) {\r\n            var startPosition = !config.center ? s.eventPosition : {\r\n                    left: s.elementPosition.left + s.elementSize.w / 2,\r\n                    top: s.elementPosition.top + s.elementSize.h / 2\r\n                },\r\n                depResult;\r\n\r\n            if (startPosition[map[direction].p] - s.tooltipSize[map[direction].s] / 2 >\r\n                s.scrollPosition[map[direction].p] && startPosition[map[direction].p] +\r\n                s.tooltipSize[map[direction].s] / 2 <\r\n                s.scrollPosition[map[direction].p] + s.windowSize[map[direction].s]\r\n            ) {\r\n                data.position[map[direction].p] = startPosition[map[direction].p] - s.tooltipSize[map[direction].s] / 2;\r\n            } else {\r\n\r\n                /*eslint-disable no-lonely-if*/\r\n                if (!checkedPositions[delegate]) {\r\n                    depResult = positions[delegate].apply(null, arguments);\r\n\r\n                    if (depResult.hasOwnProperty('className')) {\r\n                        data = depResult;\r\n                    } else {\r\n                        data = positions._normalizeTail(s, data, config, delegate, map, direction, startPosition);\r\n                    }\r\n                } else {\r\n                    data = positions._normalizeTail(s, data, config, delegate, map, direction, startPosition);\r\n                }\r\n            }\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Calc tail position.\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @param {Object} data - current data (position, className, etc)\r\n         * @param {Object} config - tooltip config\r\n         * @param {String} delegate - method name if tooltip can't be setted in current position\r\n         * @param {Object} map - mapping for get direction positions\r\n         * @param {String} direction - vertical or horizontal\r\n         * @param {Object} startPosition - start position\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        _normalizeTail: function (s, data, config, delegate, map, direction, startPosition) {\r\n            data.tail = {};\r\n\r\n            if (s.tooltipSize[map[direction].s] < s.windowSize[map[direction].s]) {\r\n\r\n                if (\r\n                    startPosition[map[direction].p] >\r\n                    s.windowSize[map[direction].s] / 2 + s.scrollPosition[map[direction].p]\r\n                ) {\r\n                    data.position[map[direction].p] = s.windowSize[map[direction].s] +\r\n                        s.scrollPosition[map[direction].p] - s.tooltipSize[map[direction].s];\r\n                    data.tail[map[direction].p] = startPosition[map[direction].p] -\r\n                        s.tooltipSize[map[direction].s] / 2 - data.position[map[direction].p];\r\n                } else {\r\n                    data.position[map[direction].p] = s.scrollPosition[map[direction].p];\r\n                    data.tail[map[direction].p] = startPosition[map[direction].p] -\r\n                        s.tooltipSize[map[direction].s] / 2 - data.position[map[direction].p];\r\n                }\r\n            } else {\r\n                data.position[map[direction].p] = s.scrollPosition[map[direction].p];\r\n                data.tail[map[direction].p] = s.eventPosition[map[direction].p] - s.windowSize[map[direction].s] / 2;\r\n                data.tooltipSize = {};\r\n                data.tooltipSize[map[direction].s] = s.windowSize[map[direction].s];\r\n            }\r\n\r\n            return data;\r\n        }\r\n    };\r\n\r\n    tooltip = {\r\n\r\n        /**\r\n         * Set new tooltip to tooltipCollection, save config, and add unic id\r\n         *\r\n         * @param {Object} config - tooltip config\r\n         * @returns {String} tooltip id\r\n         */\r\n        setTooltip: function (config) {\r\n            var property = 'id-' + iterator;\r\n\r\n            tooltipsCollection[property] = config;\r\n            iterator++;\r\n\r\n            return property;\r\n        },\r\n\r\n        /**\r\n         * Get tooltip config by id\r\n         *\r\n         * @param {String} id - tooltip id\r\n         * @returns {Object} tooltip config\r\n         */\r\n        getTooltip: function (id) {\r\n            return tooltipsCollection[id];\r\n        },\r\n\r\n        /**\r\n         * Set content to current tooltip\r\n         *\r\n         * @param {Object} tooltipElement - tooltip element\r\n         * @param {Object} viewModel - tooltip view model\r\n         * @param {String} id - tooltip id\r\n         * @param {Object} bindingCtx - tooltip context\r\n         * @param {Object} event - action event\r\n         */\r\n        setContent: function (tooltipElement, viewModel, id, bindingCtx, event) {\r\n            var html = $(tooltipElement).html(),\r\n                config = tooltip.getTooltip(id),\r\n                body = $('body');\r\n\r\n            tooltipData.currentID = id;\r\n            tooltipData.trigger = $(event.currentTarget);\r\n            tooltip.setTargetData(event);\r\n            body.on('mousemove.setTargetData', tooltip.setTargetData);\r\n            tooltip.clearTimeout(id);\r\n\r\n            tooltipData.timeout = _.delay(function () {\r\n                body.off('mousemove.setTargetData', tooltip.setTargetData);\r\n\r\n                if (tooltipData.trigger[0] === tooltipData.targetElement) {\r\n                    tooltip.destroy(id);\r\n                    event.stopPropagation();\r\n                    tooltipElement = tooltip.createTooltip(id);\r\n                    tooltipElement.find('.' + defaults.tooltipContentBlock).append(html);\r\n                    tooltipElement.applyBindings(bindingCtx);\r\n                    tooltip.setHandlers(id);\r\n                    tooltip.setPosition(tooltipElement, id);\r\n                    previousTooltip = id;\r\n                }\r\n\r\n            }, config.delay);\r\n        },\r\n\r\n        /**\r\n         * Set position to current tooltip\r\n         *\r\n         * @param {Object} tooltipElement - tooltip element\r\n         * @param {String} id - tooltip id\r\n         */\r\n        setPosition: function (tooltipElement, id) {\r\n            var config = tooltip.getTooltip(id);\r\n\r\n            tooltip.sizeData = {\r\n                windowSize: {\r\n                    h: $(window).outerHeight(),\r\n                    w: $(window).outerWidth()\r\n                },\r\n                scrollPosition: {\r\n                    top: $(window).scrollTop(),\r\n                    left: $(window).scrollLeft()\r\n                },\r\n                tooltipSize: {\r\n                    h: tooltipElement.outerHeight(),\r\n                    w: tooltipElement.outerWidth()\r\n                },\r\n                elementSize: {\r\n                    h: tooltipData.trigger.outerHeight(),\r\n                    w: tooltipData.trigger.outerWidth()\r\n                },\r\n                elementPosition: tooltipData.trigger.offset(),\r\n                eventPosition: this.getEventPosition(tooltipData.event)\r\n            };\r\n\r\n            _.extend(positionData, positions[config.position](tooltip.sizeData));\r\n            tooltipElement.css(positionData.position);\r\n            tooltipElement.addClass(positionData.className);\r\n            tooltip._setTooltipSize(positionData, tooltipElement);\r\n            tooltip._setTailPosition(positionData, tooltipElement);\r\n            checkedPositions = {};\r\n        },\r\n\r\n        /**\r\n         * Check position data and change tooltip size if needs\r\n         *\r\n         * @param {Object} data - position data\r\n         * @param {Object} tooltipElement - tooltip element\r\n         */\r\n        _setTooltipSize: function (data, tooltipElement) {\r\n            if (data.tooltipSize) {\r\n                data.tooltipSize.w ?\r\n                    tooltipElement.css('width', data.tooltipSize.w) :\r\n                    tooltipElement.css('height', data.tooltipSize.h);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Check position data and set position to tail\r\n         *\r\n         * @param {Object} data - position data\r\n         * @param {Object} tooltipElement - tooltip element\r\n         */\r\n        _setTailPosition: function (data, tooltipElement) {\r\n            var tail,\r\n                tailMargin;\r\n\r\n            if (data.tail) {\r\n                tail = tooltipElement.find('.' + defaults.tailClass);\r\n\r\n                if (data.tail.left) {\r\n                    tailMargin = parseInt(tail.css('margin-left'), 10);\r\n                    tail.css('margin-left', tailMargin + data.tail.left);\r\n                } else {\r\n                    tailMargin = parseInt(tail.css('margin-top'), 10);\r\n                    tail.css('margin-top', tailMargin + data.tail.top);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Resolves position for tooltip\r\n         *\r\n         * @param {Object} event\r\n         * @returns {Object}\r\n         */\r\n        getEventPosition: function (event) {\r\n            var position = {\r\n                left: event.originalEvent && event.originalEvent.pageX || 0,\r\n                top: event.originalEvent && event.originalEvent.pageY || 0\r\n            };\r\n\r\n            if (position.left === 0 && position.top === 0) {\r\n                _.extend(position, event.target.getBoundingClientRect());\r\n            }\r\n\r\n            return position;\r\n        },\r\n\r\n        /**\r\n         * Close tooltip if action happened outside handler and tooltip element\r\n         *\r\n         * @param {String} id - tooltip id\r\n         * @param {Object} event - action event\r\n         */\r\n        outerClick: function (id, event) {\r\n            var tooltipElement = $(event.target).parents(defaults.tooltipWrapper)[0],\r\n                isTrigger = event.target === tooltipData.trigger[0] || $.contains(tooltipData.trigger[0], event.target);\r\n\r\n            if (tooltipData.showed && tooltipElement !== tooltipData.element[0] && !isTrigger) {\r\n                tooltip.destroy(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Parse keydown event and if event trigger is escape key - close tooltip\r\n         *\r\n         * @param {Object} event - action event\r\n         */\r\n        keydownHandler: function (event) {\r\n            if (tooltipData.showed && event.keyCode === 27) {\r\n                tooltip.destroy(tooltipData.currentID);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Change tooltip position when track is enabled\r\n         *\r\n         * @param {Object} event - current event\r\n         */\r\n        track: function (event) {\r\n            var inequality = {},\r\n                map = positions.map,\r\n                translate = {\r\n                    left: 'translateX',\r\n                    top: 'translateY'\r\n                },\r\n                eventPosition = {\r\n                    left: event.pageX,\r\n                    top: event.pageY\r\n                },\r\n                tooltipSize = {\r\n                    w: tooltipData.element.outerWidth(),\r\n                    h: tooltipData.element.outerHeight()\r\n                },\r\n                direction = positionData.side === 'bottom' || positionData.side === 'top' ? 'horizontal' : 'vertical';\r\n\r\n            inequality[map[direction].p] = eventPosition[map[direction].p] - (positionData.position[map[direction].p] +\r\n                tooltipSize[map[direction].s] / 2);\r\n\r\n            if (positionData.position[map[direction].p] + inequality[map[direction].p] +\r\n                tooltip.sizeData.tooltipSize[map[direction].s] >\r\n                tooltip.sizeData.windowSize[map[direction].s] + tooltip.sizeData.scrollPosition[map[direction].p] ||\r\n                inequality[map[direction].p] + positionData.position[map[direction].p] <\r\n                tooltip.sizeData.scrollPosition[map[direction].p]) {\r\n\r\n                return false;\r\n            }\r\n\r\n            tooltipData.element[0].style[transformProp] = translate[map[direction].p] +\r\n                '(' + inequality[map[direction].p] + 'px)';\r\n        },\r\n\r\n        /**\r\n         * Set handlers to tooltip\r\n         *\r\n         * @param {String} id - tooltip id\r\n         */\r\n        setHandlers: function (id) {\r\n            var config = tooltip.getTooltip(id);\r\n\r\n            if (config.track) {\r\n                tooltipData.trigger.on('mousemove.track', tooltip.track);\r\n            }\r\n\r\n            if (config.action === 'click') {\r\n                $(window).on(CLICK_EVENT + '.outerClick', tooltip.outerClick.bind(null, id));\r\n            }\r\n\r\n            if (config.closeButton) {\r\n                $('.' + config.closeButtonClass).on('click.closeButton', tooltip.destroy.bind(null, id));\r\n            }\r\n\r\n            document.addEventListener('scroll', tooltip.destroy, true);\r\n            $(window).on('keydown.tooltip', tooltip.keydownHandler);\r\n            $(window).on('scroll.tooltip', tooltip.outerClick.bind(null, id));\r\n            $(window).on('resize.outerClick', tooltip.outerClick.bind(null, id));\r\n        },\r\n\r\n        /**\r\n         * Toggle tooltip\r\n         *\r\n         * @param {Object} tooltipElement - tooltip element\r\n         * @param {Object} viewModel - tooltip view model\r\n         * @param {String} id - tooltip id\r\n         */\r\n        toggleTooltip: function (tooltipElement, viewModel, id) {\r\n            if (previousTooltip === id && tooltipData.showed) {\r\n                tooltip.destroy(id);\r\n\r\n                return false;\r\n            }\r\n\r\n            tooltip.setContent.apply(null, arguments);\r\n        },\r\n\r\n        /**\r\n         * Create tooltip and append to DOM\r\n         *\r\n         * @param {String} id - tooltip id\r\n         * @returns {Object} tooltip element\r\n         */\r\n        createTooltip: function (id) {\r\n            var body = $('body'),\r\n                config = tooltip.getTooltip(id);\r\n\r\n            $(template(tooltipTmpl, {\r\n                data: config\r\n            })).appendTo(body);\r\n\r\n            tooltipData.showed = true;\r\n            tooltipData.element = $(config.tooltipWrapper);\r\n\r\n            return tooltipData.element;\r\n        },\r\n\r\n        /**\r\n         * Check action and clean timeout\r\n         *\r\n         * @param {String} id - tooltip id\r\n         */\r\n        clearTimeout: function (id) {\r\n            var config = tooltip.getTooltip(id);\r\n\r\n            if (config.action === 'hover') {\r\n                clearTimeout(tooltipData.timeout);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Check previous tooltip\r\n         */\r\n        checkPreviousTooltip: function () {\r\n            if (!tooltipData.timeout) {\r\n                tooltip.destroy();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Destroy tooltip instance\r\n         */\r\n        destroy: function () {\r\n            if (tooltipData.element) {\r\n                tooltipData.element.remove();\r\n                tooltipData.showed = false;\r\n            }\r\n\r\n            positionData = {};\r\n            tooltipData.timeout = false;\r\n            tooltip.removeHandlers();\r\n        },\r\n\r\n        /**\r\n         * Remove tooltip handlers\r\n         */\r\n        removeHandlers: function () {\r\n            $('.' + defaults.closeButtonClass).off('click.closeButton');\r\n            tooltipData.trigger.off('mousemove.track');\r\n            document.removeEventListener('scroll', tooltip.destroy, true);\r\n            $(window).off(CLICK_EVENT + '.outerClick');\r\n            $(window).off('keydown.tooltip');\r\n            $(window).off('resize.outerClick');\r\n        },\r\n\r\n        /**\r\n         * Set target element\r\n         *\r\n         * @param {Object} event - current event\r\n         */\r\n        setTargetData: function (event) {\r\n            tooltipData.event = event;\r\n\r\n            //TODO: bug chrome v.49; Link to issue https://bugs.chromium.org/p/chromium/issues/detail?id=161464\r\n            if (event.timeStamp - (tooltipData.timestamp || 0) < 1) {\r\n                return;\r\n            }\r\n\r\n            if (event.type === 'mousemove') {\r\n                tooltipData.targetElement = event.target;\r\n            } else {\r\n                tooltipData.targetElement = event.currentTarget;\r\n                tooltipData.timestamp = event.timeStamp;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Merged user config with defaults configuration\r\n         *\r\n         * @param {Object} config - user config\r\n         * @returns {Object} merged config\r\n         */\r\n        processingConfig: function (config) {\r\n            return _.extend({}, defaults, config);\r\n        }\r\n    };\r\n\r\n    ko.bindingHandlers.tooltip = {\r\n\r\n        /**\r\n         * Initialize tooltip\r\n         *\r\n         * @param {Object} elem - tooltip DOM element\r\n         * @param {Function} valueAccessor - ko observable property, tooltip data\r\n         * @param {Object} allBindings - all bindings on current element\r\n         * @param {Object} viewModel - current element viewModel\r\n         * @param {Object} bindingCtx - current element binding context\r\n         */\r\n        init: function (elem, valueAccessor, allBindings, viewModel, bindingCtx) {\r\n            var config = tooltip.processingConfig(valueAccessor()),\r\n                $parentScope = config.parentScope ? $(config.parentScope) : $(elem).parent(),\r\n                tooltipId;\r\n\r\n            $(elem).addClass('hidden');\r\n\r\n            if (isTouchDevice) {\r\n                config.action = 'click';\r\n            }\r\n            tooltipId = tooltip.setTooltip(config);\r\n\r\n            if (config.action === 'hover') {\r\n                $parentScope.on(\r\n                    'mouseenter',\r\n                    config.trigger,\r\n                    tooltip.setContent.bind(null, elem, viewModel, tooltipId, bindingCtx)\r\n                );\r\n                $parentScope.on(\r\n                    'mouseleave',\r\n                    config.trigger,\r\n                    tooltip.checkPreviousTooltip.bind(null, tooltipId)\r\n                );\r\n            } else if (config.action === 'click') {\r\n                $parentScope.on(\r\n                    'click',\r\n                    config.trigger,\r\n                    tooltip.toggleTooltip.bind(null, elem, viewModel, tooltipId, bindingCtx)\r\n                );\r\n            }\r\n\r\n            return {\r\n                controlsDescendantBindings: true\r\n            };\r\n        }\r\n    };\r\n\r\n    renderer.addAttribute('tooltip');\r\n});\r\n","Magento_Ui/js/lib/knockout/extender/bound-nodes.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'mage/utils/wrapper',\r\n    'uiEvents',\r\n    'es6-collections'\r\n], function (ko, _, wrapper, Events) {\r\n    'use strict';\r\n\r\n    var nodesMap = new WeakMap();\r\n\r\n    /**\r\n     * Returns a array of nodes associated with a specified model.\r\n     *\r\n     * @param {Object} model\r\n     * @returns {Undefined|Array}\r\n     */\r\n    function getBounded(model) {\r\n        return nodesMap.get(model);\r\n    }\r\n\r\n    /**\r\n     * Removes specified node to models' associations list, if it's\r\n     * a root node (node is not a descendant of any previously added nodes).\r\n     * Triggers 'addNode' event.\r\n     *\r\n     * @param {Object} model\r\n     * @param {HTMLElement} node\r\n     */\r\n    function addBounded(model, node) {\r\n        var nodes = getBounded(model),\r\n            isRoot;\r\n\r\n        if (!nodes) {\r\n            nodesMap.set(model, [node]);\r\n\r\n            Events.trigger.call(model, 'addNode', node);\r\n\r\n            return;\r\n        }\r\n\r\n        isRoot = nodes.every(function (bounded) {\r\n            return !bounded.contains(node);\r\n        });\r\n\r\n        if (isRoot) {\r\n            nodes.push(node);\r\n\r\n            Events.trigger.call(model, 'addNode', node);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes specified node from models' associations list.\r\n     * Triggers 'removeNode' event.\r\n     *\r\n     * @param {Object} model\r\n     * @param {HTMLElement} node\r\n     */\r\n    function removeBounded(model, node) {\r\n        var nodes = getBounded(model),\r\n            index;\r\n\r\n        if (!nodes) {\r\n            return;\r\n        }\r\n\r\n        index = nodes.indexOf(node);\r\n\r\n        if (~index) {\r\n            nodes.splice(index, 0);\r\n\r\n            Events.trigger.call(model, 'removeNode', node);\r\n        }\r\n\r\n        if (!nodes.length) {\r\n            nodesMap.delete(model);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns node's first sibling of 'element' type within the common component scope\r\n     *\r\n     * @param {HTMLElement} node\r\n     * @returns {HTMLElement}\r\n     */\r\n    function getElement(node, data) {\r\n        var elem;\r\n\r\n        while (node.nextElementSibling) {\r\n            node = node.nextElementSibling;\r\n\r\n            if (node.nodeType === 1 && ko.dataFor(node) === data) {\r\n                elem = node;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    wrapper.extend(ko, {\r\n\r\n        /**\r\n         * Extends kncokouts' 'applyBindings'\r\n         * to track nodes associated with model.\r\n         *\r\n         * @param {Function} orig - Original 'applyBindings' method.\r\n         */\r\n        applyBindings: function (orig, ctx, node) {\r\n            var result = orig(),\r\n                data = ctx && (ctx.$data || ctx);\r\n\r\n            if (node && node.nodeType === 8) {\r\n                node = getElement(node, data);\r\n            }\r\n\r\n            if (!node || node.nodeType !== 1) {\r\n                return result;\r\n            }\r\n\r\n            if (data && data.registerNodes) {\r\n                addBounded(data, node);\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Extends kncokouts' cleanNode\r\n         * to track nodes associated with model.\r\n         *\r\n         * @param {Function} orig - Original 'cleanNode' method.\r\n         */\r\n        cleanNode: function (orig, node) {\r\n            var result = orig(),\r\n                data;\r\n\r\n            if (node.nodeType !== 1) {\r\n                return result;\r\n            }\r\n\r\n            data = ko.dataFor(node);\r\n\r\n            if (data && data.registerNodes) {\r\n                removeBounded(data, node);\r\n            }\r\n\r\n            return result;\r\n        }\r\n    });\r\n\r\n    return {\r\n\r\n        /**\r\n         * Returns root nodes associated with a model. If callback is provided,\r\n         * will iterate through all of the present nodes triggering callback\r\n         * for each of it. Also it will subscribe to the 'addNode' event.\r\n         *\r\n         * @param {Object} model\r\n         * @param {Function} [callback]\r\n         * @returns {Array|Undefined}\r\n         */\r\n        get: function (model, callback) {\r\n            var nodes = getBounded(model) || [];\r\n\r\n            if (!_.isFunction(callback)) {\r\n                return nodes;\r\n            }\r\n\r\n            nodes.forEach(function (node) {\r\n                callback(node);\r\n            });\r\n\r\n            this.add.apply(this, arguments);\r\n        },\r\n\r\n        /**\r\n         * Subscribes to adding of nodes associated with a model.\r\n         *\r\n         * @param {Object} model\r\n         */\r\n        add: function (model) {\r\n            var args = _.toArray(arguments).slice(1);\r\n\r\n            args.unshift('addNode');\r\n\r\n            Events.on.apply(model, args);\r\n        },\r\n\r\n        /**\r\n         * Subscribes to removal of nodes associated with a model.\r\n         *\r\n         * @param {Object} model\r\n         */\r\n        remove: function (model) {\r\n            var args = _.toArray(arguments).slice(1);\r\n\r\n            args.unshift('removeNode');\r\n\r\n            Events.on.apply(model, args);\r\n        },\r\n\r\n        /**\r\n         * Removes subscriptions from the model.\r\n         *\r\n         * @param {Object} model\r\n         */\r\n        off: function (model) {\r\n            var args = _.toArray(arguments).slice(1);\r\n\r\n            Events.off.apply(model, args);\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/knockout/extender/observable_array.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'underscore'\r\n], function (ko, _) {\r\n    'use strict';\r\n\r\n    function iterator(callback, args, elem) {\r\n        callback = elem[callback];\r\n\r\n        if (_.isFunction(callback)) {\r\n            return callback.apply(elem, args);\r\n        }\r\n\r\n        return callback;\r\n    }\r\n\r\n    function wrapper(method) {\r\n        return function (iteratee) {\r\n            var callback = iteratee,\r\n                elems = this(),\r\n                args = _.toArray(arguments);\r\n\r\n            if (_.isString(iteratee)) {\r\n                callback = iterator.bind(null, iteratee, args.slice(1));\r\n\r\n                args.unshift(callback);\r\n            }\r\n\r\n            args.unshift(elems);\r\n\r\n            return _[method].apply(_, args);\r\n        };\r\n    }\r\n\r\n    _.extend(ko.observableArray.fn, {\r\n        each: wrapper('each'),\r\n\r\n        map: wrapper('map'),\r\n\r\n        filter: wrapper('filter'),\r\n\r\n        some: wrapper('some'),\r\n\r\n        every: wrapper('every'),\r\n\r\n        groupBy: wrapper('groupBy'),\r\n\r\n        sortBy: wrapper('sortBy'),\r\n\r\n        findWhere: function (properties) {\r\n            return _.findWhere(this(), properties);\r\n        },\r\n\r\n        contains: function (value) {\r\n            return _.contains(this(), value);\r\n        },\r\n\r\n        hasNo: function () {\r\n            return !this.contains.apply(this, arguments);\r\n        },\r\n\r\n        getLength: function () {\r\n            return this().length;\r\n        },\r\n\r\n        indexBy: function (key) {\r\n            return _.indexBy(this(), key);\r\n        },\r\n\r\n        without: function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n\r\n            args.unshift(this());\r\n\r\n            return _.without.apply(_, args);\r\n        },\r\n\r\n        first: function () {\r\n            return _.first(this());\r\n        },\r\n\r\n        last: function () {\r\n            return _.last(this());\r\n        },\r\n\r\n        pluck: function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n\r\n            args.unshift(this());\r\n\r\n            return _.pluck.apply(_, args);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/lib/knockout/template/engine.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    './observable_source',\r\n    './renderer'\r\n], function (ko, _, Source, renderer) {\r\n    'use strict';\r\n\r\n    var RemoteTemplateEngine,\r\n        NativeTemplateEngine = ko.nativeTemplateEngine,\r\n        sources = {};\r\n\r\n    /**\r\n     * Remote template engine class. Is used to be able to load remote templates via knockout template binding.\r\n     */\r\n    RemoteTemplateEngine = function () {};\r\n\r\n    /**\r\n     * Creates unique template identifier based on template name and it's extenders (optional)\r\n     * @param  {String} templateName\r\n     * @return {String} - unique template identifier\r\n     */\r\n    function createTemplateIdentifier(templateName) {\r\n        return templateName;\r\n    }\r\n\r\n    RemoteTemplateEngine.prototype = new NativeTemplateEngine;\r\n    RemoteTemplateEngine.prototype.constructor = RemoteTemplateEngine;\r\n\r\n    /**\r\n     * Overrided method of native knockout template engine.\r\n     * Caches template after it's unique name and renders in once.\r\n     * If template name is not typeof string, delegates work to knockout.templateSources.anonymousTemplate.\r\n     * @param  {*} template\r\n     * @returns {TemplateSource} Object with methods 'nodes' and 'data'.\r\n     */\r\n    RemoteTemplateEngine.prototype.makeTemplateSource = function (template) {\r\n        var source,\r\n            templateId;\r\n\r\n        if (typeof template === 'string') {\r\n            templateId = createTemplateIdentifier(template);\r\n            source = sources[templateId];\r\n\r\n            if (!source) {\r\n                source = new Source(template);\r\n                sources[templateId] = source;\r\n\r\n                renderer.render(template).done(function (rendered) {\r\n                    source.nodes(rendered);\r\n                });\r\n            }\r\n\r\n            return source;\r\n        } else if (template.nodeType === 1 || template.nodeType === 8) {\r\n            source = new ko.templateSources.anonymousTemplate(template);\r\n\r\n            return source;\r\n        }\r\n\r\n        throw new Error('Unknown template type: ' + template);\r\n    };\r\n\r\n    /**\r\n     * Overrided method of native knockout template engine.\r\n     * Should return array of html elements.\r\n     * @param  {TemplateSource} templateSource - object with methods 'nodes' and 'data'.\r\n     * @return {Array} - array of html elements\r\n     */\r\n    RemoteTemplateEngine.prototype.renderTemplateSource = function (templateSource) {\r\n        var nodes = templateSource.nodes();\r\n\r\n        return ko.utils.cloneNodes(nodes);\r\n    };\r\n\r\n    /**\r\n     * Overrided method of native knockout template engine.\r\n     * Created in order to invoke makeTemplateSource method with custom set of params.\r\n     * @param  {*} template - template identifier\r\n     * @param  {ko.bindingContext} bindingContext\r\n     * @param  {Object} options - options, passed to template binding\r\n     * @param  {HTMLElement} templateDocument - document\r\n     * @return {Array} - array of html elements\r\n     */\r\n    RemoteTemplateEngine.prototype.renderTemplate = function (template, bindingContext, options, templateDocument) {\r\n        var templateSource = this.makeTemplateSource(template, templateDocument, options);\r\n\r\n        return this.renderTemplateSource(templateSource, bindingContext, options);\r\n    };\r\n\r\n    return new RemoteTemplateEngine;\r\n});\r\n","Magento_Ui/js/lib/knockout/template/loader.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    var licenseRegExp   = /<!--[\\s\\S]*?-->/,\r\n        defaultPlugin   = 'text',\r\n        defaultExt      = 'html';\r\n\r\n    /**\r\n     * Checks of provided string contains a file extension.\r\n     *\r\n     * @param {String} str - String to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function hasFileExtension(str) {\r\n        return !!~str.indexOf('.') && !!str.split('.').pop();\r\n    }\r\n\r\n    /**\r\n     * Checks if provided string contains a requirejs's plugin reference.\r\n     *\r\n     * @param {String} str - String to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function hasPlugin(str) {\r\n        return !!~str.indexOf('!');\r\n    }\r\n\r\n    /**\r\n     * Checks if provided string is a full path to the file.\r\n     *\r\n     * @param {String} str - String to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function isFullPath(str) {\r\n        return !!~str.indexOf('://');\r\n    }\r\n\r\n    /**\r\n     * Removes license comment from the provided string.\r\n     *\r\n     * @param {String} content - String to be processed.\r\n     * @returns {String}\r\n     */\r\n    function removeLicense(content) {\r\n        return content.replace(licenseRegExp, function (match) {\r\n            return ~match.indexOf('/**') ? '' : match;\r\n        });\r\n    }\r\n\r\n    return {\r\n\r\n        /**\r\n         * Attempts to extract template by provided path from\r\n         * a DOM element and falls back to a file loading if\r\n         * none of the DOM nodes was found.\r\n         *\r\n         * @param {String} path - Path to the template or a DOM selector.\r\n         * @returns {jQueryPromise}\r\n         */\r\n        loadTemplate: function (path) {\r\n            var content = this.loadFromNode(path),\r\n                defer;\r\n\r\n            if (content) {\r\n                defer = $.Deferred();\r\n\r\n                defer.resolve(content);\r\n\r\n                return defer.promise();\r\n            }\r\n\r\n            return this.loadFromFile(path);\r\n        },\r\n\r\n        /**\r\n         * Loads template from external file by provided\r\n         * path, which will be preliminary formatted.\r\n         *\r\n         * @param {String} path - Path to the template.\r\n         * @returns {jQueryPromise}\r\n         */\r\n        loadFromFile: function (path) {\r\n            var loading = $.Deferred();\r\n\r\n            path = this.formatPath(path);\r\n\r\n            require([path], function (template) {\r\n                template = removeLicense(template);\r\n\r\n                loading.resolve(template);\r\n            });\r\n\r\n            return loading.promise();\r\n        },\r\n\r\n        /**\r\n         * Attempts to extract content of a node found by provided selector.\r\n         *\r\n         * @param {String} selector - Node's selector (not necessary valid).\r\n         * @returns {String|Boolean} If specified node doesn't exists\r\n         *      'false' will be returned, otherwise returns node's content.\r\n         */\r\n        loadFromNode: function (selector) {\r\n            var node;\r\n\r\n            try {\r\n                node =\r\n                    document.getElementById(selector) ||\r\n                    document.querySelector(selector);\r\n\r\n                return node ? node.innerHTML : false;\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Adds requirejs's plugin and file extension to\r\n         * to the provided string if it's necessary.\r\n         *\r\n         * @param {String} path - Path to be processed.\r\n         * @returns {String} Formatted path.\r\n         */\r\n        formatPath: function (path) {\r\n            var result = path;\r\n\r\n            if (!hasPlugin(path)) {\r\n                result = defaultPlugin + '!' + result;\r\n            }\r\n\r\n            if (isFullPath(path)) {\r\n                return result;\r\n            }\r\n\r\n            if (!hasFileExtension(path)) {\r\n                result += '.' + defaultExt;\r\n            }\r\n\r\n            return result.replace(/^([^\\/]+)/g, '$1/template');\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/knockout/template/observable_source.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/**\r\n * Is being used by knockout template engine to store template to.\r\n */\r\ndefine([\r\n    'ko',\r\n    'uiClass'\r\n], function (ko, Class) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n\r\n        /**\r\n         * Initializes templateName, _data, nodes properties.\r\n         *\r\n         * @param  {template} template - identifier of template\r\n         */\r\n        initialize: function (template) {\r\n            this.templateName = template;\r\n            this._data = {};\r\n            this.nodes = ko.observable([]);\r\n        },\r\n\r\n        /**\r\n         * Data setter. If only one arguments passed, returns corresponding value.\r\n         * Else, writes into it.\r\n         * @param  {String} key - key to write to or to read from\r\n         * @param  {*} value\r\n         * @return {*} - if 1 arg provided, returnes _data[key] property\r\n         */\r\n        data: function (key, value) {\r\n            if (arguments.length === 1) {\r\n                return this._data[key];\r\n            }\r\n\r\n            this._data[key] = value;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/lib/knockout/template/renderer.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    './loader'\r\n], function ($, _, loader) {\r\n    'use strict';\r\n\r\n    var colonReg    = /\\\\:/g,\r\n        attributes  = {},\r\n        elements    = {},\r\n        globals     = [],\r\n        renderer,\r\n        preset;\r\n\r\n    renderer = {\r\n\r\n        /**\r\n         * Loads template by provided path and\r\n         * than converts it's content to html.\r\n         *\r\n         * @param {String} tmplPath - Path to the template.\r\n         * @returns {jQueryPromise}\r\n         */\r\n        render: function (tmplPath) {\r\n            var loadPromise = loader.loadTemplate(tmplPath);\r\n\r\n            return loadPromise.then(renderer.parseTemplate);\r\n        },\r\n\r\n        /**\r\n         * Parses provided string as html content\r\n         * and returns an array of DOM elements.\r\n         *\r\n         * @param {String} html - String to be processed.\r\n         * @returns {Array}\r\n         */\r\n        parseTemplate: function (html) {\r\n            var fragment = document.createDocumentFragment();\r\n\r\n            $(fragment).append(html);\r\n\r\n            return renderer.normalize(fragment);\r\n        },\r\n\r\n        /**\r\n         * Processes custom attributes and nodes of provided DOM element.\r\n         *\r\n         * @param {HTMLElement} content - Element to be processed.\r\n         * @returns {Array} An array of content's child nodes.\r\n         */\r\n        normalize: function (content) {\r\n            globals.forEach(function (handler) {\r\n                handler(content);\r\n            });\r\n\r\n            return _.toArray(content.childNodes);\r\n        },\r\n\r\n        /**\r\n         * Adds new global content handler.\r\n         *\r\n         * @param {Function} handler - Function which will be invoked for\r\n         *      an every content passed to 'normalize' method.\r\n         * @returns {Renderer} Chainable.\r\n         */\r\n        addGlobal: function (handler) {\r\n            if (!_.contains(globals, handler)) {\r\n                globals.push(handler);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes specified global content handler.\r\n         *\r\n         * @param {Function} handler - Handler to be removed.\r\n         * @returns {Renderer} Chainable.\r\n         */\r\n        removeGlobal: function (handler) {\r\n            var index = globals.indexOf(handler);\r\n\r\n            if (~index) {\r\n                globals.splice(index, 1);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds new custom attribute handler.\r\n         *\r\n         * @param {String} id - Attribute identifier.\r\n         * @param {(Object|Function)} [config={}]\r\n         * @returns {Renderer} Chainable.\r\n         */\r\n        addAttribute: function (id, config) {\r\n            var data = {\r\n                name: id,\r\n                binding: id,\r\n                handler: renderer.handlers.attribute\r\n            };\r\n\r\n            if (_.isFunction(config)) {\r\n                data.handler = config;\r\n            } else if (_.isObject(config)) {\r\n                _.extend(data, config);\r\n            }\r\n\r\n            data.id = id;\r\n            attributes[id] = data;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes specified attribute handler.\r\n         *\r\n         * @param {String} id - Attribute identifier.\r\n         * @returns {Renderer} Chainable.\r\n         */\r\n        removeAttribute: function (id) {\r\n            delete attributes[id];\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds new custom node handler.\r\n         *\r\n         * @param {String} id - Node identifier.\r\n         * @param {(Object|Function)} [config={}]\r\n         * @returns {Renderer} Chainable.\r\n         */\r\n        addNode: function (id, config) {\r\n            var data = {\r\n                name: id,\r\n                binding: id,\r\n                handler: renderer.handlers.node\r\n            };\r\n\r\n            if (_.isFunction(config)) {\r\n                data.handler = config;\r\n            } else if (_.isObject(config)) {\r\n                _.extend(data, config);\r\n            }\r\n\r\n            data.id = id;\r\n            elements[id] = data;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes specified custom node handler.\r\n         *\r\n         * @param {String} id - Node identifier.\r\n         * @returns {Renderer} Chainable.\r\n         */\r\n        removeNode: function (id) {\r\n            delete elements[id];\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if provided DOM element is a custom node.\r\n         *\r\n         * @param {HTMLElement} node - Node to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isCustomNode: function (node) {\r\n            return _.some(elements, function (elem) {\r\n                return elem.name.toUpperCase() === node.tagName;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Processes custom attributes of a content's child nodes.\r\n         *\r\n         * @param {HTMLElement} content - DOM element to be processed.\r\n         */\r\n        processAttributes: function (content) {\r\n            var repeat;\r\n\r\n            repeat = _.some(attributes, function (attr) {\r\n                var attrName = attr.name,\r\n                    nodes    = content.querySelectorAll('[' + attrName + ']'),\r\n                    handler  = attr.handler;\r\n\r\n                return _.toArray(nodes).some(function (node) {\r\n                    var data = node.getAttribute(attrName);\r\n\r\n                    return handler(node, data, attr) === true;\r\n                });\r\n            });\r\n\r\n            if (repeat) {\r\n                renderer.processAttributes(content);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Processes custom nodes of a provided content.\r\n         *\r\n         * @param {HTMLElement} content - DOM element to be processed.\r\n         */\r\n        processNodes: function (content) {\r\n            var repeat;\r\n\r\n            repeat = _.some(elements, function (element) {\r\n                var nodes   = content.querySelectorAll(element.name),\r\n                    handler = element.handler;\r\n\r\n                return _.toArray(nodes).some(function (node) {\r\n                    var data = node.getAttribute('args');\r\n\r\n                    return handler(node, data, element) === true;\r\n                });\r\n            });\r\n\r\n            if (repeat) {\r\n                renderer.processNodes(content);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Wraps provided string in curly braces if it's necessary.\r\n         *\r\n         * @param {String} args - String to be wrapped.\r\n         * @returns {String} Wrapped string.\r\n         */\r\n        wrapArgs: function (args) {\r\n            if (~args.indexOf('\\\\:')) {\r\n                args = args.replace(colonReg, ':');\r\n            } else if (~args.indexOf(':') && !~args.indexOf('}')) {\r\n                args = '{' + args + '}';\r\n            }\r\n\r\n            return args;\r\n        },\r\n\r\n        /**\r\n         * Wraps child nodes of provided DOM element\r\n         * with knockout's comment tag.\r\n         *\r\n         * @param {HTMLElement} node - Node whose children should be wrapped.\r\n         * @param {String} binding - Name of the binding for the opener comment tag.\r\n         * @param {String} data - Data associated with a binding.\r\n         *\r\n         * @example\r\n         *      <div id=\"example\"><span/></div>\r\n         *      wrapChildren(document.getElementById('example'), 'foreach', 'data');\r\n         *      =>\r\n         *      <div id=\"example\">\r\n         *      <!-- ko foreach: data -->\r\n         *          <span></span>\r\n         *      <!-- /ko -->\r\n         *      </div>\r\n         */\r\n        wrapChildren: function (node, binding, data) {\r\n            var tag = this.createComment(binding, data),\r\n                $node = $(node);\r\n\r\n            $node.prepend(tag.open);\r\n            $node.append(tag.close);\r\n        },\r\n\r\n        /**\r\n         * Wraps specified node with knockout's comment tag.\r\n         *\r\n         * @param {HTMLElement} node - Node to be wrapped.\r\n         * @param {String} binding - Name of the binding for the opener comment tag.\r\n         * @param {String} data - Data associated with a binding.\r\n         *\r\n         * @example\r\n         *      <div id=\"example\"></div>\r\n         *      wrapNode(document.getElementById('example'), 'foreach', 'data');\r\n         *      =>\r\n         *      <!-- ko foreach: data -->\r\n         *          <div id=\"example\"></div>\r\n         *      <!-- /ko -->\r\n         */\r\n        wrapNode: function (node, binding, data) {\r\n            var tag = this.createComment(binding, data),\r\n                $node = $(node);\r\n\r\n            $node.before(tag.open);\r\n            $node.after(tag.close);\r\n        },\r\n\r\n        /**\r\n         * Creates knockouts' comment tag for the provided binding.\r\n         *\r\n         * @param {String} binding - Name of the binding.\r\n         * @param {String} data - Data associated with a binding.\r\n         * @returns {Object} Object with an open and close comment elements.\r\n         */\r\n        createComment: function (binding, data) {\r\n            return {\r\n                open: document.createComment(' ko ' + binding + ': ' + data + ' '),\r\n                close: document.createComment(' /ko ')\r\n            };\r\n        }\r\n    };\r\n\r\n    renderer.handlers = {\r\n\r\n        /**\r\n         * Basic node handler. Replaces custom nodes\r\n         * with a corresponding knockout's comment tag.\r\n         *\r\n         * @param {HTMLElement} node - Node to be processed.\r\n         * @param {String} data\r\n         * @param {Object} element\r\n         * @returns {Boolean} True\r\n         *\r\n         * @example Sample syntaxes conversions.\r\n         *      <with args=\"model\">\r\n         *          <span/>\r\n         *      </with>\r\n         *      =>\r\n         *      <!-- ko with: model-->\r\n         *          <span/>\r\n         *      <!-- /ko -->\r\n         */\r\n        node: function (node, data, element) {\r\n            data = renderer.wrapArgs(data);\r\n\r\n            renderer.wrapNode(node, element.binding, data);\r\n            $(node).replaceWith(node.childNodes);\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Base attribute handler. Replaces custom attributes with\r\n         * a corresponding knockouts' data binding.\r\n         *\r\n         * @param {HTMLElement} node - Node to be processed.\r\n         * @param {String} data - Data associated with a binding.\r\n         * @param {Object} attr - Attribute definition.\r\n         *\r\n         * @example Sample syntaxes conversions.\r\n         *      <div text=\"label\"></div>\r\n         *      =>\r\n         *      <div data-bind=\"text: label\"></div>\r\n         */\r\n        attribute: function (node, data, attr) {\r\n            data = renderer.wrapArgs(data);\r\n\r\n            renderer.bindings.add(node, attr.binding, data);\r\n            node.removeAttribute(attr.name);\r\n        },\r\n\r\n        /**\r\n         * Wraps provided node with a knockouts' comment tag.\r\n         *\r\n         * @param {HTMLElement} node - Node that will be wrapped.\r\n         * @param {String} data - Data associated with a binding.\r\n         * @param {Object} attr - Attribute definition.\r\n         *\r\n         * @example\r\n         *      <div outereach=\"data\" class=\"test\"></div>\r\n         *      =>\r\n         *      <!-- ko foreach: data -->\r\n         *          <div class=\"test\"></div>\r\n         *      <!-- /ko -->\r\n         */\r\n        wrapAttribute: function (node, data, attr) {\r\n            data = renderer.wrapArgs(data);\r\n\r\n            renderer.wrapNode(node, attr.binding, data);\r\n            node.removeAttribute(attr.name);\r\n        }\r\n    };\r\n\r\n    renderer.bindings = {\r\n\r\n        /**\r\n         * Appends binding string to the current\r\n         * 'data-bind' attribute of provided node.\r\n         *\r\n         * @param {HTMLElement} node - DOM element whose 'data-bind' attribute will be extended.\r\n         * @param {String} name - Name of a binding.\r\n         * @param {String} data - Data associated with the binding.\r\n         */\r\n        add: function (node, name, data) {\r\n            var bindings = this.get(node);\r\n\r\n            if (bindings) {\r\n                bindings += ', ';\r\n            }\r\n\r\n            bindings += name;\r\n\r\n            if (data) {\r\n                bindings += ': ' + data;\r\n            }\r\n\r\n            this.set(node, bindings);\r\n        },\r\n\r\n        /**\r\n         * Extracts value of a 'data-bind' attribute from provided node.\r\n         *\r\n         * @param {HTMLElement} node - Node whose attribute to be extracted.\r\n         * @returns {String}\r\n         */\r\n        get: function (node) {\r\n            return node.getAttribute('data-bind') || '';\r\n        },\r\n\r\n        /**\r\n         * Sets 'data-bind' attribute of the specified node\r\n         * to the provided value.\r\n         *\r\n         * @param {HTMLElement} node - Node whose attribute will be altered.\r\n         * @param {String} bindings - New value of 'data-bind' attribute.\r\n         */\r\n        set: function (node, bindings) {\r\n            node.setAttribute('data-bind', bindings);\r\n        }\r\n    };\r\n\r\n    renderer\r\n        .addGlobal(renderer.processAttributes)\r\n        .addGlobal(renderer.processNodes);\r\n\r\n    /**\r\n     * Collection of default binding conversions.\r\n     */\r\n    preset = {\r\n        nodes: _.object([\r\n            'if',\r\n            'text',\r\n            'with',\r\n            'scope',\r\n            'ifnot',\r\n            'foreach',\r\n            'component'\r\n        ], Array.prototype),\r\n        attributes: _.object([\r\n            'css',\r\n            'attr',\r\n            'html',\r\n            'with',\r\n            'text',\r\n            'click',\r\n            'event',\r\n            'submit',\r\n            'enable',\r\n            'disable',\r\n            'options',\r\n            'visible',\r\n            'template',\r\n            'hasFocus',\r\n            'textInput',\r\n            'component',\r\n            'uniqueName',\r\n            'optionsText',\r\n            'optionsValue',\r\n            'checkedValue',\r\n            'selectedOptions'\r\n        ], Array.prototype)\r\n    };\r\n\r\n    _.extend(preset.attributes, {\r\n        if: renderer.handlers.wrapAttribute,\r\n        ifnot: renderer.handlers.wrapAttribute,\r\n        innerif: {\r\n            binding: 'if'\r\n        },\r\n        innerifnot: {\r\n            binding: 'ifnot'\r\n        },\r\n        outereach: {\r\n            binding: 'foreach',\r\n            handler: renderer.handlers.wrapAttribute\r\n        },\r\n        foreach: {\r\n            name: 'each'\r\n        },\r\n        value: {\r\n            name: 'ko-value'\r\n        },\r\n        style: {\r\n            name: 'ko-style'\r\n        },\r\n        checked: {\r\n            name: 'ko-checked'\r\n        },\r\n        disabled: {\r\n            name: 'ko-disabled',\r\n            binding: 'disable'\r\n        },\r\n        focused: {\r\n            name: 'ko-focused',\r\n            binding: 'hasFocus'\r\n        },\r\n\r\n        /**\r\n         * Custom 'render' attrobute handler function. Wraps child elements\r\n         * of a node with knockout's 'ko template:' comment tag.\r\n         *\r\n         * @param {HTMLElement} node - Element to be processed.\r\n         * @param {String} data - Data specified in 'render' attribute of a node.\r\n         */\r\n        render: function (node, data) {\r\n            data = data || 'getTemplate()';\r\n            data = renderer.wrapArgs(data);\r\n\r\n            renderer.wrapChildren(node, 'template', data);\r\n            node.removeAttribute('render');\r\n        }\r\n    });\r\n\r\n    _.extend(preset.nodes, {\r\n        foreach: {\r\n            name: 'each'\r\n        },\r\n\r\n        /**\r\n         * Custom 'render' node handler function.\r\n         * Replaces node with knockout's 'ko template:' comment tag.\r\n         *\r\n         * @param {HTMLElement} node - Element to be processed.\r\n         * @param {String} data - Data specified in 'args' attribute of a node.\r\n         */\r\n        render: function (node, data) {\r\n            data = data || 'getTemplate()';\r\n            data = renderer.wrapArgs(data);\r\n\r\n            renderer.wrapNode(node, 'template', data);\r\n            $(node).replaceWith(node.childNodes);\r\n        }\r\n    });\r\n\r\n    _.each(preset.attributes, function (data, id) {\r\n        renderer.addAttribute(id, data);\r\n    });\r\n\r\n    _.each(preset.nodes, function (data, id) {\r\n        renderer.addNode(id, data);\r\n    });\r\n\r\n    return renderer;\r\n});\r\n","Magento_Ui/js/lib/registry/registry.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'es6-collections'\r\n], function ($, _) {\r\n    'use strict';\r\n\r\n    var privateData = new WeakMap();\r\n\r\n    /**\r\n     * Extarcts private items storage associated\r\n     * with a provided registry instance.\r\n     *\r\n     * @param {Object} container\r\n     * @returns {Object}\r\n     */\r\n    function getItems(container) {\r\n        return privateData.get(container).items;\r\n    }\r\n\r\n    /**\r\n     * Extracts private requests array associated\r\n     * with a provided registry instance.\r\n     *\r\n     * @param {Object} container\r\n     * @returns {Array}\r\n     */\r\n    function getRequests(container) {\r\n        return privateData.get(container).requests;\r\n    }\r\n\r\n    /**\r\n     * Wrapper function used for convinient access to the elements.\r\n     * See 'async' method for examples of usage and comparison\r\n     * with a regular 'get' method.\r\n     *\r\n     * @param {(String|Object|Function)} name - Key of the requested element.\r\n     * @param {Registry} registry - Instance of a registry\r\n     *      where to search for the element.\r\n     * @param {(Function|String)} [method] - Optional callback function\r\n     *      or a name of the elements' method which\r\n     *      will be invoked when element is available in registry.\r\n     * @returns {*}\r\n     */\r\n    function async(name, registry, method) {\r\n        var args = _.toArray(arguments).slice(3);\r\n\r\n        if (_.isString(method)) {\r\n            registry.get(name, function (component) {\r\n                component[method].apply(component, args);\r\n            });\r\n        } else if (_.isFunction(method)) {\r\n            registry.get(name, method);\r\n        } else if (!args.length) {\r\n            return registry.get(name);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks that every property of the query object\r\n     * is present and equal to the corresponding\r\n     * property in target object.\r\n     * Note that non-strict comparison is used.\r\n     *\r\n     * @param {Object} query - Query object.\r\n     * @param {Object} target - Target object.\r\n     * @returns {Boolean}\r\n     */\r\n    function compare(query, target) {\r\n        var matches = true,\r\n            index,\r\n            keys,\r\n            key;\r\n\r\n        if (!_.isObject(query) || !_.isObject(target)) {\r\n            return false;\r\n        }\r\n\r\n        keys = Object.getOwnPropertyNames(query);\r\n        index = keys.length;\r\n\r\n        while (matches && index--) {\r\n            key = keys[index];\r\n\r\n            /* eslint-disable eqeqeq */\r\n            if (target[key] != query[key]) {\r\n                matches = false;\r\n            }\r\n\r\n            /* eslint-enable eqeqeq */\r\n        }\r\n\r\n        return matches;\r\n    }\r\n\r\n    /**\r\n     * Explodes incoming string into object if\r\n     * string is defined as a set of key = value pairs.\r\n     *\r\n     * @param {(String|*)} query - String to be processed.\r\n     * @returns {Object|*} Either created object or an unmodified incoming\r\n     *      value if conversion was not possible.\r\n     * @example Sample conversions.\r\n     *      'key = value, key2 = value2'\r\n     *      => {key: 'value', key2: 'value2'}\r\n     */\r\n    function explode(query) {\r\n        var result = {},\r\n            index,\r\n            data;\r\n\r\n        if (typeof query !== 'string' || !~query.indexOf('=')) {\r\n            return query;\r\n        }\r\n\r\n        query = query.split(',');\r\n        index = query.length;\r\n\r\n        while (index--) {\r\n            data = query[index].split('=');\r\n\r\n            result[data[0].trim()] = data[1].trim();\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Extracts items from the provided data object\r\n     * which matches specified search criteria.\r\n     *\r\n     * @param {Object} data - Data object where to perform a lookup.\r\n     * @param {(String|Object|Function)} query - Seach criteria.\r\n     * @param {Boolean} findAll - Flag that defines whether to\r\n     *      search for all applicable items or to stop on a first found entry.\r\n     * @returns {Array|Object|*}\r\n     */\r\n    function find(data, query, findAll) {\r\n        var iterator,\r\n            item;\r\n\r\n        query = explode(query);\r\n\r\n        if (typeof query === 'string') {\r\n            item = data[query];\r\n\r\n            if (findAll) {\r\n                return item ? [item] : [];\r\n            }\r\n\r\n            return item;\r\n        }\r\n\r\n        iterator = !_.isFunction(query) ?\r\n            compare.bind(null, query) :\r\n            query;\r\n\r\n        return findAll ?\r\n            _.filter(data, iterator) :\r\n            _.find(data, iterator);\r\n    }\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    function Registry() {\r\n        var data = {\r\n            items: {},\r\n            requests: []\r\n        };\r\n\r\n        this._updateRequests = _.debounce(this._updateRequests.bind(this), 10);\r\n        privateData.set(this, data);\r\n    }\r\n\r\n    Registry.prototype = {\r\n        constructor: Registry,\r\n\r\n        /**\r\n         * Retrieves item from registry which matches specified search criteria.\r\n         *\r\n         * @param {(Object|String|Function|Array)} query - Search condition (see examples).\r\n         * @param {Function} [callback] - Callback that will be invoked when\r\n         *      all of the requested items are available.\r\n         * @returns {*}\r\n         *\r\n         * @example Requesting item by it's name.\r\n         *      var obj = {index: 'test', sample: true};\r\n         *\r\n         *      registry.set('first', obj);\r\n         *      registry.get('first') === obj;\r\n         *      => true\r\n         *\r\n         * @example Requesting item with a specific properties.\r\n         *      registry.get('sample = 1, index = test') === obj;\r\n         *      => true\r\n         *      registry.get('sample = 0, index = foo') === obj;\r\n         *      => false\r\n         *\r\n         * @example Declaring search criteria as an object.\r\n         *      registry.get({sample: true}) === obj;\r\n         *      => true;\r\n         *\r\n         * @example Providing custom search handler.\r\n         *      registry.get(function (item) { return item.sample === true; }) === obj;\r\n         *      => true\r\n         *\r\n         * @example Sample asynchronous request declaration.\r\n         *      registry.get('index = test', function (item) {});\r\n         *\r\n         * @example Requesting multiple elements.\r\n         *      registry.set('second', {index: 'test2'});\r\n         *      registry.get(['first', 'second'], function (first, second) {});\r\n         */\r\n        get: function (query, callback) {\r\n            if (typeof callback !== 'function') {\r\n                return find(getItems(this), query);\r\n            }\r\n\r\n            this._addRequest(query, callback);\r\n        },\r\n\r\n        /**\r\n         * Sets provided item to the registry.\r\n         *\r\n         * @param {String} id - Item's identifier.\r\n         * @param {*} item - Item's data.\r\n         * returns {Registry} Chainable.\r\n         */\r\n        set: function (id, item) {\r\n            getItems(this)[id] = item;\r\n\r\n            this._updateRequests();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes specified item from registry.\r\n         * Note that search query is not applicable.\r\n         *\r\n         * @param {String} id - Item's identifier.\r\n         * @returns {Registry} Chainable.\r\n         */\r\n        remove: function (id) {\r\n            delete getItems(this)[id];\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Retrieves a collection of elements that match\r\n         * provided search criteria.\r\n         *\r\n         * @param {(Object|String|Function)} query - Search query.\r\n         *      See 'get' method for the syntax examples.\r\n         * @returns {Array} Found elements.\r\n         */\r\n        filter: function (query) {\r\n            return find(getItems(this), query, true);\r\n        },\r\n\r\n        /**\r\n         * Checks that at least one element in collection\r\n         * matches provided search criteria.\r\n         *\r\n         * @param {(Object|String|Function)} query - Search query.\r\n         *      See 'get' method for the syntax examples.\r\n         * @returns {Boolean}\r\n         */\r\n        has: function (query) {\r\n            return !!this.get(query);\r\n        },\r\n\r\n        /**\r\n         * Checks that registry contains a provided item.\r\n         *\r\n         * @param {*} item - Item to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        contains: function (item) {\r\n            return _.contains(getItems(this), item);\r\n        },\r\n\r\n        /**\r\n         * Extracts identifier of an item if it's present in registry.\r\n         *\r\n         * @param {*} item - Item whose identifier will be extracted.\r\n         * @returns {String|Undefined}\r\n         */\r\n        indexOf: function (item) {\r\n            return _.findKey(getItems(this), function (elem) {\r\n                return item === elem;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Same as a 'get' method except that it returns\r\n         * a promise object instead of invoking provided callback.\r\n         *\r\n         * @param {(String|Function|Object|Array)} query - Search query.\r\n         *      See 'get' method for the syntax examples.\r\n         * @returns {jQueryPromise}\r\n         */\r\n        promise: function (query) {\r\n            var defer    = $.Deferred(),\r\n                callback = defer.resolve.bind(defer);\r\n\r\n            this.get(query, callback);\r\n\r\n            return defer.promise();\r\n        },\r\n\r\n        /**\r\n         * Creates a wrapper function over the provided search query\r\n         * in order to provide somehow more convinient access to the\r\n         * registrie's items.\r\n         *\r\n         * @param {(String|Object|Function)} query - Search criteria.\r\n         *      See 'get' method for the syntax examples.\r\n         * @returns {Function}\r\n         *\r\n         * @example Comparison with a 'get' method on retrieving items.\r\n         *      var module = registry.async('name');\r\n         *\r\n         *      module();\r\n         *      => registry.get('name');\r\n         *\r\n         * @example Asynchronous request.\r\n         *      module(function (component) {});\r\n         *      => registry.get('name', function (component) {});\r\n         *\r\n         * @example Requesting item and invoking it's method with specified parameters.\r\n         *      module('trigger', true);\r\n         *      => registry.get('name', function (component) {\r\n         *          component.trigger(true);\r\n         *      });\r\n         */\r\n        async: function (query) {\r\n            return async.bind(null, query, this);\r\n        },\r\n\r\n        /**\r\n         * Creates new instance of a Registry.\r\n         *\r\n         * @returns {Registry} New instance.\r\n         */\r\n        create: function () {\r\n            return new Registry;\r\n        },\r\n\r\n        /**\r\n         * Adds new request to the queue or resolves it immediately\r\n         * if all of the required items are available.\r\n         *\r\n         * @private\r\n         * @param {(Object|String|Function|Array)} queries - Search criteria.\r\n         *      See 'get' method for the syntax examples.\r\n         * @param {Function} callback - Callback that will be invoked when\r\n         *      all of the requested items are available.\r\n         * @returns {Registry}\r\n         */\r\n        _addRequest: function (queries, callback) {\r\n            var request;\r\n\r\n            if (!Array.isArray(queries)) {\r\n                queries = queries ? [queries] : [];\r\n            }\r\n\r\n            request = {\r\n                queries: queries.map(explode),\r\n                callback: callback\r\n            };\r\n\r\n            this._canResolve(request) ?\r\n                this._resolveRequest(request) :\r\n                getRequests(this).push(request);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates requests list resolving applicable items.\r\n         *\r\n         * @private\r\n         * @returns {Registry} Chainable.\r\n         */\r\n        _updateRequests: function () {\r\n            getRequests(this)\r\n                .filter(this._canResolve, this)\r\n                .forEach(this._resolveRequest, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Resolves provided request invoking it's callback\r\n         * with items specified in query parameters.\r\n         *\r\n         * @private\r\n         * @param {Object} request - Request object.\r\n         * @returns {Registry} Chainable.\r\n         */\r\n        _resolveRequest: function (request) {\r\n            var requests = getRequests(this),\r\n                items    = request.queries.map(this.get, this),\r\n                index    = requests.indexOf(request);\r\n\r\n            request.callback.apply(null, items);\r\n\r\n            if (~index) {\r\n                requests.splice(index, 1);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if provided request can be resolved.\r\n         *\r\n         * @private\r\n         * @param {Object} request - Request object.\r\n         * @returns {Boolean}\r\n         */\r\n        _canResolve: function (request) {\r\n            var queries = request.queries;\r\n\r\n            return queries.every(this.has, this);\r\n        }\r\n    };\r\n\r\n    return new Registry;\r\n});\r\n","Magento_Ui/js/lib/validation/rules.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    './utils',\r\n    'moment',\r\n    'jquery/validate',\r\n    'jquery/ui',\r\n    'mage/translate'\r\n], function ($, _, utils, moment) {\r\n    'use strict';\r\n\r\n    /**\r\n     * validate credit card number using mod10\r\n     * @param s\r\n     * @return {Boolean}\r\n     */\r\n    function validateCreditCard(s) {\r\n        // remove non-numerics\r\n        var v = \"0123456789\",\r\n            w = \"\", i, j, k, m, c, a, x;\r\n        for (i = 0; i < s.length; i++) {\r\n            x = s.charAt(i);\r\n            if (v.indexOf(x, 0) != -1)\r\n                w += x;\r\n        }\r\n        // validate number\r\n        j = w.length / 2;\r\n        k = Math.floor(j);\r\n        m = Math.ceil(j) - k;\r\n        c = 0;\r\n        for (i = 0; i < k; i++) {\r\n            a = w.charAt(i * 2 + m) * 2;\r\n            c += a > 9 ? Math.floor(a / 10 + a % 10) : a;\r\n        }\r\n        for (i = 0; i < k + m; i++) {\r\n            c += w.charAt(i * 2 + 1 - m) * 1;\r\n        }\r\n        return (c % 10 === 0);\r\n    }\r\n\r\n    /**\r\n     * Collection of validation rules including rules from additional-methods.js\r\n     * @type {Object}\r\n     */\r\n    return _.mapObject({\r\n        \"min_text_length\": [\r\n            function (value, params) {\r\n                return _.isUndefined(value) || value.length === 0 || value.length >= +params;\r\n            },\r\n            $.mage.__('Please enter more or equal than {0} symbols.')\r\n        ],\r\n        \"max_text_length\": [\r\n            function (value, params) {\r\n                return !_.isUndefined(value) && value.length <= +params;\r\n            },\r\n            $.mage.__('Please enter less or equal than {0} symbols.')\r\n        ],\r\n        \"max-words\": [\r\n            function(value, params) {\r\n                return utils.stripHtml(value).match(/\\b\\w+\\b/g).length < params;\r\n            },\r\n            $.mage.__('Please enter {0} words or less.')\r\n        ],\r\n        \"min-words\": [\r\n            function(value, params) {\r\n                return utils.stripHtml(value).match(/\\b\\w+\\b/g).length >= params;\r\n            },\r\n            $.mage.__('Please enter at least {0} words.')\r\n        ],\r\n        \"range-words\": [\r\n            function(value, params) {\r\n                return utils.stripHtml(value).match(/\\b\\w+\\b/g).length >= params[0] &&\r\n                    value.match(/bw+b/g).length < params[1];\r\n            },\r\n            $.mage.__('Please enter between {0} and {1} words.')\r\n        ],\r\n        \"letters-with-basic-punc\": [\r\n            function(value) {\r\n                return /^[a-z\\-.,()\\u0027\\u0022\\s]+$/i.test(value);\r\n            },\r\n            $.mage.__('Letters or punctuation only please')\r\n        ],\r\n        \"alphanumeric\": [\r\n            function(value) {\r\n                return /^\\w+$/i.test(value);\r\n            },\r\n            $.mage.__('Letters, numbers, spaces or underscores only please')\r\n        ],\r\n        \"letters-only\": [\r\n            function(value) {\r\n                return /^[a-z]+$/i.test(value);\r\n            },\r\n            $.mage.__('Letters only please')\r\n        ],\r\n        \"no-whitespace\": [\r\n            function(value) {\r\n                return /^\\S+$/i.test(value);\r\n            },\r\n            $.mage.__('No white space please')\r\n        ],\r\n        \"zip-range\": [\r\n            function(value) {\r\n                return /^90[2-5]-\\d{2}-\\d{4}$/.test(value);\r\n            },\r\n            $.mage.__('Your ZIP-code must be in the range 902xx-xxxx to 905-xx-xxxx')\r\n        ],\r\n        \"integer\": [\r\n            function(value) {\r\n                return /^-?\\d+$/.test(value);\r\n            },\r\n            $.mage.__('A positive or negative non-decimal number please')\r\n        ],\r\n        \"vinUS\": [\r\n            function(value) {\r\n                if (value.length !== 17) {\r\n                    return false;\r\n                }\r\n                var i, n, d, f, cd, cdv;\r\n                var LL = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"P\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\r\n                var VL = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 7, 9, 2, 3, 4, 5, 6, 7, 8, 9];\r\n                var FL = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2];\r\n                var rs = 0;\r\n                for (i = 0; i < 17; i++) {\r\n                    f = FL[i];\r\n                    d = value.slice(i, i + 1);\r\n                    if (i === 8) {\r\n                        cdv = d;\r\n                    }\r\n                    if (!isNaN(d)) {\r\n                        d *= f;\r\n                    } else {\r\n                        for (n = 0; n < LL.length; n++) {\r\n                            if (d.toUpperCase() === LL[n]) {\r\n                                d = VL[n];\r\n                                d *= f;\r\n                                if (isNaN(cdv) && n === 8) {\r\n                                    cdv = LL[n];\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    rs += d;\r\n                }\r\n                cd = rs % 11;\r\n                if (cd === 10) {\r\n                    cd = \"X\";\r\n                }\r\n                if (cd === cdv) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            $.mage.__('The specified vehicle identification number (VIN) is invalid.')\r\n        ],\r\n        \"dateITA\": [\r\n            function(value) {\r\n                var check = false;\r\n                var re = /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/;\r\n                if (re.test(value)) {\r\n                    var adata = value.split('/');\r\n                    var gg = parseInt(adata[0], 10);\r\n                    var mm = parseInt(adata[1], 10);\r\n                    var aaaa = parseInt(adata[2], 10);\r\n                    var xdata = new Date(aaaa, mm - 1, gg);\r\n                    if ((xdata.getFullYear() === aaaa) &&\r\n                        (xdata.getMonth() === mm - 1) && (xdata.getDate() === gg )) {\r\n                        check = true;\r\n                    } else {\r\n                        check = false;\r\n                    }\r\n                } else {\r\n                    check = false;\r\n                }\r\n                return check;\r\n            },\r\n            $.mage.__('Please enter a correct date')\r\n        ],\r\n        \"dateNL\": [\r\n            function(value) {\r\n                return /^\\d\\d?[\\.\\/-]\\d\\d?[\\.\\/-]\\d\\d\\d?\\d?$/.test(value);\r\n            },\r\n            $.mage.__('Vul hier een geldige datum in.')\r\n        ],\r\n        \"time\": [\r\n            function(value) {\r\n                return /^([01]\\d|2[0-3])(:[0-5]\\d){0,2}$/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid time, between 00:00 and 23:59')\r\n        ],\r\n        \"time12h\": [\r\n            function(value) {\r\n                return /^((0?[1-9]|1[012])(:[0-5]\\d){0,2}(\\ [AP]M))$/i.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid time, between 00:00 am and 12:00 pm')\r\n        ],\r\n        \"phoneUS\": [\r\n            function(value) {\r\n                value = value.replace(/\\s+/g, \"\");\r\n                return value.length > 9 && value.match(/^(1-?)?(\\([2-9]\\d{2}\\)|[2-9]\\d{2})-?[2-9]\\d{2}-?\\d{4}$/);\r\n            },\r\n            $.mage.__('Please specify a valid phone number')\r\n        ],\r\n        \"phoneUK\": [\r\n            function(value) {\r\n                return value.length > 9 && value.match(/^(\\(?(0|\\+44)[1-9]{1}\\d{1,4}?\\)?\\s?\\d{3,4}\\s?\\d{3,4})$/);\r\n            },\r\n            $.mage.__('Please specify a valid phone number')\r\n        ],\r\n        \"mobileUK\": [\r\n            function(value) {\r\n                return value.length > 9 && value.match(/^((0|\\+44)7\\d{3}\\s?\\d{6})$/);\r\n            },\r\n            $.mage.__('Please specify a valid mobile number')\r\n        ],\r\n        \"stripped-min-length\": [\r\n            function(value, param) {\r\n                return $(value).text().length >= param;\r\n            },\r\n            $.mage.__('Please enter at least {0} characters')\r\n        ],\r\n        \"email2\": [\r\n            function(value) {\r\n                return /^((([a-z]|\\d|[!#\\$%&\\u0027\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&\\u0027\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\u0022)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\u0022)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)*(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?$/i.test(value);\r\n            },\r\n            $.validator.messages.email\r\n        ],\r\n        \"url2\": [\r\n            function(value) {\r\n                return /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&\\u0027\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)*(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&\\u0027\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&\\u0027\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&\\u0027\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&\\u0027\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i.test(value);\r\n            },\r\n            $.validator.messages.url\r\n        ],\r\n        \"credit-card-types\": [\r\n            function(value, param) {\r\n                if (/[^0-9-]+/.test(value)) {\r\n                    return false;\r\n                }\r\n                value = value.replace(/\\D/g, \"\");\r\n\r\n                var validTypes = 0x0000;\r\n\r\n                if (param.mastercard) {\r\n                    validTypes |= 0x0001;\r\n                }\r\n                if (param.visa) {\r\n                    validTypes |= 0x0002;\r\n                }\r\n                if (param.amex) {\r\n                    validTypes |= 0x0004;\r\n                }\r\n                if (param.dinersclub) {\r\n                    validTypes |= 0x0008;\r\n                }\r\n                if (param.enroute) {\r\n                    validTypes |= 0x0010;\r\n                }\r\n                if (param.discover) {\r\n                    validTypes |= 0x0020;\r\n                }\r\n                if (param.jcb) {\r\n                    validTypes |= 0x0040;\r\n                }\r\n                if (param.unknown) {\r\n                    validTypes |= 0x0080;\r\n                }\r\n                if (param.all) {\r\n                    validTypes = 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040 | 0x0080;\r\n                }\r\n                if (validTypes & 0x0001 && /^(51|52|53|54|55)/.test(value)) { //mastercard\r\n                    return value.length === 16;\r\n                }\r\n                if (validTypes & 0x0002 && /^(4)/.test(value)) { //visa\r\n                    return value.length === 16;\r\n                }\r\n                if (validTypes & 0x0004 && /^(34|37)/.test(value)) { //amex\r\n                    return value.length === 15;\r\n                }\r\n                if (validTypes & 0x0008 && /^(300|301|302|303|304|305|36|38)/.test(value)) { //dinersclub\r\n                    return value.length === 14;\r\n                }\r\n                if (validTypes & 0x0010 && /^(2014|2149)/.test(value)) { //enroute\r\n                    return value.length === 15;\r\n                }\r\n                if (validTypes & 0x0020 && /^(6011)/.test(value)) { //discover\r\n                    return value.length === 16;\r\n                }\r\n                if (validTypes & 0x0040 && /^(3)/.test(value)) { //jcb\r\n                    return value.length === 16;\r\n                }\r\n                if (validTypes & 0x0040 && /^(2131|1800)/.test(value)) { //jcb\r\n                    return value.length === 15;\r\n                }\r\n                if (validTypes & 0x0080) { //unknown\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            $.mage.__('Please enter a valid credit card number.')\r\n        ],\r\n        \"ipv4\": [\r\n            function(value) {\r\n                return /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/i.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid IP v4 address.')\r\n        ],\r\n        \"ipv6\": [\r\n            function(value) {\r\n                return /^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$/i.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid IP v6 address.')\r\n        ],\r\n        \"pattern\": [\r\n            function(value, param) {\r\n                return new RegExp(param).test(value);\r\n            },\r\n            $.mage.__('Invalid format.')\r\n        ],\r\n        \"validate-no-html-tags\": [\r\n            function(value) {\r\n                return !/<(\\/)?\\w+/.test(value);\r\n            },\r\n            $.mage.__('HTML tags are not allowed.')\r\n        ],\r\n        \"validate-select\": [\r\n            function(value) {\r\n                return ((value !== \"none\") && (value != null) && (value.length !== 0));\r\n            },\r\n            $.mage.__('Please select an option.')\r\n        ],\r\n        \"validate-no-empty\": [\r\n            function(value) {\r\n                return !utils.isEmpty(value);\r\n            },\r\n            $.mage.__('Empty Value.')\r\n        ],\r\n        \"validate-alphanum-with-spaces\": [\r\n            function(value) {\r\n                return utils.isEmptyNoTrim(value) || /^[a-zA-Z0-9 ]+$/.test(value);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9) or spaces only in this field.')\r\n        ],\r\n        \"validate-data\": [\r\n            function(value) {\r\n                return utils.isEmptyNoTrim(value) || /^[A-Za-z]+[A-Za-z0-9_]+$/.test(value);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9) or underscore (_) in this field, and the first character should be a letter.')\r\n        ],\r\n        \"validate-street\": [\r\n            function(value) {\r\n                return utils.isEmptyNoTrim(value) || /^[ \\w]{3,}([A-Za-z]\\.)?([ \\w]*\\#\\d+)?(\\r\\n| )[ \\w]{3,}/.test(value);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9), spaces and \"#\" in this field.')\r\n        ],\r\n        \"validate-phoneStrict\": [\r\n            function(value) {\r\n                return utils.isEmptyNoTrim(value) || /^(\\()?\\d{3}(\\))?(-|\\s)?\\d{3}(-|\\s)\\d{4}$/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid phone number. For example (123) 456-7890 or 123-456-7890.')\r\n        ],\r\n        \"validate-phoneLax\": [\r\n            function(value) {\r\n                return utils.isEmptyNoTrim(value) || /^((\\d[\\-. ]?)?((\\(\\d{3}\\))|\\d{3}))?[\\-. ]?\\d{3}[\\-. ]?\\d{4}$/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid phone number. For example (123) 456-7890 or 123-456-7890.')\r\n        ],\r\n        \"validate-fax\": [\r\n            function(value) {\r\n                return utils.isEmptyNoTrim(value) || /^(\\()?\\d{3}(\\))?(-|\\s)?\\d{3}(-|\\s)\\d{4}$/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid fax number (Ex: 123-456-7890).')\r\n        ],\r\n        \"validate-email\": [\r\n            function(value) {\r\n                return utils.isEmptyNoTrim(value) || /^([a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*@([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*\\.(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]){2,})$/i.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid email address (Ex: johndoe@domain.com).')\r\n        ],\r\n        \"validate-emailSender\": [\r\n            function(value) {\r\n                return utils.isEmptyNoTrim(value) || /^[\\S ]+$/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid email address (Ex: johndoe@domain.com).')\r\n        ],\r\n        \"validate-password\": [\r\n            function(value) {\r\n                if (value == null) {\r\n                    return false;\r\n                }\r\n                /*strip leading and trailing spaces*/\r\n                var pass = $.trim(value);\r\n                if (!pass.length) {\r\n                    return true;\r\n                }\r\n                return !(pass.length > 0 && pass.length < 6);\r\n            },\r\n            $.mage.__('Please enter 6 or more characters. Leading and trailing spaces will be ignored.')\r\n        ],\r\n        \"validate-admin-password\": [\r\n            function(value) {\r\n                if (value == null) {\r\n                    return false;\r\n                }\r\n                var pass = $.trim(value);\r\n                /*strip leading and trailing spaces*/\r\n                if (0 === pass.length) {\r\n                    return true;\r\n                }\r\n                if (!(/[a-z]/i.test(value)) || !(/[0-9]/.test(value))) {\r\n                    return false;\r\n                }\r\n                if (pass.length < 7) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter 7 or more characters, using both numeric and alphabetic.')\r\n        ],\r\n        \"validate-customer-password\": [\r\n            function (v, elm) {\r\n                var validator = this,\r\n                    length = 0,\r\n                    counter = 0;\r\n                var passwordMinLength = $(elm).data('password-min-length');\r\n                var passwordMinCharacterSets = $(elm).data('password-min-character-sets');\r\n                var pass = $.trim(v);\r\n                var result = pass.length >= passwordMinLength;\r\n                if (result == false) {\r\n                    /*eslint-disable max-len*/\r\n                    validator.passwordErrorMessage = $.mage.__('Minimum length of this field must be equal or greater than %1 symbols. Leading and trailing spaces will be ignored.').replace('%1', passwordMinLength);\r\n\r\n                    /*eslint-enable max-len*/\r\n                    return result;\r\n                }\r\n                if (pass.match(/\\d+/)) {\r\n                    counter ++;\r\n                }\r\n                if (pass.match(/[a-z]+/)) {\r\n                    counter ++;\r\n                }\r\n                if (pass.match(/[A-Z]+/)) {\r\n                    counter ++;\r\n                }\r\n                if (pass.match(/[^a-zA-Z0-9]+/)) {\r\n                    counter ++;\r\n                }\r\n                if (counter < passwordMinCharacterSets) {\r\n                    result = false;\r\n\r\n                    /*eslint-disable max-len*/\r\n                    validator.passwordErrorMessage = $.mage.__('Minimum of different classes of characters in password is %1. Classes of characters: Lower Case, Upper Case, Digits, Special Characters.').replace('%1', passwordMinCharacterSets);\r\n\r\n                    /*eslint-enable max-len*/\r\n                }\r\n                return result;\r\n            }, function () {\r\n                return this.passwordErrorMessage;\r\n            }\r\n        ],\r\n        \"validate-url\": [\r\n            function(value) {\r\n                if (utils.isEmptyNoTrim(value)) {\r\n                    return true;\r\n                }\r\n                value = (value || '').replace(/^\\s+/, '').replace(/\\s+$/, '');\r\n                return (/^(http|https|ftp):\\/\\/(([A-Z0-9]([A-Z0-9_-]*[A-Z0-9]|))(\\.[A-Z0-9]([A-Z0-9_-]*[A-Z0-9]|))*)(:(\\d+))?(\\/[A-Z0-9~](([A-Z0-9_~-]|\\.)*[A-Z0-9~]|))*\\/?(.*)?$/i).test(value);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid URL. Protocol is required (http://, https:// or ftp://).')\r\n        ],\r\n        \"validate-clean-url\": [\r\n            function(value) {\r\n                return utils.isEmptyNoTrim(value) || /^(http|https|ftp):\\/\\/(([A-Z0-9][A-Z0-9_-]*)(\\.[A-Z0-9][A-Z0-9_-]*)+.(com|org|net|dk|at|us|tv|info|uk|co.uk|biz|se)$)(:(\\d+))?\\/?/i.test(v) || /^(www)((\\.[A-Z0-9][A-Z0-9_-]*)+.(com|org|net|dk|at|us|tv|info|uk|co.uk|biz|se)$)(:(\\d+))?\\/?/i.test(value);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid URL. For example http://www.example.com or www.example.com.')\r\n        ],\r\n        \"validate-xml-identifier\": [\r\n            function(value) {\r\n                return utils.isEmptyNoTrim(value) || /^[A-Z][A-Z0-9_\\/-]*$/i.test(value);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid XML-identifier (Ex: something_1, block5, id-4).')\r\n        ],\r\n        \"validate-ssn\": [\r\n            function(value) {\r\n                return utils.isEmptyNoTrim(value) || /^\\d{3}-?\\d{2}-?\\d{4}$/.test(value);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid social security number (Ex: 123-45-6789).')\r\n        ],\r\n        \"validate-zip-us\": [\r\n            function(value) {\r\n                return utils.isEmptyNoTrim(value) || /(^\\d{5}$)|(^\\d{5}-\\d{4}$)/.test(value);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid zip code (Ex: 90602 or 90602-1234).')\r\n        ],\r\n        \"validate-date-au\": [\r\n            function(value) {\r\n                if (utils.isEmptyNoTrim(value)) {\r\n                    return true;\r\n                }\r\n                var regex = /^(\\d{2})\\/(\\d{2})\\/(\\d{4})$/;\r\n                if (utils.isEmpty(value) || !regex.test(value)) {\r\n                    return false;\r\n                }\r\n                var d = new Date(value.replace(regex, '$2/$1/$3'));\r\n                return parseInt(RegExp.$2, 10) === (1 + d.getMonth()) &&\r\n                    parseInt(RegExp.$1, 10) === d.getDate() &&\r\n                    parseInt(RegExp.$3, 10) === d.getFullYear();\r\n\r\n            },\r\n            $.mage.__('Please use this date format: dd/mm/yyyy. For example 17/03/2006 for the 17th of March, 2006.')\r\n        ],\r\n        \"validate-currency-dollar\": [\r\n            function(value) {\r\n                return utils.isEmptyNoTrim(value) || /^\\$?\\-?([1-9]{1}[0-9]{0,2}(\\,[0-9]{3})*(\\.[0-9]{0,2})?|[1-9]{1}\\d*(\\.[0-9]{0,2})?|0(\\.[0-9]{0,2})?|(\\.[0-9]{1,2})?)$/.test(value);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid $ amount. For example $100.00.')\r\n        ],\r\n        \"validate-not-negative-number\": [\r\n            function(value) {\r\n                if (utils.isEmptyNoTrim(value)) {\r\n                    return true;\r\n                }\r\n                value = utils.parseNumber(value);\r\n                return !isNaN(value) && value >= 0;\r\n\r\n            },\r\n            $.mage.__('Please enter a number 0 or greater in this field.')\r\n        ],\r\n        // validate-not-negative-number should be replaced in all places with this one and then removed\r\n        \"validate-zero-or-greater\": [\r\n            function(value) {\r\n                if (utils.isEmptyNoTrim(value)) {\r\n                    return true;\r\n                }\r\n                value = utils.parseNumber(value);\r\n                return !isNaN(value) && value >= 0;\r\n\r\n            },\r\n            $.mage.__('Please enter a number 0 or greater in this field.')\r\n        ],\r\n        \"validate-greater-than-zero\": [\r\n            function(value) {\r\n                if (utils.isEmptyNoTrim(value)) {\r\n                    return true;\r\n                }\r\n                value = utils.parseNumber(value);\r\n                return !isNaN(value) && value > 0;\r\n            },\r\n            $.mage.__('Please enter a number greater than 0 in this field.')\r\n        ],\r\n        \"validate-css-length\": [\r\n            function(value) {\r\n                if (value !== '') {\r\n                    return (/^[0-9]*\\.*[0-9]+(px|pc|pt|ex|em|mm|cm|in|%)?$/).test(value);\r\n                }\r\n                return true;\r\n            },\r\n            $.mage.__('Please input a valid CSS-length (Ex: 100px, 77pt, 20em, .5ex or 50%).')\r\n        ],\r\n        /** @description Additional methods */\r\n        \"validate-number\": [\r\n            function(value) {\r\n                return utils.isEmptyNoTrim(value) || (!isNaN(utils.parseNumber(value)) && /^\\s*-?\\d*(\\.\\d*)?\\s*$/.test(value));\r\n            },\r\n            $.mage.__('Please enter a valid number in this field.')\r\n        ],\r\n        \"validate-integer\": [\r\n            function(value) {\r\n                return (\r\n                     utils.isEmptyNoTrim(value)\r\n                      || (!isNaN(utils.parseNumber(value)) && /^\\s*-?\\d*\\s*$/.test(value))\r\n               );\r\n             },\r\n            $.mage.__('Please enter a valid integer in this field.')\r\n         ],\r\n        \"validate-number-range\": [\r\n            function(value, param) {\r\n                if (utils.isEmptyNoTrim(value)) {\r\n                    return true;\r\n                }\r\n\r\n                var numValue = utils.parseNumber(value);\r\n                if (isNaN(numValue)) {\r\n                    return false;\r\n                }\r\n\r\n                var dataAttrRange = /^(-?[\\d.,]+)?-(-?[\\d.,]+)?$/,\r\n                    result = true,\r\n                    range, m;\r\n\r\n                range = param;\r\n                if (range) {\r\n                    m = dataAttrRange.exec(range);\r\n                    if (m) {\r\n                        result = result && utils.isBetween(numValue, m[1], m[2]);\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            },\r\n            $.mage.__('The value is not within the specified range.')\r\n        ],\r\n        \"validate-digits\": [\r\n            function(value) {\r\n                return utils.isEmptyNoTrim(value) || !/[^\\d]/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid number in this field.')\r\n        ],\r\n        \"validate-digits-range\": [\r\n            function(value, param) {\r\n                if (utils.isEmptyNoTrim(value)) {\r\n                    return true;\r\n                }\r\n\r\n                var numValue = utils.parseNumber(value);\r\n                if (isNaN(numValue)) {\r\n                    return false;\r\n                }\r\n\r\n                var dataAttrRange = /^(-?\\d+)?-(-?\\d+)?$/,\r\n                    result = true,\r\n                    range, m;\r\n                range = param;\r\n                if (range) {\r\n                    m = dataAttrRange.exec(range);\r\n                    if (m) {\r\n                        result = result && utils.isBetween(numValue, m[1], m[2]);\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            },\r\n            $.mage.__('The value is not within the specified range.')\r\n        ],\r\n        'validate-range': [\r\n            function(value) {\r\n                var minValue, maxValue;\r\n                if (utils.isEmptyNoTrim(value)) {\r\n                    return true;\r\n                } else if ($.validator.methods['validate-digits'] && $.validator.methods['validate-digits'](value)) {\r\n                    minValue = maxValue = utils.parseNumber(value);\r\n                } else {\r\n                    var ranges = /^(-?\\d+)?-(-?\\d+)?$/.exec(value);\r\n\r\n                    if (ranges) {\r\n                        minValue = utils.parseNumber(ranges[1]);\r\n                        maxValue = utils.parseNumber(ranges[2]);\r\n                        if (minValue > maxValue) {\r\n                            return false;\r\n                        }\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                }\r\n            },\r\n            $.mage.__('The value is not within the specified range.')\r\n        ],\r\n        \"validate-alpha\": [\r\n            function(value) {\r\n                return utils.isEmptyNoTrim(value) || /^[a-zA-Z]+$/.test(value);\r\n            },\r\n            $.mage.__('Please use letters only (a-z or A-Z) in this field.')\r\n        ],\r\n        \"validate-code\": [\r\n            function(value) {\r\n                return utils.isEmptyNoTrim(value) || /^[a-z]+[a-z0-9_]+$/.test(value);\r\n            },\r\n            $.mage.__('Please use only letters (a-z), numbers (0-9) or underscore (_) in this field, and the first character should be a letter.')\r\n        ],\r\n        \"validate-alphanum\": [\r\n            function(value) {\r\n                return utils.isEmptyNoTrim(value) || /^[a-zA-Z0-9]+$/.test(value);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z) or numbers (0-9) in this field. No spaces or other characters are allowed.')\r\n        ],\r\n        \"validate-date\": [\r\n            function(value) {\r\n                var test = new Date(value);\r\n                return utils.isEmptyNoTrim(value) || !isNaN(test);\r\n            },$.mage.__('Please enter a valid date.')\r\n\r\n        ],\r\n        \"validate-identifier\": [\r\n            function(value) {\r\n                return utils.isEmptyNoTrim(value) || /^[a-z0-9][a-z0-9_\\/-]+(\\.[a-z0-9_-]+)?$/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid URL Key (Ex: \"example-page\", \"example-page.html\" or \"anotherlevel/example-page\").')\r\n        ],\r\n        \"validate-zip-international\": [\r\n            /*function(v) {\r\n             // @TODO: Cleanup\r\n             return Validation.get('IsEmpty').test(v) || /(^[A-z0-9]{2,10}([\\s]{0,1}|[\\-]{0,1})[A-z0-9]{2,10}$)/.test(v);\r\n             }*/\r\n            function() {\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter a valid zip code.')\r\n        ],\r\n        \"validate-state\": [\r\n            function(value) {\r\n                return (value !== 0 || value === '');\r\n            },\r\n            $.mage.__('Please select State/Province.')\r\n        ],\r\n        \"less-than-equals-to\": [\r\n            function(value, params) {\r\n                if ($.isNumeric(params) && $.isNumeric(value)) {\r\n                    return parseFloat(value) <= parseFloat(params);\r\n                }\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter a value less than or equal to {0}.')\r\n        ],\r\n        \"greater-than-equals-to\": [\r\n            function(value, params) {\r\n                if ($.isNumeric(params) && $.isNumeric(value)) {\r\n                    return parseFloat(value) >= parseFloat(params);\r\n                }\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter a value greater than or equal to {0}.')\r\n        ],\r\n        \"validate-emails\": [\r\n            function(value) {\r\n                if (utils.isEmpty(value)) {\r\n                    return true;\r\n                }\r\n                var valid_regexp = /^[a-z0-9\\._-]{1,30}@([a-z0-9_-]{1,30}\\.){1,5}[a-z]{2,4}$/i,\r\n                    emails = value.split(/[\\s\\n\\,]+/g);\r\n                for (var i = 0; i < emails.length; i++) {\r\n                    if (!valid_regexp.test(emails[i].strip())) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter valid email addresses, separated by commas. For example, johndoe@domain.com, johnsmith@domain.com.')\r\n        ],\r\n        \"validate-cc-number\": [\r\n            /**\r\n             * Validate credit card number based on mod 10\r\n             * @param value - credit card number\r\n             * @return {boolean}\r\n             */\r\n                function(value) {\r\n                if (value) {\r\n                    return validateCreditCard(value);\r\n                }\r\n                return false;\r\n            }, $.mage.__('Please enter a valid credit card number.')\r\n        ],\r\n        \"validate-cc-ukss\": [\r\n            /**\r\n             * Validate Switch/Solo/Maestro issue number and start date is filled\r\n             * @param value - input field value\r\n             * @return {*}\r\n             */\r\n                function(value) {\r\n                return value;\r\n            }, $.mage.__('Please enter issue number or start date for switch/solo card type.')\r\n        ],\r\n        'required-entry': [\r\n            function(value) {\r\n                return !utils.isEmpty(value);\r\n            }, $.mage.__('This is a required field.')\r\n        ],\r\n        'checked': [\r\n            function(value) {\r\n                return value;\r\n            }, $.mage.__('This is a required field.')\r\n        ],\r\n        'not-negative-amount': [\r\n            function(value) {\r\n                if (value.length)\r\n                    return (/^\\s*\\d+([,.]\\d+)*\\s*%?\\s*$/).test(value);\r\n                else\r\n                    return true;\r\n            },\r\n            $.mage.__('Please enter positive number in this field.')\r\n        ],\r\n        'validate-per-page-value-list': [\r\n            function(value) {\r\n                var isValid = !utils.isEmpty(value);\r\n                var values = value.split(',');\r\n                for (var i = 0; i < values.length; i++) {\r\n                    if (!/^[0-9]+$/.test(values[i])) {\r\n                        isValid = false;\r\n                    }\r\n                }\r\n                return isValid;\r\n            },\r\n            $.mage.__('Please enter a valid value, ex: 10,20,30')\r\n        ],\r\n        'validate-new-password': [\r\n            function(value) {\r\n\r\n                if ($.validator.methods['validate-password'] &&\r\n                    !$.validator.methods['validate-password'](value)) {\r\n                    return false;\r\n                }\r\n                if (utils.isEmpty(value) && value !== '') {\r\n                    return false;\r\n                }\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter 6 or more characters. Leading and trailing spaces will be ignored.')\r\n        ],\r\n        'validate-item-quantity': [\r\n            function (value, params) {\r\n                // obtain values for validation\r\n                var qty = utils.parseNumber(value);\r\n\r\n                // validate quantity\r\n                var isMinAllowedValid = typeof params.minAllowed === 'undefined' || (qty >= utils.parseNumber(params.minAllowed));\r\n                var isMaxAllowedValid = typeof params.maxAllowed === 'undefined'  || (qty <= utils.parseNumber(params.maxAllowed));\r\n                var isQtyIncrementsValid = typeof params.qtyIncrements === 'undefined'  || (qty % utils.parseNumber(params.qtyIncrements) === 0);\r\n\r\n                return isMaxAllowedValid && isMinAllowedValid && isQtyIncrementsValid && qty > 0;\r\n            },\r\n            ''\r\n        ],\r\n        'equalTo': [\r\n            function (value, param) {\r\n                return value === $(param).val();\r\n            },\r\n            $.validator.messages.equalTo\r\n        ],\r\n        'validate-file-type': [\r\n            function (name, types) {\r\n                var extension = name.split('.').pop().toLowerCase();\r\n\r\n                if (types && typeof types === 'string') {\r\n                    types = types.split(' ');\r\n                }\r\n\r\n                return !types || !types.length || ~types.indexOf(extension);\r\n            },\r\n            $.mage.__('We don\\'t recognize or support this file extension type.')\r\n        ],\r\n        'validate-max-size': [\r\n            function (size, maxSize) {\r\n                return maxSize === false || size < maxSize;\r\n            },\r\n            $.mage.__('File you are trying to upload exceeds maximum file size limit.')\r\n        ],\r\n        'validate-if-tag-script-exist': [\r\n            function (value) {\r\n                return !value || (/<script\\b[^>]*>([\\s\\S]*?)<\\/script>$/ig).test(value);\r\n            },\r\n            $.mage.__('Please use tag SCRIPT with SRC attribute or with proper content to include JavaScript to the document.')\r\n        ],\r\n        'date_range_min': [\r\n            function (value, minValue, params) {\r\n                return moment.utc(value, params.dateFormat).unix() >= minValue;\r\n            },\r\n            $.mage.__('The date is not within the specified range.')\r\n        ],\r\n        'date_range_max': [\r\n            function (value, maxValue, params) {\r\n                return moment.utc(value, params.dateFormat).unix() <= maxValue;\r\n            },\r\n            $.mage.__('The date is not within the specified range.')\r\n        ]\r\n    }, function (data) {\r\n        return {\r\n            handler: data[0],\r\n            message: data[1]\r\n        };\r\n    });\r\n});\r\n","Magento_Ui/js/lib/validation/utils.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine(function () {\r\n    'use strict';\r\n\r\n    var utils = {\r\n        /**\r\n         * Check if string is empty with trim\r\n         * @param {string}\r\n            */\r\n        isEmpty: function(value) {\r\n            return (value === '' || (value == null) || (value.length === 0) || /^\\s+$/.test(value));\r\n        },\r\n\r\n        /**\r\n         * Check if string is empty no trim\r\n         * @param {string}\r\n            */\r\n        isEmptyNoTrim: function(value) {\r\n            return (value === '' || (value == null) || (value.length === 0));\r\n        },\r\n\r\n\r\n        /**\r\n         * Checks if {value} is between numbers {from} and {to}\r\n         * @param {string} value\r\n         * @param {string} from\r\n         * @param {string} to\r\n         * @returns {boolean}\r\n         */\r\n        isBetween: function(value, from, to){\r\n            return (from === null || from === '' || value >= utils.parseNumber(from)) &&\r\n                   (to === null || to === '' || value <= utils.parseNumber(to));\r\n        },\r\n\r\n        /**\r\n         * Parse price string\r\n         * @param {string}\r\n            */\r\n        parseNumber: function(value) {\r\n            if (typeof value !== 'string') {\r\n                return parseFloat(value);\r\n            }\r\n            var isDot = value.indexOf('.');\r\n            var isComa = value.indexOf(',');\r\n            if (isDot !== -1 && isComa !== -1) {\r\n                if (isComa > isDot) {\r\n                    value = value.replace('.', '').replace(',', '.');\r\n                } else {\r\n                    value = value.replace(',', '');\r\n                }\r\n            } else if (isComa !== -1) {\r\n                value = value.replace(',', '.');\r\n            }\r\n            return parseFloat(value);\r\n        },\r\n\r\n        /**\r\n         * Removes HTML tags and space characters, numbers and punctuation.\r\n         * @param value Value being stripped.\r\n         * @return {*}\r\n         */\r\n        stripHtml: function(value) {\r\n            return value.replace(/<.[^<>]*?>/g, ' ').replace(/&nbsp;|&#160;/gi, ' ')\r\n                .replace(/[0-9.(),;:!?%#$'\"_+=\\/-]*/g, '');\r\n        }\r\n    }\r\n\r\n    return utils;\r\n});\r\n","Magento_Ui/js/lib/validation/validator.js":"/*\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    './rules'\r\n], function (_, rulesList) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Validates provided value be the specified rule.\r\n     *\r\n     * @param {String} id - Rule identifier.\r\n     * @param {*} value - Value to be checked.\r\n     * @param {*} [params]\r\n     * @param {*} additionalParams - additional validation params set by method caller\r\n     * @returns {Object}\r\n     */\r\n    function validate(id, value, params, additionalParams) {\r\n        var rule,\r\n            message,\r\n            valid,\r\n            result = {\r\n                rule: id,\r\n                passed: true,\r\n                message: ''\r\n            };\r\n\r\n        if (!rulesList[id]) {\r\n            return result;\r\n        }\r\n\r\n        rule    = rulesList[id];\r\n        message = rule.message;\r\n        valid   = rule.handler(value, params, additionalParams);\r\n\r\n        if (!valid) {\r\n            params = Array.isArray(params) ?\r\n                params :\r\n                [params];\r\n\r\n            message = params.reduce(function (msg, param, idx) {\r\n                return msg.replace(new RegExp('\\\\{' + idx + '\\\\}', 'g'), param);\r\n            }, message);\r\n\r\n            result.passed = false;\r\n            result.message = message;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Validates provied value by a specfied set of rules.\r\n     *\r\n     * @param {(String|Object)} rules - One or many validation rules.\r\n     * @param {*} value - Value to be checked.\r\n     * @param {*} additionalParams - additional validation params set by method caller\r\n     * @returns {Object}\r\n     */\r\n    function validator(rules, value, additionalParams) {\r\n        var result;\r\n\r\n        if (typeof rules === 'object') {\r\n            result = {\r\n                passed: true\r\n            };\r\n\r\n            _.every(rules, function (ruleParams, id) {\r\n                if (ruleParams !== false || additionalParams) {\r\n                    result = validate(id, value, ruleParams, additionalParams);\r\n\r\n                    return result.passed;\r\n                }\r\n\r\n                return true;\r\n            });\r\n\r\n            return result;\r\n        }\r\n\r\n        return validate.apply(null, arguments);\r\n    }\r\n\r\n    /**\r\n     * Adds new validation rule.\r\n     *\r\n     * @param {String} id - Rule identifier.\r\n     * @param {Function} handler - Validation function.\r\n     * @param {String} message - Error message.\r\n     */\r\n    validator.addRule = function (id, handler, message) {\r\n        rulesList[id] = {\r\n            handler: handler,\r\n            message: message\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Returns rule object found by provided identifier.\r\n     *\r\n     * @param {String} id - Rule identifier.\r\n     * @returns {Object}\r\n     */\r\n    validator.getRule = function (id) {\r\n        return rulesList[id];\r\n    };\r\n\r\n    return validator;\r\n});\r\n","Magento_Ui/js/lib/view/utils/async.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'underscore',\r\n    'uiRegistry',\r\n    './dom-observer',\r\n    'Magento_Ui/js/lib/knockout/extender/bound-nodes',\r\n    './bindings'\r\n], function (ko, $, _, registry, domObserver, boundedNodes) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Checks if provided value is a dom element.\r\n     *\r\n     * @param {*} node - Value to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function isDomElement(node) {\r\n        return typeof node === 'object' && node.tagName && node.nodeType;\r\n    }\r\n\r\n    /**\r\n     * Parses provided string and extracts\r\n     * component, context and selector data from it.\r\n     *\r\n     * @param {String} str - String to be processed.\r\n     * @returns {Object} Data retrieved from string.\r\n     *\r\n     * @example Sample format.\r\n     *      '{{component}}:{{ctx}} -> {{selector}}'\r\n     *\r\n     *      component - Name of component.\r\n     *      ctx - Selector of the root node upon which component is binded.\r\n     *      selector - Selector of DOM elements located\r\n     *          inside of a previously specified context.\r\n     */\r\n    function parseSelector(str) {\r\n        var data    = str.trim().split('->'),\r\n            result  = {},\r\n            componentData;\r\n\r\n        if (data.length === 1) {\r\n            if (!~data[0].indexOf(':')) {\r\n                result.selector = data[0];\r\n            } else {\r\n                componentData = data[0];\r\n            }\r\n        } else {\r\n            componentData   = data[0];\r\n            result.selector = data[1];\r\n        }\r\n\r\n        if (componentData) {\r\n            componentData = componentData.split(':');\r\n\r\n            result.component = componentData[0];\r\n            result.ctx = componentData[1];\r\n        }\r\n\r\n        _.each(result, function (value, key) {\r\n            result[key] = value.trim();\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Internal method used to normalize argumnets passed\r\n     * to 'async' module methods.\r\n     *\r\n     * @param {(String|Objetc)} selector\r\n     * @param {(HTMLElement|Object|String)} [ctx]\r\n     * @returns {Object}\r\n     */\r\n    function parseData(selector, ctx) {\r\n        var data = {};\r\n\r\n        if (arguments.length === 2) {\r\n            data.selector = selector;\r\n\r\n            if (isDomElement(ctx)) {\r\n                data.ctx = ctx;\r\n            } else {\r\n                data.component = ctx;\r\n                data.ctx = '*';\r\n            }\r\n        } else {\r\n            data = _.isString(selector) ?\r\n                parseSelector(selector) :\r\n                selector;\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Creates promise that will be resolved\r\n     * when requested component is registred.\r\n     *\r\n     * @param {String} name - Name of component.\r\n     * @returns {jQueryPromise}\r\n     */\r\n    function waitComponent(name) {\r\n        var deffer = $.Deferred();\r\n\r\n        if (_.isString(name)) {\r\n            registry.get(name, function (component) {\r\n                deffer.resolve(component);\r\n            });\r\n        } else {\r\n            deffer.resolve(name);\r\n        }\r\n\r\n        return deffer.promise();\r\n    }\r\n\r\n    /**\r\n     * Creates listener for the nodes binded to provided component.\r\n     *\r\n     * @param {Object} data - Listener data.\r\n     * @param {Object} component - Associated with nodes component.\r\n     */\r\n    function setRootListener(data, component) {\r\n        boundedNodes.get(component, function (root) {\r\n            if (!$(root).is(data.ctx || '*')) {\r\n                return;\r\n            }\r\n\r\n            data.selector ?\r\n                domObserver.get(data.selector, data.fn, root) :\r\n                data.fn(root);\r\n        });\r\n    }\r\n\r\n    /*eslint-disable no-unused-vars*/\r\n    /**\r\n     * Sets listener for the appearance of elements which\r\n     * matches specified selector data.\r\n     *\r\n     * @param {(String|Object)} selector - Valid css selector or a string\r\n     *      in format acceptable by 'parseSelector' method or an object with\r\n     *      'component', 'selector' and 'ctx' properties.\r\n     * @param {(HTMLElement|Object|String)} [ctx] - Optional context parameter\r\n     *      which might be a DOM element, component instance or components' name.\r\n     * @param {Function} fn - Callback that will be invoked\r\n     *      when required DOM element appears.\r\n     *\r\n     * @example\r\n     *      Creating listener of the 'span' nodes appearance,\r\n     *      located inside of 'div' nodes, which are binded to 'cms_page_listing' component:\r\n     *\r\n     *      $.async('cms_page_listing:div -> span', function (node) {});\r\n     *\r\n     * @example Another syntaxes of the previous example.\r\n     *      $.async({\r\n     *          component: 'cms_page_listing',\r\n     *          ctx: 'div',\r\n     *          selector: 'span'\r\n     *       }, function (node) {});\r\n     *\r\n     * @example Listens for appearance of any child node inside of specified component.\r\n     *      $.async('> *', 'cms_page_lsiting', function (node) {});\r\n     *\r\n     * @example Listens for appearance of 'span' nodes inside of specific context.\r\n     *      $.async('span', document.getElementById('test'), function (node) {});\r\n     */\r\n    $.async = function (selector, ctx, fn) {\r\n        var args = _.toArray(arguments),\r\n            data = parseData.apply(null, _.initial(args));\r\n\r\n        data.fn = _.last(args);\r\n\r\n        if (data.component) {\r\n            waitComponent(data.component)\r\n                .then(setRootListener.bind(null, data));\r\n        } else {\r\n            domObserver.get(data.selector, data.fn, data.ctx);\r\n        }\r\n    };\r\n\r\n    /*eslint-enable no-unused-vars*/\r\n\r\n    _.extend($.async, {\r\n\r\n        /*eslint-disable no-unused-vars*/\r\n        /**\r\n         * Returns collection of elements found by provided selector data.\r\n         *\r\n         * @param {(String|Object)} selector - See 'async' definition.\r\n         * @param {(HTMLElement|Object|String)} [ctx] - See 'async' definition.\r\n         * @returns {Array} An array of DOM elements.\r\n         */\r\n        get: function (selector, ctx) {\r\n            var data        = parseData.apply(null, arguments),\r\n                component   = data.component,\r\n                nodes;\r\n\r\n            if (!component) {\r\n                return $(data.selector, data.ctx).toArray();\r\n            } else if (_.isString(component)) {\r\n                component = registry.get(component);\r\n            }\r\n\r\n            if (!component) {\r\n                return [];\r\n            }\r\n\r\n            nodes = boundedNodes.get(component);\r\n            nodes = $(nodes).filter(data.ctx).toArray();\r\n\r\n            return data.selector ?\r\n                $(data.selector, nodes).toArray() :\r\n                nodes;\r\n        },\r\n\r\n        /*eslint-enable no-unused-vars*/\r\n\r\n        /**\r\n         * Sets removal listener of the specified nodes.\r\n         *\r\n         * @param {(HTMLElement|Array|ArrayLike)} nodes - Nodes whose removal to track.\r\n         * @param {Function} fn - Callback that will be invoked when node is removed.\r\n         */\r\n        remove: function (nodes, fn) {\r\n            domObserver.remove(nodes, fn);\r\n        },\r\n\r\n        parseSelector: parseSelector\r\n    });\r\n\r\n    return $;\r\n});\r\n","Magento_Ui/js/lib/view/utils/bindings.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'underscore'\r\n], function (ko, $, _) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Checks if provided  value is a dom element.\r\n     *\r\n     * @param {*} node - Value to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function isDomElement(node) {\r\n        return typeof node === 'object' && node.tagName && node.nodeType;\r\n    }\r\n\r\n    /**\r\n     * Removes from the provided array all non-root nodes located inside\r\n     * of the comment element as long as the closing comment tags.\r\n     *\r\n     * @param {(Array|ArrayLike)} nodes - An array of nodes to be processed.\r\n     * @returns {Array}\r\n     */\r\n    function normalize(nodes) {\r\n        var result;\r\n\r\n        nodes   = _.toArray(nodes);\r\n        result  = nodes.slice();\r\n\r\n        nodes.forEach(function (node) {\r\n            if (node.nodeType === 8) {\r\n                result = !ko.virtualElements.hasBindingValue(node) ?\r\n                    _.without(result, node) :\r\n                    _.difference(result, ko.virtualElements.childNodes(node));\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Extends binding context of each item in the collection.\r\n     *\r\n     * @param {...Object} extenders - Multiple extender objects to be applied to the context.\r\n     * @returns {jQueryCollection} Chainable.\r\n     */\r\n    $.fn.extendCtx = function () {\r\n        var nodes       = normalize(this),\r\n            extenders   = _.toArray(arguments);\r\n\r\n        nodes.forEach(function (node) {\r\n            var ctx  = ko.contextFor(node),\r\n                data = [ctx].concat(extenders);\r\n\r\n            _.extend.apply(_, data);\r\n        });\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Evaluates bindings specified in each DOM element of collection.\r\n     *\r\n     * @param {(HTMLElement|Object)} [ctx] - Context to use for bindings evaluation.\r\n     *      If not specified then current context of a collections' item will be used.\r\n     * @returns {jQueryCollection} Chainable.\r\n     */\r\n    $.fn.applyBindings = function (ctx) {\r\n        var nodes = normalize(this),\r\n            nodeCtx;\r\n\r\n        if (isDomElement(ctx)) {\r\n            ctx = ko.contextFor(ctx);\r\n        }\r\n\r\n        nodes.forEach(function (node) {\r\n            nodeCtx = ctx || ko.contextFor(node);\r\n\r\n            ko.applyBindings(nodeCtx, node);\r\n        });\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Adds specfied bindings to each DOM elemenet in\r\n     * collection and evalutes them with provided context.\r\n     *\r\n     * @param {(Object|Function)} data - Either bindings object or a function\r\n     *      which returns bindings data for each element in collection.\r\n     * @param {(HTMLElement|Object)} [ctx] - Context to use for bindings evaluation.\r\n     *      If not specified then current context of a collections' item will be used.\r\n     * @returns {jQueryCollection} Chainable.\r\n     */\r\n    $.fn.bindings = function (data, ctx) {\r\n        var nodes    = normalize(this),\r\n            bindings = data,\r\n            nodeCtx;\r\n\r\n        if (isDomElement(ctx)) {\r\n            ctx = ko.contextFor(ctx);\r\n        }\r\n\r\n        nodes.forEach(function (node) {\r\n            nodeCtx = ctx || ko.contextFor(node);\r\n\r\n            if (_.isFunction(data)) {\r\n                bindings = data(nodeCtx, node);\r\n            }\r\n\r\n            ko.applyBindingsToNode(node, bindings, nodeCtx);\r\n        });\r\n\r\n        return this;\r\n    };\r\n});\r\n","Magento_Ui/js/lib/view/utils/dom-observer.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'MutationObserver',\r\n    'domReady!'\r\n], function ($, _) {\r\n    'use strict';\r\n\r\n    var counter = 1,\r\n        watchers,\r\n        globalObserver;\r\n\r\n    watchers = {\r\n        selectors: {},\r\n        nodes: {}\r\n    };\r\n\r\n    /**\r\n     * Checks if node represents an element node (nodeType === 1).\r\n     *\r\n     * @param {HTMLElement} node\r\n     * @returns {Boolean}\r\n     */\r\n    function isElementNode(node) {\r\n        return node.nodeType === 1;\r\n    }\r\n\r\n    /**\r\n     * Extracts all child descendant\r\n     * elements of a specified node.\r\n     *\r\n     * @param {HTMLElement} node\r\n     * @returns {Array}\r\n     */\r\n    function extractChildren(node) {\r\n        var children = node.querySelectorAll('*');\r\n\r\n        return _.toArray(children);\r\n    }\r\n\r\n    /**\r\n     * Extracts node identifier. If ID is not specified,\r\n     * then it will be created for the provided node.\r\n     *\r\n     * @param {HTMLElement} node\r\n     * @returns {Number}\r\n     */\r\n    function getNodeId(node) {\r\n        var id = node._observeId;\r\n\r\n        if (!id) {\r\n            id = node._observeId = counter++;\r\n        }\r\n\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Invokes callback passing node to it.\r\n     *\r\n     * @param {HTMLElement} node\r\n     * @param {Object} data\r\n     */\r\n    function trigger(node, data) {\r\n        var id = getNodeId(node),\r\n            ids = data.invoked;\r\n\r\n        if (_.contains(ids, id)) {\r\n            return;\r\n        }\r\n\r\n        data.callback(node);\r\n        data.invoked.push(id);\r\n    }\r\n\r\n    /**\r\n     * Adds node to the observer list.\r\n     *\r\n     * @param {HTMLElement} node\r\n     * @returns {Object}\r\n     */\r\n    function createNodeData(node) {\r\n        var nodes   = watchers.nodes,\r\n            id      = getNodeId(node);\r\n\r\n        nodes[id] = nodes[id] || {};\r\n\r\n        return nodes[id];\r\n    }\r\n\r\n    /**\r\n     * Returns data associated with a specified node.\r\n     *\r\n     * @param {HTMLElement} node\r\n     * @returns {Object|Undefined}\r\n     */\r\n    function getNodeData(node) {\r\n        var nodeId = node._observeId;\r\n\r\n        return watchers.nodes[nodeId];\r\n    }\r\n\r\n    /**\r\n     * Removes data associated with a specified node.\r\n     *\r\n     * @param {HTMLElement} node\r\n     */\r\n    function removeNodeData(node) {\r\n        var nodeId = node._observeId;\r\n\r\n        delete watchers.nodes[nodeId];\r\n    }\r\n\r\n    /**\r\n     * Adds removal listener for a specified node.\r\n     *\r\n     * @param {HTMLElement} node\r\n     * @param {Object} data\r\n     */\r\n    function addRemovalListener(node, data) {\r\n        var nodeData = createNodeData(node);\r\n\r\n        (nodeData.remove = nodeData.remove || []).push(data);\r\n    }\r\n\r\n    /**\r\n     * Adds listener for the nodes which matches specified selector.\r\n     *\r\n     * @param {String} selector - CSS selector.\r\n     * @param {Object} data\r\n     */\r\n    function addSelectorListener(selector, data) {\r\n        var storage = watchers.selectors;\r\n\r\n        (storage[selector] = storage[selector] || []).push(data);\r\n    }\r\n\r\n    /**\r\n     * Calls handlers assocoiated with an added node.\r\n     * Adds listeners for the node removal.\r\n     *\r\n     * @param {HTMLElement} node - Added node.\r\n     */\r\n    function processAdded(node) {\r\n        _.each(watchers.selectors, function (listeners, selector) {\r\n            listeners.forEach(function (data) {\r\n                if (!data.ctx.contains(node) || !$(node, data.ctx).is(selector)) {\r\n                    return;\r\n                }\r\n\r\n                if (data.type === 'add') {\r\n                    trigger(node, data);\r\n                } else if (data.type === 'remove') {\r\n                    addRemovalListener(node, data);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Calls handlers assocoiated with a removed node.\r\n     *\r\n     * @param {HTMLElement} node - Removed node.\r\n     */\r\n    function processRemoved(node) {\r\n        var nodeData    = getNodeData(node),\r\n            listeners   = nodeData && nodeData.remove;\r\n\r\n        if (!listeners) {\r\n            return;\r\n        }\r\n\r\n        listeners.forEach(function (data) {\r\n            trigger(node, data);\r\n        });\r\n\r\n        removeNodeData(node);\r\n    }\r\n\r\n    /**\r\n     * Removes all non-element nodes from provided array\r\n     * and appends to it descendant elements.\r\n     *\r\n     * @param {Array} nodes\r\n     * @returns {Array}\r\n     */\r\n    function formNodesList(nodes) {\r\n        var result = [],\r\n            children;\r\n\r\n        nodes = _.toArray(nodes).filter(isElementNode);\r\n\r\n        nodes.forEach(function (node) {\r\n            result.push(node);\r\n\r\n            children = extractChildren(node);\r\n            result   = result.concat(children);\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Collects all removed and added nodes from\r\n     * mutation records into separate arrays\r\n     * while removing duplicates between both types of changes.\r\n     *\r\n     * @param {Array} mutations - An array of mutation records.\r\n     * @returns {Object} Object with 'removed' and 'added' nodes arrays.\r\n     */\r\n    function formChangesLists(mutations) {\r\n        var removed = [],\r\n            added = [];\r\n\r\n        mutations.forEach(function (record) {\r\n            removed = removed.concat(_.toArray(record.removedNodes));\r\n            added   = added.concat(_.toArray(record.addedNodes));\r\n        });\r\n\r\n        removed = removed.filter(function (node) {\r\n            var addIndex = added.indexOf(node),\r\n                wasAdded = !!~addIndex;\r\n\r\n            if (wasAdded) {\r\n                added.splice(addIndex, 1);\r\n            }\r\n\r\n            return !wasAdded;\r\n        });\r\n\r\n        return {\r\n            removed: formNodesList(removed),\r\n            added: formNodesList(added)\r\n        };\r\n    }\r\n\r\n    globalObserver = new MutationObserver(function (mutations) {\r\n        var changes = formChangesLists(mutations);\r\n\r\n        changes.removed.forEach(processRemoved);\r\n        changes.added.forEach(processAdded);\r\n    });\r\n\r\n    globalObserver.observe(document.body, {\r\n        subtree: true,\r\n        childList: true\r\n    });\r\n\r\n    return {\r\n\r\n        /**\r\n         * Adds listener for the appearance of nodes that matches provided\r\n         * selector and which are inside of the provided context. Callback will be\r\n         * also invoked on elements which a currently present.\r\n         *\r\n         * @param {String} selector - CSS selector.\r\n         * @param {Function} callback - Function that will invoked when node appears.\r\n         * @param {HTMLElement} [ctx=document.body] - Context inside of which to search for the node.\r\n         */\r\n        get: function (selector, callback, ctx) {\r\n            var data,\r\n                nodes;\r\n\r\n            data = {\r\n                ctx: ctx || document.body,\r\n                type: 'add',\r\n                callback: callback,\r\n                invoked: []\r\n            };\r\n\r\n            nodes = $(selector, data.ctx).toArray();\r\n\r\n            nodes.forEach(function (node) {\r\n                trigger(node, data);\r\n            });\r\n\r\n            addSelectorListener(selector, data);\r\n        },\r\n\r\n        /**\r\n         * Adds listener for the nodes removal.\r\n         *\r\n         * @param {(jQueryObject|HTMLElement|Array|String)} selector\r\n         * @param {Function} callback - Function that will invoked when node is removed.\r\n         * @param {HTMLElement} [ctx=document.body] - Context inside of which to search for the node.\r\n         */\r\n        remove: function (selector, callback, ctx) {\r\n            var nodes = [],\r\n                data;\r\n\r\n            data = {\r\n                ctx: ctx || document.body,\r\n                type: 'remove',\r\n                callback: callback,\r\n                invoked: []\r\n            };\r\n\r\n            if (typeof selector === 'object') {\r\n                nodes = !_.isUndefined(selector.length) ?\r\n                    _.toArray(selector) :\r\n                    [selector];\r\n            } else if (_.isString(selector)) {\r\n                nodes = $(selector, ctx).toArray();\r\n\r\n                addSelectorListener(selector, data);\r\n            }\r\n\r\n            nodes.forEach(function (node) {\r\n                addRemovalListener(node, data);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Removes listeners.\r\n         *\r\n         * @param {String} selector\r\n         * @param {Function} [fn]\r\n         */\r\n        off: function (selector, fn) {\r\n            var selectors = watchers.selectors,\r\n                listeners = selectors[selector];\r\n\r\n            if (selector && !fn) {\r\n                delete selectors[selector];\r\n            } else if (listeners && fn) {\r\n                selectors[selector] = listeners.filter(function (data) {\r\n                    return data.callback !== fn;\r\n                });\r\n            }\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/view/utils/raf.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'es6-collections'\r\n], function () {\r\n    'use strict';\r\n\r\n    var processMap = new WeakMap(),\r\n        origRaf,\r\n        raf;\r\n\r\n    origRaf = window.requestAnimationFrame ||\r\n        window.webkitRequestAnimationFrame ||\r\n        window.mozRequestAnimationFrame ||\r\n        window.onRequestAnimationFrame ||\r\n        window.msRequestAnimationFrame ||\r\n        function (callback) {\r\n            window.setTimeout(callback, 1000 / 60);\r\n        };\r\n\r\n    /**\r\n     * Creates new process object or extracts the\r\n     * the existing one.\r\n     *\r\n     * @param {*} id - Process identifier.\r\n     * @param {Number} fps - Required FPS count.\r\n     * @returns {Object}\r\n     */\r\n    function getProcess(id, fps) {\r\n        var process = processMap.get(id);\r\n\r\n        if (!process) {\r\n            process = {};\r\n            processMap.set(id, process);\r\n        }\r\n\r\n        if (process.fps !== fps) {\r\n            process.fps        = fps;\r\n            process.interval   = 1000 / fps;\r\n            process.update     = Date.now();\r\n        }\r\n\r\n        return process;\r\n    }\r\n\r\n    /**\r\n     * Proxy method which delegates call to the 'requestAnimationFrame'\r\n     * function and optionally can keep track of the FPS with which\r\n     * provided function is called.\r\n     *\r\n     * @param {Function} callback - Callback function to be passed to 'requestAnimationFrame'.\r\n     * @param {Number} [fps] - If specified, will update FPS counter for the provided function.\r\n     * @returns {Number|Boolean} ID of request or a flag which indicates\r\n     *      whether callback fits specified FPS.\r\n     */\r\n    raf = function (callback, fps) {\r\n        var rafId = origRaf(callback);\r\n\r\n        return fps ? raf.tick(callback, fps) : rafId;\r\n    };\r\n\r\n    /**\r\n     * Updates FPS counter for the specified process\r\n     * and returns a flag which indicates whether\r\n     * counter value is equal or greater than the required FPS.\r\n     *\r\n     * @param {*} id - Process identifier.\r\n     * @param {Number} fps - Required FPS count.\r\n     * @returns {Boolean}\r\n     */\r\n    raf.tick = function (id, fps) {\r\n        var process  = getProcess(id, fps),\r\n            now      = Date.now(),\r\n            delta    = now - process.update,\r\n            interval = process.interval;\r\n\r\n        if (fps >= 60 || delta >= interval) {\r\n            process.update = now - delta % interval;\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    return raf;\r\n});\r\n","Magento_Ui/js/modal/alert.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'jquery/ui',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'mage/translate'\r\n], function ($, _) {\r\n    'use strict';\r\n\r\n    $.widget('mage.alert', $.mage.confirm, {\r\n        options: {\r\n            modalClass: 'confirm',\r\n            title: $.mage.__('Attention'),\r\n            actions: {\r\n\r\n                /**\r\n                 * Callback always - called on all actions.\r\n                 */\r\n                always: function () {}\r\n            },\r\n            buttons: [{\r\n                text: $.mage.__('OK'),\r\n                class: 'action-primary action-accept',\r\n\r\n                /**\r\n                 * Click handler.\r\n                 */\r\n                click: function () {\r\n                    this.closeModal(true);\r\n                }\r\n            }]\r\n        },\r\n\r\n        /**\r\n         * Close modal window.\r\n         */\r\n        closeModal: function () {\r\n            this.options.actions.always();\r\n            this.element.bind('alertclosed', _.bind(this._remove, this));\r\n\r\n            return this._super();\r\n        }\r\n    });\r\n\r\n    return function (config) {\r\n        return $('<div></div>').html(config.content).alert(config);\r\n    };\r\n});\r\n","Magento_Ui/js/modal/confirm.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'jquery/ui',\r\n    'Magento_Ui/js/modal/modal',\r\n    'mage/translate'\r\n], function ($, _) {\r\n    'use strict';\r\n\r\n    $.widget('mage.confirm', $.mage.modal, {\r\n        options: {\r\n            modalClass: 'confirm',\r\n            title: '',\r\n            focus: '.action-accept',\r\n            actions: {\r\n\r\n                /**\r\n                 * Callback always - called on all actions.\r\n                 */\r\n                always: function () {},\r\n\r\n                /**\r\n                 * Callback confirm.\r\n                 */\r\n                confirm: function () {},\r\n\r\n                /**\r\n                 * Callback cancel.\r\n                 */\r\n                cancel: function () {}\r\n            },\r\n            buttons: [{\r\n                text: $.mage.__('Cancel'),\r\n                class: 'action-secondary action-dismiss',\r\n\r\n                /**\r\n                 * Click handler.\r\n                 */\r\n                click: function (event) {\r\n                    this.closeModal(event);\r\n                }\r\n            }, {\r\n                text: $.mage.__('OK'),\r\n                class: 'action-primary action-accept',\r\n\r\n                /**\r\n                 * Click handler.\r\n                 */\r\n                click: function (event) {\r\n                    this.closeModal(event, true);\r\n                }\r\n            }]\r\n        },\r\n\r\n        /**\r\n         * Create widget.\r\n         */\r\n        _create: function () {\r\n            this._super();\r\n            this.modal.find(this.options.modalCloseBtn).off().on('click', _.bind(this.closeModal, this));\r\n            this.openModal();\r\n        },\r\n\r\n        /**\r\n         * Remove modal window.\r\n         */\r\n        _remove: function () {\r\n            this.modal.remove();\r\n        },\r\n\r\n        /**\r\n         * Open modal window.\r\n         */\r\n        openModal: function () {\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Close modal window.\r\n         */\r\n        closeModal: function (event, result) {\r\n            result = result || false;\r\n\r\n            if (result) {\r\n                this.options.actions.confirm(event);\r\n            } else {\r\n                this.options.actions.cancel(event);\r\n            }\r\n            this.options.actions.always(event);\r\n            this.element.bind('confirmclosed', _.bind(this._remove, this));\r\n\r\n            return this._super();\r\n        }\r\n    });\r\n\r\n    return function (config) {\r\n        return $('<div></div>').html(config.content).confirm(config);\r\n    };\r\n});\r\n","Magento_Ui/js/modal/modal-component.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'uiCollection',\r\n    'uiRegistry',\r\n    'underscore',\r\n    './modal'\r\n], function ($, Collection, registry, _) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            template: 'ui/modal/modal-component',\r\n            title: '',\r\n            subTitle: '',\r\n            options: {\r\n                title: '',\r\n                subTitle: '',\r\n                buttons: [],\r\n                keyEventHandlers: {}\r\n            },\r\n            valid: true,\r\n            links: {\r\n                title: 'options.title',\r\n                subTitle: 'options.subTitle'\r\n            },\r\n            listens: {\r\n                state: 'onState',\r\n                title: 'setTitle',\r\n                'options.subTitle': 'setSubTitle'\r\n            },\r\n            modalClass: 'modal-component',\r\n            onCancel: 'closeModal'\r\n        },\r\n\r\n        /**\r\n         * Initializes component.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            _.bindAll(this,\r\n                'initModal',\r\n                'openModal',\r\n                'closeModal',\r\n                'toggleModal',\r\n                'setPrevValues',\r\n                'validate');\r\n            this.initializeContent();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes modal configuration\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            return this._super()\r\n                .initSelector()\r\n                .initModalEvents();\r\n        },\r\n\r\n        /**\r\n         * Configure modal selector\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initSelector: function () {\r\n            var modalClass = this.name.replace(/\\./g, '_');\r\n\r\n            this.contentSelector = '.' + this.modalClass;\r\n            this.options.modalClass = this.options.modalClass + ' ' + modalClass;\r\n            this.rootSelector = '.' + modalClass;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Configure modal keyboard handlers\r\n         * and outer click\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initModalEvents: function () {\r\n            this.options.keyEventHandlers.escapeKey = this.options.outerClickHandler = this[this.onCancel].bind(this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initialize modal's content components\r\n         */\r\n        initializeContent: function () {\r\n            $.async({\r\n                component: this.name\r\n            }, this.initModal);\r\n        },\r\n\r\n        /**\r\n         * Init toolbar section so other components will be able to place something in it\r\n         */\r\n        initToolbarSection: function () {\r\n            this.set('toolbarSection', this.modal.data('mage-modal').modal.find('header').get(0));\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super();\r\n            this.observe(['state', 'focused']);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Wrap content in a modal of certain type\r\n         *\r\n         * @param {HTMLElement} element\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initModal: function (element) {\r\n            if (!this.modal) {\r\n                this.overrideModalButtonCallback();\r\n                this.options.modalCloseBtnHandler = this[this.onCancel].bind(this);\r\n                this.modal = $(element).modal(this.options);\r\n                this.initToolbarSection();\r\n\r\n                if (this.waitCbk) {\r\n                    this.waitCbk();\r\n                    this.waitCbk = null;\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Open modal\r\n         */\r\n        openModal: function () {\r\n            if (this.modal) {\r\n                this.state(true);\r\n            } else {\r\n                this.waitCbk = this.openModal;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Close modal\r\n         */\r\n        closeModal: function () {\r\n            if (this.modal) {\r\n                this.state(false);\r\n            } else {\r\n                this.waitCbk = this.closeModal;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Toggle modal\r\n         */\r\n        toggleModal: function () {\r\n            if (this.modal) {\r\n                this.state(!this.state());\r\n            } else {\r\n                this.waitCbk = this.toggleModal;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Sets title for modal\r\n         *\r\n         * @param {String} title\r\n         */\r\n        setTitle: function (title) {\r\n            if (this.title !== title) {\r\n                this.title = title;\r\n            }\r\n\r\n            if (this.modal) {\r\n                this.modal.modal('setTitle', title);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Sets subTitle for modal\r\n         *\r\n         * @param {String} subTitle\r\n         */\r\n        setSubTitle: function (subTitle) {\r\n            if (this.subTitle !== subTitle) {\r\n                this.subTitle = subTitle;\r\n            }\r\n\r\n            if (this.modal) {\r\n                this.modal.modal('setSubTitle', subTitle);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Wrap content in a modal of certain type\r\n         *\r\n         * @param {Boolean} state\r\n         */\r\n        onState: function (state) {\r\n            if (state) {\r\n                this.modal.modal('openModal');\r\n                this.applyData();\r\n            } else {\r\n                this.modal.modal('closeModal');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validate everything validatable in modal\r\n         */\r\n        validate: function (elem) {\r\n            if (typeof elem.validate === 'function') {\r\n                this.valid = this.valid & elem.validate().valid;\r\n            } else if (elem.elems) {\r\n                elem.elems().forEach(this.validate, this);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Reset data from provider\r\n         */\r\n        resetData: function () {\r\n            this.elems().forEach(this.resetValue, this);\r\n        },\r\n\r\n        /**\r\n         * Update 'applied' property with data from modal content\r\n         */\r\n        applyData: function () {\r\n            var applied = {};\r\n\r\n            this.elems().forEach(this.gatherValues.bind(this, applied), this);\r\n            this.applied = applied;\r\n        },\r\n\r\n        /**\r\n         * Gather values from modal content\r\n         *\r\n         * @param {Array} applied\r\n         * @param {HTMLElement} elem\r\n         */\r\n        gatherValues: function (applied, elem) {\r\n            if (typeof elem.value === 'function') {\r\n                applied[elem.name] = elem.value();\r\n            } else if (elem.elems) {\r\n                elem.elems().forEach(this.gatherValues.bind(this, applied), this);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set to previous values from modal content\r\n         *\r\n         * @param {HTMLElement} elem\r\n         */\r\n        setPrevValues: function (elem) {\r\n            if (typeof elem.value === 'function') {\r\n                this.modal.focus();\r\n                elem.value(this.applied[elem.name]);\r\n            } else if (elem.elems) {\r\n                elem.elems().forEach(this.setPrevValues, this);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Triggers some method in every modal child elem, if this method is defined\r\n         *\r\n         * @param {Object} action - action configuration,\r\n         * must contain actionName and targetName and\r\n         * can contain params\r\n         */\r\n        triggerAction: function (action) {\r\n            var targetName = action.targetName,\r\n                params = action.params || [],\r\n                actionName = action.actionName,\r\n                target;\r\n\r\n            target = registry.async(targetName);\r\n\r\n            if (target && typeof target === 'function' && actionName) {\r\n                params.unshift(actionName);\r\n                target.apply(target, params);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Override modal buttons callback placeholders with real callbacks\r\n         */\r\n        overrideModalButtonCallback: function () {\r\n            var buttons = this.options.buttons;\r\n\r\n            if (buttons && buttons.length) {\r\n                buttons.forEach(function (button) {\r\n                    button.click = this.getButtonClickHandler(button.actions);\r\n                }, this);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Generate button click handler based on button's 'actions' configuration\r\n         */\r\n        getButtonClickHandler: function (actionsConfig) {\r\n            var actions = actionsConfig.map(\r\n                function (actionConfig) {\r\n                    if (_.isObject(actionConfig)) {\r\n                        return this.triggerAction.bind(this, actionConfig);\r\n                    }\r\n\r\n                    return this[actionConfig] ? this[actionConfig].bind(this) : function () {};\r\n                }, this);\r\n\r\n            return function () {\r\n                actions.forEach(\r\n                    function (action) {\r\n                        action();\r\n                    }\r\n                );\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Cancels changes in modal:\r\n         * returning elems values to the previous state,\r\n         * and close modal\r\n         */\r\n        actionCancel: function () {\r\n            this.elems().forEach(this.setPrevValues, this);\r\n            this.closeModal();\r\n        },\r\n\r\n        /**\r\n         * Accept changes in modal by not preventing them.\r\n         * Can be extended by exporting 'gatherValues' result somewhere\r\n         */\r\n        actionDone: function () {\r\n            this.valid = true;\r\n            this.elems().forEach(this.validate, this);\r\n\r\n            if (this.valid) {\r\n                this.closeModal();\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/modal/modal.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mage/template',\r\n    'text!ui/template/modal/modal-popup.html',\r\n    'text!ui/template/modal/modal-slide.html',\r\n    'text!ui/template/modal/modal-custom.html',\r\n    'Magento_Ui/js/lib/key-codes',\r\n    'jquery/ui',\r\n    'mage/translate'\r\n], function ($, _, template, popupTpl, slideTpl, customTpl, keyCodes) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Detect browser transition end event.\r\n     * @return {String|undefined} - transition event.\r\n     */\r\n    var transitionEvent =  (function () {\r\n        var transition,\r\n            elementStyle = document.createElement('div').style,\r\n            transitions = {\r\n                'transition': 'transitionend',\r\n                'OTransition': 'oTransitionEnd',\r\n                'MozTransition': 'transitionend',\r\n                'WebkitTransition': 'webkitTransitionEnd'\r\n            };\r\n\r\n        for (transition in transitions) {\r\n            if (elementStyle[transition] !== undefined && transitions.hasOwnProperty(transition)) {\r\n                return transitions[transition];\r\n            }\r\n        }\r\n    })();\r\n\r\n    /**\r\n     * Modal Window Widget\r\n     */\r\n    $.widget('mage.modal', {\r\n        options: {\r\n            type: 'popup',\r\n            title: '',\r\n            subTitle: '',\r\n            modalClass: '',\r\n            focus: '[data-role=\"closeBtn\"]',\r\n            autoOpen: false,\r\n            clickableOverlay: true,\r\n            popupTpl: popupTpl,\r\n            slideTpl: slideTpl,\r\n            customTpl: customTpl,\r\n            modalVisibleClass: '_show',\r\n            parentModalClass: '_has-modal',\r\n            innerScrollClass: '_inner-scroll',\r\n            responsive: false,\r\n            innerScroll: false,\r\n            modalTitle: '[data-role=\"title\"]',\r\n            modalSubTitle: '[data-role=\"subTitle\"]',\r\n            modalBlock: '[data-role=\"modal\"]',\r\n            modalCloseBtn: '[data-role=\"closeBtn\"]',\r\n            modalContent: '[data-role=\"content\"]',\r\n            modalAction: '[data-role=\"action\"]',\r\n            focusableScope: '[data-role=\"focusable-scope\"]',\r\n            focusableStart: '[data-role=\"focusable-start\"]',\r\n            focusableEnd: '[data-role=\"focusable-end\"]',\r\n            appendTo: 'body',\r\n            wrapperClass: 'modals-wrapper',\r\n            overlayClass: 'modals-overlay',\r\n            responsiveClass: 'modal-slide',\r\n            trigger: '',\r\n            modalLeftMargin: 45,\r\n            closeText: $.mage.__('Close'),\r\n            buttons: [{\r\n                text: $.mage.__('Ok'),\r\n                class: '',\r\n                attr: {},\r\n\r\n                /**\r\n                 * Default action on button click\r\n                 */\r\n                click: function (event) {\r\n                    this.closeModal(event);\r\n                }\r\n            }],\r\n            keyEventHandlers: {\r\n\r\n                /**\r\n                 * Tab key press handler,\r\n                 * set focus to elements\r\n                 */\r\n                tabKey: function () {\r\n                    if (document.activeElement === this.modal[0]) {\r\n                        this._setFocus('start');\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Escape key press handler,\r\n                 * close modal window\r\n                 * @param {Object} event - event\r\n                 */\r\n                escapeKey: function (event) {\r\n                    if (this.options.isOpen && this.modal.find(document.activeElement).length ||\r\n                        this.options.isOpen && this.modal[0] === document.activeElement) {\r\n                        this.closeModal(event);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Creates modal widget.\r\n         */\r\n        _create: function () {\r\n            _.bindAll(\r\n                this,\r\n                'keyEventSwitcher',\r\n                '_tabSwitcher',\r\n                'closeModal'\r\n            );\r\n\r\n            this.options.transitionEvent = transitionEvent;\r\n            this._createWrapper();\r\n            this._renderModal();\r\n            this._createButtons();\r\n            $(this.options.trigger).on('click', _.bind(this.toggleModal, this));\r\n            this._on(this.modal.find(this.options.modalCloseBtn), {\r\n                'click': this.options.modalCloseBtnHandler ? this.options.modalCloseBtnHandler : this.closeModal\r\n            });\r\n            this._on(this.element, {\r\n                'openModal': this.openModal,\r\n                'closeModal': this.closeModal\r\n            });\r\n            this.options.autoOpen ? this.openModal() : false;\r\n        },\r\n\r\n        /**\r\n         * Returns element from modal node.\r\n         * @return {Object} - element.\r\n         */\r\n        _getElem: function (elem) {\r\n            return this.modal.find(elem);\r\n        },\r\n\r\n        /**\r\n         * Gets visible modal count.\r\n         * * @return {Number} - visible modal count.\r\n         */\r\n        _getVisibleCount: function () {\r\n            var modals = this.modalWrapper.find(this.options.modalBlock);\r\n\r\n            return modals.filter('.' + this.options.modalVisibleClass).length;\r\n        },\r\n\r\n        /**\r\n         * Gets count of visible modal by slide type.\r\n         * * @return {Number} - visible modal count.\r\n         */\r\n        _getVisibleSlideCount: function () {\r\n            var elems = this.modalWrapper.find('[data-type=\"slide\"]');\r\n\r\n            return elems.filter('.' + this.options.modalVisibleClass).length;\r\n        },\r\n\r\n        /**\r\n         * Listener key events.\r\n         * Call handler function if it exists\r\n         */\r\n        keyEventSwitcher: function (event) {\r\n            var key = keyCodes[event.keyCode];\r\n\r\n            if (this.options.keyEventHandlers.hasOwnProperty(key)) {\r\n                this.options.keyEventHandlers[key].apply(this, arguments);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set title for modal.\r\n         *\r\n         * @param {String} title\r\n         */\r\n        setTitle: function (title) {\r\n            var $title = $(this.options.modalTitle),\r\n                $subTitle = this.modal.find(this.options.modalSubTitle);\r\n\r\n            $title.text(title);\r\n            $title.append($subTitle);\r\n        },\r\n\r\n        /**\r\n         * Set sub title for modal.\r\n         *\r\n         * @param {String} subTitle\r\n         */\r\n        setSubTitle: function (subTitle) {\r\n            this.options.subTitle = subTitle;\r\n            this.modal.find(this.options.modalSubTitle).text(subTitle);\r\n        },\r\n\r\n        /**\r\n         * Toggle modal.\r\n         * * @return {Element} - current element.\r\n         */\r\n        toggleModal: function () {\r\n            if (this.options.isOpen === true) {\r\n                this.closeModal();\r\n            } else {\r\n                this.openModal();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Open modal.\r\n         * * @return {Element} - current element.\r\n         */\r\n        openModal: function () {\r\n            this.options.isOpen = true;\r\n            this.focussedElement = document.activeElement;\r\n            this._createOverlay();\r\n            this._setActive();\r\n            this._setKeyListener();\r\n            this.modal.one(this.options.transitionEvent, _.bind(this._setFocus, this, 'end', 'opened'));\r\n            this.modal.one(this.options.transitionEvent, _.bind(this._trigger, this, 'opened'));\r\n            this.modal.addClass(this.options.modalVisibleClass);\r\n\r\n            if (!this.options.transitionEvent) {\r\n                this._trigger('opened');\r\n            }\r\n\r\n            return this.element;\r\n        },\r\n\r\n        /**\r\n         * Set focus to element.\r\n         * @param {String} position - can be \"start\" and \"end\"\r\n         *      positions.\r\n         *      If position is \"end\" - sets focus to first\r\n         *      focusable element in modal window scope.\r\n         *      If position is \"start\" - sets focus to last\r\n         *      focusable element in modal window scope\r\n         *\r\n         *  @param {String} type - can be \"opened\" or false\r\n         *      If type is \"opened\" - looks to \"this.options.focus\"\r\n         *      property and sets focus\r\n         */\r\n        _setFocus: function (position, type) {\r\n            var focusableElements,\r\n                infelicity;\r\n\r\n            if (type === 'opened' && this.options.focus) {\r\n                this.modal.find($(this.options.focus)).focus();\r\n            } else if (type === 'opened' && !this.options.focus) {\r\n                this.modal.find(this.options.focusableScope).focus();\r\n            } else if (position === 'end') {\r\n                this.modal.find(this.options.modalCloseBtn).focus();\r\n            } else if (position === 'start') {\r\n                infelicity = 2; //Constant for find last focusable element\r\n                focusableElements = this.modal.find(':focusable');\r\n                focusableElements.eq(focusableElements.length - infelicity).focus();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set events listener when modal is opened.\r\n         */\r\n        _setKeyListener: function () {\r\n            this.modal.find(this.options.focusableStart).bind('focusin', this._tabSwitcher);\r\n            this.modal.find(this.options.focusableEnd).bind('focusin', this._tabSwitcher);\r\n            this.modal.bind('keydown', this.keyEventSwitcher);\r\n        },\r\n\r\n        /**\r\n         * Remove events listener when modal is closed.\r\n         */\r\n        _removeKeyListener: function () {\r\n            this.modal.find(this.options.focusableStart).unbind('focusin', this._tabSwitcher);\r\n            this.modal.find(this.options.focusableEnd).unbind('focusin', this._tabSwitcher);\r\n            this.modal.unbind('keydown', this.keyEventSwitcher);\r\n        },\r\n\r\n        /**\r\n         * Switcher for focus event.\r\n         * @param {Object} e - event\r\n         */\r\n        _tabSwitcher: function (e) {\r\n            var target = $(e.target);\r\n\r\n            if (target.is(this.options.focusableStart)) {\r\n                this._setFocus('start');\r\n            } else if (target.is(this.options.focusableEnd)) {\r\n                this._setFocus('end');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Close modal.\r\n         * * @return {Element} - current element.\r\n         */\r\n        closeModal: function () {\r\n            var that = this;\r\n\r\n            this._removeKeyListener();\r\n            this.options.isOpen = false;\r\n            this.modal.one(this.options.transitionEvent, function () {\r\n                that._close();\r\n            });\r\n            this.modal.removeClass(this.options.modalVisibleClass);\r\n\r\n            if (!this.options.transitionEvent) {\r\n                that._close();\r\n            }\r\n\r\n            return this.element;\r\n        },\r\n\r\n        /**\r\n         * Helper for closeModal function.\r\n         */\r\n        _close: function () {\r\n            var trigger = _.bind(this._trigger, this, 'closed', this.modal);\r\n\r\n            $(this.focussedElement).focus();\r\n            this._destroyOverlay();\r\n            this._unsetActive();\r\n            _.defer(trigger, this);\r\n        },\r\n\r\n        /**\r\n         * Set z-index and margin for modal and overlay.\r\n         */\r\n        _setActive: function () {\r\n            var zIndex = this.modal.zIndex();\r\n\r\n            this.prevOverlayIndex = this.overlay.zIndex();\r\n            this.modal.zIndex(zIndex + this._getVisibleCount());\r\n            this.overlay.zIndex(zIndex + (this._getVisibleCount() - 1));\r\n\r\n            if (this._getVisibleSlideCount()) {\r\n                this.modal.css('marginLeft', this.options.modalLeftMargin * this._getVisibleSlideCount());\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Unset styles for modal and set z-index for previous modal.\r\n         */\r\n        _unsetActive: function () {\r\n            this.modal.removeAttr('style');\r\n\r\n            if (this.overlay) {\r\n                this.overlay.zIndex(this.prevOverlayIndex);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Creates wrapper to hold all modals.\r\n         */\r\n        _createWrapper: function () {\r\n            this.modalWrapper = $(this.options.appendTo).find('.' + this.options.wrapperClass);\r\n\r\n            if (!this.modalWrapper.length) {\r\n                this.modalWrapper = $('<div></div>')\r\n                    .addClass(this.options.wrapperClass)\r\n                    .appendTo(this.options.appendTo);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Compile template and append to wrapper.\r\n         */\r\n        _renderModal: function () {\r\n            $(template(\r\n                this.options[this.options.type + 'Tpl'],\r\n                {\r\n                    data: this.options\r\n                })).appendTo(this.modalWrapper);\r\n            this.modal = this.modalWrapper.find(this.options.modalBlock).last();\r\n            this.element.appendTo(this._getElem(this.options.modalContent));\r\n\r\n            if (this.element.is(':hidden')) {\r\n                this.element.show();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Creates buttons pane.\r\n         */\r\n        _createButtons: function () {\r\n            this.buttons = this._getElem(this.options.modalAction);\r\n            _.each(this.options.buttons, function (btn, key) {\r\n                var button = this.buttons[key];\r\n\r\n                if (btn.attr) {\r\n                    $(button).attr(btn.attr);\r\n                }\r\n\r\n                if (btn.class) {\r\n                    $(button).addClass(btn.class);\r\n                }\r\n\r\n                if (!btn.click) {\r\n                    btn.click = this.closeModal;\r\n                }\r\n                $(button).on('click', _.bind(btn.click, this));\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Creates overlay, append it to wrapper, set previous click event on overlay.\r\n         */\r\n        _createOverlay: function () {\r\n            var events,\r\n                outerClickHandler = this.options.outerClickHandler || this.closeModal;\r\n\r\n            this.overlay = $('.' + this.options.overlayClass);\r\n\r\n            if (!this.overlay.length) {\r\n                $(this.options.appendTo).addClass(this.options.parentModalClass);\r\n                this.overlay = $('<div></div>')\r\n                    .addClass(this.options.overlayClass)\r\n                    .appendTo(this.modalWrapper);\r\n            }\r\n            events = $._data(this.overlay.get(0), 'events');\r\n            events ? this.prevOverlayHandler = events.click[0].handler : false;\r\n            this.options.clickableOverlay ? this.overlay.unbind().on('click', outerClickHandler) : false;\r\n        },\r\n\r\n        /**\r\n         * Destroy overlay.\r\n         */\r\n        _destroyOverlay: function () {\r\n            if (this._getVisibleCount()) {\r\n                this.overlay.unbind().on('click', this.prevOverlayHandler);\r\n            } else {\r\n                $(this.options.appendTo).removeClass(this.options.parentModalClass);\r\n                this.overlay.remove();\r\n                this.overlay = null;\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.modal;\r\n});\r\n","Magento_Ui/js/modal/modalToggle.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/modal'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return function (config, el) {\r\n        var widget,\r\n            content;\r\n\r\n        if (config.contentSelector) {\r\n            content = $(config.contentSelector);\r\n        } else if (config.content) {\r\n            content = $('<div />').html(config.content);\r\n        } else {\r\n            content = $('<div />');\r\n        }\r\n\r\n        widget = content.modal(config);\r\n\r\n        $(el).on(config.toggleEvent, function () {\r\n            var state = widget.data('mage-modal').options.isOpen;\r\n\r\n            if (state) {\r\n                widget.modal('closeModal');\r\n            } else {\r\n                widget.modal('openModal');\r\n            }\r\n\r\n            return false;\r\n        });\r\n\r\n        return widget;\r\n    };\r\n});\r\n","Magento_Ui/js/modal/prompt.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'jquery/ui',\r\n    'Magento_Ui/js/modal/modal',\r\n    'mage/translate'\r\n], function ($, _) {\r\n    'use strict';\r\n\r\n    $.widget('mage.prompt', $.mage.modal, {\r\n        options: {\r\n            modalClass: 'prompt',\r\n            promptField: '[data-role=\"promptField\"]',\r\n            value: '',\r\n            actions: {\r\n\r\n                /**\r\n                 * Callback always - called on all actions.\r\n                 */\r\n                always: function () {},\r\n\r\n                /**\r\n                 * Callback confirm.\r\n                 */\r\n                confirm: function () {},\r\n\r\n                /**\r\n                 * Callback cancel.\r\n                 */\r\n                cancel: function () {}\r\n            },\r\n            buttons: [{\r\n                text: $.mage.__('Cancel'),\r\n                class: 'action-secondary action-dismiss',\r\n\r\n                /**\r\n                 * Click handler.\r\n                 */\r\n                click: function () {\r\n                    this.closeModal();\r\n                }\r\n            }, {\r\n                text: $.mage.__('OK'),\r\n                class: 'action-primary action-accept',\r\n\r\n                /**\r\n                 * Click handler.\r\n                 */\r\n                click: function () {\r\n                    this.closeModal(true);\r\n                }\r\n            }]\r\n        },\r\n\r\n        /**\r\n         * Create widget.\r\n         */\r\n        _create: function () {\r\n            this.options.focus = this.options.promptField;\r\n            this._super();\r\n            this.modal.find(this.options.modalContent).append(\r\n                '<div class=\"prompt-message\">' +\r\n                    '<input data-role=\"promptField\" id=\"prompt-field\" class=\"admin__control-text\" type=\"text\"/>' +\r\n                '</div>'\r\n            );\r\n            this.modal.find(this.options.modalCloseBtn).off().on('click',  _.bind(this.closeModal, this, false));\r\n            this.openModal();\r\n        },\r\n\r\n        /**\r\n         * Compile template and append to wrapper.\r\n         */\r\n        _renderModal: function () {\r\n            this._super();\r\n            this.element.wrap('<label for=\"prompt-field\"></label>');\r\n        },\r\n\r\n        /**\r\n         * Remove widget\r\n         */\r\n        _remove: function () {\r\n            this.modal.remove();\r\n        },\r\n\r\n        /**\r\n         * Open modal window\r\n         */\r\n        openModal: function () {\r\n            this._super();\r\n            this.modal.find(this.options.promptField).val(this.options.value);\r\n        },\r\n\r\n        /**\r\n         * Close modal window\r\n         */\r\n        closeModal: function (result) {\r\n            var value;\r\n\r\n            if (result) {\r\n                value = this.modal.find(this.options.promptField).val();\r\n                this.options.actions.confirm(value);\r\n            } else {\r\n                this.options.actions.cancel();\r\n            }\r\n            this.options.actions.always();\r\n            this.element.bind('promptclosed', _.bind(this._remove, this));\r\n\r\n            return this._super();\r\n        }\r\n    });\r\n\r\n    return function (config) {\r\n        return $('<div></div>').html(config.content).prompt(config);\r\n    };\r\n});\r\n","Magento_Ui/js/timeline/timeline-view.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'underscore',\r\n    'Magento_Ui/js/lib/view/utils/raf',\r\n    'uiRegistry',\r\n    'uiClass'\r\n], function (ko, $, _, raf, registry, Class) {\r\n    'use strict';\r\n\r\n    var hasClassList = (function () {\r\n        var list = document.createElement('_').classList;\r\n\r\n        return !!list && !list.toggle('_test', false);\r\n    })();\r\n\r\n    /**\r\n     * Polyfill of the 'classList.toggle' method.\r\n     *\r\n     * @param {HTMLElement} elem\r\n     */\r\n    function toggleClass(elem) {\r\n        var classList   = elem.classList,\r\n            args        = Array.prototype.slice.call(arguments, 1),\r\n            $elem;\r\n\r\n        if (hasClassList) {\r\n            classList.toggle.apply(classList, args);\r\n        } else {\r\n            $elem = $(elem);\r\n            $elem.toggleClass.apply($elem, args);\r\n        }\r\n    }\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n            selectors: {\r\n                content: '.timeline-content',\r\n                timeUnit: '.timeline-unit',\r\n                item: '.timeline-item:not([data-role=no-data-msg])',\r\n                event: '.timeline-event'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes TimelineView component.\r\n         *\r\n         * @returns {TimelineView} Chainable.\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(\r\n                this,\r\n                'refresh',\r\n                'initContent',\r\n                'initItem',\r\n                'initTimeUnit',\r\n                'getItemBindings',\r\n                'updateItemsPosition',\r\n                'onScaleChange',\r\n                'onEventElementRender',\r\n                'onWindowResize',\r\n                'onContentScroll',\r\n                'onDataReloaded',\r\n                'onToStartClick',\r\n                'onToEndClick'\r\n            );\r\n\r\n            this._super()\r\n                .initModel()\r\n                .waitContent();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Applies listeners for the model properties changes.\r\n         *\r\n         * @returns {TimelineView} Chainable.\r\n         */\r\n        initModel: function () {\r\n            var model = registry.get(this.model);\r\n\r\n            model.on('scale', this.onScaleChange);\r\n            model.source.on('reloaded', this.onDataReloaded);\r\n\r\n            this.model = model;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Applies DOM watcher for the\r\n         * content element rendering.\r\n         *\r\n         * @returns {TimelineView} Chainable.\r\n         */\r\n        waitContent: function () {\r\n            $.async({\r\n                selector: this.selectors.content,\r\n                component: this.model\r\n            }, this.initContent);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes timelines' content element.\r\n         *\r\n         * @param {HTMLElement} content\r\n         * @returns {TimelineView} Chainable.\r\n         */\r\n        initContent: function (content) {\r\n            this.$content = content;\r\n\r\n            $(content).on('scroll', this.onContentScroll);\r\n            $(window).on('resize', this.onWindowResize);\r\n\r\n            $.async(this.selectors.item, content, this.initItem);\r\n            $.async(this.selectors.event, content, this.onEventElementRender);\r\n            $.async(this.selectors.timeUnit, content, this.initTimeUnit);\r\n\r\n            this.refresh();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes timeline item element,\r\n         * e.g. establishes event listeners and applies data bindings.\r\n         *\r\n         * @param {HTMLElement} elem\r\n         * @returns {TimelineView} Chainable.\r\n         */\r\n        initItem: function (elem) {\r\n            $(elem)\r\n                .bindings(this.getItemBindings)\r\n                .on('click', '._toend', this.onToEndClick)\r\n                .on('click', '._tostart', this.onToStartClick);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes timeline unit element.\r\n         *\r\n         * @param {HTMLElement} elem\r\n         * @returns {TimelineView} Chainable.\r\n         */\r\n        initTimeUnit: function (elem) {\r\n            $(elem).bindings(this.getTimeUnitBindings());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates items positions in a\r\n         * loop if state of a view has changed.\r\n         */\r\n        refresh: function () {\r\n            raf(this.refresh);\r\n\r\n            if (this._update) {\r\n                this._update = false;\r\n\r\n                this.updateItemsPosition();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Returns object width additional bindings\r\n         * for a timeline unit element.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getTimeUnitBindings: function () {\r\n            return {\r\n                style: {\r\n                    width: ko.computed(function () {\r\n                        return this.getTimeUnitWidth() + '%';\r\n                    }.bind(this))\r\n                }\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Returns object with additional\r\n         * bindings for a timeline item element.\r\n         *\r\n         * @param {Object} ctx\r\n         * @returns {Object}\r\n         */\r\n        getItemBindings: function (ctx) {\r\n            return {\r\n                style: {\r\n                    width: ko.computed(function () {\r\n                        return this.getItemWidth(ctx.$row()) + '%';\r\n                    }.bind(this)),\r\n\r\n                    'margin-left': ko.computed(function () {\r\n                        return this.getItemMargin(ctx.$row()) + '%';\r\n                    }.bind(this))\r\n                }\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Calculates width in percents of a timeline unit element.\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        getTimeUnitWidth: function () {\r\n            return 100 / this.model.scale;\r\n        },\r\n\r\n        /**\r\n         * Calculates width of a record in percents.\r\n         *\r\n         * @param {Object} record\r\n         * @returns {String}\r\n         */\r\n        getItemWidth: function (record) {\r\n            var days = 0;\r\n\r\n            if (record) {\r\n                days = this.model.getDaysLength(record);\r\n            }\r\n\r\n            return this.getTimeUnitWidth()  * days;\r\n        },\r\n\r\n        /**\r\n         * Calculates left margin value for provided record.\r\n         *\r\n         * @param {Object} record\r\n         * @returns {String}\r\n         */\r\n        getItemMargin: function (record) {\r\n            var offset = 0;\r\n\r\n            if (record) {\r\n                offset = this.model.getStartDelta(record);\r\n            }\r\n\r\n            return this.getTimeUnitWidth() * offset;\r\n        },\r\n\r\n        /**\r\n         * Returns collection of currently available\r\n         * timeline item elements.\r\n         *\r\n         * @returns {Array<HTMLElement>}\r\n         */\r\n        getItems: function () {\r\n            var items = this.$content.querySelectorAll(this.selectors.item);\r\n\r\n            return _.toArray(items);\r\n        },\r\n\r\n        /**\r\n         * Updates positions of timeline elements.\r\n         *\r\n         * @returns {TimelineView} Chainable.\r\n         */\r\n        updateItemsPosition: function () {\r\n            this.getItems()\r\n                .forEach(this.updatePositionFor, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates position of provided timeline element.\r\n         *\r\n         * @param {HTMLElement} $elem\r\n         * @returns {TimelineView} Chainable.\r\n         */\r\n        updatePositionFor: function ($elem) {\r\n            var $event      = $elem.querySelector(this.selectors.event),\r\n                leftEdge    = this.getLeftEdgeFor($elem),\r\n                rightEdge   = this.getRightEdgeFor($elem);\r\n\r\n            if ($event) {\r\n                $event.style.left = Math.max(-leftEdge, 0) + 'px';\r\n                $event.style.right = Math.max(rightEdge, 0) + 'px';\r\n            }\r\n\r\n            toggleClass($elem, '_scroll-start', leftEdge < 0);\r\n            toggleClass($elem, '_scroll-end', rightEdge > 0);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Scrolls content area to the start of provided element.\r\n         *\r\n         * @param {HTMLElement} elem\r\n         * @returns {TimelineView}\r\n         */\r\n        toStartOf: function (elem) {\r\n            var leftEdge = this.getLeftEdgeFor(elem);\r\n\r\n            this.$content.scrollLeft += leftEdge;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Scrolls content area to the end of provided element.\r\n         *\r\n         * @param {HTMLElement} elem\r\n         * @returns {TimelineView}\r\n         */\r\n        toEndOf: function (elem) {\r\n            var rightEdge = this.getRightEdgeFor(elem);\r\n\r\n            this.$content.scrollLeft += rightEdge + 1;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calculates location of the left edge of an element\r\n         * relative to the contents' left edge.\r\n         *\r\n         * @param {HTMLElement} elem\r\n         * @returns {Number}\r\n         */\r\n        getLeftEdgeFor: function (elem) {\r\n            var leftOffset = elem.getBoundingClientRect().left;\r\n\r\n            return leftOffset - this.$content.getBoundingClientRect().left;\r\n        },\r\n\r\n        /**\r\n         * Calculates location of the right edge of an element\r\n         * relative to the contents' right edge.\r\n         *\r\n         * @param {HTMLElement} elem\r\n         * @returns {Number}\r\n         */\r\n        getRightEdgeFor: function (elem) {\r\n            var elemWidth   = elem.offsetWidth,\r\n                leftEdge    = this.getLeftEdgeFor(elem);\r\n\r\n            return leftEdge + elemWidth - this.$content.offsetWidth;\r\n        },\r\n\r\n        /**\r\n         * 'To Start' button 'click' event handler.\r\n         *\r\n         * @param {jQueryEvent} event\r\n         */\r\n        onToStartClick: function (event) {\r\n            var elem = event.originalEvent.currentTarget;\r\n\r\n            event.stopPropagation();\r\n\r\n            this.toStartOf(elem);\r\n        },\r\n\r\n        /**\r\n         * 'To End' button 'click' event handler.\r\n         *\r\n         * @param {jQueryEvent} event\r\n         */\r\n        onToEndClick: function (event) {\r\n            var elem = event.originalEvent.currentTarget;\r\n\r\n            event.stopPropagation();\r\n\r\n            this.toEndOf(elem);\r\n        },\r\n\r\n        /**\r\n         * Handler of the scale value 'change' event.\r\n         */\r\n        onScaleChange: function () {\r\n            this._update = true;\r\n        },\r\n\r\n        /**\r\n         * Callback function which is invoked\r\n         * when event element was rendered.\r\n         */\r\n        onEventElementRender: function () {\r\n            this._update = true;\r\n        },\r\n\r\n        /**\r\n         * Window 'resize' event handler.\r\n         */\r\n        onWindowResize: function () {\r\n            this._update = true;\r\n        },\r\n\r\n        /**\r\n         * Content container 'scroll' event handler.\r\n         */\r\n        onContentScroll: function () {\r\n            this._update = true;\r\n        },\r\n\r\n        /**\r\n         * Data 'reload' event handler.\r\n         */\r\n        onDataReloaded: function () {\r\n            this._update = true;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/timeline/timeline.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'moment',\r\n    'uiLayout',\r\n    'Magento_Ui/js/grid/listing'\r\n], function (_, moment, layout, Listing) {\r\n    'use strict';\r\n\r\n    var ONE_DAY = 86400000;\r\n\r\n    return Listing.extend({\r\n        defaults: {\r\n            recordTmpl: 'ui/timeline/record',\r\n            dateFormat: 'YYYY-MM-DD HH:mm:ss',\r\n            headerFormat: 'ddd MM/DD',\r\n            detailsFormat: 'DD/MM/YYYY HH:mm:ss',\r\n            scale: 7,\r\n            scaleStep: 1,\r\n            minScale: 7,\r\n            maxScale: 28,\r\n            minDays: 28,\r\n            displayMode: 'timeline',\r\n            displayModes: {\r\n                timeline: {\r\n                    label: 'Timeline',\r\n                    value: 'timeline',\r\n                    template: 'ui/timeline/timeline'\r\n                }\r\n            },\r\n            viewConfig: {\r\n                component: 'Magento_Ui/js/timeline/timeline-view',\r\n                name: '${ $.name }_view',\r\n                model: '${ $.name }'\r\n            },\r\n            tracks: {\r\n                scale: true\r\n            },\r\n            statefull: {\r\n                scale: true\r\n            },\r\n            range: {}\r\n        },\r\n\r\n        /**\r\n         * Initializes Timeline component.\r\n         *\r\n         * @returns {Timeline} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initView()\r\n                .updateRange();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes components configuration.\r\n         *\r\n         * @returns {Timeline} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n\r\n            this.maxScale = Math.min(this.minDays, this.maxScale);\r\n            this.minScale = Math.min(this.maxScale, this.minScale);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Timeline} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe.call(this.range, true, 'hasToday');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes TimelineView component.\r\n         *\r\n         * @returns {Timeline} Chainable.\r\n         */\r\n        initView: function () {\r\n            layout([this.viewConfig]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if provided event record is active,\r\n         * i.e. it has already started.\r\n         *\r\n         * @param {Object} record\r\n         * @returns {Boolean}\r\n         */\r\n        isActive: function (record) {\r\n            return Number(record.status) === 1;\r\n        },\r\n\r\n        /**\r\n         * Checks if provided event record is upcoming,\r\n         * i.e. it will start later on.\r\n         *\r\n         * @param {Object} record\r\n         * @returns {Boolean}\r\n         */\r\n        isUpcoming: function (record) {\r\n            return Number(record.status) === 2;\r\n        },\r\n\r\n        /**\r\n         * Checks if provided event record is permanent,\r\n         * i.e. it has no ending time.\r\n         *\r\n         * @param {Object} record\r\n         * @returns {Boolean}\r\n         */\r\n        isPermanent: function (record) {\r\n            return !this.getEndDate(record);\r\n        },\r\n\r\n        /**\r\n         * Checks if provided date indicates current day.\r\n         *\r\n         * @param {(Number|Moment)} date\r\n         * @returns {Boolenan}\r\n         */\r\n        isToday: function (date) {\r\n            return moment().isSame(date, 'day');\r\n        },\r\n\r\n        /**\r\n         * Checks if range object contains todays date.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasToday: function () {\r\n            return this.range.hasToday;\r\n        },\r\n\r\n        /**\r\n         * Returns start date of provided record.\r\n         *\r\n         * @param {Object} record\r\n         * @returns {String}\r\n         */\r\n        getStartDate: function (record) {\r\n            return record['start_time'];\r\n        },\r\n\r\n        /**\r\n         * Returns end date of provided record.\r\n         *\r\n         * @param {Object} record\r\n         * @returns {String}\r\n         */\r\n        getEndDate: function (record) {\r\n            return record['end_time'];\r\n        },\r\n\r\n        /**\r\n         * Returns difference in days between records' start date\r\n         * and a first day of a range.\r\n         *\r\n         * @param {Object} record\r\n         * @returns {Number}\r\n         */\r\n        getStartDelta: function (record) {\r\n            var start    = this.createDate(this.getStartDate(record)),\r\n                firstDay = this.range.firstDay;\r\n\r\n            return start.diff(firstDay, 'days', true);\r\n        },\r\n\r\n        /**\r\n         * Calculates the amount of days that provided event lasts.\r\n         *\r\n         * @param {Object} record\r\n         * @returns {Number}\r\n         */\r\n        getDaysLength: function (record) {\r\n            var start   = this.createDate(this.getStartDate(record)),\r\n                end     = this.createDate(this.getEndDate(record));\r\n\r\n            if (!end.isValid()) {\r\n                end = this.range.lastDay.endOf('day');\r\n            }\r\n\r\n            return end.diff(start, 'days', true);\r\n        },\r\n\r\n        /**\r\n         * Creates new date object based on provided date string value.\r\n         *\r\n         * @param {String} dateStr\r\n         * @returns {Moment}\r\n         */\r\n        createDate: function (dateStr) {\r\n            return moment(dateStr, this.dateFormat);\r\n        },\r\n\r\n        /**\r\n         * Converts days to weeks.\r\n         *\r\n         * @param {Number} days\r\n         * @returns {Number}\r\n         */\r\n        daysToWeeks: function (days) {\r\n            var weeks = days / 7;\r\n\r\n            if (weeks % 1) {\r\n                weeks = weeks.toFixed(1);\r\n            }\r\n\r\n            return weeks;\r\n        },\r\n\r\n        /**\r\n         * Updates data of a range object,\r\n         * e.g. total days, first day and last day, etc.\r\n         *\r\n         * @returns {Object} Range instance.\r\n         */\r\n        updateRange: function () {\r\n            var firstDay    = this._getFirstDay(),\r\n                lastDay     = this._getLastDay(),\r\n                totalDays   = lastDay.diff(firstDay, 'days'),\r\n                days        = [],\r\n                i           = -1;\r\n\r\n            if (totalDays < this.minDays) {\r\n                totalDays += this.minDays - totalDays - 1;\r\n            }\r\n\r\n            while (++i <= totalDays) {\r\n                days.push(+firstDay + ONE_DAY * i);\r\n            }\r\n\r\n            return _.extend(this.range, {\r\n                days:       days,\r\n                totalDays:  totalDays,\r\n                firstDay:   firstDay,\r\n                lastDay:    moment(_.last(days)),\r\n                hasToday:   this.isToday(firstDay)\r\n            });\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @private\r\n         * @param {String} key\r\n         * @returns {Array<Moment>}\r\n         */\r\n        _getDates: function (key) {\r\n            var dates = [];\r\n\r\n            this.rows.forEach(function (record) {\r\n                if (record[key]) {\r\n                    dates.push(this.createDate(record[key]));\r\n                }\r\n            }, this);\r\n\r\n            return dates;\r\n        },\r\n\r\n        /**\r\n         * Returns date which is closest to the current day.\r\n         *\r\n         * @private\r\n         * @returns {Moment}\r\n         */\r\n        _getFirstDay: function () {\r\n            var dates = this._getDates('start_time'),\r\n                first = moment.min(dates).subtract(1, 'day'),\r\n                today = moment();\r\n\r\n            if (!first.isValid() || first < today) {\r\n                first = today;\r\n            }\r\n\r\n            return first.startOf('day');\r\n        },\r\n\r\n        /**\r\n         * Returns the most distant date\r\n         * specified in available records.\r\n         *\r\n         * @private\r\n         * @returns {Moment}\r\n         */\r\n        _getLastDay: function () {\r\n            var startDates  = this._getDates('start_time'),\r\n                endDates    = this._getDates('end_time'),\r\n                last        = moment.max(startDates.concat(endDates));\r\n\r\n            return last.add(1, 'day').startOf('day');\r\n        },\r\n\r\n        /**\r\n         * TODO: remove after integration with date binding.\r\n         *\r\n         * @param {Number} timestamp\r\n         * @returns {String}\r\n         */\r\n        formatHeader: function (timestamp) {\r\n            return moment(timestamp).format(this.headerFormat);\r\n        },\r\n\r\n        /**\r\n         * TODO: remove after integration with date binding.\r\n         *\r\n         * @param {String} date\r\n         * @returns {String}\r\n         */\r\n        formatDetails: function (date) {\r\n            return moment(date).format(this.detailsFormat);\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/catalog/apply-to-type-switcher.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Catalog/catalog/type-events'\r\n], function ($, productType) {\r\n    'use strict';\r\n\r\n    return {\r\n\r\n        /**\r\n         * Bind event\r\n         */\r\n        bindAll: function () {\r\n            $('[data-form=edit-product] [data-role=tabs]').on(\r\n                'contentUpdated',\r\n                this._switchToTypeByApplyAttr.bind(this)\r\n            );\r\n\r\n            $('#product_info_tabs').on(\r\n                'beforePanelsMove tabscreate tabsactivate',\r\n                this._switchToTypeByApplyAttr.bind(this)\r\n            );\r\n\r\n            $(document).on('changeTypeProduct', this._switchToTypeByApplyAttr.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Constructor component\r\n         */\r\n        'Magento_Catalog/catalog/apply-to-type-switcher': function () {\r\n            this.bindAll();\r\n            this._switchToTypeByApplyAttr();\r\n        },\r\n\r\n        /**\r\n         * Show/hide elements based on type\r\n         *\r\n         * @private\r\n         */\r\n        _switchToTypeByApplyAttr: function () {\r\n            $('[data-apply-to]:not(.removed)').each(function (index, element) {\r\n                var attrContainer = $(element),\r\n                    applyTo = attrContainer.data('applyTo') || [],\r\n                    $inputs = attrContainer.find('select, input, textarea');\r\n\r\n                if (applyTo.length === 0 || $.inArray(productType.type.current, applyTo) !== -1) {\r\n                    attrContainer.removeClass('not-applicable-attribute');\r\n                    $inputs.removeClass('ignore-validate');\r\n                } else {\r\n                    attrContainer.addClass('not-applicable-attribute');\r\n                    $inputs.addClass('ignore-validate');\r\n                }\r\n            });\r\n        }\r\n    };\r\n});\r\n","Magento_Catalog/catalog/base-image-uploader.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*global alert:true*/\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'Magento_Ui/js/modal/alert',\r\n    'jquery/ui',\r\n    'jquery/file-uploader',\r\n    'mage/translate',\r\n    'mage/backend/notification'\r\n], function ($, mageTemplate, alert) {\r\n    'use strict';\r\n\r\n    $.widget('mage.baseImage', {\r\n        /**\r\n         * Button creation\r\n         * @protected\r\n         */\r\n        options: {\r\n            maxImageUploadCount : 10\r\n        },\r\n        _create: function () {\r\n            var $container = this.element,\r\n                imageTmpl = mageTemplate(this.element.find('[data-template=image]').html()),\r\n                $dropPlaceholder = this.element.find('.image-placeholder'),\r\n                $galleryContainer = $('#media_gallery_content'),\r\n                mainClass = 'base-image',\r\n                maximumImageCount = 5,\r\n                $fieldCheckBox = $container.closest('[data-attribute-code=image]').find(':checkbox'),\r\n                isDefaultChecked = $fieldCheckBox.is(':checked');\r\n\r\n            if (isDefaultChecked) {\r\n                $fieldCheckBox.trigger('click');\r\n            }\r\n\r\n            var findElement = function (data) {\r\n                return $container.find('.image:not(.image-placeholder)').filter(function () {\r\n                    if (!$(this).data('image')) {\r\n                        return false;\r\n                    }\r\n                    return $(this).data('image').file === data.file;\r\n                }).first();\r\n            };\r\n            var updateVisibility = function () {\r\n                var elementsList = $container.find('.image:not(.removed-item)');\r\n                elementsList.each(function (index) {\r\n                    $(this)[index < maximumImageCount ? 'show' : 'hide']();\r\n                });\r\n                $dropPlaceholder[elementsList.length > maximumImageCount ? 'hide' : 'show']();\r\n            };\r\n\r\n            $galleryContainer.on('setImageType', function (event, data) {\r\n                if (data.type === 'image') {\r\n                    $container.find('.' + mainClass).removeClass(mainClass);\r\n\r\n                    if (data.imageData) {\r\n                        findElement(data.imageData).addClass(mainClass);\r\n                    }\r\n                }\r\n            });\r\n\r\n            $galleryContainer.on('addItem', function (event, data) {\r\n                var tmpl = imageTmpl({\r\n                    data: data\r\n                });\r\n\r\n                $(tmpl).data('image', data).insertBefore($dropPlaceholder);\r\n\r\n                updateVisibility();\r\n            });\r\n\r\n            $galleryContainer.on('removeItem', function (event, image) {\r\n                findElement(image).addClass('removed-item').hide();\r\n                updateVisibility();\r\n            });\r\n\r\n            $galleryContainer.on('moveElement', function (event, data) {\r\n                var $element = findElement(data.imageData);\r\n\r\n                if (data.position === 0) {\r\n                    $container.prepend($element);\r\n                } else {\r\n                    var $after = $container.find('.image').eq(data.position);\r\n\r\n                    if (!$element.is($after)) {\r\n                        $element.insertAfter($after);\r\n                    }\r\n                }\r\n                updateVisibility();\r\n            });\r\n\r\n            $container.on('click', '[data-role=make-base-button]', function (event) {\r\n                event.preventDefault();\r\n                var data = $(event.target).closest('.image').data('image');\r\n                $galleryContainer.productGallery('setBase', data);\r\n            });\r\n\r\n            $container.on('click', '[data-role=delete-button]', function (event) {\r\n                event.preventDefault();\r\n                $galleryContainer.trigger('removeItem', $(event.target).closest('.image').data('image'));\r\n            });\r\n\r\n            $container.sortable({\r\n                axis: 'x',\r\n                items: '.image:not(.image-placeholder)',\r\n                distance: 8,\r\n                tolerance: 'pointer',\r\n                stop: function (event, data) {\r\n                    $galleryContainer.trigger('setPosition', {\r\n                        imageData: data.item.data('image'),\r\n                        position: $container.find('.image').index(data.item)\r\n                    });\r\n                    $galleryContainer.trigger('resort');\r\n                }\r\n            }).disableSelection();\r\n\r\n            this.element.find('input[type=\"file\"]').fileupload({\r\n                dataType: 'json',\r\n                dropZone: $dropPlaceholder.closest('[data-attribute-code]'),\r\n                acceptFileTypes: /(\\.|\\/)(gif|jpe?g|png)$/i,\r\n                maxFileSize: this.element.data('maxFileSize'),\r\n                done: function (event, data) {\r\n                    $dropPlaceholder.find('.progress-bar').text('').removeClass('in-progress');\r\n\r\n                    if (!data.result) {\r\n                        return;\r\n                    }\r\n\r\n                    if (!data.result.error) {\r\n                        $galleryContainer.trigger('addItem', data.result);\r\n                    } else {\r\n                        alert({\r\n                            content: $.mage.__('We don\\'t recognize or support this file extension type.')\r\n                        });\r\n                    }\r\n                },\r\n                change: function(e, data) {\r\n                    if (data.files.length > this.options.maxImageUploadCount) {\r\n                        $('body').notification('clear').notification('add', {\r\n                            error: true,\r\n                            message: $.mage.__('You can\\'t upload more than ' + this.options.maxImageUploadCount\r\n                                + ' images in one time'),\r\n                            insertMethod: function(message) {\r\n                                $('.page-main-actions').after(message);\r\n                            }\r\n                        });\r\n\r\n                        return false;\r\n                    }\r\n                }.bind(this),\r\n                add: function (event, data) {\r\n                    $(this).fileupload('process', data).done(function () {\r\n                        data.submit();\r\n                    });\r\n                },\r\n                progress: function (e, data) {\r\n                    var progress = parseInt(data.loaded / data.total * 100, 10);\r\n                    $dropPlaceholder.find('.progress-bar').addClass('in-progress').text(progress + '%');\r\n                },\r\n                start: function (event) {\r\n                    var uploaderContainer = $(event.target).closest('.image-placeholder');\r\n\r\n                    uploaderContainer.addClass('loading');\r\n                },\r\n                stop: function (event) {\r\n                    var uploaderContainer = $(event.target).closest('.image-placeholder');\r\n\r\n                    uploaderContainer.removeClass('loading');\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.baseImage;\r\n});\r\n","Magento_Catalog/catalog/product-attributes.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'uiRegistry',\r\n    'jquery/ui',\r\n    'mage/translate'\r\n], function ($, _, registry) {\r\n    'use strict';\r\n\r\n    $.widget('mage.productAttributes', {\r\n        _create: function () {\r\n            this._on({\r\n                'click': '_showPopup'\r\n            });\r\n        },\r\n\r\n        _initModal: function () {\r\n            var self = this;\r\n\r\n            this.modal = $('<div id=\"create_new_attribute\"/>').modal({\r\n                 title: $.mage.__('New Attribute'),\r\n                type: 'slide',\r\n                buttons: [],\r\n                opened: function () {\r\n                    $(this).parent().addClass('modal-content-new-attribute');\r\n                    self.iframe = $('<iframe id=\"create_new_attribute_container\">').attr({\r\n                        src: self._prepareUrl(),\r\n                        frameborder: 0\r\n                    });\r\n                    self.modal.append(self.iframe);\r\n                    self._changeIframeSize();\r\n                    $(window).off().on('resize.modal', _.debounce(self._changeIframeSize.bind(self), 400));\r\n                },\r\n                closed: function () {\r\n                    var doc = self.iframe.get(0).document;\r\n\r\n                    if (doc && $.isFunction(doc.execCommand)) {\r\n                        //IE9 break script loading but not execution on iframe removing\r\n                        doc.execCommand('stop');\r\n                        self.iframe.remove();\r\n                    }\r\n                    self.modal.data('modal').modal.remove();\r\n                    $(window).off('resize.modal');\r\n                }\r\n            });\r\n        },\r\n\r\n        _getHeight: function () {\r\n            var modal = this.modal.data('modal').modal,\r\n                modalHead = modal.find('header'),\r\n                modalHeadHeight = modalHead.outerHeight(),\r\n                modalHeight = modal.outerHeight(),\r\n                modalContentPadding = this.modal.parent().outerHeight() - this.modal.parent().height();\r\n\r\n            return modalHeight - modalHeadHeight - modalContentPadding;\r\n        },\r\n\r\n        _getWidth: function () {\r\n            return this.modal.width();\r\n        },\r\n\r\n        _changeIframeSize: function () {\r\n            this.modal.parent().outerHeight(this._getHeight());\r\n            this.iframe.outerHeight(this._getHeight());\r\n            this.iframe.outerWidth(this._getWidth());\r\n\r\n        },\r\n\r\n        _prepareUrl: function () {\r\n            var productSource,\r\n                attributeSetId = '';\r\n\r\n            if (this.options.dataProvider) {\r\n                try {\r\n                    productSource = registry.get(this.options.dataProvider);\r\n                    attributeSetId = productSource.data.product['attribute_set_id'];\r\n                } catch (e) {}\r\n            }\r\n\r\n            return this.options.url +\r\n                (/\\?/.test(this.options.url) ? '&' : '?') +\r\n                'set=' + attributeSetId;\r\n        },\r\n\r\n        _showPopup: function () {\r\n            this._initModal();\r\n            this.modal.modal('openModal');\r\n        }\r\n    });\r\n\r\n    return $.mage.productAttributes;\r\n});\r\n","Magento_Catalog/catalog/product.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\nrequire([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    window.Product = {};\r\n\r\n    function byId(id) {\r\n        return $('#' + id);\r\n    }\r\n\r\n    function toogleFieldEditMode(toogleIdentifier, fieldId) {\r\n        if ($(toogleIdentifier).is(':checked')) {\r\n            enableFieldEditMode(fieldId);\r\n        } else {\r\n            disableFieldEditMode(fieldId);\r\n        }\r\n    }\r\n\r\n    function disableFieldEditMode(fieldId) {\r\n        var field = byId(fieldId);\r\n\r\n        field.prop('disabled', true);\r\n\r\n        if (field.next().hasClass('addafter')) {\r\n            field.parent().addClass('_update-attributes-disabled');\r\n        }\r\n\r\n        if (byId(fieldId + '_hidden').length) {\r\n            byId(fieldId + '_hidden').prop('disabled', true);\r\n        }\r\n    }\r\n\r\n    function enableFieldEditMode(fieldId) {\r\n        var field = byId(fieldId);\r\n\r\n        field.prop('disabled', false);\r\n\r\n        if (field.parent().hasClass('_update-attributes-disabled')) {\r\n            field.parent().removeClass('_update-attributes-disabled');\r\n        }\r\n\r\n        if (byId(fieldId + '_hidden').length) {\r\n            byId(fieldId + '_hidden').prop('disabled', false);\r\n        }\r\n    }\r\n\r\n    function onCompleteDisableInited() {\r\n        $.each($('[data-disable]'), function () {\r\n            var item = $(this).data('disable');\r\n            disableFieldEditMode(item);\r\n        });\r\n    }\r\n\r\n    function onUrlkeyChanged(urlKey) {\r\n        urlKey = byId(urlKey);\r\n        var hidden = urlKey.siblings('input[type=hidden]');\r\n        var chbx = urlKey.siblings('input[type=checkbox]');\r\n        var oldValue = chbx.val();\r\n\r\n        chbx.prop('disabled', oldValue === urlKey.val());\r\n        hidden.prop('disabled', chbx.prop('disabled'));\r\n    }\r\n\r\n    function onCustomUseParentChanged(element) {\r\n        element = $(element);\r\n        var useParent = element.val() == 1,\r\n            parent = element.offsetParent().parent();\r\n\r\n        parent.find('input, select, textarea').each(function (i, el) {\r\n            el = $(el);\r\n            if (element.prop('id') != el.prop('id')) {\r\n                el.prop('disabled', useParent);\r\n            }\r\n        });\r\n\r\n        parent.find('img').each(function (i, el) {\r\n            if (useParent) {\r\n                $(el).hide();\r\n            } else {\r\n                $(el).show();\r\n            }\r\n        });\r\n    }\r\n\r\n    window.onCustomUseParentChanged = onCustomUseParentChanged;\r\n    window.onUrlkeyChanged = onUrlkeyChanged;\r\n    window.toogleFieldEditMode = toogleFieldEditMode;\r\n\r\n    $(onCompleteDisableInited);\r\n});\r\n","Magento_Catalog/catalog/type-events.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return {\r\n        $type: $('#product_type_id'),\r\n\r\n        /**\r\n         * Init\r\n         */\r\n        init: function () {\r\n            this.type = {\r\n                init: this.$type.val(),\r\n                current: this.$type.val()\r\n            };\r\n\r\n            this.bindAll();\r\n        },\r\n\r\n        /**\r\n         * Bind all\r\n         */\r\n        bindAll: function () {\r\n            $(document).on('setTypeProduct', function (event, type) {\r\n                this.setType(type);\r\n            }.bind(this));\r\n\r\n            //direct change type input\r\n            this.$type.on('change', function () {\r\n                this.type.current = this.$type.val();\r\n                this._notifyType();\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Set type\r\n         * @param {String} type - type product (downloadable, simple, virtual ...)\r\n         * @returns {*}\r\n         */\r\n        setType: function (type) {\r\n            return this.$type.val(type || this.type.init).trigger('change');\r\n        },\r\n\r\n        /**\r\n         * Notify type\r\n         * @private\r\n         */\r\n        _notifyType: function () {\r\n            $(document).trigger('changeTypeProduct', this.type);\r\n        }\r\n    };\r\n});\r\n","Magento_Catalog/catalog/category/assign-products.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global $, $H */\r\n\r\ndefine([\r\n    'mage/adminhtml/grid'\r\n], function () {\r\n    'use strict';\r\n\r\n    return function (config) {\r\n        var selectedProducts = config.selectedProducts,\r\n            categoryProducts = $H(selectedProducts),\r\n            gridJsObject = window[config.gridJsObjectName],\r\n            tabIndex = 1000;\r\n\r\n        $('in_category_products').value = Object.toJSON(categoryProducts);\r\n\r\n        /**\r\n         * Register Category Product\r\n         *\r\n         * @param {Object} grid\r\n         * @param {Object} element\r\n         * @param {Boolean} checked\r\n         */\r\n        function registerCategoryProduct(grid, element, checked) {\r\n            if (checked) {\r\n                if (element.positionElement) {\r\n                    element.positionElement.disabled = false;\r\n                    categoryProducts.set(element.value, element.positionElement.value);\r\n                }\r\n            } else {\r\n                if (element.positionElement) {\r\n                    element.positionElement.disabled = true;\r\n                }\r\n                categoryProducts.unset(element.value);\r\n            }\r\n            $('in_category_products').value = Object.toJSON(categoryProducts);\r\n            grid.reloadParams = {\r\n                'selected_products[]': categoryProducts.keys()\r\n            };\r\n        }\r\n\r\n        /**\r\n         * Click on product row\r\n         *\r\n         * @param {Object} grid\r\n         * @param {String} event\r\n         */\r\n        function categoryProductRowClick(grid, event) {\r\n            var trElement = Event.findElement(event, 'tr'),\r\n                isInput = Event.element(event).tagName === 'INPUT',\r\n                checked = false,\r\n                checkbox = null;\r\n\r\n            if (trElement) {\r\n                checkbox = Element.getElementsBySelector(trElement, 'input');\r\n\r\n                if (checkbox[0]) {\r\n                    checked = isInput ? checkbox[0].checked : !checkbox[0].checked;\r\n                    gridJsObject.setCheckboxChecked(checkbox[0], checked);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Change product position\r\n         *\r\n         * @param {String} event\r\n         */\r\n        function positionChange(event) {\r\n            var element = Event.element(event);\r\n\r\n            if (element && element.checkboxElement && element.checkboxElement.checked) {\r\n                categoryProducts.set(element.checkboxElement.value, element.value);\r\n                $('in_category_products').value = Object.toJSON(categoryProducts);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Initialize category product row\r\n         *\r\n         * @param {Object} grid\r\n         * @param {String} row\r\n         */\r\n        function categoryProductRowInit(grid, row) {\r\n            var checkbox = $(row).getElementsByClassName('checkbox')[0],\r\n                position = $(row).getElementsByClassName('input-text')[0];\r\n\r\n            if (checkbox && position) {\r\n                checkbox.positionElement = position;\r\n                position.checkboxElement = checkbox;\r\n                position.disabled = !checkbox.checked;\r\n                position.tabIndex = tabIndex++;\r\n                Event.observe(position, 'keyup', positionChange);\r\n            }\r\n        }\r\n\r\n        gridJsObject.rowClickCallback = categoryProductRowClick;\r\n        gridJsObject.initRowCallback = categoryProductRowInit;\r\n        gridJsObject.checkboxCheckCallback = registerCategoryProduct;\r\n\r\n        if (gridJsObject.rows) {\r\n            gridJsObject.rows.each(function (row) {\r\n                categoryProductRowInit(gridJsObject, row);\r\n            });\r\n        }\r\n    };\r\n});\r\n","Magento_Catalog/catalog/category/edit.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/**\r\n * Create/edit some category\r\n */\r\ndefine([\r\n    'jquery',\r\n    'prototype'\r\n], function (jQuery) {\r\n\r\n    var categorySubmit = function (url, useAjax) {\r\n    var activeTab = $('active_tab_id');\r\n    if (activeTab) {\r\n        if (activeTab.tabsJsObject && activeTab.tabsJsObject.tabs('activeAnchor')) {\r\n            activeTab.value = activeTab.tabsJsObject.tabs('activeAnchor').prop('id');\r\n        }\r\n    }\r\n\r\n    var params = {};\r\n    var fields = $('category_edit_form').getElementsBySelector('input', 'select');\r\n    for (var i=0; i<fields.length; i++) {\r\n        if (!fields[i].name) {\r\n            continue;\r\n        }\r\n        params[fields[i].name] = fields[i].getValue();\r\n    }\r\n\r\n    // Get info about what we're submitting - to properly update tree nodes\r\n    var categoryId = params['general[id]'] ? params['general[id]'] : 0;\r\n    var isCreating = categoryId == 0; // Separate variable is needed because '0' in javascript converts to TRUE\r\n    var path = params['general[path]'].split('/');\r\n    var parentId = path.pop();\r\n    if (parentId == categoryId) { // Maybe path includes category id itself\r\n        parentId = path.pop();\r\n    }\r\n\r\n    // Make operations with category tree\r\n    if (isCreating) {\r\n        /* Some specific tasks for creating category */\r\n        if (!tree.currentNodeId) {\r\n            // First submit of form - select some node to be current\r\n            tree.currentNodeId = parentId;\r\n        }\r\n        tree.addNodeTo = parentId;\r\n    } else {\r\n        /* Some specific tasks for editing category */\r\n        // Maybe change category enabled/disabled style\r\n        if (tree && tree.storeId==0) {\r\n            var currentNode = tree.getNodeById(categoryId);\r\n\r\n            if (currentNode) {\r\n                if (parseInt(params['general[is_active]'])) {\r\n                    var oldClass = 'no-active-category';\r\n                    var newClass = 'active-category';\r\n                } else {\r\n                    var oldClass = 'active-category';\r\n                    var newClass = 'no-active-category';\r\n                }\r\n\r\n                Element.removeClassName(currentNode.ui.wrap.firstChild, oldClass);\r\n                Element.addClassName(currentNode.ui.wrap.firstChild, newClass);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Submit form\r\n    jQuery('#category_edit_form').trigger('submit');\r\n};\r\n\r\n    return function (config, element) {\r\n        config = config || {};\r\n        jQuery(element).on('click', function (event) {\r\n            categorySubmit(config.url, config.ajax);\r\n        });\r\n    };\r\n});\r\n","Magento_Catalog/catalog/category/form.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/*global alert:true*/\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/alert'\r\n], function ($, alert) {\r\n    'use strict';\r\n\r\n    return function (config) {\r\n        var categoryForm = {\r\n            options: {\r\n                categoryIdSelector: 'input[name=\"id\"]',\r\n                categoryPathSelector: 'input[name=\"path\"]',\r\n                refreshUrl: config.refreshUrl\r\n            },\r\n\r\n            /**\r\n             * Sending ajax to server to refresh field 'path'\r\n             * @protected\r\n             */\r\n            refreshPath: function () {\r\n                if (!$(this.options.categoryIdSelector)) {\r\n                    return false;\r\n                }\r\n                $.ajax({\r\n                    url: this.options.refreshUrl,\r\n                    method: 'GET',\r\n                    showLoader: true\r\n                }).done(this._refreshPathSuccess.bind(this));\r\n            },\r\n\r\n            /**\r\n             * Refresh field 'path' on ajax success\r\n             * @param {Object} data\r\n             * @private\r\n             */\r\n            _refreshPathSuccess: function (data) {\r\n                if (data.error) {\r\n                    alert({\r\n                        content: data.message\r\n                    });\r\n                } else {\r\n                    $(this.options.categoryIdSelector).val(data.id).change();\r\n                    $(this.options.categoryPathSelector).val(data.path).change();\r\n                }\r\n            }\r\n        };\r\n\r\n        $('body').on('categoryMove.tree', $.proxy(categoryForm.refreshPath.bind(categoryForm), this));\r\n    };\r\n});\r\n","Magento_Catalog/catalog/product/attribute/unique-validate.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/backend/validation'\r\n], function (jQuery) {\r\n    'use strict';\r\n\r\n    return function (config) {\r\n        var _config = jQuery.extend({\r\n            element: null,\r\n            message: '',\r\n            uniqueClass: 'required-unique'\r\n        }, config);\r\n\r\n        if (typeof _config.element === 'string') {\r\n            jQuery.validator.addMethod(\r\n                _config.element,\r\n\r\n                function (value, element) {\r\n                    var inputs = jQuery(element)\r\n                            .closest('table')\r\n                            .find('.' + _config.uniqueClass + ':visible'),\r\n                        valuesHash = {},\r\n                        isValid = true;\r\n\r\n                    inputs.each(function (el) {\r\n                        var inputValue = inputs[el].value;\r\n\r\n                        if (typeof valuesHash[inputValue] !== 'undefined') {\r\n                            isValid = false;\r\n                        }\r\n                        valuesHash[inputValue] = el;\r\n                    });\r\n\r\n                    return isValid;\r\n                },\r\n\r\n                _config.message\r\n            );\r\n        }\r\n    };\r\n});\r\n","Magento_Catalog/catalog/product/composite/configure.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    \"Magento_Ui/js/lib/view/utils/async\",\r\n    \"jquery/ui\",\r\n    \"mage/translate\",\r\n    \"prototype\",\r\n    \"Magento_Ui/js/modal/modal\"\r\n], function(jQuery){\r\n\r\n    window.ProductConfigure = Class.create();\r\n\r\n    ProductConfigure.prototype = {\r\n\r\n        listTypes:                  $H({}),\r\n        current:                    $H({}),\r\n        itemsFilter:                $H({}),\r\n        blockWindow:                null,\r\n        blockForm:                  null,\r\n        blockFormFields:            null,\r\n        blockFormAdd:               null,\r\n        blockFormConfirmed:         null,\r\n        blockConfirmed:             null,\r\n        blockIFrame:                null,\r\n        blockCancelBtn:             null,\r\n        blockMask:                  null,\r\n        blockMsg:                   null,\r\n        blockMsgError:              null,\r\n        windowHeight:               null,\r\n        confirmedCurrentId:         null,\r\n        confirmCallback:            {},\r\n        cancelCallback:             {},\r\n        onLoadIFrameCallback:       {},\r\n        showWindowCallback:         {},\r\n        beforeSubmitCallback:       {},\r\n        iFrameJSVarname:            null,\r\n        _listTypeId:                1,\r\n\r\n        /**\r\n         * Initialize object\r\n         */\r\n        initialize: function() {\r\n            var self = this;\r\n\r\n            this._initWindowElements();\r\n            jQuery.async('#product_composite_configure',function (el) {\r\n                self.dialog = jQuery(el).modal({\r\n                    title: jQuery.mage.__('Configure Product'),\r\n                    type: 'slide',\r\n                    buttons: [{\r\n                        text: jQuery.mage.__('OK'),\r\n                        'class': 'action-primary',\r\n                        click: function () {\r\n                            self.onConfirmBtn();\r\n                        }\r\n                    }]\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Initialize window elements\r\n         */\r\n        _initWindowElements: function() {\r\n            this.blockWindow                = $('product_composite_configure');\r\n            this.blockForm                  = $('product_composite_configure_form');\r\n            this.blockFormFields            = $('product_composite_configure_form_fields');\r\n            this.blockFormAdd               = $('product_composite_configure_form_additional');\r\n            this.blockFormConfirmed         = $('product_composite_configure_form_confirmed');\r\n            this.blockConfirmed             = $('product_composite_configure_confirmed');\r\n            this.blockIFrame                = $('product_composite_configure_iframe');\r\n            this.blockCancelBtn             = $('product_composite_configure_form_cancel');\r\n            this.blockMsg                   = $('product_composite_configure_messages');\r\n            this.blockMsgError              = this.blockMsg.select('.message.error div')[0];\r\n            this.iFrameJSVarname            = this.blockForm.select('input[name=\"as_js_varname\"]')[0].value;\r\n        },\r\n\r\n        /**\r\n         * Returns next unique list type id\r\n         */\r\n        _generateListTypeId: function () {\r\n            return '_internal_lt_' + (this._listTypeId++);\r\n        },\r\n\r\n        /**\r\n         * Add product list types as scope and their urls\r\n         * expamle: addListType('product_to_add', {urlFetch: 'http://magento...'})\r\n         * expamle: addListType('wishlist', {urlSubmit: 'http://magento...'})\r\n         *\r\n         * @param type types as scope\r\n         * @param urls obj can be\r\n         *             - {urlFetch: 'http://magento...'} for fetching configuration fields through ajax\r\n         *             - {urlConfirm: 'http://magento...'} for submit configured data through iFrame when clicked confirm button\r\n         *             - {urlSubmit: 'http://magento...'} for submit configured data through iFrame\r\n         */\r\n        addListType: function(type, urls) {\r\n            if ('undefined' == typeof this.listTypes[type]) {\r\n                this.listTypes[type] = {};\r\n            }\r\n            Object.extend(this.listTypes[type], urls);\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds complex list type - that is used to submit several list types at once\r\n         * Only urlSubmit is possible for this list type\r\n         * expamle: addComplexListType(['wishlist', 'product_list'], 'http://magento...')\r\n         *\r\n         * @param type types as scope\r\n         * @param urls obj can be\r\n         *             - {urlSubmit: 'http://magento...'} for submit configured data through iFrame\r\n         * @return type string\r\n         */\r\n        addComplexListType: function(types, urlSubmit) {\r\n            var type = this._generateListTypeId();\r\n            this.listTypes[type] = {};\r\n            this.listTypes[type].complexTypes = types;\r\n            this.listTypes[type].urlSubmit = urlSubmit;\r\n            return type;\r\n        },\r\n\r\n        /**\r\n         * Add filter of items\r\n         *\r\n         * @param listType scope name\r\n         * @param itemsFilter\r\n         */\r\n        addItemsFilter: function(listType, itemsFilter) {\r\n            if (!listType || !itemsFilter) {\r\n                return false;\r\n            }\r\n            if ('undefined' == typeof this.itemsFilter[listType]) {\r\n                this.itemsFilter[listType] = [];\r\n            }\r\n            this.itemsFilter[listType] = this.itemsFilter[listType].concat(itemsFilter);\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns id of block where configuration for an item is stored\r\n         *\r\n         * @param listType scope name\r\n         * @param itemId\r\n         * @return string\r\n         */\r\n        _getConfirmedBlockId: function (listType, itemId) {\r\n            return this.blockConfirmed.id + '[' + listType + '][' + itemId + ']';\r\n        },\r\n\r\n        /**\r\n         * Checks whether item has some configuration fields\r\n         *\r\n         * @param listType scope name\r\n         * @param itemId\r\n         * @return bool\r\n         */\r\n        itemConfigured: function (listType, itemId) {\r\n            var confirmedBlockId = this._getConfirmedBlockId(listType, itemId);\r\n            var itemBlock = $(confirmedBlockId);\r\n            return !!(itemBlock && itemBlock.innerHTML);\r\n        },\r\n\r\n        /**\r\n         * Show configuration fields of item, if it not found then get it through ajax\r\n         *\r\n         * @param listType scope name\r\n         * @param itemId\r\n         */\r\n        showItemConfiguration: function(listType, itemId) {\r\n            if (!listType || !itemId) {\r\n                return false;\r\n            }\r\n\r\n            this.initialize();\r\n            this.current.listType = listType;\r\n            this.current.itemId = itemId;\r\n            this.confirmedCurrentId = this._getConfirmedBlockId(listType, itemId);\r\n\r\n            if (!this.itemConfigured(listType, itemId)) {\r\n                this._requestItemConfiguration(listType, itemId);\r\n            } else {\r\n                this._processFieldsData('item_restore');\r\n                this._showWindow();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get configuration fields of product through ajax and show them\r\n         *\r\n         * @param listType scope name\r\n         * @param itemId\r\n         */\r\n        _requestItemConfiguration: function(listType, itemId) {\r\n            if (!this.listTypes[listType].urlFetch) {\r\n                return false;\r\n            }\r\n            var url = this.listTypes[listType].urlFetch;\r\n            if (url) {\r\n                new Ajax.Request(url, {\r\n                    parameters: {id: itemId},\r\n                    onSuccess: function(transport) {\r\n                        var response = transport.responseText;\r\n                        if (response.isJSON()) {\r\n                            response = response.evalJSON();\r\n                            if (response.error) {\r\n                                this.blockMsg.show();\r\n                                this.blockMsgError.innerHTML = response.message;\r\n                                this.blockCancelBtn.hide();\r\n                                this.setConfirmCallback(listType, null);\r\n                                this._showWindow();\r\n                            }\r\n                        } else if (response) {\r\n                            response = response + '';\r\n                            this.blockFormFields.update(response);\r\n\r\n                            // Add special div to hold mage data, e.g. scripts to execute on every popup show\r\n                            var mageData = {};\r\n                            var scripts = response.extractScripts();\r\n                            mageData.scripts = scripts;\r\n\r\n                            var scriptHolder = new Element('div', {'style': 'display:none'});\r\n                            scriptHolder.mageData = mageData;\r\n                            this.blockFormFields.insert(scriptHolder);\r\n\r\n                            // Show window\r\n                            this._showWindow();\r\n                        }\r\n                    }.bind(this)\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Triggered on confirm button click\r\n         * Do submit configured data through iFrame if needed\r\n         */\r\n        onConfirmBtn: function() {\r\n            if (jQuery(this.blockForm).valid()) {\r\n                if (this.listTypes[this.current.listType].urlConfirm) {\r\n                    this.submit();\r\n                } else {\r\n                    this._processFieldsData('item_confirm');\r\n                    this._closeWindow();\r\n                    if (Object.isFunction(this.confirmCallback[this.current.listType])) {\r\n                        this.confirmCallback[this.current.listType]();\r\n                    }\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Triggered on cancel button click\r\n         */\r\n        onCancelBtn: function() {\r\n            this._closeWindow();\r\n            if (Object.isFunction(this.cancelCallback[this.current.listType])) {\r\n                this.cancelCallback[this.current.listType]();\r\n            }\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Submit configured data through iFrame\r\n         *\r\n         * @param listType scope name\r\n         */\r\n        submit: function (listType) {\r\n            // prepare data\r\n            if (listType) {\r\n                this.current.listType = listType;\r\n                this.current.itemId = null;\r\n            }\r\n            var urlConfirm = this.listTypes[this.current.listType].urlConfirm;\r\n            var urlSubmit = this.listTypes[this.current.listType].urlSubmit;\r\n            if (!urlConfirm && !urlSubmit) {\r\n                return false;\r\n            }\r\n            if (urlConfirm) {\r\n                this.blockForm.action = urlConfirm;\r\n                this.addFields([new Element('input', {type: 'hidden', name: 'id', value: this.current.itemId})]);\r\n            } else {\r\n                this.blockForm.action = urlSubmit;\r\n\r\n                var complexTypes = this.listTypes[this.current.listType].complexTypes;\r\n                if (complexTypes) {\r\n                    this.addFields([new Element('input', {type: 'hidden', name: 'configure_complex_list_types', value: complexTypes.join(',')})]);\r\n                }\r\n\r\n                this._processFieldsData('current_confirmed_to_form');\r\n\r\n                // Disable item controls that duplicate added fields (e.g. sometimes qty controls can intersect)\r\n                // so they won't be submitted\r\n                var tagNames = ['input', 'select', 'textarea'];\r\n\r\n                var names = {}; // Map of added field names\r\n                for (var i = 0, len = tagNames.length; i < len; i++) {\r\n                    var tagName = tagNames[i];\r\n                    var elements = this.blockFormAdd.getElementsByTagName(tagName);\r\n                    for (var index = 0, elLen = elements.length; index < elLen; index++) {\r\n                        names[elements[index].name] = true;\r\n                    }\r\n                }\r\n\r\n                for (var i = 0, len = tagNames.length; i < len; i++) {\r\n                    var tagName = tagNames[i];\r\n                    var elements = this.blockFormConfirmed.getElementsByTagName(tagName);\r\n                    for (var index = 0, elLen = elements.length; index < elLen; index++) {\r\n                        var element = elements[index];\r\n                        if (names[element.name]) {\r\n                            element.setAttribute('configure_disabled', 1);\r\n                            element.setAttribute('configure_prev_disabled', element.disabled ? 1 : 0);\r\n                            element.disabled = true;\r\n                        } else {\r\n                            element.setAttribute('configure_disabled', 0);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // do submit\r\n            if (Object.isFunction(this.beforeSubmitCallback[this.current.listType])) {\r\n                this.beforeSubmitCallback[this.current.listType]();\r\n            }\r\n            this.blockForm.submit();\r\n\r\n            // Show loader\r\n            jQuery(this.blockForm).trigger('processStart');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Add dynamically additional fields for form\r\n         *\r\n         * @param fields\r\n         */\r\n        addFields: function(fields) {\r\n            fields.each(function(elm) {\r\n                this.blockFormAdd.insert(elm);\r\n            }.bind(this));\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Triggered when form was submitted and iFrame was loaded. Get response from iFrame and handle it\r\n         */\r\n        onLoadIFrame: function() {\r\n            this.blockFormConfirmed.select('[configure_disabled=1]').each(function (element) {\r\n                element.disabled = element.getAttribute('configure_prev_disabled') == '1';\r\n            });\r\n\r\n            this._processFieldsData('form_confirmed_to_confirmed');\r\n\r\n            var response = this.blockIFrame.contentWindow[this.iFrameJSVarname];\r\n            if (response && \"object\" == typeof response) {\r\n                if (this.listTypes[this.current.listType].urlConfirm) {\r\n                    if (response.ok) {\r\n                        this._closeWindow();\r\n                        this.clean('current');\r\n                    } else if (response.error) {\r\n                        this.showItemConfiguration(this.current.listType, this.current.itemId);\r\n                        this.blockMsg.show();\r\n                        this.blockMsgError.innerHTML = response.message;\r\n                        this._showWindow();\r\n                        return false;\r\n                    }\r\n                }\r\n                if (Object.isFunction(this.onLoadIFrameCallback[this.current.listType])) {\r\n                    this.onLoadIFrameCallback[this.current.listType](response);\r\n                }\r\n                document.fire(this.current.listType + ':afterIFrameLoaded');\r\n            }\r\n            // Hide loader\r\n            jQuery(this.blockForm).trigger('processStop');\r\n\r\n            this.clean('current');\r\n            this.initialize();\r\n        },\r\n\r\n        /**\r\n         * Helper for fetching content from iFrame\r\n         */\r\n        _getIFrameContent: function() {\r\n            var content = (this.blockIFrame.contentWindow || this.blockIFrame.contentDocument);\r\n            if (content.document) {\r\n                content=content.document;\r\n            }\r\n            return content;\r\n        },\r\n\r\n        /**\r\n         * Helper to find qty of currently confirmed item\r\n         */\r\n        getCurrentConfirmedQtyElement: function() {\r\n            var elms = $(this.confirmedCurrentId).getElementsByTagName('input');\r\n            for (var i = 0; i < elms.length; i++) {\r\n                if (elms[i].name == 'qty') {\r\n                    return elms[i];\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Helper to find qty of active form\r\n         */\r\n        getCurrentFormQtyElement: function() {\r\n            var elms = this.blockFormFields.getElementsByTagName('input');\r\n            for (var i = 0; i < elms.length; i++) {\r\n                if (elms[i].name == 'qty') {\r\n                    return elms[i];\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Show configuration window\r\n         */\r\n        _showWindow: function() {\r\n            this.dialog.modal('openModal');\r\n            //this._toggleSelectsExceptBlock(false);\r\n\r\n            if (Object.isFunction(this.showWindowCallback[this.current.listType])) {\r\n                this.showWindowCallback[this.current.listType]();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * toggles Selects states (for IE) except those to be shown in popup\r\n         */\r\n        /*_toggleSelectsExceptBlock: function(flag) {\r\n         if(Prototype.Browser.IE){\r\n         if (this.blockForm) {\r\n         var states = new Array;\r\n         var selects = this.blockForm.getElementsByTagName(\"select\");\r\n         for(var i=0; i<selects.length; i++){\r\n         states[i] = selects[i].style.visibility\r\n         }\r\n         }\r\n         if (this.blockForm) {\r\n         for(i=0; i<selects.length; i++){\r\n         selects[i].style.visibility = states[i]\r\n         }\r\n         }\r\n         }\r\n         },*/\r\n\r\n        /**\r\n         * Close configuration window\r\n         */\r\n        _closeWindow: function() {\r\n            this.dialog.modal('closeModal');\r\n            //this.blockWindow.style.display = 'none';\r\n            //this.clean('window');\r\n        },\r\n\r\n        /**\r\n         * Attach callback function triggered when confirm button was clicked\r\n         *\r\n         * @param confirmCallback\r\n         */\r\n        setConfirmCallback: function(listType, confirmCallback) {\r\n            this.confirmCallback[listType] = confirmCallback;\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Attach callback function triggered when cancel button was clicked\r\n         *\r\n         * @param cancelCallback\r\n         */\r\n        setCancelCallback: function(listType, cancelCallback) {\r\n            this.cancelCallback[listType] = cancelCallback;\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Attach callback function triggered when iFrame was loaded\r\n         *\r\n         * @param onLoadIFrameCallback\r\n         */\r\n        setOnLoadIFrameCallback: function(listType, onLoadIFrameCallback) {\r\n            this.onLoadIFrameCallback[listType] = onLoadIFrameCallback;\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Attach callback function triggered when iFrame was loaded\r\n         *\r\n         * @param showWindowCallback\r\n         */\r\n        setShowWindowCallback: function(listType, showWindowCallback) {\r\n            this.showWindowCallback[listType] = showWindowCallback;\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Attach callback function triggered before submitting form\r\n         *\r\n         * @param beforeSubmitCallback\r\n         */\r\n        setBeforeSubmitCallback: function(listType, beforeSubmitCallback) {\r\n            this.beforeSubmitCallback[listType] = beforeSubmitCallback;\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Clean object data\r\n         *\r\n         * @param method can be 'all' or 'current'\r\n         */\r\n        clean: function(method) {\r\n            var listInfo = null;\r\n            var listTypes = null;\r\n            var removeConfirmed = function (listTypes) {\r\n                this.blockConfirmed.childElements().each(function(elm) {\r\n                    for (var i = 0, len = listTypes.length; i < len; i++) {\r\n                        var pattern = this.blockConfirmed.id + '[' + listTypes[i] + ']';\r\n                        if (elm.id.indexOf(pattern) == 0) {\r\n                            elm.remove();\r\n                            break;\r\n                        }\r\n                    }\r\n                }.bind(this));\r\n            }.bind(this);\r\n\r\n            switch (method) {\r\n                case 'current':\r\n                    listInfo = this.listTypes[this.current.listType];\r\n                    listTypes = [this.current.listType];\r\n                    if (listInfo && listInfo.complexTypes) {\r\n                        listTypes = listTypes.concat(listInfo.complexTypes);\r\n                    }\r\n                    removeConfirmed(listTypes);\r\n                    break;\r\n                case 'window':\r\n                    this.blockFormFields.update();\r\n                    this.blockMsg.hide();\r\n                    this.blockMsgError.update();\r\n                    this.blockCancelBtn.show();\r\n                    break;\r\n                default:\r\n                    // search in list types for its cleaning\r\n                    if (this.listTypes[method]) {\r\n                        listInfo = this.listTypes[method];\r\n                        listTypes = [method];\r\n                        if (listInfo.complexTypes) {\r\n                            listTypes = listTypes.concat(listInfo.complexTypes);\r\n                        }\r\n                        removeConfirmed(listTypes);\r\n                        // clean all\r\n                    } else if (!method) {\r\n                        this.current = $H({});\r\n                        this.blockConfirmed.update();\r\n                        this.blockFormFields.update();\r\n                        this.blockMsg.hide();\r\n                        this.blockMsgError.update();\r\n                        this.blockCancelBtn.show();\r\n                    }\r\n                    break;\r\n            }\r\n            this._getIFrameContent().body.innerHTML = '';\r\n            this.blockIFrame.contentWindow[this.iFrameJSVarname] = {};\r\n            this.blockFormAdd.update();\r\n            this.blockFormConfirmed.update();\r\n            this.blockForm.action = '';\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Process fields data: save, restore, move saved to form and back\r\n         *\r\n         * @param method can be 'item_confirm', 'item_restore', 'current_confirmed_to_form', 'form_confirmed_to_confirmed'\r\n         */\r\n        _processFieldsData: function(method) {\r\n\r\n            /**\r\n             * Internal function for rename fields names of some list type\r\n             * if listType is not specified, then it won't be added as prefix to all names\r\n             *\r\n             * @param method can be 'current_confirmed_to_form', 'form_confirmed_to_confirmed'\r\n             * @param blockItem\r\n             */\r\n            var _renameFields = function(method, blockItem, listType) {\r\n                var pattern         = null;\r\n                var patternFlat     = null;\r\n                var replacement     = null;\r\n                var replacementFlat = null\r\n                var scopeArr        = blockItem.id.match(/.*\\[\\w+\\]\\[([^\\]]+)\\]$/);\r\n                var itemId          = scopeArr[1];\r\n                if (method == 'current_confirmed_to_form') {\r\n                    pattern         = RegExp('(\\\\w+)(\\\\[?)');\r\n                    patternFlat     = RegExp('(\\\\w+)');\r\n                    replacement     = 'item[' + itemId + '][$1]$2';\r\n                    replacementFlat = 'item_' + itemId + '_$1';\r\n                    if (listType) {\r\n                        replacement = 'list[' + listType + '][item][' + itemId + '][$1]$2';\r\n                        replacementFlat = 'list_' + listType + '_' + replacementFlat;\r\n                    }\r\n                } else if (method == 'form_confirmed_to_confirmed') {\r\n                    var stPattern = 'item\\\\[' + itemId + '\\\\]\\\\[(\\\\w+)\\\\](.*)';\r\n                    var stPatternFlat = 'item_' + itemId + '_(\\\\w+)';\r\n                    if (listType) {\r\n                        stPattern = 'list\\\\[' + listType + '\\\\]\\\\[item\\\\]\\\\[' + itemId + '\\\\]\\\\[(\\\\w+)\\\\](.*)';\r\n                        stPatternFlat = 'list_' + listType + '_' + stPatternFlat;\r\n                    }\r\n                    pattern         = new RegExp(stPattern);\r\n                    patternFlat     = new RegExp(stPatternFlat);\r\n                    replacement     = '$1$2';\r\n                    replacementFlat = '$1';\r\n                } else {\r\n                    return false;\r\n                }\r\n                var rename = function (elms) {\r\n                    for (var i = 0; i < elms.length; i++) {\r\n                        if (elms[i].name && elms[i].type == 'file') {\r\n                            elms[i].name = elms[i].name.replace(patternFlat, replacementFlat);\r\n                        } else if (elms[i].name) {\r\n                            elms[i].name = elms[i].name.replace(pattern, replacement);\r\n                        }\r\n                    }\r\n                };\r\n                rename(blockItem.getElementsByTagName('input'));\r\n                rename(blockItem.getElementsByTagName('select'));\r\n                rename(blockItem.getElementsByTagName('textarea'));\r\n            }.bind(this);\r\n\r\n            switch (method) {\r\n                case 'item_confirm':\r\n                    if (!$(this.confirmedCurrentId)) {\r\n                        this.blockConfirmed.insert(new Element('div', {id: this.confirmedCurrentId}));\r\n                    } else {\r\n                        $(this.confirmedCurrentId).update();\r\n                    }\r\n                    this.blockFormFields.childElements().each(function(elm) {\r\n                        $(this.confirmedCurrentId).insert(elm);\r\n                    }.bind(this));\r\n                    break;\r\n                case 'item_restore':\r\n                    this.blockFormFields.update();\r\n\r\n                    // clone confirmed to form\r\n                    var mageData = null;\r\n                    $(this.confirmedCurrentId).childElements().each(function(elm) {\r\n                        var cloned = elm.cloneNode(true);\r\n                        if (elm.mageData) {\r\n                            cloned.mageData = elm.mageData;\r\n                            mageData = elm.mageData;\r\n                        }\r\n                        this.blockFormFields.insert(cloned);\r\n                    }.bind(this));\r\n\r\n                    // get confirmed values\r\n                    var fieldsValue = {};\r\n                    var getConfirmedValues = function (elms) {\r\n                        for (var i = 0; i < elms.length; i++) {\r\n                            if (elms[i].name) {\r\n                                if ('undefined' == typeof fieldsValue[elms[i].name] ) {\r\n                                    fieldsValue[elms[i].name] = {};\r\n                                }\r\n                                if (elms[i].type == 'checkbox') {\r\n                                    fieldsValue[elms[i].name][elms[i].value] = elms[i].checked;\r\n                                } else if (elms[i].type == 'radio') {\r\n                                    if (elms[i].checked) {\r\n                                        fieldsValue[elms[i].name] = elms[i].value;\r\n                                    }\r\n                                } else {\r\n                                    fieldsValue[elms[i].name] = Form.Element.getValue(elms[i]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }.bind(this);\r\n                    getConfirmedValues($(this.confirmedCurrentId).getElementsByTagName('input'));\r\n                    getConfirmedValues($(this.confirmedCurrentId).getElementsByTagName('select'));\r\n                    getConfirmedValues($(this.confirmedCurrentId).getElementsByTagName('textarea'));\r\n\r\n                    // restore confirmed values\r\n                    var restoreConfirmedValues = function (elms) {\r\n                        for (var i = 0; i < elms.length; i++) {\r\n                            if ('undefined' != typeof fieldsValue[elms[i].name]) {\r\n                                if (elms[i].type != 'file') {\r\n                                    if (elms[i].type == 'checkbox') {\r\n                                        elms[i].checked = fieldsValue[elms[i].name][elms[i].value];\r\n                                    } else if (elms[i].type == 'radio') {\r\n                                        if (elms[i].value == fieldsValue[elms[i].name]) {\r\n                                            elms[i].checked = true;\r\n                                        }\r\n                                    } else {\r\n                                        elms[i].setValue(fieldsValue[elms[i].name]);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }.bind(this);\r\n                    restoreConfirmedValues(this.blockFormFields.getElementsByTagName('input'));\r\n                    restoreConfirmedValues(this.blockFormFields.getElementsByTagName('select'));\r\n                    restoreConfirmedValues(this.blockFormFields.getElementsByTagName('textarea'));\r\n\r\n                    // Execute scripts\r\n                    if (mageData && mageData.scripts) {\r\n                        this.restorePhase = true;\r\n                        try {\r\n                            mageData.scripts.map(function(script) {\r\n                                return eval(script);\r\n                            });\r\n                        } catch (e) {\r\n\r\n                        }\r\n                        this.restorePhase = false;\r\n                    }\r\n                    break;\r\n                case 'current_confirmed_to_form':\r\n                    var allowedListTypes = {};\r\n                    allowedListTypes[this.current.listType] = true;\r\n                    var listInfo = this.listTypes[this.current.listType];\r\n                    if (listInfo.complexTypes) {\r\n                        for (var i = 0, len = listInfo.complexTypes.length; i < len; i++) {\r\n                            allowedListTypes[listInfo.complexTypes[i]] = true;\r\n                        }\r\n                    }\r\n\r\n                    this.blockFormConfirmed.update();\r\n                    this.blockConfirmed.childElements().each(function(blockItem) {\r\n                        var scopeArr    = blockItem.id.match(/.*\\[(\\w+)\\]\\[([^\\]]+)\\]$/);\r\n                        var listType    = scopeArr[1];\r\n                        var itemId    = scopeArr[2];\r\n                        if (allowedListTypes[listType] && (!this.itemsFilter[listType]\r\n                            || this.itemsFilter[listType].indexOf(itemId) != -1)) {\r\n                            _renameFields(method, blockItem, listInfo.complexTypes ? listType : null);\r\n                            this.blockFormConfirmed.insert(blockItem);\r\n                        }\r\n                    }.bind(this));\r\n                    break;\r\n                case 'form_confirmed_to_confirmed':\r\n                    var listInfo = this.listTypes[this.current.listType];\r\n                    this.blockFormConfirmed.childElements().each(function(blockItem) {\r\n                        var scopeArr = blockItem.id.match(/.*\\[(\\w+)\\]\\[([^\\]]+)\\]$/);\r\n                        var listType = scopeArr[1];\r\n                        _renameFields(method, blockItem, listInfo.complexTypes ? listType : null);\r\n                        this.blockConfirmed.insert(blockItem);\r\n                    }.bind(this));\r\n                    break;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Check if qty selected correctly\r\n         *\r\n         * @param object element\r\n         * @param object event\r\n         */\r\n        changeOptionQty: function(element, event)\r\n        {\r\n            var checkQty = true;\r\n            if ('undefined' != typeof event) {\r\n                if (event.keyCode == 8 || event.keyCode == 46) {\r\n                    checkQty = false;\r\n                }\r\n            }\r\n            if (checkQty && (Number(element.value) <= 0 || isNaN(Number(element.value)))) {\r\n                element.value = 1;\r\n            }\r\n        }\r\n    };\r\n\r\n    productConfigure = new ProductConfigure();\r\n});\r\n","Magento_Catalog/component/file-type-field.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n\r\n        /**\r\n         * Checks is relevant value\r\n         *\r\n         * @param {String} value\r\n         * @returns {Boolean}\r\n         */\r\n        isRelevant: function (value) {\r\n            if (value === 'file') {\r\n                this.disabled(false);\r\n                this.visible(true);\r\n\r\n                return true;\r\n            }\r\n\r\n            this.reset();\r\n            this.disabled(true);\r\n            this.visible(false);\r\n\r\n            return false;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/component/image-size-field.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/lib/validation/utils',\r\n    'Magento_Ui/js/form/element/abstract',\r\n    'Magento_Ui/js/lib/validation/validator',\r\n    'mage/translate'\r\n], function ($, utils, Abstract, validator) {\r\n    'use strict';\r\n\r\n    validator.addRule(\r\n        'validate-image-size-range',\r\n        function (value) {\r\n            var dataAttrRange = /^(\\d+)[Xx](\\d+)$/,\r\n                m;\r\n\r\n            if (utils.isEmptyNoTrim(value)) {\r\n                return true;\r\n            }\r\n\r\n            m = dataAttrRange.exec(value);\r\n\r\n            return !!(m &&  m[1] > 0 && m[2] > 0);\r\n        },\r\n        $.mage.__('This value does not follow the specified format (for example, 200x300).')\r\n    );\r\n\r\n    return Abstract.extend({\r\n\r\n        /**\r\n         * Checks for relevant value\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isRangeCorrect: function () {\r\n            return validator('validate-image-size-range', this.value()).passed;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/component/select-type-grid.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/dynamic-rows/dynamic-rows'\r\n], function ($, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n\r\n        /**\r\n         * Checks is relevant value\r\n         *\r\n         * @param {String} value\r\n         * @returns {Boolean}\r\n         */\r\n        isRelevant: function (value) {\r\n            if ($.inArray(value, ['drop_down', 'radio', 'checkbox', 'multiple']) !== -1) {\r\n                this.disabled(false);\r\n                this.visible(true);\r\n\r\n                return true;\r\n            }\r\n\r\n            this.reset();\r\n            this.disabled(true);\r\n            this.visible(false);\r\n\r\n            return false;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/component/static-type-container.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/form/components/group'\r\n], function ($, Group) {\r\n    'use strict';\r\n\r\n    return Group.extend({\r\n\r\n        /**\r\n         * Checks is relevant value\r\n         *\r\n         * @param {String} value\r\n         * @returns {Boolean}\r\n         */\r\n        isRelevant: function (value) {\r\n            if ($.inArray(value, ['field', 'area', 'file', 'date', 'date_time', 'time']) !== -1) {\r\n                this.visible(true);\r\n\r\n                return true;\r\n            }\r\n\r\n            this.visible(false);\r\n\r\n            return false;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/component/static-type-input.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiRegistry',\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (registry, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            parentOption: null\r\n        },\r\n\r\n        /**\r\n         * Initialize component.\r\n         *\r\n         * @returns {Element}\r\n         */\r\n        initialize: function () {\r\n            return this\r\n                ._super()\r\n                .initLinkToParent();\r\n        },\r\n\r\n        /**\r\n         * Cache link to parent component - option holder.\r\n         *\r\n         * @returns {Element}\r\n         */\r\n        initLinkToParent: function () {\r\n            var pathToParent = this.parentName.replace(/(\\.[^.]*){2}$/, '');\r\n\r\n            this.parentOption = registry.async(pathToParent);\r\n            this.value() && this.parentOption('label', this.value());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * On value change handler.\r\n         *\r\n         * @param {String} value\r\n         */\r\n        onUpdate: function (value) {\r\n            this.parentOption(function (component) {\r\n                component.set('label', value ? value : component.get('headerLabel'));\r\n            });\r\n\r\n            return this._super();\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/component/static-type-select.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/form/element/select'\r\n], function ($, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n\r\n        /**\r\n         * Checks is relevant value\r\n         *\r\n         * @param {String} value\r\n         * @returns {Boolean}\r\n         */\r\n        isRelevant: function (value) {\r\n            if (!value || $.inArray(value, ['drop_down', 'radio', 'checkbox', 'multiple']) !== -1) {\r\n                this.reset();\r\n                this.disabled(true);\r\n\r\n                return false;\r\n            }\r\n\r\n            this.disabled(false);\r\n\r\n            return true;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/component/text-type-field.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function ($, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n\r\n        /**\r\n         * Checks for relevant value\r\n         *\r\n         * @param {*} value\r\n         * @returns {Boolean}\r\n         */\r\n        isRelevant: function (value) {\r\n            if ($.inArray(value, ['field', 'area']) !== -1) {\r\n                this.disabled(false);\r\n                this.visible(true);\r\n\r\n                return true;\r\n            }\r\n\r\n            this.reset();\r\n            this.disabled(true);\r\n            this.visible(false);\r\n\r\n            return false;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/bundle-proxy-button.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/components/button',\r\n    'uiRegistry',\r\n    'underscore'\r\n], function (Button, registry, _) {\r\n    'use strict';\r\n\r\n    return Button.extend({\r\n        defaults: {\r\n            currentRecordNamespace: 'bundle_current_record',\r\n            listingDataProvider: '',\r\n            value: [],\r\n            imports: {\r\n                currentRecordName: '${ $.provider }:${ $.currentRecordNamespace }',\r\n                listingData: '${ $.provider }:${ $.listingDataProvider }'\r\n            },\r\n            links: {\r\n                value: '${ $.provider }:${ $.dataScope }'\r\n            },\r\n            listens: {\r\n                listingData: 'setListingData'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes component.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initSource();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'value',\r\n                    'listingData'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls 'destroy' of parent and\r\n         * clear listing provider source\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        destroy: function () {\r\n            this._super();\r\n            this.source.set(this.listingDataProvider, []);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Call parent \"action\" method\r\n         * and set new data to record and listing.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n\r\n        action: function () {\r\n            this._super();\r\n            this.source.set(this.currentRecordNamespace, this.name);\r\n            this.source.set(this.listingDataProvider, this.value());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Init current source.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initSource: function () {\r\n            if (!_.isFunction(this.source)) {\r\n                this.source = registry.get(this.provider);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Set data to listing source.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        setListingData: function (data) {\r\n            if (this.name === this.currentRecordName) {\r\n                this.source.set(this.dataScope, data);\r\n            }\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/category-tree.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint browser:true jquery:true*/\r\ndefine([\r\n    \"jquery\",\r\n    \"jquery/ui\",\r\n    \"jquery/jstree/jquery.jstree\"\r\n], function($){\r\n    \"use strict\";\r\n\r\n    $.widget(\"mage.categoryTree\", {\r\n        options: {\r\n            url: '',\r\n            data: [],\r\n            tree: {\r\n                \"plugins\": [\"themes\", \"json_data\", \"ui\", \"hotkeys\"],\r\n                \"themes\": {\r\n                    \"theme\": \"default\",\r\n                    \"dots\": false,\r\n                    \"icons\": true\r\n                }\r\n            }\r\n        },\r\n        _create: function() {\r\n            var options = this.options;\r\n            var treeOptions = $.extend(\r\n                true,\r\n                {},\r\n                options.tree,\r\n                {\r\n                    json_data: {\r\n                        ajax: {\r\n                            url: options.url,\r\n                            type: 'POST',\r\n                            success: $.proxy(function(node) {\r\n                                return this._convertData(node[0]);\r\n                            }, this),\r\n                            data: function(node) {\r\n                                return {\r\n                                    id: $(node).data('id'),\r\n                                    form_key: window.FORM_KEY\r\n                                };\r\n                            }\r\n                        },\r\n                        data: this._convertData(options.data).children,\r\n                        progressive_render: true\r\n                    }\r\n                }\r\n            );\r\n            this.element.jstree(treeOptions);\r\n            this.element.on(\"select_node.jstree\", $.proxy(this._selectNode, this));\r\n        },\r\n        _selectNode: function(event, data) {\r\n            var node = data.rslt.obj.data();\r\n            if (!node.disabled) {\r\n                window.location = window.location + '/' + node.id;\r\n            } else {\r\n                event.preventDefault();\r\n            }\r\n        },\r\n        _convertData: function(node) {\r\n            if (!node) {\r\n                return;\r\n            }\r\n            var result = {\r\n                data: {\r\n                    title: node.name + ' (' + node.product_count + ')'\r\n                },\r\n                attr: {\r\n                    \"class\": node.cls + (!!node.disabled ? ' disabled' : '')\r\n                },\r\n                metadata: {\r\n                    id: node.id,\r\n                    disabled: node.disabled\r\n                }\r\n            };\r\n            if (node.children_count && !node.expanded) {\r\n                result.state = 'closed';\r\n            } else {\r\n                result.state = 'open';\r\n            }\r\n\r\n            if (node.children) {\r\n                result.children = [];\r\n                var self = this;\r\n                $.each(node.children, function() {\r\n                    result.children.push(self._convertData(this));\r\n                });\r\n            }\r\n            return result;\r\n        }\r\n    });\r\n    \r\n    return $.mage.categoryTree;\r\n});\r\n","Magento_Catalog/js/custom-options-type.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'uiRegistry',\r\n    'Magento_Ui/js/form/element/ui-select'\r\n], function ($, _, registry, UiSelect) {\r\n    'use strict';\r\n\r\n    return UiSelect.extend({\r\n        defaults: {\r\n            previousGroup: null,\r\n            groupsConfig: {},\r\n            valuesMap: {},\r\n            indexesMap: {},\r\n            filterPlaceholder: 'ns = ${ $.ns }, parentScope = ${ $.parentScope }'\r\n        },\r\n\r\n        /**\r\n         * Initialize component.\r\n         * @returns {Element}\r\n         */\r\n        initialize: function () {\r\n            return this\r\n                ._super()\r\n                .initMapping()\r\n                .updateComponents(this.initialValue, true);\r\n        },\r\n\r\n        /**\r\n         * Create additional mappings.\r\n         *\r\n         * @returns {Element}\r\n         */\r\n        initMapping: function () {\r\n            _.each(this.groupsConfig, function (groupData, group) {\r\n                _.each(groupData.values, function (value) {\r\n                    this.valuesMap[value] = group;\r\n                }, this);\r\n\r\n                _.each(groupData.indexes, function (index) {\r\n                    if (!this.indexesMap[index]) {\r\n                        this.indexesMap[index] = [];\r\n                    }\r\n\r\n                    this.indexesMap[index].push(group);\r\n                }, this);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Callback that fires when 'value' property is updated.\r\n         *\r\n         * @param {String} currentValue\r\n         * @returns {*}\r\n         */\r\n        onUpdate: function (currentValue) {\r\n            this.updateComponents(currentValue);\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Show, hide or clear components based on the current type value.\r\n         *\r\n         * @param {String} currentValue\r\n         * @param {Boolean} isInitialization\r\n         * @returns {Element}\r\n         */\r\n        updateComponents: function (currentValue, isInitialization) {\r\n            var currentGroup = this.valuesMap[currentValue];\r\n\r\n            if (currentGroup !== this.previousGroup) {\r\n                _.each(this.indexesMap, function (groups, index) {\r\n                    var template = this.filterPlaceholder + ', index = ' + index,\r\n                        visible = groups.indexOf(currentGroup) !== -1,\r\n                        component;\r\n\r\n                    switch (index) {\r\n                        case 'container_type_static':\r\n                        case 'values':\r\n                            template = 'ns=' + this.ns +\r\n                                ', dataScope=' + this.parentScope +\r\n                                ', index=' + index;\r\n                            break;\r\n                    }\r\n\r\n                    /*eslint-disable max-depth */\r\n                    if (isInitialization) {\r\n                        registry.async(template)(\r\n                            function (currentComponent) {\r\n                                currentComponent.visible(visible);\r\n                            }\r\n                        );\r\n                    } else {\r\n                        component = registry.get(template);\r\n\r\n                        if (component) {\r\n                            component.visible(visible);\r\n\r\n                            /*eslint-disable max-depth */\r\n                            if (_.isFunction(component.clear)) {\r\n                                component.clear();\r\n                            }\r\n                        }\r\n                    }\r\n                }, this);\r\n\r\n                this.previousGroup = currentGroup;\r\n            }\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/custom-options.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint browser:true*/\r\n/*global alert:true*/\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'Magento_Ui/js/modal/alert',\r\n    'jquery/ui',\r\n    'useDefault',\r\n    'collapsable',\r\n    'mage/translate',\r\n    'mage/backend/validation',\r\n    'Magento_Ui/js/modal/modal'\r\n], function ($, mageTemplate, alert) {\r\n    'use strict';\r\n\r\n    $.widget('mage.customOptions', {\r\n        options: {\r\n            selectionItemCount: {}\r\n        },\r\n\r\n        _create: function () {\r\n            this.baseTmpl = mageTemplate('#custom-option-base-template');\r\n            this.rowTmpl = mageTemplate('#custom-option-select-type-row-template');\r\n\r\n            this._initOptionBoxes();\r\n            this._initSortableSelections();\r\n            this._bindCheckboxHandlers();\r\n            this._bindReadOnlyMode();\r\n            this._addValidation();\r\n        },\r\n\r\n        _addValidation: function () {\r\n            $.validator.addMethod(\r\n                'required-option-select', function (value) {\r\n                    return (value !== '');\r\n                }, $.mage.__('Select type of option.'));\r\n\r\n            $.validator.addMethod(\r\n                'required-option-select-type-rows', function (value, element) {\r\n                    var optionContainerElm = element.up('div[id*=_type_]'),\r\n                        selectTypesFlag = false,\r\n                        selectTypeElements = $('#' + optionContainerElm.id + ' .select-type-title');\r\n\r\n                    selectTypeElements.each(function () {\r\n                        if (!$(this).closest('tr').hasClass('ignore-validate')) {\r\n                            selectTypesFlag = true;\r\n                        }\r\n                    });\r\n\r\n                    return selectTypesFlag;\r\n                }, $.mage.__('Please add rows to option.'));\r\n        },\r\n\r\n        _initOptionBoxes: function () {\r\n            if (!this.options.isReadonly) {\r\n                this.element.sortable({\r\n                    axis: 'y',\r\n                    handle: '[data-role=draggable-handle]',\r\n                    items: '#product_options_container_top > div',\r\n                    update: this._updateOptionBoxPositions,\r\n                    tolerance: 'pointer'\r\n                });\r\n            }\r\n            var syncOptionTitle = function (event) {\r\n                var currentValue = $(event.target).val(),\r\n                    optionBoxTitle = $('.admin__collapsible-title > span', $(event.target).closest('.fieldset-wrapper')),\r\n                    newOptionTitle = $.mage.__('New Option');\r\n\r\n                optionBoxTitle.text(currentValue === '' ? newOptionTitle : currentValue);\r\n            };\r\n            this._on({\r\n                /**\r\n                 * Reset field value to Default\r\n                 */\r\n                'click .use-default-label': function (event) {\r\n                    $(event.target).closest('label').find('input').prop('checked', true).trigger('change');\r\n                },\r\n\r\n                /**\r\n                 * Remove custom option or option row for 'select' type of custom option\r\n                 */\r\n                'click button[id^=product_option_][id$=_delete]': function (event) {\r\n                    var element = $(event.target).closest('#product_options_container_top > div.fieldset-wrapper,tr');\r\n\r\n                    if (element.length) {\r\n                        $('#product_' + element.attr('id').replace('product_', '') + '_is_delete').val(1);\r\n                        element.addClass('ignore-validate').hide();\r\n                        this.refreshSortableElements();\r\n                    }\r\n                },\r\n                /**\r\n                 * Minimize custom option block\r\n                 */\r\n                'click #product_options_container_top [data-target$=-content]': function () {\r\n                    if (this.options.isReadonly) {\r\n                        return false;\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Add new custom option\r\n                 */\r\n                'click #add_new_defined_option': function (event) {\r\n                    this.addOption(event);\r\n                },\r\n\r\n                /**\r\n                 * Add new option row for 'select' type of custom option\r\n                 */\r\n                'click button[id^=product_option_][id$=_add_select_row]': function (event) {\r\n                    this.addSelection(event);\r\n                },\r\n\r\n                /**\r\n                 * Import custom options from products\r\n                 */\r\n                'click #import_new_defined_option': function () {\r\n                    var importContainer = $('#import-container'),\r\n                        widget = this;\r\n\r\n                    importContainer.modal({\r\n                        title: $.mage.__('Select Product'),\r\n                        type: 'slide',\r\n                        opened: function () {\r\n                            $(document).off().on('click', '#productGrid_massaction-form button', function () {\r\n                                $('.import-custom-options-apply-button').trigger('click', 'massActionTrigger');\r\n                            });\r\n                        },\r\n                        buttons: [{\r\n                            text: $.mage.__('Import'),\r\n                            attr: {\r\n                                id: 'import-custom-options-apply-button'\r\n                            },\r\n                            'class': 'action-primary action-import import-custom-options-apply-button',\r\n                            click: function (event, massActionTrigger) {\r\n                                var request = [];\r\n\r\n                                $(this.element).find('input[name=product]:checked').map(function () {\r\n                                    request.push(this.value);\r\n                                });\r\n\r\n                                if (request.length === 0) {\r\n                                    if (!massActionTrigger) {\r\n                                        alert({\r\n                                            content: $.mage.__('Please select items.')\r\n                                        });\r\n                                    }\r\n\r\n                                    return;\r\n                                }\r\n\r\n                                $.post(widget.options.customOptionsUrl, {\r\n                                    'products[]': request,\r\n                                    form_key: widget.options.formKey\r\n                                }, function ($data) {\r\n                                    $.parseJSON($data).each(function (el) {\r\n                                        el.id = widget.getFreeOptionId(el.id);\r\n                                        el.option_id = el.id;\r\n\r\n                                        if (typeof el.optionValues !== 'undefined') {\r\n                                            for (var i = 0; i < el.optionValues.length; i++) {\r\n                                                el.optionValues[i].option_id = el.id;\r\n                                            }\r\n                                        }\r\n                                        //Adding option\r\n                                        widget.addOption(el);\r\n                                        //Will save new option on server side\r\n                                        $('#product_option_' + el.id + '_option_id').val(0);\r\n                                        $('#option_' + el.id + ' input[name$=\"option_type_id]\"]').val(-1);\r\n                                    });\r\n                                    importContainer.modal('closeModal');\r\n                                });\r\n                            }\r\n                        }]\r\n                    });\r\n                    importContainer.load(\r\n                        this.options.productGridUrl,\r\n                        {form_key: this.options.formKey, current_product_id : this.options.currentProductId},\r\n                        function () {\r\n                            importContainer.modal('openModal');\r\n                        }\r\n                    );\r\n                },\r\n\r\n                /**\r\n                 * Change custom option type\r\n                 */\r\n                'change select[id^=product_option_][id$=_type]': function (event, data) {\r\n                    data = data || {};\r\n                    var widget = this,\r\n                        currentElement = $(event.target),\r\n                        parentId = '#' + currentElement.closest('.fieldset-alt').attr('id'),\r\n                        group = currentElement.find('[value=\"' + currentElement.val() + '\"]')\r\n                            .closest('optgroup').attr('data-optgroup-name'),\r\n                        previousGroup = $(parentId + '_previous_group').val(),\r\n                        previousBlock = $(parentId + '_type_' + previousGroup),\r\n                        tmpl;\r\n\r\n                    if (typeof group !== 'undefined') {\r\n                        group = group.toLowerCase();\r\n                    }\r\n\r\n                    if (previousGroup !== group) {\r\n                        if (previousBlock.length) {\r\n                            previousBlock.addClass('ignore-validate').hide();\r\n                        }\r\n                        $(parentId + '_previous_group').val(group);\r\n\r\n                        if (typeof group === 'undefined') {\r\n                            return;\r\n                        }\r\n                        var disabledBlock = $(parentId).find(parentId + '_type_' + group);\r\n\r\n                        if (disabledBlock.length) {\r\n                            disabledBlock.removeClass('ignore-validate').show();\r\n                        } else {\r\n                            if ($.isEmptyObject(data)) {\r\n                                data.option_id = $(parentId + '_id').val();\r\n                                data.price = data.sku = '';\r\n                            }\r\n                            data.group = group;\r\n\r\n                            tmpl = widget.element.find('#custom-option-' + group + '-type-template').html();\r\n                            tmpl = mageTemplate(tmpl, {\r\n                                data: data\r\n                            });\r\n\r\n                            $(tmpl).insertAfter($(parentId));\r\n\r\n                            if (data.price_type) {\r\n                                var priceType = $('#' + widget.options.fieldId + '_' + data.option_id + '_price_type');\r\n                                priceType.val(data.price_type).attr('data-store-label', data.price_type);\r\n                            }\r\n                            this._bindUseDefault(widget.options.fieldId + '_' + data.option_id, data);\r\n                            //Add selections\r\n                            if (data.optionValues) {\r\n                                data.optionValues.each(function (value) {\r\n                                    widget.addSelection(value);\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                //Sync title\r\n                'change .field-option-title > .control > input[id$=\"_title\"]': syncOptionTitle,\r\n                'keyup .field-option-title > .control > input[id$=\"_title\"]': syncOptionTitle,\r\n                'paste .field-option-title > .control > input[id$=\"_title\"]': syncOptionTitle\r\n            });\r\n        },\r\n\r\n        _initSortableSelections: function () {\r\n            if (!this.options.isReadonly) {\r\n                this.element.find('[id^=product_option_][id$=_type_select] tbody').sortable({\r\n                    axis: 'y',\r\n                    handle: '[data-role=draggable-handle]',\r\n                    helper: function (event, ui) {\r\n                        ui.children().each(function () {\r\n                            $(this).width($(this).width());\r\n                        });\r\n\r\n                        return ui;\r\n                    },\r\n                    update: this._updateSelectionsPositions,\r\n                    tolerance: 'pointer'\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Sync sort order checkbox with hidden dropdown\r\n         */\r\n        _bindCheckboxHandlers: function () {\r\n            this._on({\r\n                'change [id^=product_option_][id$=_required]': function (event) {\r\n                    var $this = $(event.target);\r\n                    $this.closest('#product_options_container_top > div').find('[name$=\"[is_require]\"]').val($this.is(':checked') ? 1 : 0);\r\n                }\r\n            });\r\n            this.element.find('[id^=product_option_][id$=_required]').each(function () {\r\n                $(this).prop('checked', $(this).closest('#product_options_container_top > div').find('[name$=\"[is_require]\"]').val() > 0);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Update Custom option position\r\n         */\r\n        _updateOptionBoxPositions: function () {\r\n            $(this).find('div[id^=option_]:not(.ignore-validate) .fieldset-alt > [name$=\"[sort_order]\"]').each(function (index) {\r\n                $(this).val(index);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Update selections positions for 'select' type of custom option\r\n         */\r\n        _updateSelectionsPositions: function () {\r\n            $(this).find('tr:not(.ignore-validate) [name$=\"[sort_order]\"]').each(function (index) {\r\n                $(this).val(index);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Disable input data if \"Read Only\"\r\n         */\r\n        _bindReadOnlyMode: function () {\r\n            if (this.options.isReadonly) {\r\n                $('div.product-custom-options').find('button,input,select,textarea,').each(function () {\r\n                    $(this).prop('disabled', true);\r\n\r\n                    if ($(this).is('button')) {\r\n                        $(this).addClass('disabled');\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        _bindUseDefault: function (id, data) {\r\n            var title = $('#' + id + '_title'),\r\n                price = $('#' + id + '_price'),\r\n                priceType = $('#' + id + '_price_type');\r\n            //enable 'use default' link for title\r\n            if (data.checkboxScopeTitle) {\r\n                title.useDefault({\r\n                    field: '.field',\r\n                    useDefault: 'label[for$=_title]',\r\n                    checkbox: 'input[id$=_title_use_default]',\r\n                    label: 'span'\r\n                });\r\n            }\r\n            //enable 'use default' link for price and price_type\r\n            if (data.checkboxScopePrice) {\r\n                price.useDefault({\r\n                    field: '.field',\r\n                    useDefault: 'label[for$=_price]',\r\n                    checkbox: 'input[id$=_price_use_default]',\r\n                    label: 'span'\r\n                });\r\n                //not work set default value for second field\r\n                priceType.useDefault({\r\n                    field: '.field',\r\n                    useDefault: 'label[for$=_price]',\r\n                    checkbox: 'input[id$=_price_use_default]',\r\n                    label: 'span'\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Add selection value for 'select' type of custom option\r\n         */\r\n        addSelection: function (event) {\r\n            var data = {},\r\n                element = event.target || event.srcElement || event.currentTarget,\r\n                rowTmpl;\r\n\r\n            if (typeof element !== 'undefined') {\r\n                data.id = $(element).closest('#product_options_container_top > div')\r\n                    .find('[name^=\"product[options]\"][name$=\"[id]\"]').val();\r\n                data.option_type_id = -1;\r\n\r\n                if (!this.options.selectionItemCount[data.id]) {\r\n                    this.options.selectionItemCount[data.id] = 1;\r\n                }\r\n\r\n                data.select_id = this.options.selectionItemCount[data.id];\r\n                data.price = data.sku = '';\r\n            } else {\r\n                data = event;\r\n                data.id = data.option_id;\r\n                data.select_id = data.option_type_id;\r\n                this.options.selectionItemCount[data.id] = data.item_count;\r\n            }\r\n\r\n            rowTmpl = this.rowTmpl({\r\n                data: data\r\n            });\r\n\r\n            $(rowTmpl).appendTo($('#select_option_type_row_' + data.id));\r\n\r\n            //set selected price_type value if set\r\n            if (data.price_type) {\r\n                var priceType = $('#' + this.options.fieldId + '_' + data.id + '_select_' + data.select_id + '_price_type');\r\n                priceType.val(data.price_type).attr('data-store-label', data.price_type);\r\n            }\r\n\r\n            this._bindUseDefault(this.options.fieldId + '_' + data.id + '_select_' + data.select_id, data);\r\n            this.refreshSortableElements();\r\n            this.options.selectionItemCount[data.id] = parseInt(this.options.selectionItemCount[data.id], 10) + 1;\r\n\r\n            $('#' + this.options.fieldId + '_' + data.id + '_select_' + data.select_id + '_title').focus();\r\n        },\r\n\r\n        /**\r\n         * Add custom option\r\n         */\r\n        addOption: function (event) {\r\n            var data = {},\r\n                element = event.target || event.srcElement || event.currentTarget,\r\n                baseTmpl;\r\n\r\n            if (typeof element !== 'undefined') {\r\n                data.id = this.options.itemCount;\r\n                data.type = '';\r\n                data.option_id = 0;\r\n            } else {\r\n                data = event;\r\n                this.options.itemCount = data.item_count;\r\n            }\r\n\r\n            baseTmpl = this.baseTmpl({\r\n                data: data\r\n            });\r\n\r\n            $(baseTmpl)\r\n                .appendTo(this.element.find('#product_options_container_top'))\r\n                .find('.collapse').collapsable();\r\n\r\n            //set selected type value if set\r\n            if (data.type) {\r\n                $('#' + this.options.fieldId + '_' + data.id + '_type').val(data.type).trigger('change', data);\r\n            }\r\n\r\n            //set selected is_require value if set\r\n            if (data.is_require) {\r\n                $('#' + this.options.fieldId + '_' + data.id + '_is_require').val(data.is_require).trigger('change');\r\n            }\r\n\r\n            this.refreshSortableElements();\r\n            this._bindCheckboxHandlers();\r\n            this._bindReadOnlyMode();\r\n            this.options.itemCount++;\r\n            $('#' + this.options.fieldId + '_' + data.id + '_title').trigger('change');\r\n        },\r\n\r\n        refreshSortableElements: function () {\r\n            if (!this.options.isReadonly) {\r\n                this.element.sortable('refresh');\r\n                this._updateOptionBoxPositions.apply(this.element);\r\n                this._updateSelectionsPositions.apply(this.element);\r\n                this._initSortableSelections();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        getFreeOptionId: function (id) {\r\n            return $('#' + this.options.fieldId + '_' + id).length ? this.getFreeOptionId(parseInt(id, 10) + 1) : id;\r\n        }\r\n    });\r\n\r\n});\r\n","Magento_Catalog/js/edit-tree.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* eslint-disable no-undef */\r\n// jscs:disable jsDoc\r\n\r\nrequire([\r\n    'jquery',\r\n    'tinymce',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'Magento_Ui/js/modal/alert',\r\n    'loadingPopup',\r\n    'mage/backend/floating-header'\r\n], function (jQuery, tinyMCE, confirm) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Delete some category\r\n     * This routine get categoryId explicitly, so even if currently selected tree node is out of sync\r\n     * with this form, we surely delete same category in the tree and at backend\r\n     */\r\n    function categoryDelete(url) {\r\n        confirm({\r\n            content: 'Are you sure you want to delete this category?',\r\n            actions: {\r\n                confirm: function () {\r\n                    location.href = url;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function displayLoadingMask() {\r\n        jQuery('body').loadingPopup();\r\n    }\r\n\r\n    window.categoryDelete = categoryDelete;\r\n    window.displayLoadingMask = displayLoadingMask;\r\n});\r\n","Magento_Catalog/js/new-category-dialog.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint browser:true jquery:true*/\r\n/*global FORM_KEY*/\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui',\r\n    'Magento_Ui/js/modal/modal',\r\n    'mage/translate',\r\n    'mage/backend/tree-suggest',\r\n    'mage/backend/validation'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    var clearParentCategory = function () {\r\n        $('#new_category_parent').find('option').each(function () {\r\n            $('#new_category_parent-suggest').treeSuggest('removeOption', null, this);\r\n        });\r\n    };\r\n\r\n    $.widget('mage.newCategoryDialog', {\r\n        _create: function () {\r\n            var widget = this;\r\n            $('#new_category_parent').before($('<input>', {\r\n                id: 'new_category_parent-suggest',\r\n                placeholder: $.mage.__('start typing to search category')\r\n            }));\r\n\r\n            $('#new_category_parent-suggest').treeSuggest(this.options.suggestOptions)\r\n                .on('suggestbeforeselect', function (event) {\r\n                    clearParentCategory();\r\n                    $(event.target).treeSuggest('close');\r\n                });\r\n\r\n            $.validator.addMethod('validate-parent-category', function () {\r\n                return $('#new_category_parent').val() || $('#new_category_parent-suggest').val() === '';\r\n            }, $.mage.__('Choose existing category.'));\r\n            var newCategoryForm = $('#new_category_form');\r\n            newCategoryForm.mage('validation', {\r\n                errorPlacement: function (error, element) {\r\n                    error.insertAfter(element.is('#new_category_parent') ?\r\n                        $('#new_category_parent-suggest').closest('.mage-suggest') :\r\n                        element);\r\n                }\r\n            }).on('highlight.validate', function (e) {\r\n                var options = $(this).validation('option');\r\n                if ($(e.target).is('#new_category_parent')) {\r\n                    options.highlight($('#new_category_parent-suggest').get(0),\r\n                        options.errorClass, options.validClass || '');\r\n                }\r\n            });\r\n            this.element.modal({\r\n                type: 'slide',\r\n                modalClass: 'mage-new-category-dialog form-inline',\r\n                title: $.mage.__('Create Category'),\r\n                opened: function () {\r\n                    var enteredName = $('#category_ids-suggest').val();\r\n\r\n                    $('#new_category_name').val(enteredName);\r\n                    if (enteredName === '') {\r\n                        $('#new_category_name').focus();\r\n                    }\r\n                    $('#new_category_messages').html('');\r\n                },\r\n                closed: function () {\r\n                    var validationOptions = newCategoryForm.validation('option');\r\n\r\n                    $('#new_category_name, #new_category_parent-suggest').val('');\r\n                    validationOptions.unhighlight($('#new_category_parent-suggest').get(0),\r\n                        validationOptions.errorClass, validationOptions.validClass || '');\r\n                    newCategoryForm.validation('clearError');\r\n                    $('#category_ids-suggest').focus();\r\n                },\r\n                buttons: [{\r\n                    text: $.mage.__('Create Category'),\r\n                    class: 'action-primary',\r\n                    click: function (e) {\r\n                        if (!newCategoryForm.valid()) {\r\n                            return;\r\n                        }\r\n                        var thisButton = $(e.currentTarget);\r\n\r\n                        thisButton.prop('disabled', true);\r\n                        $.ajax({\r\n                            type: 'POST',\r\n                            url: widget.options.saveCategoryUrl,\r\n                            data: {\r\n                                name: $('#new_category_name').val(),\r\n                                parent: $('#new_category_parent').val(),\r\n                                is_active: 1,\r\n                                include_in_menu: 1,\r\n                                use_config: ['available_sort_by', 'default_sort_by'],\r\n                                form_key: FORM_KEY,\r\n                                return_session_messages_only: 1\r\n                            },\r\n                            dataType: 'json',\r\n                            context: $('body')\r\n                        }).success(function (data) {\r\n                            if (!data.error) {\r\n                                var $suggest = $('#category_ids-suggest');\r\n\r\n                                $suggest.trigger('selectItem', {\r\n                                    id: data.category.entity_id,\r\n                                    label: data.category.name\r\n                                });\r\n                                $('#new_category_name, #new_category_parent-suggest').val('');\r\n                                $suggest.val('');\r\n                                clearParentCategory();\r\n                                $(widget.element).modal('closeModal');\r\n                            } else {\r\n                                $('#new_category_messages').html(data.messages);\r\n                            }\r\n                        }).complete(\r\n                            function () {\r\n                                thisButton.prop('disabled', false);\r\n                            }\r\n                        );\r\n                    }\r\n                }]\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.newCategoryDialog;\r\n});\r\n","Magento_Catalog/js/options.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* eslint-disable no-undef */\r\n// jscs:disable jsDoc\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'uiRegistry',\r\n    'jquery/ui',\r\n    'prototype',\r\n    'form',\r\n    'validation'\r\n], function (jQuery, mageTemplate, rg) {\r\n    'use strict';\r\n\r\n    return function (config) {\r\n        var attributeOption = {\r\n                table: $('attribute-options-table'),\r\n                itemCount: 0,\r\n                totalItems: 0,\r\n                rendered: 0,\r\n                template: mageTemplate('#row-template'),\r\n                isReadOnly: config.isReadOnly,\r\n                add: function (data, render) {\r\n                    var isNewOption = false,\r\n                        element;\r\n\r\n                    if (typeof data.id == 'undefined') {\r\n                        data = {\r\n                            'id': 'option_' + this.itemCount,\r\n                            'sort_order': this.itemCount + 1\r\n                        };\r\n                        isNewOption = true;\r\n                    }\r\n\r\n                    if (!data.intype) {\r\n                        data.intype = this.getOptionInputType();\r\n                    }\r\n\r\n                    element = this.template({\r\n                        data: data\r\n                    });\r\n\r\n                    if (isNewOption && !this.isReadOnly) {\r\n                        this.enableNewOptionDeleteButton(data.id);\r\n                    }\r\n                    this.itemCount++;\r\n                    this.totalItems++;\r\n                    this.elements += element;\r\n\r\n                    if (render) {\r\n                        this.render();\r\n                        this.updateItemsCountField();\r\n                    }\r\n                },\r\n                remove: function (event) {\r\n                    var element = $(Event.findElement(event, 'tr')),\r\n                        elementFlags; // !!! Button already have table parent in safari\r\n\r\n                    // Safari workaround\r\n                    element.ancestors().each(function (parentItem) {\r\n                        if (parentItem.hasClassName('option-row')) {\r\n                            element = parentItem;\r\n                            throw $break;\r\n                        } else if (parentItem.hasClassName('box')) {\r\n                            throw $break;\r\n                        }\r\n                    });\r\n\r\n                    if (element) {\r\n                        elementFlags = element.getElementsByClassName('delete-flag');\r\n\r\n                        if (elementFlags[0]) {\r\n                            elementFlags[0].value = 1;\r\n                        }\r\n\r\n                        element.addClassName('no-display');\r\n                        element.addClassName('template');\r\n                        element.hide();\r\n                        this.totalItems--;\r\n                        this.updateItemsCountField();\r\n                    }\r\n                },\r\n                updateItemsCountField: function () {\r\n                    $('option-count-check').value = this.totalItems > 0 ? '1' : '';\r\n                },\r\n                enableNewOptionDeleteButton: function (id) {\r\n                    $$('#delete_button_container_' + id + ' button').each(function (button) {\r\n                        button.enable();\r\n                        button.removeClassName('disabled');\r\n                    });\r\n                },\r\n                bindRemoveButtons: function () {\r\n                    jQuery('#swatch-visual-options-panel').on('click', '.delete-option', this.remove.bind(this));\r\n                },\r\n                render: function () {\r\n                    Element.insert($$('[data-role=options-container]')[0], this.elements);\r\n                    this.elements = '';\r\n                },\r\n                renderWithDelay: function (data, from, step, delay) {\r\n                    var arrayLength = data.length,\r\n                        len;\r\n\r\n                    for (len = from + step; from < len && from < arrayLength; from++) {\r\n                        this.add(data[from]);\r\n                    }\r\n                    this.render();\r\n\r\n                    if (from === arrayLength) {\r\n                        this.updateItemsCountField();\r\n                        this.rendered = 1;\r\n                        jQuery('body').trigger('processStop');\r\n\r\n                        return true;\r\n                    }\r\n                    setTimeout(this.renderWithDelay.bind(this, data, from, step, delay), delay);\r\n                },\r\n                ignoreValidate: function () {\r\n                    var ignore = '.ignore-validate input, ' +\r\n                        '.ignore-validate select, ' +\r\n                        '.ignore-validate textarea';\r\n\r\n                    jQuery('#edit_form').data('validator').settings.forceIgnore = ignore;\r\n                },\r\n                getOptionInputType: function () {\r\n                    var optionDefaultInputType = 'radio';\r\n\r\n                    if ($('frontend_input') && $('frontend_input').value === 'multiselect') {\r\n                        optionDefaultInputType = 'checkbox';\r\n                    }\r\n\r\n                    return optionDefaultInputType;\r\n                }\r\n            };\r\n\r\n        if ($('add_new_option_button')) {\r\n            Event.observe('add_new_option_button', 'click', attributeOption.add.bind(attributeOption, {}, true));\r\n        }\r\n        $('manage-options-panel').on('click', '.delete-option', function (event) {\r\n            attributeOption.remove(event);\r\n        });\r\n\r\n        jQuery('#manage-options-panel').on('render', function () {\r\n            attributeOption.ignoreValidate();\r\n\r\n            if (attributeOption.rendered) {\r\n                return false;\r\n            }\r\n            jQuery('body').trigger('processStart');\r\n            attributeOption.renderWithDelay(config.attributesData, 0, 100, 300);\r\n            attributeOption.bindRemoveButtons();\r\n        });\r\n\r\n        if (config.isSortable) {\r\n            jQuery(function ($) {\r\n                $('[data-role=options-container]').sortable({\r\n                    distance: 8,\r\n                    tolerance: 'pointer',\r\n                    cancel: 'input, button',\r\n                    axis: 'y',\r\n                    update: function () {\r\n                        $('[data-role=options-container] [data-role=order]').each(function (index, element) {\r\n                            $(element).val(index + 1);\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        window.attributeOption = attributeOption;\r\n        window.optionDefaultInputType = attributeOption.getOptionInputType();\r\n\r\n        rg.set('manage-options-panel', attributeOption);\r\n    };\r\n});\r\n","Magento_Catalog/js/product-gallery.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint jquery:true*/\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mage/template',\r\n    'uiRegistry',\r\n    'jquery/ui',\r\n    'baseImage'\r\n], function ($, _, mageTemplate, registry) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Formats incoming bytes value to a readable format.\r\n     *\r\n     * @param {Number} bytes\r\n     * @returns {String}\r\n     */\r\n    function bytesToSize(bytes) {\r\n        var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'],\r\n            i;\r\n\r\n        if (bytes === 0) {\r\n            return '0 Byte';\r\n        }\r\n\r\n        i = window.parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\r\n\r\n        return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];\r\n    }\r\n\r\n    /**\r\n     * Product gallery widget\r\n     */\r\n    $.widget('mage.productGallery', {\r\n        options: {\r\n            imageSelector: '[data-role=image]',\r\n            imageElementSelector: '[data-role=image-element]',\r\n            template: '[data-template=image]',\r\n            imageResolutionLabel: '[data-role=resolution]',\r\n            imgTitleSelector: '[data-role=img-title]',\r\n            imageSizeLabel: '[data-role=size]',\r\n            types: null,\r\n            initialized: false\r\n        },\r\n\r\n        /**\r\n         * Gallery creation\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this.options.types = this.options.types || this.element.data('types');\r\n            this.options.images = this.options.images || this.element.data('images');\r\n            this.options.parentComponent = this.options.parentComponent || this.element.data('parent-component');\r\n\r\n            this.imgTmpl = mageTemplate(this.element.find(this.options.template).html().trim());\r\n\r\n            this._bind();\r\n\r\n            $.each(this.options.images, $.proxy(function (index, imageData) {\r\n                this.element.trigger('addItem', imageData);\r\n            }, this));\r\n\r\n            this.options.initialized = true;\r\n        },\r\n\r\n        /**\r\n         * Bind handler to elements\r\n         * @protected\r\n         */\r\n        _bind: function () {\r\n            this._on({\r\n                updateImageTitle: '_updateImageTitle',\r\n                updateVisibility: '_updateVisibility',\r\n                openDialog: '_onOpenDialog',\r\n                addItem: '_addItem',\r\n                removeItem: '_removeItem',\r\n                setImageType: '_setImageType',\r\n                setPosition: '_setPosition',\r\n                resort: '_resort',\r\n                'mouseup [data-role=delete-button]': function (event) {\r\n                    var $imageContainer;\r\n\r\n                    event.preventDefault();\r\n                    $imageContainer = $(event.currentTarget).closest(this.options.imageSelector);\r\n                    this.element.find('[data-role=dialog]').trigger('close');\r\n                    this.element.trigger('removeItem', $imageContainer.data('imageData'));\r\n                },\r\n                'mouseup [data-role=make-base-button]': function (event) {\r\n                    var $imageContainer,\r\n                        imageData;\r\n\r\n                    event.preventDefault();\r\n                    event.stopImmediatePropagation();\r\n                    $imageContainer = $(event.currentTarget).closest(this.options.imageSelector);\r\n                    imageData = $imageContainer.data('imageData');\r\n                    this.setBase(imageData);\r\n                }\r\n            });\r\n\r\n            this.element.sortable({\r\n                distance: 8,\r\n                items: this.options.imageSelector,\r\n                tolerance: 'pointer',\r\n                cancel: 'input, button, .uploader',\r\n                update: $.proxy(function () {\r\n                    this.element.trigger('resort');\r\n                }, this)\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Set image as main\r\n         * @param {Object} imageData\r\n         * @private\r\n         */\r\n        setBase: function (imageData) {\r\n            var baseImage = this.options.types.image,\r\n                sameImages = $.grep(\r\n                    $.map(this.options.types, function (el) {\r\n                        return el;\r\n                    }),\r\n                    function (el) {\r\n                        return el.value === baseImage.value;\r\n                    }\r\n                ),\r\n                isImageOpened = this.findElement(imageData).hasClass('active');\r\n\r\n            $.each(sameImages, $.proxy(function (index, image) {\r\n                this.element.trigger('setImageType', {\r\n                    type: image.code,\r\n                    imageData: imageData\r\n                });\r\n\r\n                if (isImageOpened) {\r\n                    this.element.find('.item').addClass('selected');\r\n                    this.element.find('[data-role=type-selector]').prop({\r\n                        'checked': true\r\n                    });\r\n                }\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * Find element by fileName\r\n         * @param {Object} data\r\n         * @returns {Element}\r\n         */\r\n        findElement: function (data) {\r\n            return this.element.find(this.options.imageSelector).filter(function () {\r\n                return $(this).data('imageData').file === data.file;\r\n            }).first();\r\n        },\r\n\r\n        /**\r\n         * Mark parent fieldset that content was updated\r\n         */\r\n        _contentUpdated: function () {\r\n            if (this.options.initialized && this.options.parentComponent) {\r\n                registry.async(this.options.parentComponent)(\r\n                    function (parentComponent) {\r\n                        parentComponent.bubble('update', true);\r\n                    }\r\n                );\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Add image\r\n         * @param event\r\n         * @param imageData\r\n         * @private\r\n         */\r\n        _addItem: function (event, imageData) {\r\n            var count = this.element.find(this.options.imageSelector).length,\r\n                element,\r\n                imgElement;\r\n\r\n            imageData = $.extend({\r\n                'file_id': imageData.value_id ? imageData.value_id : Math.random().toString(33).substr(2, 18),\r\n                'disabled': imageData.disabled ? imageData.disabled : 0,\r\n                'position': count + 1,\r\n                sizeLabel: bytesToSize(imageData.size)\r\n            }, imageData);\r\n\r\n            element = this.imgTmpl({\r\n                data: imageData\r\n            });\r\n\r\n            element = $(element).data('imageData', imageData);\r\n\r\n            if (count === 0) {\r\n                element.prependTo(this.element);\r\n            } else {\r\n                element.insertAfter(this.element.find(this.options.imageSelector + ':last'));\r\n            }\r\n\r\n            if (!this.options.initialized &&\r\n                this.options.images.length === 0 ||\r\n                this.options.initialized &&\r\n                this.element.find(this.options.imageSelector + ':not(.removed)').length === 1\r\n            ) {\r\n                this.setBase(imageData);\r\n            }\r\n\r\n            imgElement = element.find(this.options.imageElementSelector);\r\n\r\n            imgElement.on('load', this._updateImageDimesions.bind(this, element));\r\n\r\n            $.each(this.options.types, $.proxy(function (index, image) {\r\n                if (imageData.file === image.value) {\r\n                    this.element.trigger('setImageType', {\r\n                        type: image.code,\r\n                        imageData: imageData\r\n                    });\r\n                }\r\n            }, this));\r\n\r\n            this._updateImagesRoles();\r\n            this._contentUpdated();\r\n        },\r\n\r\n        /**\r\n         * Returns a list of current images.\r\n         *\r\n         * @returns {jQueryCollection}\r\n         */\r\n        _getImages: function () {\r\n            return this.element.find(this.options.imageSelector);\r\n        },\r\n\r\n        /**\r\n         * Returns a list of images roles.\r\n         *\r\n         * @return {Object}\r\n         */\r\n        _getRoles: function () {\r\n            return _.mapObject(this.options.types, function (data, key) {\r\n                var elem = this.element.find('.image-' + key);\r\n\r\n                return {\r\n                    index: key,\r\n                    value: elem.val(),\r\n                    elem: elem\r\n                };\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Updates labels with roles information for each image.\r\n         */\r\n        _updateImagesRoles: function () {\r\n            var $images = this._getImages().toArray(),\r\n                roles = this._getRoles();\r\n\r\n            $images.forEach(function (img) {\r\n                var $img = $(img),\r\n                    data = $img.data('imageData');\r\n\r\n                $img.find('[data-role=roles-labels] li').each(function (index, elem) {\r\n                    var $elem = $(elem),\r\n                        roleCode = $elem.data('roleCode'),\r\n                        role = roles[roleCode];\r\n\r\n                    role.value === data.file  ?\r\n                        $elem.show() :\r\n                        $elem.hide();\r\n                });\r\n\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Updates image's dimensions information.\r\n         *\r\n         * @param {jQeuryCollection} imgContainer\r\n         */\r\n        _updateImageDimesions: function (imgContainer) {\r\n            var $img = imgContainer.find(this.options.imageElementSelector)[0],\r\n                $dimens = imgContainer.find('[data-role=image-dimens]');\r\n\r\n            $dimens.text($img.naturalWidth + 'x' + $img.naturalHeight + ' px');\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Object} imgData\r\n         */\r\n        _updateImageTitle: function (event, data) {\r\n            var imageData = data.imageData,\r\n                $imgContainer = this.findElement(imageData),\r\n                $title = $imgContainer.find(this.options.imgTitleSelector),\r\n                value;\r\n\r\n            value = imageData['media_type'] === 'external-video' ?\r\n                imageData['video_title'] :\r\n                imageData.label;\r\n\r\n            $title.text(value);\r\n\r\n            this._contentUpdated();\r\n        },\r\n\r\n        /**\r\n         * Remove Image\r\n         * @param {jQuery.Event} event\r\n         * @param imageData\r\n         * @private\r\n         */\r\n        _removeItem: function (event, imageData) {\r\n            var $imageContainer = this.findElement(imageData);\r\n\r\n            imageData.isRemoved = true;\r\n            $imageContainer.addClass('removed').hide().find('.is-removed').val(1);\r\n\r\n            this._contentUpdated();\r\n        },\r\n\r\n        /**\r\n         * Set image type\r\n         * @param event\r\n         * @param data\r\n         * @private\r\n         */\r\n        _setImageType: function (event, data) {\r\n            if (data.type === 'image') {\r\n                this.element.find('.base-image').removeClass('base-image');\r\n            }\r\n\r\n            if (data.imageData) {\r\n                this.options.types[data.type].value = data.imageData.file;\r\n\r\n                if (data.type === 'image') {\r\n                    this.findElement(data.imageData).addClass('base-image');\r\n                }\r\n            } else {\r\n                this.options.types[data.type].value = 'no_selection';\r\n            }\r\n            this.element.find('.image-' + data.type).val(this.options.types[data.type].value || 'no_selection');\r\n            this._updateImagesRoles();\r\n            this._contentUpdated();\r\n        },\r\n\r\n        /**\r\n         * Resort images\r\n         * @private\r\n         */\r\n        _resort: function () {\r\n            this.element.find('.position').each($.proxy(function (index, element) {\r\n                var value = $(element).val();\r\n\r\n                if (value != index) {\r\n                    this.element.trigger('moveElement', {\r\n                        imageData: $(element).closest(this.options.imageSelector).data('imageData'),\r\n                        position: index\r\n                    });\r\n                    $(element).val(index);\r\n                }\r\n            }, this));\r\n\r\n            this._contentUpdated();\r\n        },\r\n\r\n        /**\r\n         * Set image position\r\n         * @param event\r\n         * @param data\r\n         * @private\r\n         */\r\n        _setPosition: function (event, data) {\r\n            var $element = this.findElement(data.imageData),\r\n                curIndex = this.element.find(this.options.imageSelector).index($element),\r\n                newPosition = data.position + (curIndex > data.position ? -1 : 0);\r\n\r\n            if (data.position != curIndex) {\r\n                if (data.position === 0) {\r\n                    this.element.prepend($element);\r\n                } else {\r\n                    $element.insertAfter(\r\n                        this.element.find(this.options.imageSelector).eq(newPosition)\r\n                    );\r\n                }\r\n                this.element.trigger('resort');\r\n            }\r\n\r\n            this._contentUpdated();\r\n        }\r\n    });\r\n\r\n    // Extension for mage.productGallery - Add advanced settings block\r\n    $.widget('mage.productGallery', $.mage.productGallery, {\r\n        options: {\r\n            dialogTemplate: '[data-role=img-dialog-tmpl]',\r\n            dialogContainerTmpl: '[data-role=img-dialog-container-tmpl]'\r\n        },\r\n\r\n        _create: function () {\r\n            var template = this.element.find(this.options.dialogTemplate),\r\n                containerTmpl = this.element.find(this.options.dialogContainerTmpl);\r\n\r\n            this._super();\r\n            this.modalPopupInit = false;\r\n\r\n            if (template.length) {\r\n                this.dialogTmpl = mageTemplate(template.html().trim());\r\n            }\r\n\r\n            if (containerTmpl.length) {\r\n                this.dialogContainerTmpl = mageTemplate(containerTmpl.html().trim());\r\n            } else {\r\n                this.dialogContainerTmpl = mageTemplate('');\r\n            }\r\n\r\n            this._initDialog();\r\n        },\r\n\r\n        /**\r\n         * Bind handler to elements\r\n         * @protected\r\n         */\r\n        _bind: function () {\r\n            var events = {};\r\n\r\n            this._super();\r\n\r\n            events['click [data-role=close-panel]'] = $.proxy(function () {\r\n                this.element.find('[data-role=dialog]').trigger('close');\r\n            }, this);\r\n            events['click ' + this.options.imageSelector] = function (event) {\r\n                if (!$(event.currentTarget).is('.ui-sortable-helper')) {\r\n                    $(event.currentTarget).addClass('active');\r\n                    var imageData = $(event.currentTarget).data('imageData');\r\n                    var $imageContainer = this.findElement(imageData);\r\n                    if ($imageContainer.is('.removed')) {\r\n                        return;\r\n                    }\r\n                    this.element.trigger('openDialog', [imageData]);\r\n                }\r\n            };\r\n            this._on(events);\r\n            this.element.on('sortstart', $.proxy(function () {\r\n                this.element.find('[data-role=dialog]').trigger('close');\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * Initializes dialog element.\r\n         */\r\n        _initDialog: function () {\r\n            var $dialog = $(this.dialogContainerTmpl());\r\n\r\n            $dialog.modal({\r\n                'type': 'slide',\r\n                title: $.mage.__('Image Detail'),\r\n                buttons: [],\r\n                opened: function () {\r\n                    $dialog.trigger('open');\r\n                },\r\n                closed: function () {\r\n                    $dialog.trigger('close');\r\n                }\r\n            });\r\n\r\n            $dialog.on('open', this.onDialogOpen.bind(this));\r\n            $dialog.on('close', function () {\r\n                var $imageContainer = $dialog.data('imageContainer');\r\n\r\n                $imageContainer.removeClass('active');\r\n                $dialog.find('#hide-from-product-page').remove();\r\n            });\r\n\r\n            $dialog.on('change', '[data-role=type-selector]', function () {\r\n                var parent = $(this).closest('.item'),\r\n                    selectedClass = 'selected';\r\n\r\n                parent.toggleClass(selectedClass, $(this).prop('checked'));\r\n            });\r\n\r\n            $dialog.on('change', '[data-role=type-selector]', $.proxy(this._notifyType, this));\r\n\r\n            $dialog.on('change', '[data-role=visibility-trigger]', $.proxy(function (e) {\r\n                var imageData = $dialog.data('imageData');\r\n\r\n                this.element.trigger('updateVisibility', {\r\n                    disabled: $(e.currentTarget).is(':checked'),\r\n                    imageData: imageData\r\n                })\r\n            }, this));\r\n\r\n            $dialog.on('change', '[data-role=\"image-description\"]', function (e) {\r\n                var target = $(e.target),\r\n                    targetName = target.attr('name'),\r\n                    desc = target.val(),\r\n                    imageData = $dialog.data('imageData');\r\n\r\n                this.element.find('input[type=\"hidden\"][name=\"' + targetName + '\"]').val(desc);\r\n\r\n                imageData.label = desc;\r\n                imageData.label_default = desc;\r\n\r\n                this.element.trigger('updateImageTitle', {\r\n                    imageData: imageData\r\n                });\r\n            }.bind(this));\r\n\r\n            this.$dialog = $dialog;\r\n        },\r\n\r\n        _showDialog: function (imageData) {\r\n            var $imageContainer = this.findElement(imageData),\r\n                $template;\r\n\r\n            $template = this.dialogTmpl({\r\n                'data': imageData\r\n            });\r\n\r\n            this.$dialog\r\n                .html($template)\r\n                .data('imageData', imageData)\r\n                .data('imageContainer', $imageContainer)\r\n                .modal('openModal');\r\n        },\r\n\r\n        /**\r\n         * Handles dialog open event.\r\n         *\r\n         * @param {EventObject} event\r\n         */\r\n        onDialogOpen: function (event) {\r\n            var imageData = this.$dialog.data('imageData'),\r\n                imageSizeKb = imageData.sizeLabel,\r\n                image = document.createElement('img'),\r\n                sizeSpan = this.$dialog.find(this.options.imageSizeLabel)\r\n                    .find('[data-message]'),\r\n                resolutionSpan = this.$dialog.find(this.options.imageResolutionLabel)\r\n                    .find('[data-message]'),\r\n                sizeText = sizeSpan.attr('data-message').replace('{size}', imageSizeKb),\r\n                resolutionText;\r\n\r\n            image.src = imageData.url;\r\n\r\n            resolutionText = resolutionSpan\r\n                .attr('data-message')\r\n                .replace('{width}^{height}', image.width + 'x' + image.height);\r\n\r\n            sizeSpan.text(sizeText);\r\n            resolutionSpan.text(resolutionText);\r\n\r\n            $(event.target)\r\n                .find('[data-role=type-selector]')\r\n                .each($.proxy(function (index, checkbox) {\r\n                    var $checkbox = $(checkbox),\r\n                        parent = $checkbox.closest('.item'),\r\n                        selectedClass = 'selected',\r\n                        isChecked = this.options.types[$checkbox.val()].value == imageData.file;\r\n\r\n                    $checkbox.prop(\r\n                        'checked',\r\n                        isChecked\r\n                    );\r\n                    parent.toggleClass(selectedClass, isChecked);\r\n                }, this));\r\n        },\r\n\r\n        /**\r\n         *\r\n         * Click by image handler\r\n         *\r\n         * @param e\r\n         * @param imageData\r\n         * @private\r\n         */\r\n        _onOpenDialog: function (e, imageData) {\r\n            if (imageData.media_type && imageData.media_type != 'image') {\r\n                return;\r\n            }\r\n            this._showDialog(imageData);\r\n        },\r\n\r\n        /**\r\n         * Change visibility\r\n         *\r\n         * @param event\r\n         * @private\r\n         */\r\n        _updateVisibility: function (event, data) {\r\n            var imageData = data.imageData,\r\n                disabled = +data.disabled,\r\n                $imageContainer = this.findElement(imageData);\r\n            \r\n            !!disabled ?\r\n                $imageContainer.addClass('hidden-for-front') :\r\n                $imageContainer.removeClass('hidden-for-front');\r\n\r\n            $imageContainer.find('[name*=\"disabled\"]').val(disabled);\r\n            imageData.disabled = disabled;\r\n\r\n            this._contentUpdated();\r\n        },\r\n\r\n        /**\r\n         * Set image\r\n         * @param event\r\n         * @private\r\n         */\r\n        _notifyType: function (event) {\r\n            var $checkbox = $(event.currentTarget),\r\n                $imageContainer = $checkbox.closest('[data-role=dialog]').data('imageContainer');\r\n\r\n            this.element.trigger('setImageType', {\r\n                type: $checkbox.val(),\r\n                imageData: $checkbox.is(':checked') ? $imageContainer.data('imageData') : null\r\n            });\r\n\r\n            this._updateImagesRoles();\r\n        }\r\n    });\r\n\r\n    return $.mage.productGallery;\r\n});\r\n","Magento_Catalog/js/components/attribute-set-select.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/ui-select'\r\n], function (Select) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        defaults: {\r\n            listens: {\r\n                'value': 'changeFormSubmitUrl'\r\n            },\r\n            modules: {\r\n                formProvider: '${ $.provider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Change set parameter in save and validate urls of form\r\n         *\r\n         * @param {String|Number} value\r\n         */\r\n        changeFormSubmitUrl: function (value) {\r\n            var pattern = /(set\\/)(\\d)*?\\//,\r\n                change = '$1' + value + '/';\r\n\r\n            this.formProvider().client.urls.save = this.formProvider().client.urls.save.replace(pattern, change);\r\n            this.formProvider().client.urls.beforeSave = this.formProvider().client.urls.beforeSave.replace(\r\n                pattern,\r\n                change\r\n            );\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/attributes-fieldset.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/components/fieldset',\r\n    'Magento_Ui/js/core/app'\r\n], function (Fieldset, app) {\r\n    'use strict';\r\n\r\n    return Fieldset.extend({\r\n        defaults: {\r\n            listens: {\r\n                '${ $.provider }:additionalAttributes': 'onAttributeAdd'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * On attribute add trigger\r\n         *\r\n         * @param {Object} listOfNewAttributes\r\n         */\r\n        onAttributeAdd: function (listOfNewAttributes) {\r\n            app(listOfNewAttributes, true);\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/attributes-grid-paging.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/paging/paging',\r\n    'underscore'\r\n], function (Paging, _) {\r\n    'use strict';\r\n\r\n    return Paging.extend({\r\n        defaults: {\r\n            totalTmpl: 'Magento_Catalog/attributes/grid/paging',\r\n            modules: {\r\n                selectionColumn: '${ $.selectProvider }'\r\n            },\r\n            listens: {\r\n                '${ $.selectProvider }:selected': 'changeLabel'\r\n            },\r\n            label: '',\r\n            selectedAttrs: []\r\n        },\r\n\r\n        /**\r\n         * Change label.\r\n         *\r\n         * @param {Array} selected\r\n         */\r\n        changeLabel: function (selected) {\r\n            this.selectedAttrs = [];\r\n            _.each(this.selectionColumn().rows(), function (row) {\r\n                if (selected.indexOf(row['attribute_id']) !== -1) {\r\n                    this.selectedAttrs.push(row['attribute_code']);\r\n                }\r\n            }, this);\r\n\r\n            this.label(this.selectedAttrs.join(', '));\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('label');\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/attributes-insert-listing.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'uiRegistry',\r\n    'underscore',\r\n    'Magento_Ui/js/form/components/insert-listing'\r\n], function ($, registry, _, InsertListing) {\r\n    'use strict';\r\n\r\n    return InsertListing.extend({\r\n        defaults: {\r\n            addAttributeUrl: '',\r\n            attributeSetId: '',\r\n            attributeIds: '',\r\n            groupCode: '',\r\n            groupName: '',\r\n            groupSortOrder: 0,\r\n            productId: 0,\r\n            formProvider: '',\r\n            modules: {\r\n                form: '${ $.formProvider }',\r\n                modal: '${ $.parentName }'\r\n            },\r\n            productType: ''\r\n        },\r\n\r\n        /**\r\n         * Render attribute\r\n         */\r\n        render: function () {\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * Save attribute\r\n         */\r\n        save: function () {\r\n            this.addSelectedAttributes();\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * Add selected attributes\r\n         */\r\n        addSelectedAttributes: function () {\r\n            $.ajax({\r\n                url: this.addAttributeUrl,\r\n                type: 'POST',\r\n                dataType: 'json',\r\n                data: {\r\n                    attributeIds: this.selections().getSelections(),\r\n                    templateId: this.attributeSetId,\r\n                    groupCode: this.groupCode,\r\n                    groupName: this.groupName,\r\n                    groupSortOrder: this.groupSortOrder,\r\n                    productId: this.productId,\r\n                    componentJson: 1\r\n                },\r\n                success: function () {\r\n                    this.form().params = {\r\n                        set: this.attributeSetId,\r\n                        id: this.productId,\r\n                        type: this.productType\r\n                    };\r\n                    this.form().reload();\r\n                    this.modal().state(false);\r\n                    this.reload();\r\n                }.bind(this)\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/checkbox.js":"/* Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n* See COPYING.txt for license details.\r\n*/\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract',\r\n    'knockout'\r\n], function (Abstract, ko) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n\r\n        /**\r\n         * Initializes observable properties of instance\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('checked');\r\n\r\n            this.value = ko.pureComputed({\r\n\r\n                /**\r\n                 * use 'mappedValue' as value if checked\r\n                 */\r\n                read: function () {\r\n                    return this.checked() ? this.mappedValue : '';\r\n                },\r\n\r\n                /**\r\n                 * any value made checkbox checked\r\n                 */\r\n                write: function (val) {\r\n                    if (val) {\r\n                        this.checked(true);\r\n                    }\r\n                },\r\n                owner: this\r\n            });\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/disable-hide-select.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/select',\r\n    'Magento_Catalog/js/components/visible-on-option/strategy',\r\n    'Magento_Catalog/js/components/disable-on-option/strategy'\r\n], function (Element, visibleStrategy, disableStrategy) {\r\n    'use strict';\r\n\r\n    return Element.extend(visibleStrategy).extend(disableStrategy);\r\n});\r\n","Magento_Catalog/js/components/dynamic-rows-import-custom-options.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/dynamic-rows/dynamic-rows-grid',\r\n    'underscore',\r\n    'mageUtils'\r\n], function (DynamicRows, _, utils) {\r\n    'use strict';\r\n\r\n    return DynamicRows.extend({\r\n        defaults: {\r\n            mappingSettings: {\r\n                enabled: false,\r\n                distinct: false\r\n            },\r\n            update: true,\r\n            map: {\r\n                'option_id': 'option_id'\r\n            },\r\n            identificationProperty: 'option_id',\r\n            identificationDRProperty: 'option_id'\r\n        },\r\n\r\n        /**\r\n         * Cleans options' values from IDs because otherwise wrong IDs will be assigned.\r\n         *\r\n         * @param {Array} values\r\n         * @private\r\n         */\r\n        __cleanOptionValuesUp: function (values) {\r\n            values.each(function (value) {\r\n                delete value['option_id'];\r\n                delete value['option_type_id'];\r\n            });\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        processingInsertData: function (data) {\r\n            var options = [],\r\n                currentOption,\r\n                self = this;\r\n\r\n            if (!data) {\r\n                return;\r\n            }\r\n            data.each(function (item) {\r\n                if (!item.options) {\r\n                    return;\r\n                }\r\n                item.options.each(function (option) {\r\n                    currentOption = utils.copy(option);\r\n\r\n                    if (currentOption.hasOwnProperty('sort_order')) {\r\n                        delete currentOption['sort_order'];\r\n                    }\r\n\r\n                    if (currentOption.hasOwnProperty('option_id')) {\r\n                        delete currentOption['option_id'];\r\n                    }\r\n\r\n                    if (currentOption.values.length > 0) {\r\n                        self.__cleanOptionValuesUp(currentOption.values);\r\n                    }\r\n                    options.push(currentOption);\r\n                });\r\n            });\r\n\r\n            if (!options.length) {\r\n                return;\r\n            }\r\n            this.cacheGridData = options;\r\n            options.each(function (opt) {\r\n                this.mappingValue(opt);\r\n            }, this);\r\n\r\n            this.insertData([]);\r\n        },\r\n\r\n        /**\r\n         * Set empty array to dataProvider\r\n         */\r\n        clearDataProvider: function () {\r\n            this.source.set(this.dataProvider, []);\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        processingAddChild: function (ctx, index, prop) {\r\n            if (!ctx) {\r\n                this.showSpinner(true);\r\n                this.addChild(ctx, index, prop);\r\n\r\n                return;\r\n            }\r\n\r\n            this._super(ctx, index, prop);\r\n        },\r\n\r\n        /**\r\n         * Mutes parent method\r\n         */\r\n        updateInsertData: function () {\r\n            return false;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/import-handler.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/form/element/textarea'\r\n], function (_, Textarea) {\r\n    'use strict';\r\n\r\n    return Textarea.extend({\r\n        defaults: {\r\n            allowImport: true,\r\n            autoImportIfEmpty: false,\r\n            values: {\r\n                'name': '',\r\n                'description': '',\r\n                'sku': '',\r\n                'color': '',\r\n                'country_of_manufacture': '',\r\n                'gender': '',\r\n                'material': '',\r\n                'short_description': '',\r\n                'size': ''\r\n            },\r\n            valueUpdate: 'input',\r\n            mask: ''\r\n        },\r\n\r\n        /**\r\n         * Handle name value changes, if it's allowed\r\n         *\r\n         * @param {String} newValue\r\n         */\r\n        handleNameChanges: function (newValue) {\r\n            this.values.name = newValue;\r\n            this.updateValue();\r\n        },\r\n\r\n        /**\r\n         * Handle description value changes, if it's allowed\r\n         *\r\n         * @param {String} newValue\r\n         */\r\n        handleDescriptionChanges: function (newValue) {\r\n            this.values.description = newValue;\r\n            this.updateValue();\r\n        },\r\n\r\n        /**\r\n         * Handle sku value changes, if it's allowed\r\n         *\r\n         * @param {String} newValue\r\n         */\r\n        handleSkuChanges: function (newValue) {\r\n            if (this.code !== 'sku') {\r\n                this.values.sku = newValue;\r\n                this.updateValue();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle color value changes, if it's allowed\r\n         *\r\n         * @param {String} newValue\r\n         */\r\n        handleColorChanges: function (newValue) {\r\n            this.values.color = newValue;\r\n            this.updateValue();\r\n        },\r\n\r\n        /**\r\n         * Handle country value changes, if it's allowed\r\n         *\r\n         * @param {String} newValue\r\n         */\r\n        handleCountryChanges: function (newValue) {\r\n            this.values.country = newValue;\r\n            this.updateValue();\r\n        },\r\n\r\n        /**\r\n         * Handle gender value changes, if it's allowed\r\n         *\r\n         * @param {String} newValue\r\n         */\r\n        handleGenderChanges: function (newValue) {\r\n            this.values.gender = newValue;\r\n            this.updateValue();\r\n        },\r\n\r\n        /**\r\n         * Handle material value changes, if it's allowed\r\n         *\r\n         * @param {String} newValue\r\n         */\r\n        handleMaterialChanges: function (newValue) {\r\n            this.values.material = newValue;\r\n            this.updateValue();\r\n        },\r\n\r\n        /**\r\n         * Handle short description value changes, if it's allowed\r\n         *\r\n         * @param {String} newValue\r\n         */\r\n        handleShortDescriptionChanges: function (newValue) {\r\n            this.values['short_description'] = newValue;\r\n            this.updateValue();\r\n        },\r\n\r\n        /**\r\n         * Handle size value changes, if it's allowed\r\n         *\r\n         * @param {String} newValue\r\n         */\r\n        handleSizeChanges: function (newValue) {\r\n            this.values.size = newValue;\r\n            this.updateValue();\r\n        },\r\n\r\n        /**\r\n         * Update field value, if it's allowed\r\n         */\r\n        updateValue: function () {\r\n            var str = this.mask || '',\r\n                nonEmptyValueFlag = false,\r\n                tmpElement;\r\n\r\n            if (!this.allowImport) {\r\n                return;\r\n            }\r\n\r\n            if (str) {\r\n                _.each(this.values, function (propertyValue, propertyName) {\r\n                    str = str.replace('{{' + propertyName + '}}', propertyValue);\r\n                    nonEmptyValueFlag = nonEmptyValueFlag || !!propertyValue;\r\n                });\r\n            }\r\n\r\n            // strip tags\r\n            tmpElement = document.createElement('div');\r\n            str = str.replace(/(<([^>]+)>)/ig, '');\r\n            tmpElement.innerHTML = str;\r\n            str =  tmpElement.textContent || tmpElement.innerText || '';\r\n\r\n            if (nonEmptyValueFlag) {\r\n                this.value(str);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Disallow import when initial value isn't empty string\r\n         *\r\n         * @returns {*}\r\n         */\r\n        setInitialValue: function () {\r\n            this._super();\r\n\r\n            if (this.initialValue !== '') {\r\n                this.allowImport = false;\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *  Callback when value is changed by user,\r\n         *  and disallow/allow import value\r\n         */\r\n        userChanges: function () {\r\n            this._super();\r\n\r\n            if (this.value() === '') {\r\n                this.allowImport = true;\r\n\r\n                if (this.autoImportIfEmpty) {\r\n                    this.updateValue();\r\n                }\r\n            } else {\r\n                this.allowImport = false;\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/input-handle-required.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n\r\n        /**\r\n         * Disable required validation, when 'use config option' checked\r\n         */\r\n        handleRequired: function (newValue) {\r\n            this.validation['required-entry'] = !newValue;\r\n            this.required(!newValue);\r\n            this.error(false);\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/messages.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/components/html'\r\n], function (Html) {\r\n    'use strict';\r\n\r\n    return Html.extend({\r\n        defaults: {\r\n            form: '${ $.namespace }.${ $.namespace }',\r\n            visible: false,\r\n            imports: {\r\n                responseData: '${ $.form }:responseData',\r\n                visible: 'responseData.error',\r\n                content: 'responseData.messages'\r\n            },\r\n            listens: {\r\n                '${ $.provider }:data.reset': 'hide'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Show messages.\r\n         */\r\n        show: function () {\r\n            this.visible(true);\r\n        },\r\n\r\n        /**\r\n         * Hide messages.\r\n         */\r\n        hide: function () {\r\n            this.visible(false);\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/multiselect-handle-required.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/multiselect'\r\n], function (Multiselect) {\r\n    'use strict';\r\n\r\n    return Multiselect.extend({\r\n\r\n        /**\r\n         * Disable required validation, when 'use config option' checked\r\n         */\r\n        handleRequired: function (newValue) {\r\n            this.validation['required-entry'] = !newValue;\r\n            this.required(!newValue);\r\n            this.error(false);\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/new-attribute-form.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/form/form',\r\n    'Magento_Ui/js/modal/prompt',\r\n    'Magento_Ui/js/modal/alert'\r\n], function ($, Form, prompt, alert) {\r\n    'use strict';\r\n\r\n    return Form.extend({\r\n        defaults: {\r\n            newSetPromptMessage: '',\r\n            listens: {\r\n                responseData: 'processResponseData'\r\n            },\r\n            modules: {\r\n                productForm: 'product_form.product_form'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Process response data\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        processResponseData: function (data) {\r\n            if (data.params['new_attribute_set_id']) {\r\n                this.productForm().params = {\r\n                    set: data.params['new_attribute_set_id']\r\n                };\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Process Save In New Attribute Set prompt\r\n         */\r\n        saveAttributeInNewSet: function () {\r\n\r\n            var self = this;\r\n\r\n            prompt({\r\n                content: this.newSetPromptMessage,\r\n                actions: {\r\n\r\n                    /**\r\n                     * @param {String} val\r\n                     * @this {actions}\r\n                     */\r\n                    confirm: function (val) {\r\n                        var rules = ['required-entry', 'validate-no-html-tags'],\r\n                            editForm = self,\r\n                            newAttributeSetName = val,\r\n                            i,\r\n                            params = {};\r\n\r\n                        if (!newAttributeSetName) {\r\n                            return;\r\n                        }\r\n\r\n                        for (i = 0; i < rules.length; i++) {\r\n                            if (!$.validator.methods[rules[i]](newAttributeSetName)) {\r\n                                alert({\r\n                                    content: $.validator.messages[rules[i]]\r\n                                });\r\n\r\n                                return;\r\n                            }\r\n                        }\r\n\r\n                        params['new_attribute_set_name'] = newAttributeSetName;\r\n                        editForm.setAdditionalData(params);\r\n                        editForm.save();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/new-attribute-insert-form.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/components/insert-form'\r\n], function (InsertForm) {\r\n    'use strict';\r\n\r\n    return InsertForm.extend({\r\n        defaults: {\r\n            modules: {\r\n                productForm: 'product_form.product_form'\r\n            },\r\n            listens: {\r\n                responseStatus: 'processResponseStatus'\r\n            },\r\n            attributeSetId: 0,\r\n            productId: 0\r\n        },\r\n\r\n        /**\r\n         * Process response status.\r\n         */\r\n        processResponseStatus: function () {\r\n            if (this.responseStatus()) {\r\n\r\n                if (this.productForm().params === undefined) {\r\n                    this.productForm().params = {\r\n                        set: this.attributeSetId\r\n                    };\r\n                }\r\n\r\n                if (this.productId) {\r\n                    this.productForm().params.id = this.productId;\r\n                }\r\n                this.productForm().params.type = this.productType;\r\n\r\n                this.productForm().reload();\r\n                this.resetForm();\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/new-category.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/ui-select'\r\n], function (Select) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n\r\n        /**\r\n         * Parse data and set it to options.\r\n         *\r\n         * @param {Object} data - Response data object.\r\n         * @returns {Object}\r\n         */\r\n        setParsed: function (data) {\r\n            var option = this.parseData(data);\r\n\r\n            if (data.error) {\r\n                return this;\r\n            }\r\n\r\n            this.options([]);\r\n            this.setOption(option);\r\n            this.set('newOption', option);\r\n        },\r\n\r\n        /**\r\n         * Normalize option object.\r\n         *\r\n         * @param {Object} data - Option object.\r\n         * @returns {Object}\r\n         */\r\n        parseData: function (data) {\r\n            return {\r\n                'is_active': data.category['is_active'],\r\n                level: data.category.level,\r\n                value: data.category['entity_id'],\r\n                label: data.category.name,\r\n                parent: data.category.parent\r\n            };\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/product-status.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract',\r\n    'underscore'\r\n], function (Abstract, _) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            'mappingValues': {\r\n                '1': true,\r\n                '2': false\r\n            },\r\n            'checked': false,\r\n            'mappedValue': '',\r\n            'links': {\r\n                value: false,\r\n                'mappedValue': '${ $.provider }:${ $.dataScope }'\r\n            },\r\n            imports: {\r\n                checked: 'mappedValue'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @returns {*}\r\n         */\r\n        setMappedValue: function () {\r\n            var newValue;\r\n\r\n            _.some(this.mappingValues, function (item, key) {\r\n                if (item === this.value()) {\r\n                    newValue = key;\r\n\r\n                    return true;\r\n                }\r\n            }, this);\r\n\r\n            return newValue;\r\n        },\r\n\r\n        /**\r\n         * @returns {*}\r\n         */\r\n        initObservable: function () {\r\n            return this.observe('mappedValue checked')._super();\r\n        },\r\n\r\n        /**\r\n         * @returns {*}\r\n         */\r\n        setInitialValue: function () {\r\n            this.value(this.mappedValue());\r\n            this._super();\r\n            this.mappedValue(this.initialValue);\r\n            this.value(this.mappingValues[this.initialValue]);\r\n            this.initialValue = this.value();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @returns {*}\r\n         */\r\n        onUpdate: function () {\r\n            this.mappedValue(this.setMappedValue());\r\n\r\n            return this._super();\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/select-handle-required.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/select'\r\n], function (Select) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n\r\n        /**\r\n         * Disable required validation, when 'use config option' checked\r\n         */\r\n        handleRequired: function (newValue) {\r\n            this.validation['required-entry'] = !newValue;\r\n            this.required(!newValue);\r\n            this.error(false);\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/select-to-checkbox.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n\r\n        /**\r\n         * Converts initial value to integer\r\n         *\r\n         * @returns {Abstract}\r\n         */\r\n        setInitialValue: function () {\r\n            this._super();\r\n            this.value(+this.value());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Converts new value to integer\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        onUpdate: function () {\r\n            this._super();\r\n            this.value(+this.value());\r\n\r\n            return this._super();\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/url-key-handle-changes.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox'\r\n], function (Checkbox) {\r\n    'use strict';\r\n\r\n    return Checkbox.extend({\r\n        defaults: {\r\n            imports: {\r\n                handleUseDefault: '${ $.parentName }.use_default.url_key:checked',\r\n                urlKey: '${ $.provider }:data.url_key'\r\n            },\r\n            listens: {\r\n                urlKey: 'handleChanges'\r\n            },\r\n            modules: {\r\n                useDefault: '${ $.parentName }.use_default.url_key'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Disable checkbox field, when 'url_key' field without changes or 'use default' field is checked\r\n         */\r\n        handleChanges: function (newValue) {\r\n            this.disabled(newValue === this.valueMap['true'] || this.useDefault.checked);\r\n        },\r\n\r\n        /**\r\n         * Disable checkbox field, when 'url_key' field without changes or 'use default' field is checked\r\n         */\r\n        handleUseDefault: function (checkedUseDefault) {\r\n            this.disabled(this.urlKey === this.valueMap['true'] || checkedUseDefault);\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/disable-on-option/input.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract',\r\n    'Magento_Catalog/js/components/disable-on-option/strategy'\r\n], function (Element, strategy) {\r\n    'use strict';\r\n\r\n    return Element.extend(strategy);\r\n});\r\n","Magento_Catalog/js/components/disable-on-option/select.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/select',\r\n    'Magento_Catalog/js/components/disable-on-option/strategy'\r\n], function (Element, strategy) {\r\n    'use strict';\r\n\r\n    return Element.extend(strategy);\r\n});\r\n","Magento_Catalog/js/components/disable-on-option/strategy.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine(function () {\r\n    'use strict';\r\n\r\n    return {\r\n        defaults: {\r\n            valuesForEnable: [],\r\n            disabled: true,\r\n            imports: {\r\n                toggleDisable:\r\n                    'product_attribute_add_form.product_attribute_add_form.base_fieldset.frontend_input:value'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Toggle disabled state.\r\n         *\r\n         * @param {Number} selected\r\n         */\r\n        toggleDisable: function (selected) {\r\n            this.disabled(!(selected in this.valuesForEnable));\r\n        }\r\n    };\r\n});\r\n","Magento_Catalog/js/components/disable-on-option/yesno.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox',\r\n    'Magento_Catalog/js/components/disable-on-option/strategy'\r\n], function (Element, strategy) {\r\n    'use strict';\r\n\r\n    return Element.extend(strategy);\r\n});\r\n","Magento_Catalog/js/components/visible-on-option/date.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/date',\r\n    'Magento_Catalog/js/components/visible-on-option/strategy'\r\n], function (Element, strategy) {\r\n    'use strict';\r\n\r\n    return Element.extend(strategy);\r\n});\r\n","Magento_Catalog/js/components/visible-on-option/fieldset.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/components/fieldset',\r\n    'Magento_Catalog/js/components/visible-on-option/strategy'\r\n], function (Fieldset, strategy) {\r\n    'use strict';\r\n\r\n    return Fieldset.extend(strategy).extend(\r\n        {\r\n            defaults: {\r\n                openOnShow: true\r\n            },\r\n\r\n            /**\r\n             * Toggle visibility state.\r\n             */\r\n            toggleVisibility: function () {\r\n                this._super();\r\n\r\n                if (this.openOnShow) {\r\n                    this.opened(this.inverseVisibility ? !this.isShown : this.isShown);\r\n                }\r\n            }\r\n        }\r\n    );\r\n});\r\n","Magento_Catalog/js/components/visible-on-option/input.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract',\r\n    'Magento_Catalog/js/components/visible-on-option/strategy'\r\n], function (Element, strategy) {\r\n    'use strict';\r\n\r\n    return Element.extend(strategy);\r\n});\r\n","Magento_Catalog/js/components/visible-on-option/select.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/select',\r\n    'Magento_Catalog/js/components/visible-on-option/strategy'\r\n], function (Element, strategy) {\r\n    'use strict';\r\n\r\n    return Element.extend(strategy);\r\n});\r\n","Magento_Catalog/js/components/visible-on-option/strategy.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine(function () {\r\n    'use strict';\r\n\r\n    return {\r\n        defaults: {\r\n            valuesForOptions: [],\r\n            imports: {\r\n                toggleVisibility:\r\n                    'product_attribute_add_form.product_attribute_add_form.base_fieldset.frontend_input:value'\r\n            },\r\n            isShown: false,\r\n            inverseVisibility: false\r\n        },\r\n\r\n        /**\r\n         * Toggle visibility state.\r\n         *\r\n         * @param {Number} selected\r\n         */\r\n        toggleVisibility: function (selected) {\r\n            this.isShown = selected in this.valuesForOptions;\r\n            this.visible(this.inverseVisibility ? !this.isShown : this.isShown);\r\n        }\r\n    };\r\n});\r\n","Magento_Catalog/js/components/visible-on-option/textarea.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/textarea',\r\n    'Magento_Catalog/js/components/visible-on-option/strategy'\r\n], function (Element, strategy) {\r\n    'use strict';\r\n\r\n    return Element.extend(strategy);\r\n});\r\n","Magento_Catalog/js/components/visible-on-option/yesno.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox',\r\n    'Magento_Catalog/js/components/visible-on-option/strategy'\r\n], function (Element, strategy) {\r\n    'use strict';\r\n\r\n    return Element.extend(strategy);\r\n});\r\n","Magento_Tax/js/bootstrap.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\nrequire([\r\n    'mage/backend/editablemultiselect'\r\n]);\r\n","Magento_Customer/js/bootstrap/customer-post-action.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\nrequire([\r\n    'Magento_Customer/edit/post-wrapper'\r\n]);\r\n"}
    }
});

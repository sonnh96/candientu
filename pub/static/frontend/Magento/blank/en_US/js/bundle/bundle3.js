require.config({
    config: {
        'jsbuild':{"jquery/jquery.validate.js":"/**\r\n * jQuery Validation Plugin @VERSION\r\n *\r\n * http://bassistance.de/jquery-plugins/jquery-plugin-validation/\r\n * http://docs.jquery.com/Plugins/Validation\r\n *\r\n * Copyright (c) 2012 J\u00c3\u00b6rn Zaefferer\r\n *\r\n * Dual licensed under the MIT and GPL licenses:\r\n *   http://www.opensource.org/licenses/mit-license.php\r\n *   http://www.gnu.org/licenses/gpl.html\r\n */\r\n(function (factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define([\r\n            \"jquery\",\r\n            \"jquery/jquery.metadata\"\r\n        ], factory);\r\n    } else {\r\n        factory(jQuery);\r\n    }\r\n}(function (jQuery) {\r\n\r\n(function ($) {\r\n\r\n    $.extend($.fn, {\r\n        // http://docs.jquery.com/Plugins/Validation/validate\r\n        validate: function (options) {\r\n\r\n            // if nothing is selected, return nothing; can't chain anyway\r\n            if (!this.length) {\r\n                if (options && options.debug && window.console) {\r\n                    console.warn(\"nothing selected, can't validate, returning nothing\");\r\n                }\r\n                return;\r\n            }\r\n\r\n            // check if a validator for this form was already created\r\n            var validator = $.data(this[0], 'validator');\r\n            if (validator) {\r\n                return validator;\r\n            }\r\n\r\n            // Add novalidate tag if HTML5.\r\n            this.attr('novalidate', 'novalidate');\r\n\r\n            validator = new $.validator(options, this[0]);\r\n            $.data(this[0], 'validator', validator);\r\n\r\n            if (validator.settings.onsubmit) {\r\n\r\n                this.validateDelegate(\":submit\", \"click\", function (ev) {\r\n                    if (validator.settings.submitHandler) {\r\n                        validator.submitButton = ev.target;\r\n                    }\r\n                    // allow suppressing validation by adding a cancel class to the submit button\r\n                    if ($(ev.target).hasClass('cancel')) {\r\n                        validator.cancelSubmit = true;\r\n                    }\r\n                });\r\n\r\n                // validate the form on submit\r\n                this.submit(function (event) {\r\n                    if (validator.settings.debug) {\r\n                        // prevent form submit to be able to see console output\r\n                        event.preventDefault();\r\n                    }\r\n                    function handle() {\r\n                        var hidden;\r\n                        if (validator.settings.submitHandler) {\r\n                            if (validator.submitButton) {\r\n                                // insert a hidden input as a replacement for the missing submit button\r\n                                hidden = $(\"<input type='hidden'/>\").attr(\"name\", validator.submitButton.name).val(validator.submitButton.value).appendTo(validator.currentForm);\r\n                            }\r\n                            validator.settings.submitHandler.call(validator, validator.currentForm, event);\r\n                            if (validator.submitButton) {\r\n                                // and clean up afterwards; thanks to no-block-scope, hidden can be referenced\r\n                                hidden.remove();\r\n                            }\r\n                            return false;\r\n                        }\r\n                        return true;\r\n                    }\r\n\r\n                    // prevent submit for invalid forms or custom submit handlers\r\n                    if (validator.cancelSubmit) {\r\n                        validator.cancelSubmit = false;\r\n                        return handle();\r\n                    }\r\n                    if (validator.form()) {\r\n                        if (validator.pendingRequest) {\r\n                            validator.formSubmitted = true;\r\n                            return false;\r\n                        }\r\n                        return handle();\r\n                    } else {\r\n                        validator.focusInvalid();\r\n                        return false;\r\n                    }\r\n                });\r\n            }\r\n\r\n            return validator;\r\n        },\r\n        // http://docs.jquery.com/Plugins/Validation/valid\r\n        valid: function () {\r\n            if ($(this[0]).is('form')) {\r\n                return this.validate().form();\r\n            } else {\r\n                var valid = true;\r\n                var validator = $(this[0].form).validate();\r\n                this.each(function () {\r\n                    valid &= validator.element(this);\r\n                });\r\n                return valid;\r\n            }\r\n        },\r\n        // attributes: space seperated list of attributes to retrieve and remove\r\n        removeAttrs: function (attributes) {\r\n            var result = {},\r\n                $element = this;\r\n            $.each(attributes.split(/\\s/), function (index, value) {\r\n                result[value] = $element.attr(value);\r\n                $element.removeAttr(value);\r\n            });\r\n            return result;\r\n        },\r\n        // http://docs.jquery.com/Plugins/Validation/rules\r\n        rules: function (command, argument) {\r\n            var element = this[0];\r\n\r\n            if (command) {\r\n                var settings = $.data(element.form, 'validator').settings;\r\n                var staticRules = settings.rules;\r\n                var existingRules = $.validator.staticRules(element);\r\n                switch (command) {\r\n                    case \"add\":\r\n                        $.extend(existingRules, $.validator.normalizeRule(argument));\r\n                        staticRules[element.name] = existingRules;\r\n                        if (argument.messages) {\r\n                            settings.messages[element.name] = $.extend(settings.messages[element.name], argument.messages);\r\n                        }\r\n                        break;\r\n                    case \"remove\":\r\n                        if (!argument) {\r\n                            delete staticRules[element.name];\r\n                            return existingRules;\r\n                        }\r\n                        var filtered = {};\r\n                        $.each(argument.split(/\\s/), function (index, method) {\r\n                            filtered[method] = existingRules[method];\r\n                            delete existingRules[method];\r\n                        });\r\n                        return filtered;\r\n                }\r\n            }\r\n\r\n            var data = $.validator.normalizeRules(\r\n                $.extend(\r\n                    {},\r\n                    $.validator.metadataRules(element),\r\n                    $.validator.classRules(element),\r\n                    $.validator.attributeRules(element),\r\n                    $.validator.staticRules(element)\r\n                ), element);\r\n\r\n            // make sure required is at front\r\n            if (data.required) {\r\n                var param = data.required;\r\n                delete data.required;\r\n                data = $.extend({required: param}, data);\r\n            }\r\n\r\n            return data;\r\n        }\r\n    });\r\n\r\n// Custom selectors\r\n    $.extend($.expr[\":\"], {\r\n        // http://docs.jquery.com/Plugins/Validation/blank\r\n        blank: function (a) {\r\n            return !$.trim(\"\" + a.value);\r\n        },\r\n        // http://docs.jquery.com/Plugins/Validation/filled\r\n        filled: function (a) {\r\n            return !!$.trim(\"\" + a.value);\r\n        },\r\n        // http://docs.jquery.com/Plugins/Validation/unchecked\r\n        unchecked: function (a) {\r\n            return !a.checked;\r\n        }\r\n    });\r\n\r\n// constructor for validator\r\n    $.validator = function (options, form) {\r\n        this.settings = $.extend(true, {}, $.validator.defaults, options);\r\n        this.currentForm = form;\r\n        this.init();\r\n    };\r\n\r\n    $.validator.format = function (source, params) {\r\n        if (arguments.length === 1) {\r\n            return function () {\r\n                var args = $.makeArray(arguments);\r\n                args.unshift(source);\r\n                return $.validator.format.apply(this, args);\r\n            };\r\n        }\r\n        if (arguments.length > 2 && params.constructor !== Array) {\r\n            params = $.makeArray(arguments).slice(1);\r\n        }\r\n        if (params.constructor !== Array) {\r\n            params = [ params ];\r\n        }\r\n        $.each(params, function (i, n) {\r\n            source = source.replace(new RegExp(\"\\\\{\" + i + \"\\\\}\", \"g\"), n);\r\n        });\r\n        return source;\r\n    };\r\n\r\n    $.extend($.validator, {\r\n\r\n        defaults: {\r\n            messages: {},\r\n            groups: {},\r\n            rules: {},\r\n            errorClass: \"error\",\r\n            validClass: \"valid\",\r\n            errorElement: \"label\",\r\n            focusInvalid: true,\r\n            errorContainer: $([]),\r\n            errorLabelContainer: $([]),\r\n            onsubmit: true,\r\n            ignore: \":hidden\",\r\n            ignoreTitle: false,\r\n            onfocusin: function (element, event) {\r\n                this.lastActive = element;\r\n\r\n                // hide error label and remove error class on focus if enabled\r\n                if (this.settings.focusCleanup && !this.blockFocusCleanup) {\r\n                    if (this.settings.unhighlight) {\r\n                        this.settings.unhighlight.call(this, element, this.settings.errorClass, this.settings.validClass);\r\n                    }\r\n                    this.addWrapper(this.errorsFor(element)).hide();\r\n                }\r\n            },\r\n            onfocusout: function (element, event) {\r\n                if (!this.checkable(element) && (element.name in this.submitted || !this.optional(element))) {\r\n                    this.element(element);\r\n                }\r\n            },\r\n            onkeyup: function (element, event) {\r\n                if (event.which == 9 && this.elementValue(element) === '') {\r\n                    return;\r\n                } else if (element.name in this.submitted || element === this.lastActive) {\r\n                    this.element(element);\r\n                }\r\n            },\r\n            onclick: function (element, event) {\r\n                // click on selects, radiobuttons and checkboxes\r\n                if (element.name in this.submitted) {\r\n                    this.element(element);\r\n                }\r\n                // or option elements, check parent select in that case\r\n                else if (element.parentNode.name in this.submitted) {\r\n                    this.element(element.parentNode);\r\n                }\r\n            },\r\n            highlight: function (element, errorClass, validClass) {\r\n                if (element.type === 'radio') {\r\n                    this.findByName(element.name).addClass(errorClass).removeClass(validClass);\r\n                } else {\r\n                    $(element).addClass(errorClass).removeClass(validClass);\r\n                }\r\n            },\r\n            unhighlight: function (element, errorClass, validClass) {\r\n                if (element.type === 'radio') {\r\n                    this.findByName(element.name).removeClass(errorClass).addClass(validClass);\r\n                } else {\r\n                    $(element).removeClass(errorClass).addClass(validClass);\r\n                }\r\n            }\r\n        },\r\n\r\n        // http://docs.jquery.com/Plugins/Validation/Validator/setDefaults\r\n        setDefaults: function (settings) {\r\n            $.extend($.validator.defaults, settings);\r\n        },\r\n\r\n        messages: {\r\n            required: \"This field is required.\",\r\n            remote: \"Please fix this field.\",\r\n            email: \"Please enter a valid email address.\",\r\n            url: \"Please enter a valid URL.\",\r\n            date: \"Please enter a valid date.\",\r\n            dateISO: \"Please enter a valid date (ISO).\",\r\n            number: \"Please enter a valid number.\",\r\n            digits: \"Please enter only digits.\",\r\n            creditcard: \"Please enter a valid credit card number.\",\r\n            equalTo: \"Please enter the same value again.\",\r\n            maxlength: $.validator.format(\"Please enter no more than {0} characters.\"),\r\n            minlength: $.validator.format(\"Please enter at least {0} characters.\"),\r\n            rangelength: $.validator.format(\"Please enter a value between {0} and {1} characters long.\"),\r\n            range: $.validator.format(\"Please enter a value between {0} and {1}.\"),\r\n            max: $.validator.format(\"Please enter a value less than or equal to {0}.\"),\r\n            min: $.validator.format(\"Please enter a value greater than or equal to {0}.\")\r\n        },\r\n\r\n        autoCreateRanges: false,\r\n\r\n        prototype: {\r\n\r\n            init: function () {\r\n                this.labelContainer = $(this.settings.errorLabelContainer);\r\n                this.errorContext = this.labelContainer.length && this.labelContainer || $(this.currentForm);\r\n                this.containers = $(this.settings.errorContainer).add(this.settings.errorLabelContainer);\r\n                this.submitted = {};\r\n                this.valueCache = {};\r\n                this.pendingRequest = 0;\r\n                this.pending = {};\r\n                this.invalid = {};\r\n                this.reset();\r\n\r\n                var groups = (this.groups = {});\r\n                $.each(this.settings.groups, function (key, value) {\r\n                    $.each(value.split(/\\s/), function (index, name) {\r\n                        groups[name] = key;\r\n                    });\r\n                });\r\n                var rules = this.settings.rules;\r\n                $.each(rules, function (key, value) {\r\n                    rules[key] = $.validator.normalizeRule(value);\r\n                });\r\n\r\n                function delegate(event) {\r\n                    var validator = $.data(this[0].form, \"validator\"),\r\n                        eventType = \"on\" + event.type.replace(/^validate/, \"\");\r\n                    if (validator.settings[eventType]) {\r\n                        validator.settings[eventType].call(validator, this[0], event);\r\n                    }\r\n                }\r\n\r\n                $(this.currentForm)\r\n                    .validateDelegate(\":text, [type='password'], [type='file'], select, textarea, \" +\r\n                    \"[type='number'], [type='search'], input.search, [type='tel'], [type='url'], \" +\r\n                    \"[type='email'], [type='datetime'], [type='date'], [type='month'], \" +\r\n                    \"[type='week'], [type='time'], [type='datetime-local'], \" +\r\n                    \"[type='range'], [type='color'] \",\r\n                    \"focusin focusout keyup\", delegate)\r\n                    .validateDelegate(\"[type='radio'], [type='checkbox'], select, option\", \"click\", delegate);\r\n\r\n                if (this.settings.invalidHandler) {\r\n                    $(this.currentForm).bind(\"invalid-form.validate\", this.settings.invalidHandler);\r\n                }\r\n            },\r\n\r\n            // http://docs.jquery.com/Plugins/Validation/Validator/form\r\n            form: function () {\r\n                this.checkForm();\r\n                $.extend(this.submitted, this.errorMap);\r\n                this.invalid = $.extend({}, this.errorMap);\r\n                if (!this.valid()) {\r\n                    $(this.currentForm).triggerHandler(\"invalid-form\", [this]);\r\n                }\r\n                this.showErrors();\r\n                return this.valid();\r\n            },\r\n\r\n            checkForm: function () {\r\n                this.prepareForm();\r\n                for (var i = 0, elements = (this.currentElements = this.elements()); elements[i]; i++) {\r\n                    this.check(elements[i]);\r\n                }\r\n                return this.valid();\r\n            },\r\n\r\n            // http://docs.jquery.com/Plugins/Validation/Validator/element\r\n            element: function (element) {\r\n                element = this.validationTargetFor(this.clean(element));\r\n                this.lastElement = element;\r\n                this.prepareElement(element);\r\n                this.currentElements = $(element);\r\n                var result = this.check(element) !== false;\r\n                if (result) {\r\n                    delete this.invalid[element.name];\r\n                } else {\r\n                    this.invalid[element.name] = true;\r\n                }\r\n                if (!this.numberOfInvalids()) {\r\n                    // Hide error containers on last error\r\n                    this.toHide = this.toHide.add(this.containers);\r\n                }\r\n                this.showErrors();\r\n                return result;\r\n            },\r\n\r\n            // http://docs.jquery.com/Plugins/Validation/Validator/showErrors\r\n            showErrors: function (errors) {\r\n                if (errors) {\r\n                    // add items to error list and map\r\n                    $.extend(this.errorMap, errors);\r\n                    this.errorList = [];\r\n                    for (var name in errors) {\r\n                        this.errorList.push({\r\n                            message: errors[name],\r\n                            element: this.findByName(name)[0]\r\n                        });\r\n                    }\r\n                    // remove items from success list\r\n                    this.successList = $.grep(this.successList, function (element) {\r\n                        return !(element.name in errors);\r\n                    });\r\n                }\r\n                if (this.settings.showErrors) {\r\n                    this.settings.showErrors.call(this, this.errorMap, this.errorList);\r\n                } else {\r\n                    this.defaultShowErrors();\r\n                }\r\n            },\r\n\r\n            // http://docs.jquery.com/Plugins/Validation/Validator/resetForm\r\n            resetForm: function () {\r\n                if ($.fn.resetForm) {\r\n                    $(this.currentForm).resetForm();\r\n                }\r\n                this.submitted = {};\r\n                this.lastElement = null;\r\n                this.prepareForm();\r\n                this.hideErrors();\r\n                this.elements().removeClass(this.settings.errorClass).removeData(\"previousValue\");\r\n            },\r\n\r\n            numberOfInvalids: function () {\r\n                return this.objectLength(this.invalid);\r\n            },\r\n\r\n            objectLength: function (obj) {\r\n                var count = 0;\r\n                for (var i in obj) {\r\n                    count++;\r\n                }\r\n                return count;\r\n            },\r\n\r\n            hideErrors: function () {\r\n                this.addWrapper(this.toHide).hide();\r\n            },\r\n\r\n            valid: function () {\r\n                return this.size() === 0;\r\n            },\r\n\r\n            size: function () {\r\n                return this.errorList.length;\r\n            },\r\n\r\n            focusInvalid: function () {\r\n                if (this.settings.focusInvalid) {\r\n                    try {\r\n                        $(this.findLastActive() || this.errorList.length && this.errorList[0].element || [])\r\n                            .filter(\":visible\")\r\n                            .focus()\r\n                            // manually trigger focusin event; without it, focusin handler isn't called, findLastActive won't have anything to find\r\n                            .trigger(\"focusin\");\r\n                    } catch (e) {\r\n                        // ignore IE throwing errors when focusing hidden elements\r\n                    }\r\n                }\r\n            },\r\n\r\n            findLastActive: function () {\r\n                var lastActive = this.lastActive;\r\n                return lastActive && $.grep(this.errorList,function (n) {\r\n                    return n.element.name === lastActive.name;\r\n                }).length === 1 && lastActive;\r\n            },\r\n\r\n            elements: function () {\r\n                var validator = this,\r\n                    rulesCache = {};\r\n\r\n                // select all valid inputs inside the form (no submit or reset buttons)\r\n                return $(this.currentForm)\r\n                    .find(\"input, select, textarea\")\r\n                    .not(\":submit, :reset, :image, [disabled]\")\r\n                    .not(this.settings.ignore)\r\n                    .filter(function () {\r\n                        if (!this.name && validator.settings.debug && window.console) {\r\n                            console.error(\"%o has no name assigned\", this);\r\n                        }\r\n\r\n                        // select only the first element for each name, and only those with rules specified\r\n                        if (this.name in rulesCache || !validator.objectLength($(this).rules())) {\r\n                            return false;\r\n                        }\r\n\r\n                        rulesCache[this.name] = true;\r\n                        return true;\r\n                    });\r\n            },\r\n\r\n            clean: function (selector) {\r\n                return $(selector)[0];\r\n            },\r\n\r\n            errors: function () {\r\n                var errorClass = this.settings.errorClass.replace(' ', '.');\r\n                return $(this.settings.errorElement + \".\" + errorClass, this.errorContext);\r\n            },\r\n\r\n            reset: function () {\r\n                this.successList = [];\r\n                this.errorList = [];\r\n                this.errorMap = {};\r\n                this.toShow = $([]);\r\n                this.toHide = $([]);\r\n                this.currentElements = $([]);\r\n            },\r\n\r\n            prepareForm: function () {\r\n                this.reset();\r\n                this.toHide = this.errors().add(this.containers);\r\n            },\r\n\r\n            prepareElement: function (element) {\r\n                this.reset();\r\n                this.toHide = this.errorsFor(element);\r\n            },\r\n\r\n            elementValue: function (element) {\r\n                var type = $(element).attr('type'),\r\n                    val = $(element).val();\r\n\r\n                if (type === 'radio' || type === 'checkbox') {\r\n                    return $('input[name=\"' + $(element).attr('name') + '\"]:checked').val();\r\n                }\r\n\r\n                if (typeof val === 'string') {\r\n                    return val.replace(/\\r/g, \"\");\r\n                }\r\n                return val;\r\n            },\r\n\r\n            check: function (element) {\r\n                element = this.validationTargetFor(this.clean(element));\r\n\r\n                var rules = $(element).rules();\r\n                var dependencyMismatch = false;\r\n                var val = this.elementValue(element);\r\n                var result;\r\n\r\n                for (var method in rules) {\r\n                    var rule = { method: method, parameters: rules[method] };\r\n                    try {\r\n\r\n                        result = $.validator.methods[method].call(this, val, element, rule.parameters);\r\n\r\n                        // if a method indicates that the field is optional and therefore valid,\r\n                        // don't mark it as valid when there are no other rules\r\n                        if (result === \"dependency-mismatch\") {\r\n                            dependencyMismatch = true;\r\n                            continue;\r\n                        }\r\n                        dependencyMismatch = false;\r\n\r\n                        if (result === \"pending\") {\r\n                            this.toHide = this.toHide.not(this.errorsFor(element));\r\n                            return;\r\n                        }\r\n\r\n                        if (!result) {\r\n                            this.formatAndAdd(element, rule);\r\n                            return false;\r\n                        }\r\n                    } catch (e) {\r\n                        if (this.settings.debug && window.console) {\r\n                            console.log(\"exception occurred when checking element \" + element.id + \", check the '\" + rule.method + \"' method\", e);\r\n                        }\r\n                        throw e;\r\n                    }\r\n                }\r\n                if (dependencyMismatch) {\r\n                    return;\r\n                }\r\n                if (this.objectLength(rules)) {\r\n                    this.successList.push(element);\r\n                }\r\n                return true;\r\n            },\r\n\r\n            // return the custom message for the given element and validation method\r\n            // specified in the element's \"messages\" metadata\r\n            customMetaMessage: function (element, method) {\r\n                if (!$.metadata) {\r\n                    return;\r\n                }\r\n                var meta = this.settings.meta ? $(element).metadata()[this.settings.meta] : $(element).metadata();\r\n                return meta && meta.messages && meta.messages[method];\r\n            },\r\n\r\n            // return the custom message for the given element and validation method\r\n            // specified in the element's HTML5 data attribute\r\n            customDataMessage: function (element, method) {\r\n                return $(element).data('msg-' + method.toLowerCase()) || (element.attributes && $(element).attr('data-msg-' + method.toLowerCase()));\r\n            },\r\n\r\n            // return the custom message for the given element name and validation method\r\n            customMessage: function (name, method) {\r\n                var m = this.settings.messages[name];\r\n                return m && (m.constructor === String ? m : m[method]);\r\n            },\r\n\r\n            // return the first defined argument, allowing empty strings\r\n            findDefined: function () {\r\n                for (var i = 0; i < arguments.length; i++) {\r\n                    if (arguments[i] !== undefined) {\r\n                        return arguments[i];\r\n                    }\r\n                }\r\n                return undefined;\r\n            },\r\n\r\n            defaultMessage: function (element, method) {\r\n                var noMessage = $.mage.__(\"Warning: No message defined for %s\");\r\n                return this.findDefined(\r\n                    this.customMessage(element.name, method),\r\n                    this.customDataMessage(element, method),\r\n                    this.customMetaMessage(element, method),\r\n                    // title is never undefined, so handle empty string as undefined\r\n                    !this.settings.ignoreTitle && element.title || undefined,\r\n                    $.validator.messages[method],\r\n                    \"<strong>\" + noMessage.replace('%s', element.name) + \"</strong>\"\r\n                );\r\n            },\r\n\r\n            formatAndAdd: function (element, rule) {\r\n                var message = this.defaultMessage(element, rule.method),\r\n                    theregex = /\\$?\\{(\\d+)\\}/g;\r\n                if (typeof message === \"function\") {\r\n                    message = message.call(this, rule.parameters, element);\r\n                } else if (theregex.test(message)) {\r\n                    message = $.validator.format(message.replace(theregex, '{$1}'), rule.parameters);\r\n                }\r\n                this.errorList.push({\r\n                    message: message,\r\n                    element: element\r\n                });\r\n\r\n                this.errorMap[element.name] = message;\r\n                this.submitted[element.name] = message;\r\n            },\r\n\r\n            addWrapper: function (toToggle) {\r\n                if (this.settings.wrapper) {\r\n                    toToggle = toToggle.add(toToggle.parent(this.settings.wrapper));\r\n                }\r\n                return toToggle;\r\n            },\r\n\r\n            defaultShowErrors: function () {\r\n                var i, elements;\r\n                for (i = 0; this.errorList[i]; i++) {\r\n                    var error = this.errorList[i];\r\n                    if (this.settings.highlight) {\r\n                        this.settings.highlight.call(this, error.element, this.settings.errorClass, this.settings.validClass);\r\n                    }\r\n                    this.showLabel(error.element, error.message);\r\n                }\r\n                if (this.errorList.length) {\r\n                    this.toShow = this.toShow.add(this.containers);\r\n                }\r\n                if (this.settings.success) {\r\n                    for (i = 0; this.successList[i]; i++) {\r\n                        this.showLabel(this.successList[i]);\r\n                    }\r\n                }\r\n                if (this.settings.unhighlight) {\r\n                    for (i = 0, elements = this.validElements(); elements[i]; i++) {\r\n                        this.settings.unhighlight.call(this, elements[i], this.settings.errorClass, this.settings.validClass);\r\n                    }\r\n                }\r\n                this.toHide = this.toHide.not(this.toShow);\r\n                this.hideErrors();\r\n                this.addWrapper(this.toShow).show();\r\n            },\r\n\r\n            validElements: function () {\r\n                return this.currentElements.not(this.invalidElements());\r\n            },\r\n\r\n            invalidElements: function () {\r\n                return $(this.errorList).map(function () {\r\n                    return this.element;\r\n                });\r\n            },\r\n\r\n            showLabel: function (element, message) {\r\n                var label = this.errorsFor(element);\r\n                if (label.length) {\r\n                    // refresh error/success class\r\n                    label.removeClass(this.settings.validClass).addClass(this.settings.errorClass);\r\n\r\n                    // check if we have a generated label, replace the message then\r\n                    if (label.attr(\"generated\")) {\r\n                        label.hide().html(message);\r\n                    }\r\n                } else {\r\n                    // create label\r\n                    label = $(\"<\" + this.settings.errorElement + \"/>\")\r\n                        .attr({\"for\": this.idOrName(element), generated: true})\r\n                        .addClass(this.settings.errorClass)\r\n                        .html(message || \"\");\r\n                    if (this.settings.wrapper) {\r\n                        // make sure the element is visible, even in IE\r\n                        // actually showing the wrapped element is handled elsewhere\r\n                        label = label.hide().show().wrap(\"<\" + this.settings.wrapper + \"/>\").parent();\r\n                    }\r\n                    if (!this.labelContainer.append(label).length) {\r\n                        if (this.settings.errorPlacement) {\r\n                            this.settings.errorPlacement(label, $(element));\r\n                        } else {\r\n                            label.insertAfter(element);\r\n                        }\r\n                    }\r\n                }\r\n                if (!message && this.settings.success) {\r\n                    label.text(\"\");\r\n                    if (typeof this.settings.success === \"string\") {\r\n                        label.addClass(this.settings.success);\r\n                    } else {\r\n                        this.settings.success(label, element);\r\n                    }\r\n                }\r\n                this.toShow = this.toShow.add(label);\r\n            },\r\n\r\n            errorsFor: function (element) {\r\n                var name = this.idOrName(element);\r\n                return this.errors().filter(function () {\r\n                    return $(this).attr('for') === name;\r\n                });\r\n            },\r\n\r\n            idOrName: function (element) {\r\n                return this.groups[element.name] || (this.checkable(element) ? element.name : element.id || element.name);\r\n            },\r\n\r\n            validationTargetFor: function (element) {\r\n                // if radio/checkbox, validate first element in group instead\r\n                if (this.checkable(element)) {\r\n                    element = this.findByName(element.name).not(this.settings.ignore)[0];\r\n                }\r\n                return element;\r\n            },\r\n\r\n            checkable: function (element) {\r\n                return (/radio|checkbox/i).test(element.type);\r\n            },\r\n\r\n            findByName: function (name) {\r\n                return $(this.currentForm).find('[name=\"' + name + '\"]');\r\n            },\r\n\r\n            getLength: function (value, element) {\r\n                switch (element.nodeName.toLowerCase()) {\r\n                    case 'select':\r\n                        return $(\"option:selected\", element).length;\r\n                    case 'input':\r\n                        if (this.checkable(element)) {\r\n                            return this.findByName(element.name).filter(':checked').length;\r\n                        }\r\n                }\r\n                return value.length;\r\n            },\r\n\r\n            depend: function (param, element) {\r\n                return this.dependTypes[typeof param] ? this.dependTypes[typeof param](param, element) : true;\r\n            },\r\n\r\n            dependTypes: {\r\n                \"boolean\": function (param, element) {\r\n                    return param;\r\n                },\r\n                \"string\": function (param, element) {\r\n                    return !!$(param, element.form).length;\r\n                },\r\n                \"function\": function (param, element) {\r\n                    return param(element);\r\n                }\r\n            },\r\n\r\n            optional: function (element) {\r\n                var val = this.elementValue(element);\r\n                return !$.validator.methods.required.call(this, val, element) && \"dependency-mismatch\";\r\n            },\r\n\r\n            startRequest: function (element) {\r\n                if (!this.pending[element.name]) {\r\n                    this.pendingRequest++;\r\n                    this.pending[element.name] = true;\r\n                }\r\n            },\r\n\r\n            stopRequest: function (element, valid) {\r\n                this.pendingRequest--;\r\n                // sometimes synchronization fails, make sure pendingRequest is never < 0\r\n                if (this.pendingRequest < 0) {\r\n                    this.pendingRequest = 0;\r\n                }\r\n                delete this.pending[element.name];\r\n                if (valid && this.pendingRequest === 0 && this.formSubmitted && this.form()) {\r\n                    $(this.currentForm).submit();\r\n                    this.formSubmitted = false;\r\n                } else if (!valid && this.pendingRequest === 0 && this.formSubmitted) {\r\n                    $(this.currentForm).triggerHandler(\"invalid-form\", [this]);\r\n                    this.formSubmitted = false;\r\n                }\r\n            },\r\n\r\n            previousValue: function (element) {\r\n                return $.data(element, \"previousValue\") || $.data(element, \"previousValue\", {\r\n                    old: null,\r\n                    valid: true,\r\n                    message: this.defaultMessage(element, \"remote\")\r\n                });\r\n            }\r\n\r\n        },\r\n\r\n        classRuleSettings: {\r\n            required: {required: true},\r\n            email: {email: true},\r\n            url: {url: true},\r\n            date: {date: true},\r\n            dateISO: {dateISO: true},\r\n            number: {number: true},\r\n            digits: {digits: true},\r\n            creditcard: {creditcard: true}\r\n        },\r\n\r\n        addClassRules: function (className, rules) {\r\n            if (className.constructor === String) {\r\n                this.classRuleSettings[className] = rules;\r\n            } else {\r\n                $.extend(this.classRuleSettings, className);\r\n            }\r\n        },\r\n\r\n        classRules: function (element) {\r\n            var rules = {};\r\n            var classes = $(element).attr('class');\r\n            if (classes) {\r\n                $.each(classes.split(' '), function () {\r\n                    if (this in $.validator.classRuleSettings) {\r\n                        $.extend(rules, $.validator.classRuleSettings[this]);\r\n                    }\r\n                });\r\n            }\r\n            return rules;\r\n        },\r\n\r\n        attributeRules: function (element) {\r\n            var rules = {};\r\n            var $element = $(element);\r\n\r\n            for (var method in $.validator.methods) {\r\n                var value;\r\n\r\n                // support for <input required> in both html5 and older browsers\r\n                if (method === 'required') {\r\n                    value = $element.get(0).getAttribute(method);\r\n                    // Some browsers return an empty string for the required attribute\r\n                    // and non-HTML5 browsers might have required=\"\" markup\r\n                    if (value === \"\") {\r\n                        value = true;\r\n                    }\r\n                    // force non-HTML5 browsers to return bool\r\n                    value = !!value;\r\n                } else {\r\n                    value = $element.attr(method);\r\n                }\r\n\r\n                if (value) {\r\n                    rules[method] = value;\r\n                } else if ($element[0].getAttribute(\"type\") === method) {\r\n                    rules[method] = true;\r\n                }\r\n            }\r\n\r\n            // maxlength may be returned as -1, 2147483647 (IE) and 524288 (safari) for text inputs\r\n            if (rules.maxlength && /-1|2147483647|524288/.test(rules.maxlength)) {\r\n                delete rules.maxlength;\r\n            }\r\n\r\n            return rules;\r\n        },\r\n\r\n        metadataRules: function (element) {\r\n            if (!$.metadata) {\r\n                return {};\r\n            }\r\n\r\n            var meta = $.data(element.form, 'validator').settings.meta;\r\n            return meta ?\r\n                $(element).metadata()[meta] :\r\n                $(element).metadata();\r\n        },\r\n\r\n        staticRules: function (element) {\r\n            var rules = {};\r\n            var validator = $.data(element.form, 'validator');\r\n            if (validator.settings.rules) {\r\n                rules = $.validator.normalizeRule(validator.settings.rules[element.name]) || {};\r\n            }\r\n            return rules;\r\n        },\r\n\r\n        normalizeRules: function (rules, element) {\r\n            // handle dependency check\r\n            $.each(rules, function (prop, val) {\r\n                // ignore rule when param is explicitly false, eg. required:false\r\n                if (val === false) {\r\n                    delete rules[prop];\r\n                    return;\r\n                }\r\n                if (val.param || val.depends) {\r\n                    var keepRule = true;\r\n                    switch (typeof val.depends) {\r\n                        case \"string\":\r\n                            keepRule = !!$(val.depends, element.form).length;\r\n                            break;\r\n                        case \"function\":\r\n                            keepRule = val.depends.call(element, element);\r\n                            break;\r\n                    }\r\n                    if (keepRule) {\r\n                        rules[prop] = val.param !== undefined ? val.param : true;\r\n                    } else {\r\n                        delete rules[prop];\r\n                    }\r\n                }\r\n            });\r\n\r\n            // evaluate parameters\r\n            $.each(rules, function (rule, parameter) {\r\n                rules[rule] = $.isFunction(parameter) ? parameter(element) : parameter;\r\n            });\r\n\r\n            // clean number parameters\r\n            $.each(['minlength', 'maxlength', 'min', 'max'], function () {\r\n                if (rules[this]) {\r\n                    rules[this] = Number(rules[this]);\r\n                }\r\n            });\r\n            $.each(['rangelength', 'range'], function () {\r\n                if (rules[this]) {\r\n                    rules[this] = [Number(rules[this][0]), Number(rules[this][1])];\r\n                }\r\n            });\r\n\r\n            if ($.validator.autoCreateRanges) {\r\n                // auto-create ranges\r\n                if (rules.min && rules.max) {\r\n                    rules.range = [rules.min, rules.max];\r\n                    delete rules.min;\r\n                    delete rules.max;\r\n                }\r\n                if (rules.minlength && rules.maxlength) {\r\n                    rules.rangelength = [rules.minlength, rules.maxlength];\r\n                    delete rules.minlength;\r\n                    delete rules.maxlength;\r\n                }\r\n            }\r\n\r\n            // To support custom messages in metadata ignore rule methods titled \"messages\"\r\n            if (rules.messages) {\r\n                delete rules.messages;\r\n            }\r\n\r\n            return rules;\r\n        },\r\n\r\n        // Converts a simple string to a {string: true} rule, e.g., \"required\" to {required:true}\r\n        normalizeRule: function (data) {\r\n            if (typeof data === \"string\") {\r\n                var transformed = {};\r\n                $.each(data.split(/\\s/), function () {\r\n                    transformed[this] = true;\r\n                });\r\n                data = transformed;\r\n            }\r\n            return data;\r\n        },\r\n\r\n        // http://docs.jquery.com/Plugins/Validation/Validator/addMethod\r\n        addMethod: function (name, method, message) {\r\n            $.validator.methods[name] = method;\r\n            $.validator.messages[name] = message !== undefined ? message : $.validator.messages[name];\r\n            if (method.length < 3) {\r\n                $.validator.addClassRules(name, $.validator.normalizeRule(name));\r\n            }\r\n        },\r\n\r\n        methods: {\r\n\r\n            // http://docs.jquery.com/Plugins/Validation/Methods/required\r\n            required: function (value, element, param) {\r\n                // check if dependency is met\r\n                if (!this.depend(param, element)) {\r\n                    return \"dependency-mismatch\";\r\n                }\r\n                if (element.nodeName.toLowerCase() === \"select\") {\r\n                    // could be an array for select-multiple or a string, both are fine this way\r\n                    var val = $(element).val();\r\n                    return val && val.length > 0;\r\n                }\r\n                if (this.checkable(element)) {\r\n                    return this.getLength(value, element) > 0;\r\n                }\r\n                return $.trim(value).length > 0;\r\n            },\r\n\r\n            // http://docs.jquery.com/Plugins/Validation/Methods/remote\r\n            remote: function (value, element, param) {\r\n                if (this.optional(element)) {\r\n                    return \"dependency-mismatch\";\r\n                }\r\n\r\n                var previous = this.previousValue(element);\r\n                if (!this.settings.messages[element.name]) {\r\n                    this.settings.messages[element.name] = {};\r\n                }\r\n                previous.originalMessage = this.settings.messages[element.name].remote;\r\n                this.settings.messages[element.name].remote = previous.message;\r\n\r\n                param = typeof param === \"string\" && {url: param} || param;\r\n\r\n                if (this.pending[element.name]) {\r\n                    return \"pending\";\r\n                }\r\n                if (previous.old === value) {\r\n                    return previous.valid;\r\n                }\r\n\r\n                previous.old = value;\r\n                var validator = this;\r\n                this.startRequest(element);\r\n                var data = {};\r\n                data[element.name] = value;\r\n                $.ajax($.extend(true, {\r\n                    url: param,\r\n                    mode: \"abort\",\r\n                    port: \"validate\" + element.name,\r\n                    dataType: \"json\",\r\n                    data: data,\r\n                    success: function (response) {\r\n                        validator.settings.messages[element.name].remote = previous.originalMessage;\r\n                        var valid = response === true || response === \"true\";\r\n                        if (valid) {\r\n                            var submitted = validator.formSubmitted;\r\n                            validator.prepareElement(element);\r\n                            validator.formSubmitted = submitted;\r\n                            validator.successList.push(element);\r\n                            delete validator.invalid[element.name];\r\n                            validator.showErrors();\r\n                        } else {\r\n                            var errors = {};\r\n                            var message = response || validator.defaultMessage(element, \"remote\");\r\n                            errors[element.name] = previous.message = $.isFunction(message) ? message(value) : message;\r\n                            validator.invalid[element.name] = true;\r\n                            validator.showErrors(errors);\r\n                        }\r\n                        previous.valid = valid;\r\n                        validator.stopRequest(element, valid);\r\n                    }\r\n                }, param));\r\n                return \"pending\";\r\n            },\r\n\r\n            // http://docs.jquery.com/Plugins/Validation/Methods/minlength\r\n            minlength: function (value, element, param) {\r\n                var length = $.isArray(value) ? value.length : this.getLength($.trim(value), element);\r\n                return this.optional(element) || length >= param;\r\n            },\r\n\r\n            // http://docs.jquery.com/Plugins/Validation/Methods/maxlength\r\n            maxlength: function (value, element, param) {\r\n                var length = $.isArray(value) ? value.length : this.getLength($.trim(value), element);\r\n                return this.optional(element) || length <= param;\r\n            },\r\n\r\n            // http://docs.jquery.com/Plugins/Validation/Methods/rangelength\r\n            rangelength: function (value, element, param) {\r\n                var length = $.isArray(value) ? value.length : this.getLength($.trim(value), element);\r\n                return this.optional(element) || ( length >= param[0] && length <= param[1] );\r\n            },\r\n\r\n            // http://docs.jquery.com/Plugins/Validation/Methods/min\r\n            min: function (value, element, param) {\r\n                return this.optional(element) || value >= param;\r\n            },\r\n\r\n            // http://docs.jquery.com/Plugins/Validation/Methods/max\r\n            max: function (value, element, param) {\r\n                return this.optional(element) || value <= param;\r\n            },\r\n\r\n            // http://docs.jquery.com/Plugins/Validation/Methods/range\r\n            range: function (value, element, param) {\r\n                return this.optional(element) || ( value >= param[0] && value <= param[1] );\r\n            },\r\n\r\n            // http://docs.jquery.com/Plugins/Validation/Methods/email\r\n            email: function (value, element) {\r\n                // contributed by Scott Gonzalez: http://projects.scottsplayground.com/email_address_validation/\r\n                return this.optional(element) || /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i.test(value);\r\n            },\r\n\r\n            // http://docs.jquery.com/Plugins/Validation/Methods/url\r\n            url: function (value, element) {\r\n                // contributed by Scott Gonzalez: http://projects.scottsplayground.com/iri/\r\n                return this.optional(element) || /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i.test(value);\r\n            },\r\n\r\n            // http://docs.jquery.com/Plugins/Validation/Methods/date\r\n            date: function (value, element) {\r\n                return this.optional(element) || !/Invalid|NaN/.test(new Date(value));\r\n            },\r\n\r\n            // http://docs.jquery.com/Plugins/Validation/Methods/dateISO\r\n            dateISO: function (value, element) {\r\n                return this.optional(element) || /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/.test(value);\r\n            },\r\n\r\n            // http://docs.jquery.com/Plugins/Validation/Methods/number\r\n            number: function (value, element) {\r\n                return this.optional(element) || /^-?(?:\\d+|\\d{1,3}(?:,\\d{3})+)?(?:\\.\\d+)?$/.test(value);\r\n            },\r\n\r\n            // http://docs.jquery.com/Plugins/Validation/Methods/digits\r\n            digits: function (value, element) {\r\n                return this.optional(element) || /^\\d+$/.test(value);\r\n            },\r\n\r\n            // http://docs.jquery.com/Plugins/Validation/Methods/creditcard\r\n            // based on http://en.wikipedia.org/wiki/Luhn\r\n            creditcard: function (value, element) {\r\n                if (this.optional(element)) {\r\n                    return \"dependency-mismatch\";\r\n                }\r\n                // accept only spaces, digits and dashes\r\n                if (/[^0-9 \\-]+/.test(value)) {\r\n                    return false;\r\n                }\r\n                var nCheck = 0,\r\n                    nDigit = 0,\r\n                    bEven = false;\r\n\r\n                value = value.replace(/\\D/g, \"\");\r\n\r\n                for (var n = value.length - 1; n >= 0; n--) {\r\n                    var cDigit = value.charAt(n);\r\n                    nDigit = parseInt(cDigit, 10);\r\n                    if (bEven) {\r\n                        if ((nDigit *= 2) > 9) {\r\n                            nDigit -= 9;\r\n                        }\r\n                    }\r\n                    nCheck += nDigit;\r\n                    bEven = !bEven;\r\n                }\r\n\r\n                return (nCheck % 10) === 0;\r\n            },\r\n\r\n            // http://docs.jquery.com/Plugins/Validation/Methods/equalTo\r\n            equalTo: function (value, element, param) {\r\n                // bind to the blur event of the target in order to revalidate whenever the target field is updated\r\n                // TODO find a way to bind the event just once, avoiding the unbind-rebind overhead\r\n                var target = $(param);\r\n                if (this.settings.onfocusout) {\r\n                    target.unbind(\".validate-equalTo\").bind(\"blur.validate-equalTo\", function () {\r\n                        $(element).valid();\r\n                    });\r\n                }\r\n                return value === target.val();\r\n            }\r\n\r\n        }\r\n\r\n    });\r\n\r\n// deprecated, use $.validator.format instead\r\n    $.format = $.validator.format;\r\n\r\n}(jQuery));\r\n\r\n// ajax mode: abort\r\n// usage: $.ajax({ mode: \"abort\"[, port: \"uniqueport\"]});\r\n// if mode:\"abort\" is used, the previous request on that port (port can be undefined) is aborted via XMLHttpRequest.abort()\r\n(function ($) {\r\n    var pendingRequests = {};\r\n    // Use a prefilter if available (1.5+)\r\n    if ($.ajaxPrefilter) {\r\n        $.ajaxPrefilter(function (settings, _, xhr) {\r\n            var port = settings.port;\r\n            if (settings.mode === \"abort\") {\r\n                if (pendingRequests[port]) {\r\n                    pendingRequests[port].abort();\r\n                }\r\n                pendingRequests[port] = xhr;\r\n            }\r\n        });\r\n    } else {\r\n        // Proxy ajax\r\n        var ajax = $.ajax;\r\n        $.ajax = function (settings) {\r\n            var mode = ( \"mode\" in settings ? settings : $.ajaxSettings ).mode,\r\n                port = ( \"port\" in settings ? settings : $.ajaxSettings ).port;\r\n            if (mode === \"abort\") {\r\n                if (pendingRequests[port]) {\r\n                    pendingRequests[port].abort();\r\n                }\r\n                return (pendingRequests[port] = ajax.apply(this, arguments));\r\n            }\r\n            return ajax.apply(this, arguments);\r\n        };\r\n    }\r\n}(jQuery));\r\n\r\n// provides cross-browser focusin and focusout events\r\n// IE has native support, in other browsers, use event caputuring (neither bubbles)\r\n\r\n// provides delegate(type: String, delegate: Selector, handler: Callback) plugin for easier event delegation\r\n// handler is only called when $(event.target).is(delegate), in the scope of the jquery-object for event.target\r\n(function ($) {\r\n    // only implement if not provided by jQuery core (since 1.4)\r\n    // TODO verify if jQuery 1.4's implementation is compatible with older jQuery special-event APIs\r\n    if (!jQuery.event.special.focusin && !jQuery.event.special.focusout && document.addEventListener) {\r\n        $.each({\r\n            focus: 'focusin',\r\n            blur: 'focusout'\r\n        }, function (original, fix) {\r\n            $.event.special[fix] = {\r\n                setup: function () {\r\n                    this.addEventListener(original, handler, true);\r\n                },\r\n                teardown: function () {\r\n                    this.removeEventListener(original, handler, true);\r\n                },\r\n                handler: function (e) {\r\n                    var args = arguments;\r\n                    args[0] = $.event.fix(e);\r\n                    args[0].type = fix;\r\n                    return $.event.handle.apply(this, args);\r\n                }\r\n            };\r\n            function handler(e) {\r\n                e = $.event.fix(e);\r\n                e.type = fix;\r\n                return $.event.handle.call(this, e);\r\n            }\r\n        });\r\n    }\r\n    $.extend($.fn, {\r\n        validateDelegate: function (delegate, type, handler) {\r\n            return this.bind(type, function (event) {\r\n                var target = $(event.target);\r\n                if (target.is(delegate)) {\r\n                    return handler.apply(target, arguments);\r\n                }\r\n            });\r\n        }\r\n    });\r\n}(jQuery));\r\n\r\n}));","knockoutjs/knockout-fast-foreach.js":"/*!\r\n  Knockout Fast Foreach v0.4.1 (2015-07-17T14:06:15.974Z)\r\n  By: Brian M Hunt (C) 2015\r\n  License: MIT\r\n\r\n  Adds `fastForEach` to `ko.bindingHandlers`.\r\n*/\r\n(function (root, factory) {\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(['knockout'], factory);\r\n  } else if (typeof exports === 'object') {\r\n    module.exports = factory(require('knockout'));\r\n  } else {\r\n    root.KnockoutFastForeach = factory(root.ko);\r\n  }\r\n}(this, function (ko) {\r\n  \"use strict\";\r\n// index.js\r\n// --------\r\n// Fast For Each\r\n//\r\n// Employing sound techniques to make a faster Knockout foreach binding.\r\n// --------\r\n\r\n//      Utilities\r\n\r\n// from https://github.com/jonschlinkert/is-plain-object\r\nfunction isPlainObject(o) {\r\n  return !!o && typeof o === 'object' && o.constructor === Object;\r\n}\r\n\r\n// From knockout/src/virtualElements.js\r\nvar commentNodesHaveTextProperty = document && document.createComment(\"test\").text === \"<!--test-->\";\r\nvar startCommentRegex = commentNodesHaveTextProperty ? /^<!--\\s*ko(?:\\s+([\\s\\S]+))?\\s*-->$/ : /^\\s*ko(?:\\s+([\\s\\S]+))?\\s*$/;\r\nvar supportsDocumentFragment = document && typeof document.createDocumentFragment === \"function\";\r\nfunction isVirtualNode(node) {\r\n  return (node.nodeType === 8) && startCommentRegex.test(commentNodesHaveTextProperty ? node.text : node.nodeValue);\r\n}\r\n\r\n\r\n// Get a copy of the (possibly virtual) child nodes of the given element,\r\n// put them into a container, then empty the given node.\r\nfunction makeTemplateNode(sourceNode) {\r\n  var container = document.createElement(\"div\");\r\n  var parentNode;\r\n  if (sourceNode.content) {\r\n    // For e.g. <template> tags\r\n    parentNode = sourceNode.content;\r\n  } else if (sourceNode.tagName === 'SCRIPT') {\r\n    parentNode = document.createElement(\"div\");\r\n    parentNode.innerHTML = sourceNode.text;\r\n  } else {\r\n    // Anything else e.g. <div>\r\n    parentNode = sourceNode;\r\n  }\r\n  ko.utils.arrayForEach(ko.virtualElements.childNodes(parentNode), function (child) {\r\n    // FIXME - This cloneNode could be expensive; we may prefer to iterate over the\r\n    // parentNode children in reverse (so as not to foul the indexes as childNodes are\r\n    // removed from parentNode when inserted into the container)\r\n    if (child) {\r\n      container.insertBefore(child.cloneNode(true), null);\r\n    }\r\n  });\r\n  return container;\r\n}\r\n\r\nfunction insertAllAfter(containerNode, nodeOrNodeArrayToInsert, insertAfterNode) {\r\n  var frag, len, i;\r\n  // poor man's node and array check, should be enough for this\r\n  if (typeof nodeOrNodeArrayToInsert.nodeType !== \"undefined\" && typeof nodeOrNodeArrayToInsert.length === \"undefined\") {\r\n    throw new Error(\"Expected a single node or a node array\");\r\n  }\r\n\r\n  if (typeof nodeOrNodeArrayToInsert.nodeType !== \"undefined\") {\r\n    ko.virtualElements.insertAfter(containerNode, nodeOrNodeArrayToInsert, insertAfterNode);\r\n    return;\r\n  }\r\n\r\n  if (nodeOrNodeArrayToInsert.length === 1) {\r\n    ko.virtualElements.insertAfter(containerNode, nodeOrNodeArrayToInsert[0], insertAfterNode);\r\n    return;\r\n  }\r\n\r\n  if (supportsDocumentFragment) {\r\n    frag = document.createDocumentFragment();\r\n\r\n    for (i = 0, len = nodeOrNodeArrayToInsert.length; i !== len; ++i) {\r\n      frag.appendChild(nodeOrNodeArrayToInsert[i]);\r\n    }\r\n    ko.virtualElements.insertAfter(containerNode, frag, insertAfterNode);\r\n  } else {\r\n    // Nodes are inserted in reverse order - pushed down immediately after\r\n    // the last node for the previous item or as the first node of element.\r\n    for (i = nodeOrNodeArrayToInsert.length - 1; i >= 0; --i) {\r\n      var child = nodeOrNodeArrayToInsert[i];\r\n      if (!child) {\r\n        return;\r\n      }\r\n      ko.virtualElements.insertAfter(containerNode, child, insertAfterNode);\r\n    }\r\n  }\r\n}\r\n\r\n// Mimic a KO change item 'add'\r\nfunction valueToChangeAddItem(value, index) {\r\n  return {\r\n    status: 'added',\r\n    value: value,\r\n    index: index\r\n  };\r\n}\r\n\r\nfunction isAdditionAdjacentToLast(changeIndex, arrayChanges) {\r\n  return changeIndex > 0 &&\r\n    changeIndex < arrayChanges.length &&\r\n    arrayChanges[changeIndex].status === \"added\" &&\r\n    arrayChanges[changeIndex - 1].status === \"added\" &&\r\n    arrayChanges[changeIndex - 1].index === arrayChanges[changeIndex].index - 1;\r\n}\r\n\r\nfunction FastForEach(spec) {\r\n  this.element = spec.element;\r\n  this.container = isVirtualNode(this.element) ?\r\n                   this.element.parentNode : this.element;\r\n  this.$context = spec.$context;\r\n  this.data = spec.data;\r\n  this.as = spec.as;\r\n  this.noContext = spec.noContext;\r\n  this.templateNode = makeTemplateNode(\r\n    spec.name ? document.getElementById(spec.name).cloneNode(true) : spec.element\r\n  );\r\n  this.afterQueueFlush = spec.afterQueueFlush;\r\n  this.beforeQueueFlush = spec.beforeQueueFlush;\r\n  this.changeQueue = [];\r\n  this.lastNodesList = [];\r\n  this.indexesToDelete = [];\r\n  this.rendering_queued = false;\r\n\r\n  // Remove existing content.\r\n  ko.virtualElements.emptyNode(this.element);\r\n\r\n  // Prime content\r\n  var primeData = ko.unwrap(this.data);\r\n  if (primeData.map) {\r\n    this.onArrayChange(primeData.map(valueToChangeAddItem));\r\n  }\r\n\r\n  // Watch for changes\r\n  if (ko.isObservable(this.data)) {\r\n    if (!this.data.indexOf) {\r\n      // Make sure the observable is trackable.\r\n      this.data = this.data.extend({trackArrayChanges: true});\r\n    }\r\n    this.changeSubs = this.data.subscribe(this.onArrayChange, this, 'arrayChange');\r\n  }\r\n}\r\n\r\n\r\nFastForEach.animateFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame ||\r\n  window.mozRequestAnimationFrame || window.msRequestAnimationFrame ||\r\n  function(cb) { return window.setTimeout(cb, 1000 / 60); };\r\n\r\n\r\nFastForEach.prototype.dispose = function () {\r\n  if (this.changeSubs) {\r\n    this.changeSubs.dispose();\r\n  }\r\n};\r\n\r\n\r\n// If the array changes we register the change.\r\nFastForEach.prototype.onArrayChange = function (changeSet) {\r\n  var self = this;\r\n  var changeMap = {\r\n    added: [],\r\n    deleted: []\r\n  };\r\n  for (var i = 0, len = changeSet.length; i < len; i++) {\r\n    // the change is appended to a last change info object when both are 'added' and have indexes next to each other\r\n    // here I presume that ko is sending changes in monotonic order (in index variable) which happens to be true, tested with push and splice with multiple pushed values\r\n    if (isAdditionAdjacentToLast(i, changeSet)) {\r\n      var batchValues = changeMap.added[changeMap.added.length - 1].values;\r\n      if (!batchValues) {\r\n        // transform the last addition into a batch addition object\r\n        var lastAddition = changeMap.added.pop();\r\n        var batchAddition = {\r\n          isBatch: true,\r\n          status: 'added',\r\n          index: lastAddition.index,\r\n          values: [lastAddition.value]\r\n        };\r\n        batchValues = batchAddition.values;\r\n        changeMap.added.push(batchAddition);\r\n      }\r\n      batchValues.push(changeSet[i].value);\r\n    } else {\r\n      changeMap[changeSet[i].status].push(changeSet[i]);\r\n    }\r\n  }\r\n  if (changeMap.deleted.length > 0) {\r\n    this.changeQueue.push.apply(this.changeQueue, changeMap.deleted);\r\n    this.changeQueue.push({status: 'clearDeletedIndexes'});\r\n  }\r\n  this.changeQueue.push.apply(this.changeQueue, changeMap.added);\r\n  // Once a change is registered, the ticking count-down starts for the processQueue.\r\n  if (this.changeQueue.length > 0 && !this.rendering_queued) {\r\n    this.rendering_queued = true;\r\n    FastForEach.animateFrame.call(window, function () { self.processQueue(); });\r\n  }\r\n};\r\n\r\n\r\n// Reflect all the changes in the queue in the DOM, then wipe the queue.\r\nFastForEach.prototype.processQueue = function () {\r\n  var self = this;\r\n\r\n  // Callback so folks can do things before the queue flush.\r\n  if (typeof this.beforeQueueFlush === 'function') {\r\n    this.beforeQueueFlush(this.changeQueue);\r\n  }\r\n\r\n  ko.utils.arrayForEach(this.changeQueue, function (changeItem) {\r\n    // console.log(self.data(), \"CI\", JSON.stringify(changeItem, null, 2), JSON.stringify($(self.element).text()))\r\n    self[changeItem.status](changeItem);\r\n    // console.log(\"  ==> \", JSON.stringify($(self.element).text()))\r\n  });\r\n  this.rendering_queued = false;\r\n  // Callback so folks can do things.\r\n  if (typeof this.afterQueueFlush === 'function') {\r\n    this.afterQueueFlush(this.changeQueue);\r\n  }\r\n  this.changeQueue = [];\r\n};\r\n\r\n\r\n// Process a changeItem with {status: 'added', ...}\r\nFastForEach.prototype.added = function (changeItem) {\r\n  var index = changeItem.index;\r\n  var valuesToAdd = changeItem.isBatch ? changeItem.values : [changeItem.value];\r\n  var referenceElement = this.lastNodesList[index - 1] || null;\r\n  // gather all childnodes for a possible batch insertion\r\n  var allChildNodes = [];\r\n\r\n  for (var i = 0, len = valuesToAdd.length; i < len; ++i) {\r\n    var templateClone = this.templateNode.cloneNode(true);\r\n    var childContext;\r\n\r\n    if (this.noContext) {\r\n      childContext = this.$context.extend({\r\n        '$item': valuesToAdd[i]\r\n      });\r\n    } else {\r\n      childContext = this.$context.createChildContext(valuesToAdd[i], this.as || null);\r\n    }\r\n\r\n    // apply bindings first, and then process child nodes, because bindings can add childnodes\r\n    ko.applyBindingsToDescendants(childContext, templateClone);\r\n\r\n    var childNodes = ko.virtualElements.childNodes(templateClone);\r\n    // Note discussion at https://github.com/angular/angular.js/issues/7851\r\n    allChildNodes.push.apply(allChildNodes, Array.prototype.slice.call(childNodes));\r\n    this.lastNodesList.splice(index + i, 0, childNodes[childNodes.length - 1]);\r\n  }\r\n\r\n  insertAllAfter(this.element, allChildNodes, referenceElement);\r\n};\r\n\r\n\r\n// Process a changeItem with {status: 'deleted', ...}\r\nFastForEach.prototype.deleted = function (changeItem) {\r\n  var index = changeItem.index;\r\n  var ptr = this.lastNodesList[index],\r\n      // We use this.element because that will be the last previous node\r\n      // for virtual element lists.\r\n      lastNode = this.lastNodesList[index - 1] || this.element;\r\n  do {\r\n    ptr = ptr.previousSibling;\r\n    ko.removeNode((ptr && ptr.nextSibling) || ko.virtualElements.firstChild(this.element));\r\n  } while (ptr && ptr !== lastNode);\r\n  // The \"last node\" in the DOM from which we begin our delets of the next adjacent node is\r\n  // now the sibling that preceded the first node of this item.\r\n  this.lastNodesList[index] = this.lastNodesList[index - 1];\r\n  this.indexesToDelete.push(index);\r\n};\r\n\r\n\r\n// We batch our deletion of item indexes in our parallel array.\r\n// See brianmhunt/knockout-fast-foreach#6/#8\r\nFastForEach.prototype.clearDeletedIndexes = function () {\r\n  // We iterate in reverse on the presumption (following the unit tests) that KO's diff engine\r\n  // processes diffs (esp. deletes) monotonically ascending i.e. from index 0 -> N.\r\n  for (var i = this.indexesToDelete.length - 1; i >= 0; --i) {\r\n    this.lastNodesList.splice(this.indexesToDelete[i], 1);\r\n  }\r\n  this.indexesToDelete = [];\r\n};\r\n\r\n\r\nko.bindingHandlers.fastForEach = {\r\n  // Valid valueAccessors:\r\n  //    []\r\n  //    ko.observable([])\r\n  //    ko.observableArray([])\r\n  //    ko.computed\r\n  //    {data: array, name: string, as: string}\r\n  init: function init(element, valueAccessor, bindings, vm, context) {\r\n    var value = valueAccessor(),\r\n        ffe;\r\n    if (isPlainObject(value)) {\r\n      value.element = value.element || element;\r\n      value.$context = context;\r\n      ffe = new FastForEach(value);\r\n    } else {\r\n      ffe = new FastForEach({\r\n        element: element,\r\n        data: ko.unwrap(context.$rawData) === value ? context.$rawData : value,\r\n        $context: context\r\n      });\r\n    }\r\n    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\r\n      ffe.dispose();\r\n    });\r\n    return {controlsDescendantBindings: true};\r\n  },\r\n\r\n  // Export for testing, debugging, and overloading.\r\n  FastForEach: FastForEach\r\n};\r\n\r\nko.virtualElements.allowedBindings.fastForEach = true;\r\n}));","knockoutjs/knockout-repeat.js":"// REPEAT binding for Knockout http://knockoutjs.com/\r\n// (c) Michael Best\r\n// License: MIT (http://www.opensource.org/licenses/mit-license.php)\r\n// Version 2.1.0\r\n\r\n(function(factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        // [1] AMD anonymous module\r\n        define(['knockout'], factory);\r\n    } else if (typeof exports === 'object') {\r\n        // [2] commonJS\r\n        factory(require('knockout'));\r\n    } else {\r\n        // [3] No module loader (plain <script> tag) - put directly in global namespace\r\n        factory(window.ko);\r\n    }\r\n})(function(ko) {\r\n\r\nif (!ko.virtualElements)\r\n    throw Error('Repeat requires at least Knockout 2.1');\r\n\r\nvar ko_bindingFlags = ko.bindingFlags || {};\r\nvar ko_unwrap = ko.utils.unwrapObservable;\r\n\r\nvar koProtoName = '__ko_proto__';\r\n\r\nif (ko.version >= \"3.0.0\") {\r\n    // In Knockout 3.0.0, use the node preprocessor to replace a node with a repeat binding with a virtual element\r\n    var provider = ko.bindingProvider.instance, previousPreprocessFn = provider.preprocessNode;\r\n    provider.preprocessNode = function(node) {\r\n        var newNodes, nodeBinding;\r\n        if (!previousPreprocessFn || !(newNodes = previousPreprocessFn.call(this, node))) {\r\n            if (node.nodeType === 1 && (nodeBinding = node.getAttribute('data-bind'))) {\r\n                if (/^\\s*repeat\\s*:/.test(nodeBinding)) {\r\n                    var leadingComment = node.ownerDocument.createComment('ko ' + nodeBinding),\r\n                        trailingComment = node.ownerDocument.createComment('/ko');\r\n                    node.parentNode.insertBefore(leadingComment, node);\r\n                    node.parentNode.insertBefore(trailingComment, node.nextSibling);\r\n                    node.removeAttribute('data-bind');\r\n                    newNodes = [leadingComment, node, trailingComment];\r\n                }\r\n            }\r\n        }\r\n        return newNodes;\r\n    };\r\n}\r\n\r\nko.virtualElements.allowedBindings.repeat = true;\r\nko.bindingHandlers.repeat = {\r\n    flags: ko_bindingFlags.contentBind | ko_bindingFlags.canUseVirtual,\r\n    init: function(element, valueAccessor, allBindingsAccessor, xxx, bindingContext) {\r\n\r\n        // Read and set fixed options--these options cannot be changed\r\n        var repeatParam = ko_unwrap(valueAccessor());\r\n        if (repeatParam && typeof repeatParam == 'object' && !('length' in repeatParam)) {\r\n            var repeatIndex = repeatParam.index,\r\n                repeatData = repeatParam.item,\r\n                repeatStep = repeatParam.step,\r\n                repeatReversed = repeatParam.reverse,\r\n                repeatBind = repeatParam.bind,\r\n                repeatInit = repeatParam.init,\r\n                repeatUpdate = repeatParam.update;\r\n        }\r\n        // Set default values for options that need it\r\n        repeatIndex = repeatIndex || '$index';\r\n        repeatData = repeatData || ko.bindingHandlers.repeat.itemName || '$item';\r\n        repeatStep = repeatStep || 1;\r\n        repeatReversed = repeatReversed || false;\r\n\r\n        var parent = element.parentNode, placeholder;\r\n        if (element.nodeType == 8) {    // virtual element\r\n            // Extract the \"children\" and find the single element node\r\n            var childNodes = ko.utils.arrayFilter(ko.virtualElements.childNodes(element), function(node) { return node.nodeType == 1;});\r\n            if (childNodes.length !== 1) {\r\n                throw Error(\"Repeat binding requires a single element to repeat\");\r\n            }\r\n            ko.virtualElements.emptyNode(element);\r\n\r\n            // The placeholder is the closing comment normally, or the opening comment if reversed\r\n            placeholder = repeatReversed ? element : element.nextSibling;\r\n            // The element to repeat is the contained element\r\n            element = childNodes[0];\r\n        } else {    // regular element\r\n            // First clean the element node and remove node's binding\r\n            var origBindString = element.getAttribute('data-bind');\r\n            ko.cleanNode(element);\r\n            element.removeAttribute('data-bind');\r\n\r\n            // Original element is no longer needed: delete it and create a placeholder comment\r\n            placeholder = element.ownerDocument.createComment('ko_repeatplaceholder ' + origBindString);\r\n            parent.replaceChild(placeholder, element);\r\n        }\r\n\r\n        // extract and remove a data-repeat-bind attribute, if present\r\n        if (!repeatBind) {\r\n            repeatBind = element.getAttribute('data-repeat-bind');\r\n            if (repeatBind) {\r\n                element.removeAttribute('data-repeat-bind');\r\n            }\r\n        }\r\n\r\n        // Make a copy of the element node to be copied for each repetition\r\n        var cleanNode = element.cloneNode(true);\r\n        if (typeof repeatBind == \"string\") {\r\n            cleanNode.setAttribute('data-bind', repeatBind);\r\n            repeatBind = null;\r\n        }\r\n\r\n        // Set up persistent data\r\n        var lastRepeatCount = 0,\r\n            notificationObservable = ko.observable(),\r\n            repeatArray, arrayObservable;\r\n\r\n        if (repeatInit) {\r\n            repeatInit(parent);\r\n        }\r\n\r\n        var subscribable = ko.computed(function() {\r\n            function makeArrayItemAccessor(index) {\r\n                var f = function(newValue) {\r\n                    var item = repeatArray[index];\r\n                    // Reading the value of the item\r\n                    if (!arguments.length) {\r\n                        notificationObservable();   // for dependency tracking\r\n                        return ko_unwrap(item);\r\n                    }\r\n                    // Writing a value to the item\r\n                    if (ko.isObservable(item)) {\r\n                        item(newValue);\r\n                    } else if (arrayObservable && arrayObservable.splice) {\r\n                        arrayObservable.splice(index, 1, newValue);\r\n                    } else {\r\n                        repeatArray[index] = newValue;\r\n                    }\r\n                    return this;\r\n                };\r\n                // Pretend that our accessor function is an observable\r\n                f[koProtoName] = ko.observable;\r\n                return f;\r\n            }\r\n\r\n            function makeBinding(item, index, context) {\r\n                return repeatArray\r\n                    ? function() { return repeatBind.call(bindingContext.$data, item, index, context); }\r\n                    : function() { return repeatBind.call(bindingContext.$data, index, context); }\r\n            }\r\n\r\n            // Read and set up variable options--these options can change and will update the binding\r\n            var paramObservable = valueAccessor(), repeatParam = ko_unwrap(paramObservable), repeatCount = 0;\r\n            if (repeatParam && typeof repeatParam == 'object') {\r\n                if ('length' in repeatParam) {\r\n                    repeatArray = repeatParam;\r\n                    repeatCount = repeatArray.length;\r\n                } else {\r\n                    if ('foreach' in repeatParam) {\r\n                        repeatArray = ko_unwrap(paramObservable = repeatParam.foreach);\r\n                        if (repeatArray && typeof repeatArray == 'object' && 'length' in repeatArray) {\r\n                            repeatCount = repeatArray.length || 0;\r\n                        } else {\r\n                            repeatCount = repeatArray || 0;\r\n                            repeatArray = null;\r\n                        }\r\n                    }\r\n                    // If a count value is provided (>0), always output that number of items\r\n                    if ('count' in repeatParam)\r\n                        repeatCount = ko_unwrap(repeatParam.count) || repeatCount;\r\n                    // If a limit is provided, don't output more than the limit\r\n                    if ('limit' in repeatParam)\r\n                        repeatCount = Math.min(repeatCount, ko_unwrap(repeatParam.limit)) || repeatCount;\r\n                }\r\n                arrayObservable = repeatArray && ko.isObservable(paramObservable) ? paramObservable : null;\r\n            } else {\r\n                repeatCount = repeatParam || 0;\r\n            }\r\n\r\n            // Remove nodes from end if array is shorter\r\n            for (; lastRepeatCount > repeatCount; lastRepeatCount-=repeatStep) {\r\n                ko.removeNode(repeatReversed ? placeholder.nextSibling : placeholder.previousSibling);\r\n            }\r\n\r\n            // Notify existing nodes of change\r\n            notificationObservable.notifySubscribers();\r\n\r\n            // Add nodes to end if array is longer (also initially populates nodes)\r\n            for (; lastRepeatCount < repeatCount; lastRepeatCount+=repeatStep) {\r\n                // Clone node and add to document\r\n                var newNode = cleanNode.cloneNode(true);\r\n                parent.insertBefore(newNode, repeatReversed ? placeholder.nextSibling : placeholder);\r\n                newNode.setAttribute('data-repeat-index', lastRepeatCount);\r\n\r\n                // Apply bindings to inserted node\r\n                if (repeatArray && repeatData == '$data') {\r\n                    var newContext = bindingContext.createChildContext(makeArrayItemAccessor(lastRepeatCount));\r\n                } else {\r\n                    var newContext = bindingContext.extend();\r\n                    if (repeatArray)\r\n                        newContext[repeatData] = makeArrayItemAccessor(lastRepeatCount);\r\n                }\r\n                newContext[repeatIndex] = lastRepeatCount;\r\n                if (repeatBind) {\r\n                    var result = ko.applyBindingsToNode(newNode, makeBinding(newContext[repeatData], lastRepeatCount, newContext), newContext, true),\r\n                        shouldBindDescendants = result && result.shouldBindDescendants;\r\n                }\r\n                if (!repeatBind || (result && shouldBindDescendants !== false)) {\r\n                    ko.applyBindings(newContext, newNode);\r\n                }\r\n            }\r\n            if (repeatUpdate) {\r\n                repeatUpdate(parent);\r\n            }\r\n        }, null, {disposeWhenNodeIsRemoved: placeholder});\r\n\r\n        return { controlsDescendantBindings: true, subscribable: subscribable };\r\n    }\r\n};\r\n});","knockoutjs/knockout.js":"/*!\r\n * Knockout JavaScript library v3.3.0\r\n * (c) Steven Sanderson - http://knockoutjs.com/\r\n * License: MIT (http://www.opensource.org/licenses/mit-license.php)\r\n */\r\n\r\n(function(){\r\nvar DEBUG=true;\r\n(function(undefined){\r\n    // (0, eval)('this') is a robust way of getting a reference to the global object\r\n    // For details, see http://stackoverflow.com/questions/14119988/return-this-0-evalthis/14120023#14120023\r\n    var window = this || (0, eval)('this'),\r\n        document = window['document'],\r\n        navigator = window['navigator'],\r\n        jQueryInstance = window[\"jQuery\"],\r\n        JSON = window[\"JSON\"];\r\n(function(factory) {\r\n    // Support three module loading scenarios\r\n    if (typeof define === 'function' && define['amd']) {\r\n        // [1] AMD anonymous module\r\n        define(['exports', 'require'], factory);\r\n    } else if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\r\n        // [2] CommonJS/Node.js\r\n        factory(module['exports'] || exports);  // module.exports is for Node.js\r\n    } else {\r\n        // [3] No module loader (plain <script> tag) - put directly in global namespace\r\n        factory(window['ko'] = {});\r\n    }\r\n}(function(koExports, amdRequire){\r\n// Internally, all KO objects are attached to koExports (even the non-exported ones whose names will be minified by the closure compiler).\r\n// In the future, the following \"ko\" variable may be made distinct from \"koExports\" so that private objects are not externally reachable.\r\nvar ko = typeof koExports !== 'undefined' ? koExports : {};\r\n// Google Closure Compiler helpers (used only to make the minified file smaller)\r\nko.exportSymbol = function(koPath, object) {\r\n    var tokens = koPath.split(\".\");\r\n\r\n    // In the future, \"ko\" may become distinct from \"koExports\" (so that non-exported objects are not reachable)\r\n    // At that point, \"target\" would be set to: (typeof koExports !== \"undefined\" ? koExports : ko)\r\n    var target = ko;\r\n\r\n    for (var i = 0; i < tokens.length - 1; i++)\r\n        target = target[tokens[i]];\r\n    target[tokens[tokens.length - 1]] = object;\r\n};\r\nko.exportProperty = function(owner, publicName, object) {\r\n    owner[publicName] = object;\r\n};\r\nko.version = \"3.3.0\";\r\n\r\nko.exportSymbol('version', ko.version);\r\nko.utils = (function () {\r\n    function objectForEach(obj, action) {\r\n        for (var prop in obj) {\r\n            if (obj.hasOwnProperty(prop)) {\r\n                action(prop, obj[prop]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function extend(target, source) {\r\n        if (source) {\r\n            for(var prop in source) {\r\n                if(source.hasOwnProperty(prop)) {\r\n                    target[prop] = source[prop];\r\n                }\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n\r\n    function setPrototypeOf(obj, proto) {\r\n        obj.__proto__ = proto;\r\n        return obj;\r\n    }\r\n\r\n    var canSetPrototype = ({ __proto__: [] } instanceof Array);\r\n\r\n    // Represent the known event types in a compact way, then at runtime transform it into a hash with event name as key (for fast lookup)\r\n    var knownEvents = {}, knownEventTypesByEventName = {};\r\n    var keyEventTypeName = (navigator && /Firefox\\/2/i.test(navigator.userAgent)) ? 'KeyboardEvent' : 'UIEvents';\r\n    knownEvents[keyEventTypeName] = ['keyup', 'keydown', 'keypress'];\r\n    knownEvents['MouseEvents'] = ['click', 'dblclick', 'mousedown', 'mouseup', 'mousemove', 'mouseover', 'mouseout', 'mouseenter', 'mouseleave'];\r\n    objectForEach(knownEvents, function(eventType, knownEventsForType) {\r\n        if (knownEventsForType.length) {\r\n            for (var i = 0, j = knownEventsForType.length; i < j; i++)\r\n                knownEventTypesByEventName[knownEventsForType[i]] = eventType;\r\n        }\r\n    });\r\n    var eventsThatMustBeRegisteredUsingAttachEvent = { 'propertychange': true }; // Workaround for an IE9 issue - https://github.com/SteveSanderson/knockout/issues/406\r\n\r\n    // Detect IE versions for bug workarounds (uses IE conditionals, not UA string, for robustness)\r\n    // Note that, since IE 10 does not support conditional comments, the following logic only detects IE < 10.\r\n    // Currently this is by design, since IE 10+ behaves correctly when treated as a standard browser.\r\n    // If there is a future need to detect specific versions of IE10+, we will amend this.\r\n    var ieVersion = document && (function() {\r\n        var version = 3, div = document.createElement('div'), iElems = div.getElementsByTagName('i');\r\n\r\n        // Keep constructing conditional HTML blocks until we hit one that resolves to an empty fragment\r\n        while (\r\n            div.innerHTML = '<!--[if gt IE ' + (++version) + ']><i></i><![endif]-->',\r\n            iElems[0]\r\n        ) {}\r\n        return version > 4 ? version : undefined;\r\n    }());\r\n    var isIe6 = ieVersion === 6,\r\n        isIe7 = ieVersion === 7;\r\n\r\n    function isClickOnCheckableElement(element, eventType) {\r\n        if ((ko.utils.tagNameLower(element) !== \"input\") || !element.type) return false;\r\n        if (eventType.toLowerCase() != \"click\") return false;\r\n        var inputType = element.type;\r\n        return (inputType == \"checkbox\") || (inputType == \"radio\");\r\n    }\r\n\r\n    // For details on the pattern for changing node classes\r\n    // see: https://github.com/knockout/knockout/issues/1597\r\n    var cssClassNameRegex = /\\S+/g;\r\n\r\n    function toggleDomNodeCssClass(node, classNames, shouldHaveClass) {\r\n        var addOrRemoveFn;\r\n        if (classNames) {\r\n            if (typeof node.classList === 'object') {\r\n                addOrRemoveFn = node.classList[shouldHaveClass ? 'add' : 'remove'];\r\n                ko.utils.arrayForEach(classNames.match(cssClassNameRegex), function(className) {\r\n                    addOrRemoveFn.call(node.classList, className);\r\n                });\r\n            } else if (typeof node.className['baseVal'] === 'string') {\r\n                // SVG tag .classNames is an SVGAnimatedString instance\r\n                toggleObjectClassPropertyString(node.className, 'baseVal', classNames, shouldHaveClass);\r\n            } else {\r\n                // node.className ought to be a string.\r\n                toggleObjectClassPropertyString(node, 'className', classNames, shouldHaveClass);\r\n            }\r\n        }\r\n    }\r\n\r\n    function toggleObjectClassPropertyString(obj, prop, classNames, shouldHaveClass) {\r\n        // obj/prop is either a node/'className' or a SVGAnimatedString/'baseVal'.\r\n        var currentClassNames = obj[prop].match(cssClassNameRegex) || [];\r\n        ko.utils.arrayForEach(classNames.match(cssClassNameRegex), function(className) {\r\n            ko.utils.addOrRemoveItem(currentClassNames, className, shouldHaveClass);\r\n        });\r\n        obj[prop] = currentClassNames.join(\" \");\r\n    }\r\n\r\n    return {\r\n        fieldsIncludedWithJsonPost: ['authenticity_token', /^__RequestVerificationToken(_.*)?$/],\r\n\r\n        arrayForEach: function (array, action) {\r\n            for (var i = 0, j = array.length; i < j; i++)\r\n                action(array[i], i);\r\n        },\r\n\r\n        arrayIndexOf: function (array, item) {\r\n            if (typeof Array.prototype.indexOf == \"function\")\r\n                return Array.prototype.indexOf.call(array, item);\r\n            for (var i = 0, j = array.length; i < j; i++)\r\n                if (array[i] === item)\r\n                    return i;\r\n            return -1;\r\n        },\r\n\r\n        arrayFirst: function (array, predicate, predicateOwner) {\r\n            for (var i = 0, j = array.length; i < j; i++)\r\n                if (predicate.call(predicateOwner, array[i], i))\r\n                    return array[i];\r\n            return null;\r\n        },\r\n\r\n        arrayRemoveItem: function (array, itemToRemove) {\r\n            var index = ko.utils.arrayIndexOf(array, itemToRemove);\r\n            if (index > 0) {\r\n                array.splice(index, 1);\r\n            }\r\n            else if (index === 0) {\r\n                array.shift();\r\n            }\r\n        },\r\n\r\n        arrayGetDistinctValues: function (array) {\r\n            array = array || [];\r\n            var result = [];\r\n            for (var i = 0, j = array.length; i < j; i++) {\r\n                if (ko.utils.arrayIndexOf(result, array[i]) < 0)\r\n                    result.push(array[i]);\r\n            }\r\n            return result;\r\n        },\r\n\r\n        arrayMap: function (array, mapping) {\r\n            array = array || [];\r\n            var result = [];\r\n            for (var i = 0, j = array.length; i < j; i++)\r\n                result.push(mapping(array[i], i));\r\n            return result;\r\n        },\r\n\r\n        arrayFilter: function (array, predicate) {\r\n            array = array || [];\r\n            var result = [];\r\n            for (var i = 0, j = array.length; i < j; i++)\r\n                if (predicate(array[i], i))\r\n                    result.push(array[i]);\r\n            return result;\r\n        },\r\n\r\n        arrayPushAll: function (array, valuesToPush) {\r\n            if (valuesToPush instanceof Array)\r\n                array.push.apply(array, valuesToPush);\r\n            else\r\n                for (var i = 0, j = valuesToPush.length; i < j; i++)\r\n                    array.push(valuesToPush[i]);\r\n            return array;\r\n        },\r\n\r\n        addOrRemoveItem: function(array, value, included) {\r\n            var existingEntryIndex = ko.utils.arrayIndexOf(ko.utils.peekObservable(array), value);\r\n            if (existingEntryIndex < 0) {\r\n                if (included)\r\n                    array.push(value);\r\n            } else {\r\n                if (!included)\r\n                    array.splice(existingEntryIndex, 1);\r\n            }\r\n        },\r\n\r\n        canSetPrototype: canSetPrototype,\r\n\r\n        extend: extend,\r\n\r\n        setPrototypeOf: setPrototypeOf,\r\n\r\n        setPrototypeOfOrExtend: canSetPrototype ? setPrototypeOf : extend,\r\n\r\n        objectForEach: objectForEach,\r\n\r\n        objectMap: function(source, mapping) {\r\n            if (!source)\r\n                return source;\r\n            var target = {};\r\n            for (var prop in source) {\r\n                if (source.hasOwnProperty(prop)) {\r\n                    target[prop] = mapping(source[prop], prop, source);\r\n                }\r\n            }\r\n            return target;\r\n        },\r\n\r\n        emptyDomNode: function (domNode) {\r\n            while (domNode.firstChild) {\r\n                ko.removeNode(domNode.firstChild);\r\n            }\r\n        },\r\n\r\n        moveCleanedNodesToContainerElement: function(nodes) {\r\n            // Ensure it's a real array, as we're about to reparent the nodes and\r\n            // we don't want the underlying collection to change while we're doing that.\r\n            var nodesArray = ko.utils.makeArray(nodes);\r\n            var templateDocument = (nodesArray[0] && nodesArray[0].ownerDocument) || document;\r\n\r\n            var container = templateDocument.createElement('div');\r\n            for (var i = 0, j = nodesArray.length; i < j; i++) {\r\n                container.appendChild(ko.cleanNode(nodesArray[i]));\r\n            }\r\n            return container;\r\n        },\r\n\r\n        cloneNodes: function (nodesArray, shouldCleanNodes) {\r\n            for (var i = 0, j = nodesArray.length, newNodesArray = []; i < j; i++) {\r\n                var clonedNode = nodesArray[i].cloneNode(true);\r\n                newNodesArray.push(shouldCleanNodes ? ko.cleanNode(clonedNode) : clonedNode);\r\n            }\r\n            return newNodesArray;\r\n        },\r\n\r\n        setDomNodeChildren: function (domNode, childNodes) {\r\n            ko.utils.emptyDomNode(domNode);\r\n            if (childNodes) {\r\n                for (var i = 0, j = childNodes.length; i < j; i++)\r\n                    domNode.appendChild(childNodes[i]);\r\n            }\r\n        },\r\n\r\n        replaceDomNodes: function (nodeToReplaceOrNodeArray, newNodesArray) {\r\n            var nodesToReplaceArray = nodeToReplaceOrNodeArray.nodeType ? [nodeToReplaceOrNodeArray] : nodeToReplaceOrNodeArray;\r\n            if (nodesToReplaceArray.length > 0) {\r\n                var insertionPoint = nodesToReplaceArray[0];\r\n                var parent = insertionPoint.parentNode;\r\n                for (var i = 0, j = newNodesArray.length; i < j; i++)\r\n                    parent.insertBefore(newNodesArray[i], insertionPoint);\r\n                for (var i = 0, j = nodesToReplaceArray.length; i < j; i++) {\r\n                    ko.removeNode(nodesToReplaceArray[i]);\r\n                }\r\n            }\r\n        },\r\n\r\n        fixUpContinuousNodeArray: function(continuousNodeArray, parentNode) {\r\n            // Before acting on a set of nodes that were previously outputted by a template function, we have to reconcile\r\n            // them against what is in the DOM right now. It may be that some of the nodes have already been removed, or that\r\n            // new nodes might have been inserted in the middle, for example by a binding. Also, there may previously have been\r\n            // leading comment nodes (created by rewritten string-based templates) that have since been removed during binding.\r\n            // So, this function translates the old \"map\" output array into its best guess of the set of current DOM nodes.\r\n            //\r\n            // Rules:\r\n            //   [A] Any leading nodes that have been removed should be ignored\r\n            //       These most likely correspond to memoization nodes that were already removed during binding\r\n            //       See https://github.com/SteveSanderson/knockout/pull/440\r\n            //   [B] We want to output a continuous series of nodes. So, ignore any nodes that have already been removed,\r\n            //       and include any nodes that have been inserted among the previous collection\r\n\r\n            if (continuousNodeArray.length) {\r\n                // The parent node can be a virtual element; so get the real parent node\r\n                parentNode = (parentNode.nodeType === 8 && parentNode.parentNode) || parentNode;\r\n\r\n                // Rule [A]\r\n                while (continuousNodeArray.length && continuousNodeArray[0].parentNode !== parentNode)\r\n                    continuousNodeArray.splice(0, 1);\r\n\r\n                // Rule [B]\r\n                if (continuousNodeArray.length > 1) {\r\n                    var current = continuousNodeArray[0], last = continuousNodeArray[continuousNodeArray.length - 1];\r\n                    // Replace with the actual new continuous node set\r\n                    continuousNodeArray.length = 0;\r\n                    while (current !== last) {\r\n                        continuousNodeArray.push(current);\r\n                        current = current.nextSibling;\r\n                        if (!current) // Won't happen, except if the developer has manually removed some DOM elements (then we're in an undefined scenario)\r\n                            return;\r\n                    }\r\n                    continuousNodeArray.push(last);\r\n                }\r\n            }\r\n            return continuousNodeArray;\r\n        },\r\n\r\n        setOptionNodeSelectionState: function (optionNode, isSelected) {\r\n            // IE6 sometimes throws \"unknown error\" if you try to write to .selected directly, whereas Firefox struggles with setAttribute. Pick one based on browser.\r\n            if (ieVersion < 7)\r\n                optionNode.setAttribute(\"selected\", isSelected);\r\n            else\r\n                optionNode.selected = isSelected;\r\n        },\r\n\r\n        stringTrim: function (string) {\r\n            return string === null || string === undefined ? '' :\r\n                string.trim ?\r\n                    string.trim() :\r\n                    string.toString().replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g, '');\r\n        },\r\n\r\n        stringStartsWith: function (string, startsWith) {\r\n            string = string || \"\";\r\n            if (startsWith.length > string.length)\r\n                return false;\r\n            return string.substring(0, startsWith.length) === startsWith;\r\n        },\r\n\r\n        domNodeIsContainedBy: function (node, containedByNode) {\r\n            if (node === containedByNode)\r\n                return true;\r\n            if (node.nodeType === 11)\r\n                return false; // Fixes issue #1162 - can't use node.contains for document fragments on IE8\r\n            if (containedByNode.contains)\r\n                return containedByNode.contains(node.nodeType === 3 ? node.parentNode : node);\r\n            if (containedByNode.compareDocumentPosition)\r\n                return (containedByNode.compareDocumentPosition(node) & 16) == 16;\r\n            while (node && node != containedByNode) {\r\n                node = node.parentNode;\r\n            }\r\n            return !!node;\r\n        },\r\n\r\n        domNodeIsAttachedToDocument: function (node) {\r\n            return ko.utils.domNodeIsContainedBy(node, node.ownerDocument.documentElement);\r\n        },\r\n\r\n        anyDomNodeIsAttachedToDocument: function(nodes) {\r\n            return !!ko.utils.arrayFirst(nodes, ko.utils.domNodeIsAttachedToDocument);\r\n        },\r\n\r\n        tagNameLower: function(element) {\r\n            // For HTML elements, tagName will always be upper case; for XHTML elements, it'll be lower case.\r\n            // Possible future optimization: If we know it's an element from an XHTML document (not HTML),\r\n            // we don't need to do the .toLowerCase() as it will always be lower case anyway.\r\n            return element && element.tagName && element.tagName.toLowerCase();\r\n        },\r\n\r\n        registerEventHandler: function (element, eventType, handler) {\r\n            var mustUseAttachEvent = ieVersion && eventsThatMustBeRegisteredUsingAttachEvent[eventType];\r\n            if (!mustUseAttachEvent && jQueryInstance) {\r\n                jQueryInstance(element)['bind'](eventType, handler);\r\n            } else if (!mustUseAttachEvent && typeof element.addEventListener == \"function\")\r\n                element.addEventListener(eventType, handler, false);\r\n            else if (typeof element.attachEvent != \"undefined\") {\r\n                var attachEventHandler = function (event) { handler.call(element, event); },\r\n                    attachEventName = \"on\" + eventType;\r\n                element.attachEvent(attachEventName, attachEventHandler);\r\n\r\n                // IE does not dispose attachEvent handlers automatically (unlike with addEventListener)\r\n                // so to avoid leaks, we have to remove them manually. See bug #856\r\n                ko.utils.domNodeDisposal.addDisposeCallback(element, function() {\r\n                    element.detachEvent(attachEventName, attachEventHandler);\r\n                });\r\n            } else\r\n                throw new Error(\"Browser doesn't support addEventListener or attachEvent\");\r\n        },\r\n\r\n        triggerEvent: function (element, eventType) {\r\n            if (!(element && element.nodeType))\r\n                throw new Error(\"element must be a DOM node when calling triggerEvent\");\r\n\r\n            // For click events on checkboxes and radio buttons, jQuery toggles the element checked state *after* the\r\n            // event handler runs instead of *before*. (This was fixed in 1.9 for checkboxes but not for radio buttons.)\r\n            // IE doesn't change the checked state when you trigger the click event using \"fireEvent\".\r\n            // In both cases, we'll use the click method instead.\r\n            var useClickWorkaround = isClickOnCheckableElement(element, eventType);\r\n\r\n            if (jQueryInstance && !useClickWorkaround) {\r\n                jQueryInstance(element)['trigger'](eventType);\r\n            } else if (typeof document.createEvent == \"function\") {\r\n                if (typeof element.dispatchEvent == \"function\") {\r\n                    var eventCategory = knownEventTypesByEventName[eventType] || \"HTMLEvents\";\r\n                    var event = document.createEvent(eventCategory);\r\n                    event.initEvent(eventType, true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, element);\r\n                    element.dispatchEvent(event);\r\n                }\r\n                else\r\n                    throw new Error(\"The supplied element doesn't support dispatchEvent\");\r\n            } else if (useClickWorkaround && element.click) {\r\n                element.click();\r\n            } else if (typeof element.fireEvent != \"undefined\") {\r\n                element.fireEvent(\"on\" + eventType);\r\n            } else {\r\n                throw new Error(\"Browser doesn't support triggering events\");\r\n            }\r\n        },\r\n\r\n        unwrapObservable: function (value) {\r\n            return ko.isObservable(value) ? value() : value;\r\n        },\r\n\r\n        peekObservable: function (value) {\r\n            return ko.isObservable(value) ? value.peek() : value;\r\n        },\r\n\r\n        toggleDomNodeCssClass: toggleDomNodeCssClass,\r\n\r\n        setTextContent: function(element, textContent) {\r\n            var value = ko.utils.unwrapObservable(textContent);\r\n            if ((value === null) || (value === undefined))\r\n                value = \"\";\r\n\r\n            // We need there to be exactly one child: a text node.\r\n            // If there are no children, more than one, or if it's not a text node,\r\n            // we'll clear everything and create a single text node.\r\n            var innerTextNode = ko.virtualElements.firstChild(element);\r\n            if (!innerTextNode || innerTextNode.nodeType != 3 || ko.virtualElements.nextSibling(innerTextNode)) {\r\n                ko.virtualElements.setDomNodeChildren(element, [element.ownerDocument.createTextNode(value)]);\r\n            } else {\r\n                innerTextNode.data = value;\r\n            }\r\n\r\n            ko.utils.forceRefresh(element);\r\n        },\r\n\r\n        setElementName: function(element, name) {\r\n            element.name = name;\r\n\r\n            // Workaround IE 6/7 issue\r\n            // - https://github.com/SteveSanderson/knockout/issues/197\r\n            // - http://www.matts411.com/post/setting_the_name_attribute_in_ie_dom/\r\n            if (ieVersion <= 7) {\r\n                try {\r\n                    element.mergeAttributes(document.createElement(\"<input name='\" + element.name + \"'/>\"), false);\r\n                }\r\n                catch(e) {} // For IE9 with doc mode \"IE9 Standards\" and browser mode \"IE9 Compatibility View\"\r\n            }\r\n        },\r\n\r\n        forceRefresh: function(node) {\r\n            // Workaround for an IE9 rendering bug - https://github.com/SteveSanderson/knockout/issues/209\r\n            if (ieVersion >= 9) {\r\n                // For text nodes and comment nodes (most likely virtual elements), we will have to refresh the container\r\n                var elem = node.nodeType == 1 ? node : node.parentNode;\r\n                if (elem.style)\r\n                    elem.style.zoom = elem.style.zoom;\r\n            }\r\n        },\r\n\r\n        ensureSelectElementIsRenderedCorrectly: function(selectElement) {\r\n            // Workaround for IE9 rendering bug - it doesn't reliably display all the text in dynamically-added select boxes unless you force it to re-render by updating the width.\r\n            // (See https://github.com/SteveSanderson/knockout/issues/312, http://stackoverflow.com/questions/5908494/select-only-shows-first-char-of-selected-option)\r\n            // Also fixes IE7 and IE8 bug that causes selects to be zero width if enclosed by 'if' or 'with'. (See issue #839)\r\n            if (ieVersion) {\r\n                var originalWidth = selectElement.style.width;\r\n                selectElement.style.width = 0;\r\n                selectElement.style.width = originalWidth;\r\n            }\r\n        },\r\n\r\n        range: function (min, max) {\r\n            min = ko.utils.unwrapObservable(min);\r\n            max = ko.utils.unwrapObservable(max);\r\n            var result = [];\r\n            for (var i = min; i <= max; i++)\r\n                result.push(i);\r\n            return result;\r\n        },\r\n\r\n        makeArray: function(arrayLikeObject) {\r\n            var result = [];\r\n            for (var i = 0, j = arrayLikeObject.length; i < j; i++) {\r\n                result.push(arrayLikeObject[i]);\r\n            };\r\n            return result;\r\n        },\r\n\r\n        isIe6 : isIe6,\r\n        isIe7 : isIe7,\r\n        ieVersion : ieVersion,\r\n\r\n        getFormFields: function(form, fieldName) {\r\n            var fields = ko.utils.makeArray(form.getElementsByTagName(\"input\")).concat(ko.utils.makeArray(form.getElementsByTagName(\"textarea\")));\r\n            var isMatchingField = (typeof fieldName == 'string')\r\n                ? function(field) { return field.name === fieldName }\r\n                : function(field) { return fieldName.test(field.name) }; // Treat fieldName as regex or object containing predicate\r\n            var matches = [];\r\n            for (var i = fields.length - 1; i >= 0; i--) {\r\n                if (isMatchingField(fields[i]))\r\n                    matches.push(fields[i]);\r\n            };\r\n            return matches;\r\n        },\r\n\r\n        parseJson: function (jsonString) {\r\n            if (typeof jsonString == \"string\") {\r\n                jsonString = ko.utils.stringTrim(jsonString);\r\n                if (jsonString) {\r\n                    if (JSON && JSON.parse) // Use native parsing where available\r\n                        return JSON.parse(jsonString);\r\n                    return (new Function(\"return \" + jsonString))(); // Fallback on less safe parsing for older browsers\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n\r\n        stringifyJson: function (data, replacer, space) {   // replacer and space are optional\r\n            if (!JSON || !JSON.stringify)\r\n                throw new Error(\"Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js\");\r\n            return JSON.stringify(ko.utils.unwrapObservable(data), replacer, space);\r\n        },\r\n\r\n        postJson: function (urlOrForm, data, options) {\r\n            options = options || {};\r\n            var params = options['params'] || {};\r\n            var includeFields = options['includeFields'] || this.fieldsIncludedWithJsonPost;\r\n            var url = urlOrForm;\r\n\r\n            // If we were given a form, use its 'action' URL and pick out any requested field values\r\n            if((typeof urlOrForm == 'object') && (ko.utils.tagNameLower(urlOrForm) === \"form\")) {\r\n                var originalForm = urlOrForm;\r\n                url = originalForm.action;\r\n                for (var i = includeFields.length - 1; i >= 0; i--) {\r\n                    var fields = ko.utils.getFormFields(originalForm, includeFields[i]);\r\n                    for (var j = fields.length - 1; j >= 0; j--)\r\n                        params[fields[j].name] = fields[j].value;\r\n                }\r\n            }\r\n\r\n            data = ko.utils.unwrapObservable(data);\r\n            var form = document.createElement(\"form\");\r\n            form.style.display = \"none\";\r\n            form.action = url;\r\n            form.method = \"post\";\r\n            for (var key in data) {\r\n                // Since 'data' this is a model object, we include all properties including those inherited from its prototype\r\n                var input = document.createElement(\"input\");\r\n                input.type = \"hidden\";\r\n                input.name = key;\r\n                input.value = ko.utils.stringifyJson(ko.utils.unwrapObservable(data[key]));\r\n                form.appendChild(input);\r\n            }\r\n            objectForEach(params, function(key, value) {\r\n                var input = document.createElement(\"input\");\r\n                input.type = \"hidden\";\r\n                input.name = key;\r\n                input.value = value;\r\n                form.appendChild(input);\r\n            });\r\n            document.body.appendChild(form);\r\n            options['submitter'] ? options['submitter'](form) : form.submit();\r\n            setTimeout(function () { form.parentNode.removeChild(form); }, 0);\r\n        }\r\n    }\r\n}());\r\n\r\nko.exportSymbol('utils', ko.utils);\r\nko.exportSymbol('utils.arrayForEach', ko.utils.arrayForEach);\r\nko.exportSymbol('utils.arrayFirst', ko.utils.arrayFirst);\r\nko.exportSymbol('utils.arrayFilter', ko.utils.arrayFilter);\r\nko.exportSymbol('utils.arrayGetDistinctValues', ko.utils.arrayGetDistinctValues);\r\nko.exportSymbol('utils.arrayIndexOf', ko.utils.arrayIndexOf);\r\nko.exportSymbol('utils.arrayMap', ko.utils.arrayMap);\r\nko.exportSymbol('utils.arrayPushAll', ko.utils.arrayPushAll);\r\nko.exportSymbol('utils.arrayRemoveItem', ko.utils.arrayRemoveItem);\r\nko.exportSymbol('utils.extend', ko.utils.extend);\r\nko.exportSymbol('utils.fieldsIncludedWithJsonPost', ko.utils.fieldsIncludedWithJsonPost);\r\nko.exportSymbol('utils.getFormFields', ko.utils.getFormFields);\r\nko.exportSymbol('utils.peekObservable', ko.utils.peekObservable);\r\nko.exportSymbol('utils.postJson', ko.utils.postJson);\r\nko.exportSymbol('utils.parseJson', ko.utils.parseJson);\r\nko.exportSymbol('utils.registerEventHandler', ko.utils.registerEventHandler);\r\nko.exportSymbol('utils.stringifyJson', ko.utils.stringifyJson);\r\nko.exportSymbol('utils.range', ko.utils.range);\r\nko.exportSymbol('utils.toggleDomNodeCssClass', ko.utils.toggleDomNodeCssClass);\r\nko.exportSymbol('utils.triggerEvent', ko.utils.triggerEvent);\r\nko.exportSymbol('utils.unwrapObservable', ko.utils.unwrapObservable);\r\nko.exportSymbol('utils.objectForEach', ko.utils.objectForEach);\r\nko.exportSymbol('utils.addOrRemoveItem', ko.utils.addOrRemoveItem);\r\nko.exportSymbol('utils.setTextContent', ko.utils.setTextContent);\r\nko.exportSymbol('unwrap', ko.utils.unwrapObservable); // Convenient shorthand, because this is used so commonly\r\n\r\nif (!Function.prototype['bind']) {\r\n    // Function.prototype.bind is a standard part of ECMAScript 5th Edition (December 2009, http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf)\r\n    // In case the browser doesn't implement it natively, provide a JavaScript implementation. This implementation is based on the one in prototype.js\r\n    Function.prototype['bind'] = function (object) {\r\n        var originalFunction = this;\r\n        if (arguments.length === 1) {\r\n            return function () {\r\n                return originalFunction.apply(object, arguments);\r\n            };\r\n        } else {\r\n            var partialArgs = Array.prototype.slice.call(arguments, 1);\r\n            return function () {\r\n                var args = partialArgs.slice(0);\r\n                args.push.apply(args, arguments);\r\n                return originalFunction.apply(object, args);\r\n            };\r\n        }\r\n    };\r\n}\r\n\r\nko.utils.domData = new (function () {\r\n    var uniqueId = 0;\r\n    var dataStoreKeyExpandoPropertyName = \"__ko__\" + (new Date).getTime();\r\n    var dataStore = {};\r\n\r\n    function getAll(node, createIfNotFound) {\r\n        var dataStoreKey = node[dataStoreKeyExpandoPropertyName];\r\n        var hasExistingDataStore = dataStoreKey && (dataStoreKey !== \"null\") && dataStore[dataStoreKey];\r\n        if (!hasExistingDataStore) {\r\n            if (!createIfNotFound)\r\n                return undefined;\r\n            dataStoreKey = node[dataStoreKeyExpandoPropertyName] = \"ko\" + uniqueId++;\r\n            dataStore[dataStoreKey] = {};\r\n        }\r\n        return dataStore[dataStoreKey];\r\n    }\r\n\r\n    return {\r\n        get: function (node, key) {\r\n            var allDataForNode = getAll(node, false);\r\n            return allDataForNode === undefined ? undefined : allDataForNode[key];\r\n        },\r\n        set: function (node, key, value) {\r\n            if (value === undefined) {\r\n                // Make sure we don't actually create a new domData key if we are actually deleting a value\r\n                if (getAll(node, false) === undefined)\r\n                    return;\r\n            }\r\n            var allDataForNode = getAll(node, true);\r\n            allDataForNode[key] = value;\r\n        },\r\n        clear: function (node) {\r\n            var dataStoreKey = node[dataStoreKeyExpandoPropertyName];\r\n            if (dataStoreKey) {\r\n                delete dataStore[dataStoreKey];\r\n                node[dataStoreKeyExpandoPropertyName] = null;\r\n                return true; // Exposing \"did clean\" flag purely so specs can infer whether things have been cleaned up as intended\r\n            }\r\n            return false;\r\n        },\r\n\r\n        nextKey: function () {\r\n            return (uniqueId++) + dataStoreKeyExpandoPropertyName;\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol('utils.domData', ko.utils.domData);\r\nko.exportSymbol('utils.domData.clear', ko.utils.domData.clear); // Exporting only so specs can clear up after themselves fully\r\n\r\nko.utils.domNodeDisposal = new (function () {\r\n    var domDataKey = ko.utils.domData.nextKey();\r\n    var cleanableNodeTypes = { 1: true, 8: true, 9: true };       // Element, Comment, Document\r\n    var cleanableNodeTypesWithDescendants = { 1: true, 9: true }; // Element, Document\r\n\r\n    function getDisposeCallbacksCollection(node, createIfNotFound) {\r\n        var allDisposeCallbacks = ko.utils.domData.get(node, domDataKey);\r\n        if ((allDisposeCallbacks === undefined) && createIfNotFound) {\r\n            allDisposeCallbacks = [];\r\n            ko.utils.domData.set(node, domDataKey, allDisposeCallbacks);\r\n        }\r\n        return allDisposeCallbacks;\r\n    }\r\n    function destroyCallbacksCollection(node) {\r\n        ko.utils.domData.set(node, domDataKey, undefined);\r\n    }\r\n\r\n    function cleanSingleNode(node) {\r\n        // Run all the dispose callbacks\r\n        var callbacks = getDisposeCallbacksCollection(node, false);\r\n        if (callbacks) {\r\n            callbacks = callbacks.slice(0); // Clone, as the array may be modified during iteration (typically, callbacks will remove themselves)\r\n            for (var i = 0; i < callbacks.length; i++)\r\n                callbacks[i](node);\r\n        }\r\n\r\n        // Erase the DOM data\r\n        ko.utils.domData.clear(node);\r\n\r\n        // Perform cleanup needed by external libraries (currently only jQuery, but can be extended)\r\n        ko.utils.domNodeDisposal[\"cleanExternalData\"](node);\r\n\r\n        // Clear any immediate-child comment nodes, as these wouldn't have been found by\r\n        // node.getElementsByTagName(\"*\") in cleanNode() (comment nodes aren't elements)\r\n        if (cleanableNodeTypesWithDescendants[node.nodeType])\r\n            cleanImmediateCommentTypeChildren(node);\r\n    }\r\n\r\n    function cleanImmediateCommentTypeChildren(nodeWithChildren) {\r\n        var child, nextChild = nodeWithChildren.firstChild;\r\n        while (child = nextChild) {\r\n            nextChild = child.nextSibling;\r\n            if (child.nodeType === 8)\r\n                cleanSingleNode(child);\r\n        }\r\n    }\r\n\r\n    return {\r\n        addDisposeCallback : function(node, callback) {\r\n            if (typeof callback != \"function\")\r\n                throw new Error(\"Callback must be a function\");\r\n            getDisposeCallbacksCollection(node, true).push(callback);\r\n        },\r\n\r\n        removeDisposeCallback : function(node, callback) {\r\n            var callbacksCollection = getDisposeCallbacksCollection(node, false);\r\n            if (callbacksCollection) {\r\n                ko.utils.arrayRemoveItem(callbacksCollection, callback);\r\n                if (callbacksCollection.length == 0)\r\n                    destroyCallbacksCollection(node);\r\n            }\r\n        },\r\n\r\n        cleanNode : function(node) {\r\n            // First clean this node, where applicable\r\n            if (cleanableNodeTypes[node.nodeType]) {\r\n                cleanSingleNode(node);\r\n\r\n                // ... then its descendants, where applicable\r\n                if (cleanableNodeTypesWithDescendants[node.nodeType]) {\r\n                    // Clone the descendants list in case it changes during iteration\r\n                    var descendants = [];\r\n                    ko.utils.arrayPushAll(descendants, node.getElementsByTagName(\"*\"));\r\n                    for (var i = 0, j = descendants.length; i < j; i++)\r\n                        cleanSingleNode(descendants[i]);\r\n                }\r\n            }\r\n            return node;\r\n        },\r\n\r\n        removeNode : function(node) {\r\n            ko.cleanNode(node);\r\n            if (node.parentNode)\r\n                node.parentNode.removeChild(node);\r\n        },\r\n\r\n        \"cleanExternalData\" : function (node) {\r\n            // Special support for jQuery here because it's so commonly used.\r\n            // Many jQuery plugins (including jquery.tmpl) store data using jQuery's equivalent of domData\r\n            // so notify it to tear down any resources associated with the node & descendants here.\r\n            if (jQueryInstance && (typeof jQueryInstance['cleanData'] == \"function\"))\r\n                jQueryInstance['cleanData']([node]);\r\n        }\r\n    };\r\n})();\r\nko.cleanNode = ko.utils.domNodeDisposal.cleanNode; // Shorthand name for convenience\r\nko.removeNode = ko.utils.domNodeDisposal.removeNode; // Shorthand name for convenience\r\nko.exportSymbol('cleanNode', ko.cleanNode);\r\nko.exportSymbol('removeNode', ko.removeNode);\r\nko.exportSymbol('utils.domNodeDisposal', ko.utils.domNodeDisposal);\r\nko.exportSymbol('utils.domNodeDisposal.addDisposeCallback', ko.utils.domNodeDisposal.addDisposeCallback);\r\nko.exportSymbol('utils.domNodeDisposal.removeDisposeCallback', ko.utils.domNodeDisposal.removeDisposeCallback);\r\n(function () {\r\n    var leadingCommentRegex = /^(\\s*)<!--(.*?)-->/;\r\n\r\n    function simpleHtmlParse(html, documentContext) {\r\n        documentContext || (documentContext = document);\r\n        var windowContext = documentContext['parentWindow'] || documentContext['defaultView'] || window;\r\n\r\n        // Based on jQuery's \"clean\" function, but only accounting for table-related elements.\r\n        // If you have referenced jQuery, this won't be used anyway - KO will use jQuery's \"clean\" function directly\r\n\r\n        // Note that there's still an issue in IE < 9 whereby it will discard comment nodes that are the first child of\r\n        // a descendant node. For example: \"<div><!-- mycomment -->abc</div>\" will get parsed as \"<div>abc</div>\"\r\n        // This won't affect anyone who has referenced jQuery, and there's always the workaround of inserting a dummy node\r\n        // (possibly a text node) in front of the comment. So, KO does not attempt to workaround this IE issue automatically at present.\r\n\r\n        // Trim whitespace, otherwise indexOf won't work as expected\r\n        var tags = ko.utils.stringTrim(html).toLowerCase(), div = documentContext.createElement(\"div\");\r\n\r\n        // Finds the first match from the left column, and returns the corresponding \"wrap\" data from the right column\r\n        var wrap = tags.match(/^<(thead|tbody|tfoot)/)              && [1, \"<table>\", \"</table>\"] ||\r\n                   !tags.indexOf(\"<tr\")                             && [2, \"<table><tbody>\", \"</tbody></table>\"] ||\r\n                   (!tags.indexOf(\"<td\") || !tags.indexOf(\"<th\"))   && [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"] ||\r\n                   /* anything else */                                 [0, \"\", \"\"];\r\n\r\n        // Go to html and back, then peel off extra wrappers\r\n        // Note that we always prefix with some dummy text, because otherwise, IE<9 will strip out leading comment nodes in descendants. Total madness.\r\n        var markup = \"ignored<div>\" + wrap[1] + html + wrap[2] + \"</div>\";\r\n        if (typeof windowContext['innerShiv'] == \"function\") {\r\n            div.appendChild(windowContext['innerShiv'](markup));\r\n        } else {\r\n            div.innerHTML = markup;\r\n        }\r\n\r\n        // Move to the right depth\r\n        while (wrap[0]--)\r\n            div = div.lastChild;\r\n\r\n        return ko.utils.makeArray(div.lastChild.childNodes);\r\n    }\r\n\r\n    function jQueryHtmlParse(html, documentContext) {\r\n        // jQuery's \"parseHTML\" function was introduced in jQuery 1.8.0 and is a documented public API.\r\n        if (jQueryInstance['parseHTML']) {\r\n            return jQueryInstance['parseHTML'](html, documentContext) || []; // Ensure we always return an array and never null\r\n        } else {\r\n            // For jQuery < 1.8.0, we fall back on the undocumented internal \"clean\" function.\r\n            var elems = jQueryInstance['clean']([html], documentContext);\r\n\r\n            // As of jQuery 1.7.1, jQuery parses the HTML by appending it to some dummy parent nodes held in an in-memory document fragment.\r\n            // Unfortunately, it never clears the dummy parent nodes from the document fragment, so it leaks memory over time.\r\n            // Fix this by finding the top-most dummy parent element, and detaching it from its owner fragment.\r\n            if (elems && elems[0]) {\r\n                // Find the top-most parent element that's a direct child of a document fragment\r\n                var elem = elems[0];\r\n                while (elem.parentNode && elem.parentNode.nodeType !== 11 /* i.e., DocumentFragment */)\r\n                    elem = elem.parentNode;\r\n                // ... then detach it\r\n                if (elem.parentNode)\r\n                    elem.parentNode.removeChild(elem);\r\n            }\r\n\r\n            return elems;\r\n        }\r\n    }\r\n\r\n    ko.utils.parseHtmlFragment = function(html, documentContext) {\r\n        return jQueryInstance ? jQueryHtmlParse(html, documentContext)   // As below, benefit from jQuery's optimisations where possible\r\n                              : simpleHtmlParse(html, documentContext);  // ... otherwise, this simple logic will do in most common cases.\r\n    };\r\n\r\n    ko.utils.setHtml = function(node, html) {\r\n        ko.utils.emptyDomNode(node);\r\n\r\n        // There's no legitimate reason to display a stringified observable without unwrapping it, so we'll unwrap it\r\n        html = ko.utils.unwrapObservable(html);\r\n\r\n        if ((html !== null) && (html !== undefined)) {\r\n            if (typeof html != 'string')\r\n                html = html.toString();\r\n\r\n            // jQuery contains a lot of sophisticated code to parse arbitrary HTML fragments,\r\n            // for example <tr> elements which are not normally allowed to exist on their own.\r\n            // If you've referenced jQuery we'll use that rather than duplicating its code.\r\n            if (jQueryInstance) {\r\n                jQueryInstance(node)['html'](html);\r\n            } else {\r\n                // ... otherwise, use KO's own parsing logic.\r\n                var parsedNodes = ko.utils.parseHtmlFragment(html, node.ownerDocument);\r\n                for (var i = 0; i < parsedNodes.length; i++)\r\n                    node.appendChild(parsedNodes[i]);\r\n            }\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol('utils.parseHtmlFragment', ko.utils.parseHtmlFragment);\r\nko.exportSymbol('utils.setHtml', ko.utils.setHtml);\r\n\r\nko.memoization = (function () {\r\n    var memos = {};\r\n\r\n    function randomMax8HexChars() {\r\n        return (((1 + Math.random()) * 0x100000000) | 0).toString(16).substring(1);\r\n    }\r\n    function generateRandomId() {\r\n        return randomMax8HexChars() + randomMax8HexChars();\r\n    }\r\n    function findMemoNodes(rootNode, appendToArray) {\r\n        if (!rootNode)\r\n            return;\r\n        if (rootNode.nodeType == 8) {\r\n            var memoId = ko.memoization.parseMemoText(rootNode.nodeValue);\r\n            if (memoId != null)\r\n                appendToArray.push({ domNode: rootNode, memoId: memoId });\r\n        } else if (rootNode.nodeType == 1) {\r\n            for (var i = 0, childNodes = rootNode.childNodes, j = childNodes.length; i < j; i++)\r\n                findMemoNodes(childNodes[i], appendToArray);\r\n        }\r\n    }\r\n\r\n    return {\r\n        memoize: function (callback) {\r\n            if (typeof callback != \"function\")\r\n                throw new Error(\"You can only pass a function to ko.memoization.memoize()\");\r\n            var memoId = generateRandomId();\r\n            memos[memoId] = callback;\r\n            return \"<!--[ko_memo:\" + memoId + \"]-->\";\r\n        },\r\n\r\n        unmemoize: function (memoId, callbackParams) {\r\n            var callback = memos[memoId];\r\n            if (callback === undefined)\r\n                throw new Error(\"Couldn't find any memo with ID \" + memoId + \". Perhaps it's already been unmemoized.\");\r\n            try {\r\n                callback.apply(null, callbackParams || []);\r\n                return true;\r\n            }\r\n            finally { delete memos[memoId]; }\r\n        },\r\n\r\n        unmemoizeDomNodeAndDescendants: function (domNode, extraCallbackParamsArray) {\r\n            var memos = [];\r\n            findMemoNodes(domNode, memos);\r\n            for (var i = 0, j = memos.length; i < j; i++) {\r\n                var node = memos[i].domNode;\r\n                var combinedParams = [node];\r\n                if (extraCallbackParamsArray)\r\n                    ko.utils.arrayPushAll(combinedParams, extraCallbackParamsArray);\r\n                ko.memoization.unmemoize(memos[i].memoId, combinedParams);\r\n                node.nodeValue = \"\"; // Neuter this node so we don't try to unmemoize it again\r\n                if (node.parentNode)\r\n                    node.parentNode.removeChild(node); // If possible, erase it totally (not always possible - someone else might just hold a reference to it then call unmemoizeDomNodeAndDescendants again)\r\n            }\r\n        },\r\n\r\n        parseMemoText: function (memoText) {\r\n            var match = memoText.match(/^\\[ko_memo\\:(.*?)\\]$/);\r\n            return match ? match[1] : null;\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol('memoization', ko.memoization);\r\nko.exportSymbol('memoization.memoize', ko.memoization.memoize);\r\nko.exportSymbol('memoization.unmemoize', ko.memoization.unmemoize);\r\nko.exportSymbol('memoization.parseMemoText', ko.memoization.parseMemoText);\r\nko.exportSymbol('memoization.unmemoizeDomNodeAndDescendants', ko.memoization.unmemoizeDomNodeAndDescendants);\r\nko.extenders = {\r\n    'throttle': function(target, timeout) {\r\n        // Throttling means two things:\r\n\r\n        // (1) For dependent observables, we throttle *evaluations* so that, no matter how fast its dependencies\r\n        //     notify updates, the target doesn't re-evaluate (and hence doesn't notify) faster than a certain rate\r\n        target['throttleEvaluation'] = timeout;\r\n\r\n        // (2) For writable targets (observables, or writable dependent observables), we throttle *writes*\r\n        //     so the target cannot change value synchronously or faster than a certain rate\r\n        var writeTimeoutInstance = null;\r\n        return ko.dependentObservable({\r\n            'read': target,\r\n            'write': function(value) {\r\n                clearTimeout(writeTimeoutInstance);\r\n                writeTimeoutInstance = setTimeout(function() {\r\n                    target(value);\r\n                }, timeout);\r\n            }\r\n        });\r\n    },\r\n\r\n    'rateLimit': function(target, options) {\r\n        var timeout, method, limitFunction;\r\n\r\n        if (typeof options == 'number') {\r\n            timeout = options;\r\n        } else {\r\n            timeout = options['timeout'];\r\n            method = options['method'];\r\n        }\r\n\r\n        limitFunction = method == 'notifyWhenChangesStop' ?  debounce : throttle;\r\n        target.limit(function(callback) {\r\n            return limitFunction(callback, timeout);\r\n        });\r\n    },\r\n\r\n    'notify': function(target, notifyWhen) {\r\n        target[\"equalityComparer\"] = notifyWhen == \"always\" ?\r\n            null :  // null equalityComparer means to always notify\r\n            valuesArePrimitiveAndEqual;\r\n    }\r\n};\r\n\r\nvar primitiveTypes = { 'undefined':1, 'boolean':1, 'number':1, 'string':1 };\r\nfunction valuesArePrimitiveAndEqual(a, b) {\r\n    var oldValueIsPrimitive = (a === null) || (typeof(a) in primitiveTypes);\r\n    return oldValueIsPrimitive ? (a === b) : false;\r\n}\r\n\r\nfunction throttle(callback, timeout) {\r\n    var timeoutInstance;\r\n    return function () {\r\n        if (!timeoutInstance) {\r\n            timeoutInstance = setTimeout(function() {\r\n                timeoutInstance = undefined;\r\n                callback();\r\n            }, timeout);\r\n        }\r\n    };\r\n}\r\n\r\nfunction debounce(callback, timeout) {\r\n    var timeoutInstance;\r\n    return function () {\r\n        clearTimeout(timeoutInstance);\r\n        timeoutInstance = setTimeout(callback, timeout);\r\n    };\r\n}\r\n\r\nfunction applyExtenders(requestedExtenders) {\r\n    var target = this;\r\n    if (requestedExtenders) {\r\n        ko.utils.objectForEach(requestedExtenders, function(key, value) {\r\n            var extenderHandler = ko.extenders[key];\r\n            if (typeof extenderHandler == 'function') {\r\n                target = extenderHandler(target, value) || target;\r\n            }\r\n        });\r\n    }\r\n    return target;\r\n}\r\n\r\nko.exportSymbol('extenders', ko.extenders);\r\n\r\nko.subscription = function (target, callback, disposeCallback) {\r\n    this._target = target;\r\n    this.callback = callback;\r\n    this.disposeCallback = disposeCallback;\r\n    this.isDisposed = false;\r\n    ko.exportProperty(this, 'dispose', this.dispose);\r\n};\r\nko.subscription.prototype.dispose = function () {\r\n    this.isDisposed = true;\r\n    this.disposeCallback();\r\n};\r\n\r\nko.subscribable = function () {\r\n    ko.utils.setPrototypeOfOrExtend(this, ko.subscribable['fn']);\r\n    this._subscriptions = {};\r\n    this._versionNumber = 1;\r\n}\r\n\r\nvar defaultEvent = \"change\";\r\n\r\nvar ko_subscribable_fn = {\r\n    subscribe: function (callback, callbackTarget, event) {\r\n        var self = this;\r\n\r\n        event = event || defaultEvent;\r\n        var boundCallback = callbackTarget ? callback.bind(callbackTarget) : callback;\r\n\r\n        var subscription = new ko.subscription(self, boundCallback, function () {\r\n            ko.utils.arrayRemoveItem(self._subscriptions[event], subscription);\r\n            if (self.afterSubscriptionRemove)\r\n                self.afterSubscriptionRemove(event);\r\n        });\r\n\r\n        if (self.beforeSubscriptionAdd)\r\n            self.beforeSubscriptionAdd(event);\r\n\r\n        if (!self._subscriptions[event])\r\n            self._subscriptions[event] = [];\r\n        self._subscriptions[event].push(subscription);\r\n\r\n        return subscription;\r\n    },\r\n\r\n    \"notifySubscribers\": function (valueToNotify, event) {\r\n        event = event || defaultEvent;\r\n        if (event === defaultEvent) {\r\n            this.updateVersion();\r\n        }\r\n        if (this.hasSubscriptionsForEvent(event)) {\r\n            try {\r\n                ko.dependencyDetection.begin(); // Begin suppressing dependency detection (by setting the top frame to undefined)\r\n                for (var a = this._subscriptions[event].slice(0), i = 0, subscription; subscription = a[i]; ++i) {\r\n                    // In case a subscription was disposed during the arrayForEach cycle, check\r\n                    // for isDisposed on each subscription before invoking its callback\r\n                    if (!subscription.isDisposed)\r\n                        subscription.callback(valueToNotify);\r\n                }\r\n            } finally {\r\n                ko.dependencyDetection.end(); // End suppressing dependency detection\r\n            }\r\n        }\r\n    },\r\n\r\n    getVersion: function () {\r\n        return this._versionNumber;\r\n    },\r\n\r\n    hasChanged: function (versionToCheck) {\r\n        return this.getVersion() !== versionToCheck;\r\n    },\r\n\r\n    updateVersion: function () {\r\n        ++this._versionNumber;\r\n    },\r\n\r\n    limit: function(limitFunction) {\r\n        var self = this, selfIsObservable = ko.isObservable(self),\r\n            isPending, previousValue, pendingValue, beforeChange = 'beforeChange';\r\n\r\n        if (!self._origNotifySubscribers) {\r\n            self._origNotifySubscribers = self[\"notifySubscribers\"];\r\n            self[\"notifySubscribers\"] = function(value, event) {\r\n                if (!event || event === defaultEvent) {\r\n                    self._rateLimitedChange(value);\r\n                } else if (event === beforeChange) {\r\n                    self._rateLimitedBeforeChange(value);\r\n                } else {\r\n                    self._origNotifySubscribers(value, event);\r\n                }\r\n            };\r\n        }\r\n\r\n        var finish = limitFunction(function() {\r\n            // If an observable provided a reference to itself, access it to get the latest value.\r\n            // This allows computed observables to delay calculating their value until needed.\r\n            if (selfIsObservable && pendingValue === self) {\r\n                pendingValue = self();\r\n            }\r\n            isPending = false;\r\n            if (self.isDifferent(previousValue, pendingValue)) {\r\n                self._origNotifySubscribers(previousValue = pendingValue);\r\n            }\r\n        });\r\n\r\n        self._rateLimitedChange = function(value) {\r\n            isPending = true;\r\n            pendingValue = value;\r\n            finish();\r\n        };\r\n        self._rateLimitedBeforeChange = function(value) {\r\n            if (!isPending) {\r\n                previousValue = value;\r\n                self._origNotifySubscribers(value, beforeChange);\r\n            }\r\n        };\r\n    },\r\n\r\n    hasSubscriptionsForEvent: function(event) {\r\n        return this._subscriptions[event] && this._subscriptions[event].length;\r\n    },\r\n\r\n    getSubscriptionsCount: function (event) {\r\n        if (event) {\r\n            return this._subscriptions[event] && this._subscriptions[event].length || 0;\r\n        } else {\r\n            var total = 0;\r\n            ko.utils.objectForEach(this._subscriptions, function(eventName, subscriptions) {\r\n                total += subscriptions.length;\r\n            });\r\n            return total;\r\n        }\r\n    },\r\n\r\n    isDifferent: function(oldValue, newValue) {\r\n        return !this['equalityComparer'] || !this['equalityComparer'](oldValue, newValue);\r\n    },\r\n\r\n    extend: applyExtenders\r\n};\r\n\r\nko.exportProperty(ko_subscribable_fn, 'subscribe', ko_subscribable_fn.subscribe);\r\nko.exportProperty(ko_subscribable_fn, 'extend', ko_subscribable_fn.extend);\r\nko.exportProperty(ko_subscribable_fn, 'getSubscriptionsCount', ko_subscribable_fn.getSubscriptionsCount);\r\n\r\n// For browsers that support proto assignment, we overwrite the prototype of each\r\n// observable instance. Since observables are functions, we need Function.prototype\r\n// to still be in the prototype chain.\r\nif (ko.utils.canSetPrototype) {\r\n    ko.utils.setPrototypeOf(ko_subscribable_fn, Function.prototype);\r\n}\r\n\r\nko.subscribable['fn'] = ko_subscribable_fn;\r\n\r\n\r\nko.isSubscribable = function (instance) {\r\n    return instance != null && typeof instance.subscribe == \"function\" && typeof instance[\"notifySubscribers\"] == \"function\";\r\n};\r\n\r\nko.exportSymbol('subscribable', ko.subscribable);\r\nko.exportSymbol('isSubscribable', ko.isSubscribable);\r\n\r\nko.computedContext = ko.dependencyDetection = (function () {\r\n    var outerFrames = [],\r\n        currentFrame,\r\n        lastId = 0;\r\n\r\n    // Return a unique ID that can be assigned to an observable for dependency tracking.\r\n    // Theoretically, you could eventually overflow the number storage size, resulting\r\n    // in duplicate IDs. But in JavaScript, the largest exact integral value is 2^53\r\n    // or 9,007,199,254,740,992. If you created 1,000,000 IDs per second, it would\r\n    // take over 285 years to reach that number.\r\n    // Reference http://blog.vjeux.com/2010/javascript/javascript-max_int-number-limits.html\r\n    function getId() {\r\n        return ++lastId;\r\n    }\r\n\r\n    function begin(options) {\r\n        outerFrames.push(currentFrame);\r\n        currentFrame = options;\r\n    }\r\n\r\n    function end() {\r\n        currentFrame = outerFrames.pop();\r\n    }\r\n\r\n    return {\r\n        begin: begin,\r\n\r\n        end: end,\r\n\r\n        registerDependency: function (subscribable) {\r\n            if (currentFrame) {\r\n                if (!ko.isSubscribable(subscribable))\r\n                    throw new Error(\"Only subscribable things can act as dependencies\");\r\n                currentFrame.callback(subscribable, subscribable._id || (subscribable._id = getId()));\r\n            }\r\n        },\r\n\r\n        ignore: function (callback, callbackTarget, callbackArgs) {\r\n            try {\r\n                begin();\r\n                return callback.apply(callbackTarget, callbackArgs || []);\r\n            } finally {\r\n                end();\r\n            }\r\n        },\r\n\r\n        getDependenciesCount: function () {\r\n            if (currentFrame)\r\n                return currentFrame.computed.getDependenciesCount();\r\n        },\r\n\r\n        isInitial: function() {\r\n            if (currentFrame)\r\n                return currentFrame.isInitial;\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol('computedContext', ko.computedContext);\r\nko.exportSymbol('computedContext.getDependenciesCount', ko.computedContext.getDependenciesCount);\r\nko.exportSymbol('computedContext.isInitial', ko.computedContext.isInitial);\r\nko.exportSymbol('computedContext.isSleeping', ko.computedContext.isSleeping);\r\n\r\nko.exportSymbol('ignoreDependencies', ko.ignoreDependencies = ko.dependencyDetection.ignore);\r\nko.observable = function (initialValue) {\r\n    var _latestValue = initialValue;\r\n\r\n    function observable() {\r\n        if (arguments.length > 0) {\r\n            // Write\r\n\r\n            // Ignore writes if the value hasn't changed\r\n            if (observable.isDifferent(_latestValue, arguments[0])) {\r\n                observable.valueWillMutate();\r\n                _latestValue = arguments[0];\r\n                if (DEBUG) observable._latestValue = _latestValue;\r\n                observable.valueHasMutated();\r\n            }\r\n            return this; // Permits chained assignments\r\n        }\r\n        else {\r\n            // Read\r\n            ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation\r\n            return _latestValue;\r\n        }\r\n    }\r\n    ko.subscribable.call(observable);\r\n    ko.utils.setPrototypeOfOrExtend(observable, ko.observable['fn']);\r\n\r\n    if (DEBUG) observable._latestValue = _latestValue;\r\n    observable.peek = function() { return _latestValue };\r\n    observable.valueHasMutated = function () { observable[\"notifySubscribers\"](_latestValue); }\r\n    observable.valueWillMutate = function () { observable[\"notifySubscribers\"](_latestValue, \"beforeChange\"); }\r\n\r\n    ko.exportProperty(observable, 'peek', observable.peek);\r\n    ko.exportProperty(observable, \"valueHasMutated\", observable.valueHasMutated);\r\n    ko.exportProperty(observable, \"valueWillMutate\", observable.valueWillMutate);\r\n\r\n    return observable;\r\n}\r\n\r\nko.observable['fn'] = {\r\n    \"equalityComparer\": valuesArePrimitiveAndEqual\r\n};\r\n\r\nvar protoProperty = ko.observable.protoProperty = \"__ko_proto__\";\r\nko.observable['fn'][protoProperty] = ko.observable;\r\n\r\n// Note that for browsers that don't support proto assignment, the\r\n// inheritance chain is created manually in the ko.observable constructor\r\nif (ko.utils.canSetPrototype) {\r\n    ko.utils.setPrototypeOf(ko.observable['fn'], ko.subscribable['fn']);\r\n}\r\n\r\nko.hasPrototype = function(instance, prototype) {\r\n    if ((instance === null) || (instance === undefined) || (instance[protoProperty] === undefined)) return false;\r\n    if (instance[protoProperty] === prototype) return true;\r\n    return ko.hasPrototype(instance[protoProperty], prototype); // Walk the prototype chain\r\n};\r\n\r\nko.isObservable = function (instance) {\r\n    return ko.hasPrototype(instance, ko.observable);\r\n}\r\nko.isWriteableObservable = function (instance) {\r\n    // Observable\r\n    if ((typeof instance == \"function\") && instance[protoProperty] === ko.observable)\r\n        return true;\r\n    // Writeable dependent observable\r\n    if ((typeof instance == \"function\") && (instance[protoProperty] === ko.dependentObservable) && (instance.hasWriteFunction))\r\n        return true;\r\n    // Anything else\r\n    return false;\r\n}\r\n\r\n\r\nko.exportSymbol('observable', ko.observable);\r\nko.exportSymbol('isObservable', ko.isObservable);\r\nko.exportSymbol('isWriteableObservable', ko.isWriteableObservable);\r\nko.exportSymbol('isWritableObservable', ko.isWriteableObservable);\r\nko.observableArray = function (initialValues) {\r\n    initialValues = initialValues || [];\r\n\r\n    if (typeof initialValues != 'object' || !('length' in initialValues))\r\n        throw new Error(\"The argument passed when initializing an observable array must be an array, or null, or undefined.\");\r\n\r\n    var result = ko.observable(initialValues);\r\n    ko.utils.setPrototypeOfOrExtend(result, ko.observableArray['fn']);\r\n    return result.extend({'trackArrayChanges':true});\r\n};\r\n\r\nko.observableArray['fn'] = {\r\n    'remove': function (valueOrPredicate) {\r\n        var underlyingArray = this.peek();\r\n        var removedValues = [];\r\n        var predicate = typeof valueOrPredicate == \"function\" && !ko.isObservable(valueOrPredicate) ? valueOrPredicate : function (value) { return value === valueOrPredicate; };\r\n        for (var i = 0; i < underlyingArray.length; i++) {\r\n            var value = underlyingArray[i];\r\n            if (predicate(value)) {\r\n                if (removedValues.length === 0) {\r\n                    this.valueWillMutate();\r\n                }\r\n                removedValues.push(value);\r\n                underlyingArray.splice(i, 1);\r\n                i--;\r\n            }\r\n        }\r\n        if (removedValues.length) {\r\n            this.valueHasMutated();\r\n        }\r\n        return removedValues;\r\n    },\r\n\r\n    'removeAll': function (arrayOfValues) {\r\n        // If you passed zero args, we remove everything\r\n        if (arrayOfValues === undefined) {\r\n            var underlyingArray = this.peek();\r\n            var allValues = underlyingArray.slice(0);\r\n            this.valueWillMutate();\r\n            underlyingArray.splice(0, underlyingArray.length);\r\n            this.valueHasMutated();\r\n            return allValues;\r\n        }\r\n        // If you passed an arg, we interpret it as an array of entries to remove\r\n        if (!arrayOfValues)\r\n            return [];\r\n        return this['remove'](function (value) {\r\n            return ko.utils.arrayIndexOf(arrayOfValues, value) >= 0;\r\n        });\r\n    },\r\n\r\n    'destroy': function (valueOrPredicate) {\r\n        var underlyingArray = this.peek();\r\n        var predicate = typeof valueOrPredicate == \"function\" && !ko.isObservable(valueOrPredicate) ? valueOrPredicate : function (value) { return value === valueOrPredicate; };\r\n        this.valueWillMutate();\r\n        for (var i = underlyingArray.length - 1; i >= 0; i--) {\r\n            var value = underlyingArray[i];\r\n            if (predicate(value))\r\n                underlyingArray[i][\"_destroy\"] = true;\r\n        }\r\n        this.valueHasMutated();\r\n    },\r\n\r\n    'destroyAll': function (arrayOfValues) {\r\n        // If you passed zero args, we destroy everything\r\n        if (arrayOfValues === undefined)\r\n            return this['destroy'](function() { return true });\r\n\r\n        // If you passed an arg, we interpret it as an array of entries to destroy\r\n        if (!arrayOfValues)\r\n            return [];\r\n        return this['destroy'](function (value) {\r\n            return ko.utils.arrayIndexOf(arrayOfValues, value) >= 0;\r\n        });\r\n    },\r\n\r\n    'indexOf': function (item) {\r\n        var underlyingArray = this();\r\n        return ko.utils.arrayIndexOf(underlyingArray, item);\r\n    },\r\n\r\n    'replace': function(oldItem, newItem) {\r\n        var index = this['indexOf'](oldItem);\r\n        if (index >= 0) {\r\n            this.valueWillMutate();\r\n            this.peek()[index] = newItem;\r\n            this.valueHasMutated();\r\n        }\r\n    }\r\n};\r\n\r\n// Populate ko.observableArray.fn with read/write functions from native arrays\r\n// Important: Do not add any additional functions here that may reasonably be used to *read* data from the array\r\n// because we'll eval them without causing subscriptions, so ko.computed output could end up getting stale\r\nko.utils.arrayForEach([\"pop\", \"push\", \"reverse\", \"shift\", \"sort\", \"splice\", \"unshift\"], function (methodName) {\r\n    ko.observableArray['fn'][methodName] = function () {\r\n        // Use \"peek\" to avoid creating a subscription in any computed that we're executing in the context of\r\n        // (for consistency with mutating regular observables)\r\n        var underlyingArray = this.peek();\r\n        this.valueWillMutate();\r\n        this.cacheDiffForKnownOperation(underlyingArray, methodName, arguments);\r\n        var methodCallResult = underlyingArray[methodName].apply(underlyingArray, arguments);\r\n        this.valueHasMutated();\r\n        return methodCallResult;\r\n    };\r\n});\r\n\r\n// Populate ko.observableArray.fn with read-only functions from native arrays\r\nko.utils.arrayForEach([\"slice\"], function (methodName) {\r\n    ko.observableArray['fn'][methodName] = function () {\r\n        var underlyingArray = this();\r\n        return underlyingArray[methodName].apply(underlyingArray, arguments);\r\n    };\r\n});\r\n\r\n// Note that for browsers that don't support proto assignment, the\r\n// inheritance chain is created manually in the ko.observableArray constructor\r\nif (ko.utils.canSetPrototype) {\r\n    ko.utils.setPrototypeOf(ko.observableArray['fn'], ko.observable['fn']);\r\n}\r\n\r\nko.exportSymbol('observableArray', ko.observableArray);\r\nvar arrayChangeEventName = 'arrayChange';\r\nko.extenders['trackArrayChanges'] = function(target) {\r\n    // Only modify the target observable once\r\n    if (target.cacheDiffForKnownOperation) {\r\n        return;\r\n    }\r\n    var trackingChanges = false,\r\n        cachedDiff = null,\r\n        arrayChangeSubscription,\r\n        pendingNotifications = 0,\r\n        underlyingBeforeSubscriptionAddFunction = target.beforeSubscriptionAdd,\r\n        underlyingAfterSubscriptionRemoveFunction = target.afterSubscriptionRemove;\r\n\r\n    // Watch \"subscribe\" calls, and for array change events, ensure change tracking is enabled\r\n    target.beforeSubscriptionAdd = function (event) {\r\n        if (underlyingBeforeSubscriptionAddFunction)\r\n            underlyingBeforeSubscriptionAddFunction.call(target, event);\r\n        if (event === arrayChangeEventName) {\r\n            trackChanges();\r\n        }\r\n    };\r\n    // Watch \"dispose\" calls, and for array change events, ensure change tracking is disabled when all are disposed\r\n    target.afterSubscriptionRemove = function (event) {\r\n        if (underlyingAfterSubscriptionRemoveFunction)\r\n            underlyingAfterSubscriptionRemoveFunction.call(target, event);\r\n        if (event === arrayChangeEventName && !target.hasSubscriptionsForEvent(arrayChangeEventName)) {\r\n            arrayChangeSubscription.dispose();\r\n            trackingChanges = false;\r\n        }\r\n    };\r\n\r\n    function trackChanges() {\r\n        // Calling 'trackChanges' multiple times is the same as calling it once\r\n        if (trackingChanges) {\r\n            return;\r\n        }\r\n\r\n        trackingChanges = true;\r\n\r\n        // Intercept \"notifySubscribers\" to track how many times it was called.\r\n        var underlyingNotifySubscribersFunction = target['notifySubscribers'];\r\n        target['notifySubscribers'] = function(valueToNotify, event) {\r\n            if (!event || event === defaultEvent) {\r\n                ++pendingNotifications;\r\n            }\r\n            return underlyingNotifySubscribersFunction.apply(this, arguments);\r\n        };\r\n\r\n        // Each time the array changes value, capture a clone so that on the next\r\n        // change it's possible to produce a diff\r\n        var previousContents = [].concat(target.peek() || []);\r\n        cachedDiff = null;\r\n        arrayChangeSubscription = target.subscribe(function(currentContents) {\r\n            // Make a copy of the current contents and ensure it's an array\r\n            currentContents = [].concat(currentContents || []);\r\n\r\n            // Compute the diff and issue notifications, but only if someone is listening\r\n            if (target.hasSubscriptionsForEvent(arrayChangeEventName)) {\r\n                var changes = getChanges(previousContents, currentContents);\r\n            }\r\n\r\n            // Eliminate references to the old, removed items, so they can be GCed\r\n            previousContents = currentContents;\r\n            cachedDiff = null;\r\n            pendingNotifications = 0;\r\n\r\n            if (changes && changes.length) {\r\n                target['notifySubscribers'](changes, arrayChangeEventName);\r\n            }\r\n        });\r\n    }\r\n\r\n    function getChanges(previousContents, currentContents) {\r\n        // We try to re-use cached diffs.\r\n        // The scenarios where pendingNotifications > 1 are when using rate-limiting or the Deferred Updates\r\n        // plugin, which without this check would not be compatible with arrayChange notifications. Normally,\r\n        // notifications are issued immediately so we wouldn't be queueing up more than one.\r\n        if (!cachedDiff || pendingNotifications > 1) {\r\n            cachedDiff = ko.utils.compareArrays(previousContents, currentContents, { 'sparse': true });\r\n        }\r\n\r\n        return cachedDiff;\r\n    }\r\n\r\n    target.cacheDiffForKnownOperation = function(rawArray, operationName, args) {\r\n        // Only run if we're currently tracking changes for this observable array\r\n        // and there aren't any pending deferred notifications.\r\n        if (!trackingChanges || pendingNotifications) {\r\n            return;\r\n        }\r\n        var diff = [],\r\n            arrayLength = rawArray.length,\r\n            argsLength = args.length,\r\n            offset = 0;\r\n\r\n        function pushDiff(status, value, index) {\r\n            return diff[diff.length] = { 'status': status, 'value': value, 'index': index };\r\n        }\r\n        switch (operationName) {\r\n            case 'push':\r\n                offset = arrayLength;\r\n            case 'unshift':\r\n                for (var index = 0; index < argsLength; index++) {\r\n                    pushDiff('added', args[index], offset + index);\r\n                }\r\n                break;\r\n\r\n            case 'pop':\r\n                offset = arrayLength - 1;\r\n            case 'shift':\r\n                if (arrayLength) {\r\n                    pushDiff('deleted', rawArray[offset], offset);\r\n                }\r\n                break;\r\n\r\n            case 'splice':\r\n                // Negative start index means 'from end of array'. After that we clamp to [0...arrayLength].\r\n                // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\r\n                var startIndex = Math.min(Math.max(0, args[0] < 0 ? arrayLength + args[0] : args[0]), arrayLength),\r\n                    endDeleteIndex = argsLength === 1 ? arrayLength : Math.min(startIndex + (args[1] || 0), arrayLength),\r\n                    endAddIndex = startIndex + argsLength - 2,\r\n                    endIndex = Math.max(endDeleteIndex, endAddIndex),\r\n                    additions = [], deletions = [];\r\n                for (var index = startIndex, argsIndex = 2; index < endIndex; ++index, ++argsIndex) {\r\n                    if (index < endDeleteIndex)\r\n                        deletions.push(pushDiff('deleted', rawArray[index], index));\r\n                    if (index < endAddIndex)\r\n                        additions.push(pushDiff('added', args[argsIndex], index));\r\n                }\r\n                ko.utils.findMovesInArrayComparison(deletions, additions);\r\n                break;\r\n\r\n            default:\r\n                return;\r\n        }\r\n        cachedDiff = diff;\r\n    };\r\n};\r\nko.computed = ko.dependentObservable = function (evaluatorFunctionOrOptions, evaluatorFunctionTarget, options) {\r\n    var _latestValue,\r\n        _needsEvaluation = true,\r\n        _isBeingEvaluated = false,\r\n        _suppressDisposalUntilDisposeWhenReturnsFalse = false,\r\n        _isDisposed = false,\r\n        readFunction = evaluatorFunctionOrOptions,\r\n        pure = false,\r\n        isSleeping = false;\r\n\r\n    if (readFunction && typeof readFunction == \"object\") {\r\n        // Single-parameter syntax - everything is on this \"options\" param\r\n        options = readFunction;\r\n        readFunction = options[\"read\"];\r\n    } else {\r\n        // Multi-parameter syntax - construct the options according to the params passed\r\n        options = options || {};\r\n        if (!readFunction)\r\n            readFunction = options[\"read\"];\r\n    }\r\n    if (typeof readFunction != \"function\")\r\n        throw new Error(\"Pass a function that returns the value of the ko.computed\");\r\n\r\n    function addDependencyTracking(id, target, trackingObj) {\r\n        if (pure && target === dependentObservable) {\r\n            throw Error(\"A 'pure' computed must not be called recursively\");\r\n        }\r\n\r\n        dependencyTracking[id] = trackingObj;\r\n        trackingObj._order = _dependenciesCount++;\r\n        trackingObj._version = target.getVersion();\r\n    }\r\n\r\n    function haveDependenciesChanged() {\r\n        var id, dependency;\r\n        for (id in dependencyTracking) {\r\n            if (dependencyTracking.hasOwnProperty(id)) {\r\n                dependency = dependencyTracking[id];\r\n                if (dependency._target.hasChanged(dependency._version)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function disposeComputed() {\r\n        if (!isSleeping && dependencyTracking) {\r\n            ko.utils.objectForEach(dependencyTracking, function (id, dependency) {\r\n                if (dependency.dispose)\r\n                    dependency.dispose();\r\n            });\r\n        }\r\n        dependencyTracking = null;\r\n        _dependenciesCount = 0;\r\n        _isDisposed = true;\r\n        _needsEvaluation = false;\r\n        isSleeping = false;\r\n    }\r\n\r\n    function evaluatePossiblyAsync() {\r\n        var throttleEvaluationTimeout = dependentObservable['throttleEvaluation'];\r\n        if (throttleEvaluationTimeout && throttleEvaluationTimeout >= 0) {\r\n            clearTimeout(evaluationTimeoutInstance);\r\n            evaluationTimeoutInstance = setTimeout(function () {\r\n                evaluateImmediate(true /*notifyChange*/);\r\n            }, throttleEvaluationTimeout);\r\n        } else if (dependentObservable._evalRateLimited) {\r\n            dependentObservable._evalRateLimited();\r\n        } else {\r\n            evaluateImmediate(true /*notifyChange*/);\r\n        }\r\n    }\r\n\r\n    function evaluateImmediate(notifyChange) {\r\n        if (_isBeingEvaluated) {\r\n            // If the evaluation of a ko.computed causes side effects, it's possible that it will trigger its own re-evaluation.\r\n            // This is not desirable (it's hard for a developer to realise a chain of dependencies might cause this, and they almost\r\n            // certainly didn't intend infinite re-evaluations). So, for predictability, we simply prevent ko.computeds from causing\r\n            // their own re-evaluation. Further discussion at https://github.com/SteveSanderson/knockout/pull/387\r\n            return;\r\n        }\r\n\r\n        // Do not evaluate (and possibly capture new dependencies) if disposed\r\n        if (_isDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposeWhen && disposeWhen()) {\r\n            // See comment below about _suppressDisposalUntilDisposeWhenReturnsFalse\r\n            if (!_suppressDisposalUntilDisposeWhenReturnsFalse) {\r\n                dispose();\r\n                return;\r\n            }\r\n        } else {\r\n            // It just did return false, so we can stop suppressing now\r\n            _suppressDisposalUntilDisposeWhenReturnsFalse = false;\r\n        }\r\n\r\n        _isBeingEvaluated = true;\r\n\r\n        try {\r\n            // Initially, we assume that none of the subscriptions are still being used (i.e., all are candidates for disposal).\r\n            // Then, during evaluation, we cross off any that are in fact still being used.\r\n            var disposalCandidates = dependencyTracking,\r\n                disposalCount = _dependenciesCount,\r\n                isInitial = pure ? undefined : !_dependenciesCount;   // If we're evaluating when there are no previous dependencies, it must be the first time\r\n\r\n            ko.dependencyDetection.begin({\r\n                callback: function(subscribable, id) {\r\n                    if (!_isDisposed) {\r\n                        if (disposalCount && disposalCandidates[id]) {\r\n                            // Don't want to dispose this subscription, as it's still being used\r\n                            addDependencyTracking(id, subscribable, disposalCandidates[id]);\r\n                            delete disposalCandidates[id];\r\n                            --disposalCount;\r\n                        } else if (!dependencyTracking[id]) {\r\n                            // Brand new subscription - add it\r\n                            addDependencyTracking(id, subscribable, isSleeping ? { _target: subscribable } : subscribable.subscribe(evaluatePossiblyAsync));\r\n                        }\r\n                    }\r\n                },\r\n                computed: dependentObservable,\r\n                isInitial: isInitial\r\n            });\r\n\r\n            dependencyTracking = {};\r\n            _dependenciesCount = 0;\r\n\r\n            try {\r\n                var newValue = evaluatorFunctionTarget ? readFunction.call(evaluatorFunctionTarget) : readFunction();\r\n\r\n            } finally {\r\n                ko.dependencyDetection.end();\r\n\r\n                // For each subscription no longer being used, remove it from the active subscriptions list and dispose it\r\n                if (disposalCount && !isSleeping) {\r\n                    ko.utils.objectForEach(disposalCandidates, function(id, toDispose) {\r\n                        if (toDispose.dispose)\r\n                            toDispose.dispose();\r\n                    });\r\n                }\r\n\r\n                _needsEvaluation = false;\r\n            }\r\n\r\n            if (dependentObservable.isDifferent(_latestValue, newValue)) {\r\n                if (!isSleeping) {\r\n                    notify(_latestValue, \"beforeChange\");\r\n                }\r\n\r\n                _latestValue = newValue;\r\n                if (DEBUG) dependentObservable._latestValue = _latestValue;\r\n\r\n                if (isSleeping) {\r\n                    dependentObservable.updateVersion();\r\n                } else if (notifyChange) {\r\n                    notify(_latestValue);\r\n                }\r\n            }\r\n\r\n            if (isInitial) {\r\n                notify(_latestValue, \"awake\");\r\n            }\r\n        } finally {\r\n            _isBeingEvaluated = false;\r\n        }\r\n\r\n        if (!_dependenciesCount)\r\n            dispose();\r\n    }\r\n\r\n    function dependentObservable() {\r\n        if (arguments.length > 0) {\r\n            if (typeof writeFunction === \"function\") {\r\n                // Writing a value\r\n                writeFunction.apply(evaluatorFunctionTarget, arguments);\r\n            } else {\r\n                throw new Error(\"Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.\");\r\n            }\r\n            return this; // Permits chained assignments\r\n        } else {\r\n            // Reading the value\r\n            ko.dependencyDetection.registerDependency(dependentObservable);\r\n            if (_needsEvaluation || (isSleeping && haveDependenciesChanged())) {\r\n                evaluateImmediate();\r\n            }\r\n            return _latestValue;\r\n        }\r\n    }\r\n\r\n    function peek() {\r\n        // Peek won't re-evaluate, except while the computed is sleeping or to get the initial value when \"deferEvaluation\" is set.\r\n        if ((_needsEvaluation && !_dependenciesCount) || (isSleeping && haveDependenciesChanged())) {\r\n            evaluateImmediate();\r\n        }\r\n        return _latestValue;\r\n    }\r\n\r\n    function isActive() {\r\n        return _needsEvaluation || _dependenciesCount > 0;\r\n    }\r\n\r\n    function notify(value, event) {\r\n        dependentObservable[\"notifySubscribers\"](value, event);\r\n    }\r\n\r\n    // By here, \"options\" is always non-null\r\n    var writeFunction = options[\"write\"],\r\n        disposeWhenNodeIsRemoved = options[\"disposeWhenNodeIsRemoved\"] || options.disposeWhenNodeIsRemoved || null,\r\n        disposeWhenOption = options[\"disposeWhen\"] || options.disposeWhen,\r\n        disposeWhen = disposeWhenOption,\r\n        dispose = disposeComputed,\r\n        dependencyTracking = {},\r\n        _dependenciesCount = 0,\r\n        evaluationTimeoutInstance = null;\r\n\r\n    if (!evaluatorFunctionTarget)\r\n        evaluatorFunctionTarget = options[\"owner\"];\r\n\r\n    ko.subscribable.call(dependentObservable);\r\n    ko.utils.setPrototypeOfOrExtend(dependentObservable, ko.dependentObservable['fn']);\r\n\r\n    dependentObservable.peek = peek;\r\n    dependentObservable.getDependenciesCount = function () { return _dependenciesCount; };\r\n    dependentObservable.hasWriteFunction = typeof writeFunction === \"function\";\r\n    dependentObservable.dispose = function () { dispose(); };\r\n    dependentObservable.isActive = isActive;\r\n\r\n    // Replace the limit function with one that delays evaluation as well.\r\n    var originalLimit = dependentObservable.limit;\r\n    dependentObservable.limit = function(limitFunction) {\r\n        originalLimit.call(dependentObservable, limitFunction);\r\n        dependentObservable._evalRateLimited = function() {\r\n            dependentObservable._rateLimitedBeforeChange(_latestValue);\r\n\r\n            _needsEvaluation = true;    // Mark as dirty\r\n\r\n            // Pass the observable to the rate-limit code, which will access it when\r\n            // it's time to do the notification.\r\n            dependentObservable._rateLimitedChange(dependentObservable);\r\n        }\r\n    };\r\n\r\n    if (options['pure']) {\r\n        pure = true;\r\n        isSleeping = true;     // Starts off sleeping; will awake on the first subscription\r\n        dependentObservable.beforeSubscriptionAdd = function (event) {\r\n            // If asleep, wake up the computed by subscribing to any dependencies.\r\n            if (!_isDisposed && isSleeping && event == 'change') {\r\n                isSleeping = false;\r\n                if (_needsEvaluation || haveDependenciesChanged()) {\r\n                    dependencyTracking = null;\r\n                    _dependenciesCount = 0;\r\n                    _needsEvaluation = true;\r\n                    evaluateImmediate();\r\n                } else {\r\n                    // First put the dependencies in order\r\n                    var dependeciesOrder = [];\r\n                    ko.utils.objectForEach(dependencyTracking, function (id, dependency) {\r\n                        dependeciesOrder[dependency._order] = id;\r\n                    });\r\n                    // Next, subscribe to each one\r\n                    ko.utils.arrayForEach(dependeciesOrder, function(id, order) {\r\n                        var dependency = dependencyTracking[id],\r\n                            subscription = dependency._target.subscribe(evaluatePossiblyAsync);\r\n                        subscription._order = order;\r\n                        subscription._version = dependency._version;\r\n                        dependencyTracking[id] = subscription;\r\n                    });\r\n                }\r\n                if (!_isDisposed) {     // test since evaluating could trigger disposal\r\n                    notify(_latestValue, \"awake\");\r\n                }\r\n            }\r\n        };\r\n\r\n        dependentObservable.afterSubscriptionRemove = function (event) {\r\n            if (!_isDisposed && event == 'change' && !dependentObservable.hasSubscriptionsForEvent('change')) {\r\n                ko.utils.objectForEach(dependencyTracking, function (id, dependency) {\r\n                    if (dependency.dispose) {\r\n                        dependencyTracking[id] = {\r\n                            _target: dependency._target,\r\n                            _order: dependency._order,\r\n                            _version: dependency._version\r\n                        };\r\n                        dependency.dispose();\r\n                    }\r\n                });\r\n                isSleeping = true;\r\n                notify(undefined, \"asleep\");\r\n            }\r\n        };\r\n\r\n        // Because a pure computed is not automatically updated while it is sleeping, we can't\r\n        // simply return the version number. Instead, we check if any of the dependencies have\r\n        // changed and conditionally re-evaluate the computed observable.\r\n        dependentObservable._originalGetVersion = dependentObservable.getVersion;\r\n        dependentObservable.getVersion = function () {\r\n            if (isSleeping && (_needsEvaluation || haveDependenciesChanged())) {\r\n                evaluateImmediate();\r\n            }\r\n            return dependentObservable._originalGetVersion();\r\n        };\r\n    } else if (options['deferEvaluation']) {\r\n        // This will force a computed with deferEvaluation to evaluate when the first subscriptions is registered.\r\n        dependentObservable.beforeSubscriptionAdd = function (event) {\r\n            if (event == 'change' || event == 'beforeChange') {\r\n                peek();\r\n            }\r\n        }\r\n    }\r\n\r\n    ko.exportProperty(dependentObservable, 'peek', dependentObservable.peek);\r\n    ko.exportProperty(dependentObservable, 'dispose', dependentObservable.dispose);\r\n    ko.exportProperty(dependentObservable, 'isActive', dependentObservable.isActive);\r\n    ko.exportProperty(dependentObservable, 'getDependenciesCount', dependentObservable.getDependenciesCount);\r\n\r\n    // Add a \"disposeWhen\" callback that, on each evaluation, disposes if the node was removed without using ko.removeNode.\r\n    if (disposeWhenNodeIsRemoved) {\r\n        // Since this computed is associated with a DOM node, and we don't want to dispose the computed\r\n        // until the DOM node is *removed* from the document (as opposed to never having been in the document),\r\n        // we'll prevent disposal until \"disposeWhen\" first returns false.\r\n        _suppressDisposalUntilDisposeWhenReturnsFalse = true;\r\n\r\n        // Only watch for the node's disposal if the value really is a node. It might not be,\r\n        // e.g., { disposeWhenNodeIsRemoved: true } can be used to opt into the \"only dispose\r\n        // after first false result\" behaviour even if there's no specific node to watch. This\r\n        // technique is intended for KO's internal use only and shouldn't be documented or used\r\n        // by application code, as it's likely to change in a future version of KO.\r\n        if (disposeWhenNodeIsRemoved.nodeType) {\r\n            disposeWhen = function () {\r\n                return !ko.utils.domNodeIsAttachedToDocument(disposeWhenNodeIsRemoved) || (disposeWhenOption && disposeWhenOption());\r\n            };\r\n        }\r\n    }\r\n\r\n    // Evaluate, unless sleeping or deferEvaluation is true\r\n    if (!isSleeping && !options['deferEvaluation'])\r\n        evaluateImmediate();\r\n\r\n    // Attach a DOM node disposal callback so that the computed will be proactively disposed as soon as the node is\r\n    // removed using ko.removeNode. But skip if isActive is false (there will never be any dependencies to dispose).\r\n    if (disposeWhenNodeIsRemoved && isActive() && disposeWhenNodeIsRemoved.nodeType) {\r\n        dispose = function() {\r\n            ko.utils.domNodeDisposal.removeDisposeCallback(disposeWhenNodeIsRemoved, dispose);\r\n            disposeComputed();\r\n        };\r\n        ko.utils.domNodeDisposal.addDisposeCallback(disposeWhenNodeIsRemoved, dispose);\r\n    }\r\n\r\n    return dependentObservable;\r\n};\r\n\r\nko.isComputed = function(instance) {\r\n    return ko.hasPrototype(instance, ko.dependentObservable);\r\n};\r\n\r\nvar protoProp = ko.observable.protoProperty; // == \"__ko_proto__\"\r\nko.dependentObservable[protoProp] = ko.observable;\r\n\r\nko.dependentObservable['fn'] = {\r\n    \"equalityComparer\": valuesArePrimitiveAndEqual\r\n};\r\nko.dependentObservable['fn'][protoProp] = ko.dependentObservable;\r\n\r\n// Note that for browsers that don't support proto assignment, the\r\n// inheritance chain is created manually in the ko.dependentObservable constructor\r\nif (ko.utils.canSetPrototype) {\r\n    ko.utils.setPrototypeOf(ko.dependentObservable['fn'], ko.subscribable['fn']);\r\n}\r\n\r\nko.exportSymbol('dependentObservable', ko.dependentObservable);\r\nko.exportSymbol('computed', ko.dependentObservable); // Make \"ko.computed\" an alias for \"ko.dependentObservable\"\r\nko.exportSymbol('isComputed', ko.isComputed);\r\n\r\nko.pureComputed = function (evaluatorFunctionOrOptions, evaluatorFunctionTarget) {\r\n    if (typeof evaluatorFunctionOrOptions === 'function') {\r\n        return ko.computed(evaluatorFunctionOrOptions, evaluatorFunctionTarget, {'pure':true});\r\n    } else {\r\n        evaluatorFunctionOrOptions = ko.utils.extend({}, evaluatorFunctionOrOptions);   // make a copy of the parameter object\r\n        evaluatorFunctionOrOptions['pure'] = true;\r\n        return ko.computed(evaluatorFunctionOrOptions, evaluatorFunctionTarget);\r\n    }\r\n}\r\nko.exportSymbol('pureComputed', ko.pureComputed);\r\n\r\n(function() {\r\n    var maxNestedObservableDepth = 10; // Escape the (unlikely) pathalogical case where an observable's current value is itself (or similar reference cycle)\r\n\r\n    ko.toJS = function(rootObject) {\r\n        if (arguments.length == 0)\r\n            throw new Error(\"When calling ko.toJS, pass the object you want to convert.\");\r\n\r\n        // We just unwrap everything at every level in the object graph\r\n        return mapJsObjectGraph(rootObject, function(valueToMap) {\r\n            // Loop because an observable's value might in turn be another observable wrapper\r\n            for (var i = 0; ko.isObservable(valueToMap) && (i < maxNestedObservableDepth); i++)\r\n                valueToMap = valueToMap();\r\n            return valueToMap;\r\n        });\r\n    };\r\n\r\n    ko.toJSON = function(rootObject, replacer, space) {     // replacer and space are optional\r\n        var plainJavaScriptObject = ko.toJS(rootObject);\r\n        return ko.utils.stringifyJson(plainJavaScriptObject, replacer, space);\r\n    };\r\n\r\n    function mapJsObjectGraph(rootObject, mapInputCallback, visitedObjects) {\r\n        visitedObjects = visitedObjects || new objectLookup();\r\n\r\n        rootObject = mapInputCallback(rootObject);\r\n        var canHaveProperties = (typeof rootObject == \"object\") && (rootObject !== null) && (rootObject !== undefined) && (!(rootObject instanceof Date)) && (!(rootObject instanceof String)) && (!(rootObject instanceof Number)) && (!(rootObject instanceof Boolean));\r\n        if (!canHaveProperties)\r\n            return rootObject;\r\n\r\n        var outputProperties = rootObject instanceof Array ? [] : {};\r\n        visitedObjects.save(rootObject, outputProperties);\r\n\r\n        visitPropertiesOrArrayEntries(rootObject, function(indexer) {\r\n            var propertyValue = mapInputCallback(rootObject[indexer]);\r\n\r\n            switch (typeof propertyValue) {\r\n                case \"boolean\":\r\n                case \"number\":\r\n                case \"string\":\r\n                case \"function\":\r\n                    outputProperties[indexer] = propertyValue;\r\n                    break;\r\n                case \"object\":\r\n                case \"undefined\":\r\n                    var previouslyMappedValue = visitedObjects.get(propertyValue);\r\n                    outputProperties[indexer] = (previouslyMappedValue !== undefined)\r\n                        ? previouslyMappedValue\r\n                        : mapJsObjectGraph(propertyValue, mapInputCallback, visitedObjects);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return outputProperties;\r\n    }\r\n\r\n    function visitPropertiesOrArrayEntries(rootObject, visitorCallback) {\r\n        if (rootObject instanceof Array) {\r\n            for (var i = 0; i < rootObject.length; i++)\r\n                visitorCallback(i);\r\n\r\n            // For arrays, also respect toJSON property for custom mappings (fixes #278)\r\n            if (typeof rootObject['toJSON'] == 'function')\r\n                visitorCallback('toJSON');\r\n        } else {\r\n            for (var propertyName in rootObject) {\r\n                visitorCallback(propertyName);\r\n            }\r\n        }\r\n    };\r\n\r\n    function objectLookup() {\r\n        this.keys = [];\r\n        this.values = [];\r\n    };\r\n\r\n    objectLookup.prototype = {\r\n        constructor: objectLookup,\r\n        save: function(key, value) {\r\n            var existingIndex = ko.utils.arrayIndexOf(this.keys, key);\r\n            if (existingIndex >= 0)\r\n                this.values[existingIndex] = value;\r\n            else {\r\n                this.keys.push(key);\r\n                this.values.push(value);\r\n            }\r\n        },\r\n        get: function(key) {\r\n            var existingIndex = ko.utils.arrayIndexOf(this.keys, key);\r\n            return (existingIndex >= 0) ? this.values[existingIndex] : undefined;\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol('toJS', ko.toJS);\r\nko.exportSymbol('toJSON', ko.toJSON);\r\n(function () {\r\n    var hasDomDataExpandoProperty = '__ko__hasDomDataOptionValue__';\r\n\r\n    // Normally, SELECT elements and their OPTIONs can only take value of type 'string' (because the values\r\n    // are stored on DOM attributes). ko.selectExtensions provides a way for SELECTs/OPTIONs to have values\r\n    // that are arbitrary objects. This is very convenient when implementing things like cascading dropdowns.\r\n    ko.selectExtensions = {\r\n        readValue : function(element) {\r\n            switch (ko.utils.tagNameLower(element)) {\r\n                case 'option':\r\n                    if (element[hasDomDataExpandoProperty] === true)\r\n                        return ko.utils.domData.get(element, ko.bindingHandlers.options.optionValueDomDataKey);\r\n                    return ko.utils.ieVersion <= 7\r\n                        ? (element.getAttributeNode('value') && element.getAttributeNode('value').specified ? element.value : element.text)\r\n                        : element.value;\r\n                case 'select':\r\n                    return element.selectedIndex >= 0 ? ko.selectExtensions.readValue(element.options[element.selectedIndex]) : undefined;\r\n                default:\r\n                    return element.value;\r\n            }\r\n        },\r\n\r\n        writeValue: function(element, value, allowUnset) {\r\n            switch (ko.utils.tagNameLower(element)) {\r\n                case 'option':\r\n                    switch(typeof value) {\r\n                        case \"string\":\r\n                            ko.utils.domData.set(element, ko.bindingHandlers.options.optionValueDomDataKey, undefined);\r\n                            if (hasDomDataExpandoProperty in element) { // IE <= 8 throws errors if you delete non-existent properties from a DOM node\r\n                                delete element[hasDomDataExpandoProperty];\r\n                            }\r\n                            element.value = value;\r\n                            break;\r\n                        default:\r\n                            // Store arbitrary object using DomData\r\n                            ko.utils.domData.set(element, ko.bindingHandlers.options.optionValueDomDataKey, value);\r\n                            element[hasDomDataExpandoProperty] = true;\r\n\r\n                            // Special treatment of numbers is just for backward compatibility. KO 1.2.1 wrote numerical values to element.value.\r\n                            element.value = typeof value === \"number\" ? value : \"\";\r\n                            break;\r\n                    }\r\n                    break;\r\n                case 'select':\r\n                    if (value === \"\" || value === null)       // A blank string or null value will select the caption\r\n                        value = undefined;\r\n                    var selection = -1;\r\n                    for (var i = 0, n = element.options.length, optionValue; i < n; ++i) {\r\n                        optionValue = ko.selectExtensions.readValue(element.options[i]);\r\n                        // Include special check to handle selecting a caption with a blank string value\r\n                        if (optionValue == value || (optionValue == \"\" && value === undefined)) {\r\n                            selection = i;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (allowUnset || selection >= 0 || (value === undefined && element.size > 1)) {\r\n                        element.selectedIndex = selection;\r\n                    }\r\n                    break;\r\n                default:\r\n                    if ((value === null) || (value === undefined))\r\n                        value = \"\";\r\n                    element.value = value;\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol('selectExtensions', ko.selectExtensions);\r\nko.exportSymbol('selectExtensions.readValue', ko.selectExtensions.readValue);\r\nko.exportSymbol('selectExtensions.writeValue', ko.selectExtensions.writeValue);\r\nko.expressionRewriting = (function () {\r\n    var javaScriptReservedWords = [\"true\", \"false\", \"null\", \"undefined\"];\r\n\r\n    // Matches something that can be assigned to--either an isolated identifier or something ending with a property accessor\r\n    // This is designed to be simple and avoid false negatives, but could produce false positives (e.g., a+b.c).\r\n    // This also will not properly handle nested brackets (e.g., obj1[obj2['prop']]; see #911).\r\n    var javaScriptAssignmentTarget = /^(?:[$_a-z][$\\w]*|(.+)(\\.\\s*[$_a-z][$\\w]*|\\[.+\\]))$/i;\r\n\r\n    function getWriteableValue(expression) {\r\n        if (ko.utils.arrayIndexOf(javaScriptReservedWords, expression) >= 0)\r\n            return false;\r\n        var match = expression.match(javaScriptAssignmentTarget);\r\n        return match === null ? false : match[1] ? ('Object(' + match[1] + ')' + match[2]) : expression;\r\n    }\r\n\r\n    // The following regular expressions will be used to split an object-literal string into tokens\r\n\r\n        // These two match strings, either with double quotes or single quotes\r\n    var stringDouble = '\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"',\r\n        stringSingle = \"'(?:[^'\\\\\\\\]|\\\\\\\\.)*'\",\r\n        // Matches a regular expression (text enclosed by slashes), but will also match sets of divisions\r\n        // as a regular expression (this is handled by the parsing loop below).\r\n        stringRegexp = '/(?:[^/\\\\\\\\]|\\\\\\\\.)*/\\w*',\r\n        // These characters have special meaning to the parser and must not appear in the middle of a\r\n        // token, except as part of a string.\r\n        specials = ',\"\\'{}()/:[\\\\]',\r\n        // Match text (at least two characters) that does not contain any of the above special characters,\r\n        // although some of the special characters are allowed to start it (all but the colon and comma).\r\n        // The text can contain spaces, but leading or trailing spaces are skipped.\r\n        everyThingElse = '[^\\\\s:,/][^' + specials + ']*[^\\\\s' + specials + ']',\r\n        // Match any non-space character not matched already. This will match colons and commas, since they're\r\n        // not matched by \"everyThingElse\", but will also match any other single character that wasn't already\r\n        // matched (for example: in \"a: 1, b: 2\", each of the non-space characters will be matched by oneNotSpace).\r\n        oneNotSpace = '[^\\\\s]',\r\n\r\n        // Create the actual regular expression by or-ing the above strings. The order is important.\r\n        bindingToken = RegExp(stringDouble + '|' + stringSingle + '|' + stringRegexp + '|' + everyThingElse + '|' + oneNotSpace, 'g'),\r\n\r\n        // Match end of previous token to determine whether a slash is a division or regex.\r\n        divisionLookBehind = /[\\])\"'A-Za-z0-9_$]+$/,\r\n        keywordRegexLookBehind = {'in':1,'return':1,'typeof':1};\r\n\r\n    function parseObjectLiteral(objectLiteralString) {\r\n        // Trim leading and trailing spaces from the string\r\n        var str = ko.utils.stringTrim(objectLiteralString);\r\n\r\n        // Trim braces '{' surrounding the whole object literal\r\n        if (str.charCodeAt(0) === 123) str = str.slice(1, -1);\r\n\r\n        // Split into tokens\r\n        var result = [], toks = str.match(bindingToken), key, values = [], depth = 0;\r\n\r\n        if (toks) {\r\n            // Append a comma so that we don't need a separate code block to deal with the last item\r\n            toks.push(',');\r\n\r\n            for (var i = 0, tok; tok = toks[i]; ++i) {\r\n                var c = tok.charCodeAt(0);\r\n                // A comma signals the end of a key/value pair if depth is zero\r\n                if (c === 44) { // \",\"\r\n                    if (depth <= 0) {\r\n                        result.push((key && values.length) ? {key: key, value: values.join('')} : {'unknown': key || values.join('')});\r\n                        key = depth = 0;\r\n                        values = [];\r\n                        continue;\r\n                    }\r\n                // Simply skip the colon that separates the name and value\r\n                } else if (c === 58) { // \":\"\r\n                    if (!depth && !key && values.length === 1) {\r\n                        key = values.pop();\r\n                        continue;\r\n                    }\r\n                // A set of slashes is initially matched as a regular expression, but could be division\r\n                } else if (c === 47 && i && tok.length > 1) {  // \"/\"\r\n                    // Look at the end of the previous token to determine if the slash is actually division\r\n                    var match = toks[i-1].match(divisionLookBehind);\r\n                    if (match && !keywordRegexLookBehind[match[0]]) {\r\n                        // The slash is actually a division punctuator; re-parse the remainder of the string (not including the slash)\r\n                        str = str.substr(str.indexOf(tok) + 1);\r\n                        toks = str.match(bindingToken);\r\n                        toks.push(',');\r\n                        i = -1;\r\n                        // Continue with just the slash\r\n                        tok = '/';\r\n                    }\r\n                // Increment depth for parentheses, braces, and brackets so that interior commas are ignored\r\n                } else if (c === 40 || c === 123 || c === 91) { // '(', '{', '['\r\n                    ++depth;\r\n                } else if (c === 41 || c === 125 || c === 93) { // ')', '}', ']'\r\n                    --depth;\r\n                // The key will be the first token; if it's a string, trim the quotes\r\n                } else if (!key && !values.length && (c === 34 || c === 39)) { // '\"', \"'\"\r\n                    tok = tok.slice(1, -1);\r\n                }\r\n                values.push(tok);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Two-way bindings include a write function that allow the handler to update the value even if it's not an observable.\r\n    var twoWayBindings = {};\r\n\r\n    function preProcessBindings(bindingsStringOrKeyValueArray, bindingOptions) {\r\n        bindingOptions = bindingOptions || {};\r\n\r\n        function processKeyValue(key, val) {\r\n            var writableVal;\r\n            function callPreprocessHook(obj) {\r\n                return (obj && obj['preprocess']) ? (val = obj['preprocess'](val, key, processKeyValue)) : true;\r\n            }\r\n            if (!bindingParams) {\r\n                if (!callPreprocessHook(ko['getBindingHandler'](key)))\r\n                    return;\r\n\r\n                if (twoWayBindings[key] && (writableVal = getWriteableValue(val))) {\r\n                    // For two-way bindings, provide a write method in case the value\r\n                    // isn't a writable observable.\r\n                    propertyAccessorResultStrings.push(\"'\" + key + \"':function(_z){\" + writableVal + \"=_z}\");\r\n                }\r\n            }\r\n            // Values are wrapped in a function so that each value can be accessed independently\r\n            if (makeValueAccessors) {\r\n                val = 'function(){return ' + val + ' }';\r\n            }\r\n            resultStrings.push(\"'\" + key + \"':\" + val);\r\n        }\r\n\r\n        var resultStrings = [],\r\n            propertyAccessorResultStrings = [],\r\n            makeValueAccessors = bindingOptions['valueAccessors'],\r\n            bindingParams = bindingOptions['bindingParams'],\r\n            keyValueArray = typeof bindingsStringOrKeyValueArray === \"string\" ?\r\n                parseObjectLiteral(bindingsStringOrKeyValueArray) : bindingsStringOrKeyValueArray;\r\n\r\n        ko.utils.arrayForEach(keyValueArray, function(keyValue) {\r\n            processKeyValue(keyValue.key || keyValue['unknown'], keyValue.value);\r\n        });\r\n\r\n        if (propertyAccessorResultStrings.length)\r\n            processKeyValue('_ko_property_writers', \"{\" + propertyAccessorResultStrings.join(\",\") + \" }\");\r\n\r\n        return resultStrings.join(\",\");\r\n    }\r\n\r\n    return {\r\n        bindingRewriteValidators: [],\r\n\r\n        twoWayBindings: twoWayBindings,\r\n\r\n        parseObjectLiteral: parseObjectLiteral,\r\n\r\n        preProcessBindings: preProcessBindings,\r\n\r\n        keyValueArrayContainsKey: function(keyValueArray, key) {\r\n            for (var i = 0; i < keyValueArray.length; i++)\r\n                if (keyValueArray[i]['key'] == key)\r\n                    return true;\r\n            return false;\r\n        },\r\n\r\n        // Internal, private KO utility for updating model properties from within bindings\r\n        // property:            If the property being updated is (or might be) an observable, pass it here\r\n        //                      If it turns out to be a writable observable, it will be written to directly\r\n        // allBindings:         An object with a get method to retrieve bindings in the current execution context.\r\n        //                      This will be searched for a '_ko_property_writers' property in case you're writing to a non-observable\r\n        // key:                 The key identifying the property to be written. Example: for { hasFocus: myValue }, write to 'myValue' by specifying the key 'hasFocus'\r\n        // value:               The value to be written\r\n        // checkIfDifferent:    If true, and if the property being written is a writable observable, the value will only be written if\r\n        //                      it is !== existing value on that writable observable\r\n        writeValueToProperty: function(property, allBindings, key, value, checkIfDifferent) {\r\n            if (!property || !ko.isObservable(property)) {\r\n                var propWriters = allBindings.get('_ko_property_writers');\r\n                if (propWriters && propWriters[key])\r\n                    propWriters[key](value);\r\n            } else if (ko.isWriteableObservable(property) && (!checkIfDifferent || property.peek() !== value)) {\r\n                property(value);\r\n            }\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol('expressionRewriting', ko.expressionRewriting);\r\nko.exportSymbol('expressionRewriting.bindingRewriteValidators', ko.expressionRewriting.bindingRewriteValidators);\r\nko.exportSymbol('expressionRewriting.parseObjectLiteral', ko.expressionRewriting.parseObjectLiteral);\r\nko.exportSymbol('expressionRewriting.preProcessBindings', ko.expressionRewriting.preProcessBindings);\r\n\r\n// Making bindings explicitly declare themselves as \"two way\" isn't ideal in the long term (it would be better if\r\n// all bindings could use an official 'property writer' API without needing to declare that they might). However,\r\n// since this is not, and has never been, a public API (_ko_property_writers was never documented), it's acceptable\r\n// as an internal implementation detail in the short term.\r\n// For those developers who rely on _ko_property_writers in their custom bindings, we expose _twoWayBindings as an\r\n// undocumented feature that makes it relatively easy to upgrade to KO 3.0. However, this is still not an official\r\n// public API, and we reserve the right to remove it at any time if we create a real public property writers API.\r\nko.exportSymbol('expressionRewriting._twoWayBindings', ko.expressionRewriting.twoWayBindings);\r\n\r\n// For backward compatibility, define the following aliases. (Previously, these function names were misleading because\r\n// they referred to JSON specifically, even though they actually work with arbitrary JavaScript object literal expressions.)\r\nko.exportSymbol('jsonExpressionRewriting', ko.expressionRewriting);\r\nko.exportSymbol('jsonExpressionRewriting.insertPropertyAccessorsIntoJson', ko.expressionRewriting.preProcessBindings);\r\n(function() {\r\n    // \"Virtual elements\" is an abstraction on top of the usual DOM API which understands the notion that comment nodes\r\n    // may be used to represent hierarchy (in addition to the DOM's natural hierarchy).\r\n    // If you call the DOM-manipulating functions on ko.virtualElements, you will be able to read and write the state\r\n    // of that virtual hierarchy\r\n    //\r\n    // The point of all this is to support containerless templates (e.g., <!-- ko foreach:someCollection -->blah<!-- /ko -->)\r\n    // without having to scatter special cases all over the binding and templating code.\r\n\r\n    // IE 9 cannot reliably read the \"nodeValue\" property of a comment node (see https://github.com/SteveSanderson/knockout/issues/186)\r\n    // but it does give them a nonstandard alternative property called \"text\" that it can read reliably. Other browsers don't have that property.\r\n    // So, use node.text where available, and node.nodeValue elsewhere\r\n    var commentNodesHaveTextProperty = document && document.createComment(\"test\").text === \"<!--test-->\";\r\n\r\n    var startCommentRegex = commentNodesHaveTextProperty ? /^<!--\\s*ko(?:\\s+([\\s\\S]+))?\\s*-->$/ : /^\\s*ko(?:\\s+([\\s\\S]+))?\\s*$/;\r\n    var endCommentRegex =   commentNodesHaveTextProperty ? /^<!--\\s*\\/ko\\s*-->$/ : /^\\s*\\/ko\\s*$/;\r\n    var htmlTagsWithOptionallyClosingChildren = { 'ul': true, 'ol': true };\r\n\r\n    function isStartComment(node) {\r\n        return (node.nodeType == 8) && startCommentRegex.test(commentNodesHaveTextProperty ? node.text : node.nodeValue);\r\n    }\r\n\r\n    function isEndComment(node) {\r\n        return (node.nodeType == 8) && endCommentRegex.test(commentNodesHaveTextProperty ? node.text : node.nodeValue);\r\n    }\r\n\r\n    function getVirtualChildren(startComment, allowUnbalanced) {\r\n        var currentNode = startComment;\r\n        var depth = 1;\r\n        var children = [];\r\n        while (currentNode = currentNode.nextSibling) {\r\n            if (isEndComment(currentNode)) {\r\n                depth--;\r\n                if (depth === 0)\r\n                    return children;\r\n            }\r\n\r\n            children.push(currentNode);\r\n\r\n            if (isStartComment(currentNode))\r\n                depth++;\r\n        }\r\n        if (!allowUnbalanced)\r\n            throw new Error(\"Cannot find closing comment tag to match: \" + startComment.nodeValue);\r\n        return null;\r\n    }\r\n\r\n    function getMatchingEndComment(startComment, allowUnbalanced) {\r\n        var allVirtualChildren = getVirtualChildren(startComment, allowUnbalanced);\r\n        if (allVirtualChildren) {\r\n            if (allVirtualChildren.length > 0)\r\n                return allVirtualChildren[allVirtualChildren.length - 1].nextSibling;\r\n            return startComment.nextSibling;\r\n        } else\r\n            return null; // Must have no matching end comment, and allowUnbalanced is true\r\n    }\r\n\r\n    function getUnbalancedChildTags(node) {\r\n        // e.g., from <div>OK</div><!-- ko blah --><span>Another</span>, returns: <!-- ko blah --><span>Another</span>\r\n        //       from <div>OK</div><!-- /ko --><!-- /ko -->,             returns: <!-- /ko --><!-- /ko -->\r\n        var childNode = node.firstChild, captureRemaining = null;\r\n        if (childNode) {\r\n            do {\r\n                if (captureRemaining)                   // We already hit an unbalanced node and are now just scooping up all subsequent nodes\r\n                    captureRemaining.push(childNode);\r\n                else if (isStartComment(childNode)) {\r\n                    var matchingEndComment = getMatchingEndComment(childNode, /* allowUnbalanced: */ true);\r\n                    if (matchingEndComment)             // It's a balanced tag, so skip immediately to the end of this virtual set\r\n                        childNode = matchingEndComment;\r\n                    else\r\n                        captureRemaining = [childNode]; // It's unbalanced, so start capturing from this point\r\n                } else if (isEndComment(childNode)) {\r\n                    captureRemaining = [childNode];     // It's unbalanced (if it wasn't, we'd have skipped over it already), so start capturing\r\n                }\r\n            } while (childNode = childNode.nextSibling);\r\n        }\r\n        return captureRemaining;\r\n    }\r\n\r\n    ko.virtualElements = {\r\n        allowedBindings: {},\r\n\r\n        childNodes: function(node) {\r\n            return isStartComment(node) ? getVirtualChildren(node) : node.childNodes;\r\n        },\r\n\r\n        emptyNode: function(node) {\r\n            if (!isStartComment(node))\r\n                ko.utils.emptyDomNode(node);\r\n            else {\r\n                var virtualChildren = ko.virtualElements.childNodes(node);\r\n                for (var i = 0, j = virtualChildren.length; i < j; i++)\r\n                    ko.removeNode(virtualChildren[i]);\r\n            }\r\n        },\r\n\r\n        setDomNodeChildren: function(node, childNodes) {\r\n            if (!isStartComment(node))\r\n                ko.utils.setDomNodeChildren(node, childNodes);\r\n            else {\r\n                ko.virtualElements.emptyNode(node);\r\n                var endCommentNode = node.nextSibling; // Must be the next sibling, as we just emptied the children\r\n                for (var i = 0, j = childNodes.length; i < j; i++)\r\n                    endCommentNode.parentNode.insertBefore(childNodes[i], endCommentNode);\r\n            }\r\n        },\r\n\r\n        prepend: function(containerNode, nodeToPrepend) {\r\n            if (!isStartComment(containerNode)) {\r\n                if (containerNode.firstChild)\r\n                    containerNode.insertBefore(nodeToPrepend, containerNode.firstChild);\r\n                else\r\n                    containerNode.appendChild(nodeToPrepend);\r\n            } else {\r\n                // Start comments must always have a parent and at least one following sibling (the end comment)\r\n                containerNode.parentNode.insertBefore(nodeToPrepend, containerNode.nextSibling);\r\n            }\r\n        },\r\n\r\n        insertAfter: function(containerNode, nodeToInsert, insertAfterNode) {\r\n            if (!insertAfterNode) {\r\n                ko.virtualElements.prepend(containerNode, nodeToInsert);\r\n            } else if (!isStartComment(containerNode)) {\r\n                // Insert after insertion point\r\n                if (insertAfterNode.nextSibling)\r\n                    containerNode.insertBefore(nodeToInsert, insertAfterNode.nextSibling);\r\n                else\r\n                    containerNode.appendChild(nodeToInsert);\r\n            } else {\r\n                // Children of start comments must always have a parent and at least one following sibling (the end comment)\r\n                containerNode.parentNode.insertBefore(nodeToInsert, insertAfterNode.nextSibling);\r\n            }\r\n        },\r\n\r\n        firstChild: function(node) {\r\n            if (!isStartComment(node))\r\n                return node.firstChild;\r\n            if (!node.nextSibling || isEndComment(node.nextSibling))\r\n                return null;\r\n            return node.nextSibling;\r\n        },\r\n\r\n        nextSibling: function(node) {\r\n            if (isStartComment(node))\r\n                node = getMatchingEndComment(node);\r\n            if (node.nextSibling && isEndComment(node.nextSibling))\r\n                return null;\r\n            return node.nextSibling;\r\n        },\r\n\r\n        hasBindingValue: isStartComment,\r\n\r\n        virtualNodeBindingValue: function(node) {\r\n            var regexMatch = (commentNodesHaveTextProperty ? node.text : node.nodeValue).match(startCommentRegex);\r\n            return regexMatch ? regexMatch[1] : null;\r\n        },\r\n\r\n        normaliseVirtualElementDomStructure: function(elementVerified) {\r\n            // Workaround for https://github.com/SteveSanderson/knockout/issues/155\r\n            // (IE <= 8 or IE 9 quirks mode parses your HTML weirdly, treating closing </li> tags as if they don't exist, thereby moving comment nodes\r\n            // that are direct descendants of <ul> into the preceding <li>)\r\n            if (!htmlTagsWithOptionallyClosingChildren[ko.utils.tagNameLower(elementVerified)])\r\n                return;\r\n\r\n            // Scan immediate children to see if they contain unbalanced comment tags. If they do, those comment tags\r\n            // must be intended to appear *after* that child, so move them there.\r\n            var childNode = elementVerified.firstChild;\r\n            if (childNode) {\r\n                do {\r\n                    if (childNode.nodeType === 1) {\r\n                        var unbalancedTags = getUnbalancedChildTags(childNode);\r\n                        if (unbalancedTags) {\r\n                            // Fix up the DOM by moving the unbalanced tags to where they most likely were intended to be placed - *after* the child\r\n                            var nodeToInsertBefore = childNode.nextSibling;\r\n                            for (var i = 0; i < unbalancedTags.length; i++) {\r\n                                if (nodeToInsertBefore)\r\n                                    elementVerified.insertBefore(unbalancedTags[i], nodeToInsertBefore);\r\n                                else\r\n                                    elementVerified.appendChild(unbalancedTags[i]);\r\n                            }\r\n                        }\r\n                    }\r\n                } while (childNode = childNode.nextSibling);\r\n            }\r\n        }\r\n    };\r\n})();\r\nko.exportSymbol('virtualElements', ko.virtualElements);\r\nko.exportSymbol('virtualElements.allowedBindings', ko.virtualElements.allowedBindings);\r\nko.exportSymbol('virtualElements.emptyNode', ko.virtualElements.emptyNode);\r\n//ko.exportSymbol('virtualElements.firstChild', ko.virtualElements.firstChild);     // firstChild is not minified\r\nko.exportSymbol('virtualElements.insertAfter', ko.virtualElements.insertAfter);\r\n//ko.exportSymbol('virtualElements.nextSibling', ko.virtualElements.nextSibling);   // nextSibling is not minified\r\nko.exportSymbol('virtualElements.prepend', ko.virtualElements.prepend);\r\nko.exportSymbol('virtualElements.setDomNodeChildren', ko.virtualElements.setDomNodeChildren);\r\n(function() {\r\n    var defaultBindingAttributeName = \"data-bind\";\r\n\r\n    ko.bindingProvider = function() {\r\n        this.bindingCache = {};\r\n    };\r\n\r\n    ko.utils.extend(ko.bindingProvider.prototype, {\r\n        'nodeHasBindings': function(node) {\r\n            switch (node.nodeType) {\r\n                case 1: // Element\r\n                    return node.getAttribute(defaultBindingAttributeName) != null\r\n                        || ko.components['getComponentNameForNode'](node);\r\n                case 8: // Comment node\r\n                    return ko.virtualElements.hasBindingValue(node);\r\n                default: return false;\r\n            }\r\n        },\r\n\r\n        'getBindings': function(node, bindingContext) {\r\n            var bindingsString = this['getBindingsString'](node, bindingContext),\r\n                parsedBindings = bindingsString ? this['parseBindingsString'](bindingsString, bindingContext, node) : null;\r\n            return ko.components.addBindingsForCustomElement(parsedBindings, node, bindingContext, /* valueAccessors */ false);\r\n        },\r\n\r\n        'getBindingAccessors': function(node, bindingContext) {\r\n            var bindingsString = this['getBindingsString'](node, bindingContext),\r\n                parsedBindings = bindingsString ? this['parseBindingsString'](bindingsString, bindingContext, node, { 'valueAccessors': true }) : null;\r\n            return ko.components.addBindingsForCustomElement(parsedBindings, node, bindingContext, /* valueAccessors */ true);\r\n        },\r\n\r\n        // The following function is only used internally by this default provider.\r\n        // It's not part of the interface definition for a general binding provider.\r\n        'getBindingsString': function(node, bindingContext) {\r\n            switch (node.nodeType) {\r\n                case 1: return node.getAttribute(defaultBindingAttributeName);   // Element\r\n                case 8: return ko.virtualElements.virtualNodeBindingValue(node); // Comment node\r\n                default: return null;\r\n            }\r\n        },\r\n\r\n        // The following function is only used internally by this default provider.\r\n        // It's not part of the interface definition for a general binding provider.\r\n        'parseBindingsString': function(bindingsString, bindingContext, node, options) {\r\n            try {\r\n                var bindingFunction = createBindingsStringEvaluatorViaCache(bindingsString, this.bindingCache, options);\r\n                return bindingFunction(bindingContext, node);\r\n            } catch (ex) {\r\n                ex.message = \"Unable to parse bindings.\\nBindings value: \" + bindingsString + \"\\nMessage: \" + ex.message;\r\n                throw ex;\r\n            }\r\n        }\r\n    });\r\n\r\n    ko.bindingProvider['instance'] = new ko.bindingProvider();\r\n\r\n    function createBindingsStringEvaluatorViaCache(bindingsString, cache, options) {\r\n        var cacheKey = bindingsString + (options && options['valueAccessors'] || '');\r\n        return cache[cacheKey]\r\n            || (cache[cacheKey] = createBindingsStringEvaluator(bindingsString, options));\r\n    }\r\n\r\n    function createBindingsStringEvaluator(bindingsString, options) {\r\n        // Build the source for a function that evaluates \"expression\"\r\n        // For each scope variable, add an extra level of \"with\" nesting\r\n        // Example result: with(sc1) { with(sc0) { return (expression) } }\r\n        var rewrittenBindings = ko.expressionRewriting.preProcessBindings(bindingsString, options),\r\n            functionBody = \"with($context){with($data||{}){return{\" + rewrittenBindings + \"}}}\";\r\n        return new Function(\"$context\", \"$element\", functionBody);\r\n    }\r\n})();\r\n\r\nko.exportSymbol('bindingProvider', ko.bindingProvider);\r\n(function () {\r\n    ko.bindingHandlers = {};\r\n\r\n    // The following element types will not be recursed into during binding. In the future, we\r\n    // may consider adding <template> to this list, because such elements' contents are always\r\n    // intended to be bound in a different context from where they appear in the document.\r\n    var bindingDoesNotRecurseIntoElementTypes = {\r\n        // Don't want bindings that operate on text nodes to mutate <script> and <textarea> contents,\r\n        // because it's unexpected and a potential XSS issue\r\n        'script': true,\r\n        'textarea': true\r\n    };\r\n\r\n    // Use an overridable method for retrieving binding handlers so that a plugins may support dynamically created handlers\r\n    ko['getBindingHandler'] = function(bindingKey) {\r\n        return ko.bindingHandlers[bindingKey];\r\n    };\r\n\r\n    // The ko.bindingContext constructor is only called directly to create the root context. For child\r\n    // contexts, use bindingContext.createChildContext or bindingContext.extend.\r\n    ko.bindingContext = function(dataItemOrAccessor, parentContext, dataItemAlias, extendCallback) {\r\n\r\n        // The binding context object includes static properties for the current, parent, and root view models.\r\n        // If a view model is actually stored in an observable, the corresponding binding context object, and\r\n        // any child contexts, must be updated when the view model is changed.\r\n        function updateContext() {\r\n            // Most of the time, the context will directly get a view model object, but if a function is given,\r\n            // we call the function to retrieve the view model. If the function accesses any obsevables or returns\r\n            // an observable, the dependency is tracked, and those observables can later cause the binding\r\n            // context to be updated.\r\n            var dataItemOrObservable = isFunc ? dataItemOrAccessor() : dataItemOrAccessor,\r\n                dataItem = ko.utils.unwrapObservable(dataItemOrObservable);\r\n\r\n            if (parentContext) {\r\n                // When a \"parent\" context is given, register a dependency on the parent context. Thus whenever the\r\n                // parent context is updated, this context will also be updated.\r\n                if (parentContext._subscribable)\r\n                    parentContext._subscribable();\r\n\r\n                // Copy $root and any custom properties from the parent context\r\n                ko.utils.extend(self, parentContext);\r\n\r\n                // Because the above copy overwrites our own properties, we need to reset them.\r\n                // During the first execution, \"subscribable\" isn't set, so don't bother doing the update then.\r\n                if (subscribable) {\r\n                    self._subscribable = subscribable;\r\n                }\r\n            } else {\r\n                self['$parents'] = [];\r\n                self['$root'] = dataItem;\r\n\r\n                // Export 'ko' in the binding context so it will be available in bindings and templates\r\n                // even if 'ko' isn't exported as a global, such as when using an AMD loader.\r\n                // See https://github.com/SteveSanderson/knockout/issues/490\r\n                self['ko'] = ko;\r\n            }\r\n            self['$rawData'] = dataItemOrObservable;\r\n            self['$data'] = dataItem;\r\n            if (dataItemAlias)\r\n                self[dataItemAlias] = dataItem;\r\n\r\n            // The extendCallback function is provided when creating a child context or extending a context.\r\n            // It handles the specific actions needed to finish setting up the binding context. Actions in this\r\n            // function could also add dependencies to this binding context.\r\n            if (extendCallback)\r\n                extendCallback(self, parentContext, dataItem);\r\n\r\n            return self['$data'];\r\n        }\r\n        function disposeWhen() {\r\n            return nodes && !ko.utils.anyDomNodeIsAttachedToDocument(nodes);\r\n        }\r\n\r\n        var self = this,\r\n            isFunc = typeof(dataItemOrAccessor) == \"function\" && !ko.isObservable(dataItemOrAccessor),\r\n            nodes,\r\n            subscribable = ko.dependentObservable(updateContext, null, { disposeWhen: disposeWhen, disposeWhenNodeIsRemoved: true });\r\n\r\n        // At this point, the binding context has been initialized, and the \"subscribable\" computed observable is\r\n        // subscribed to any observables that were accessed in the process. If there is nothing to track, the\r\n        // computed will be inactive, and we can safely throw it away. If it's active, the computed is stored in\r\n        // the context object.\r\n        if (subscribable.isActive()) {\r\n            self._subscribable = subscribable;\r\n\r\n            // Always notify because even if the model ($data) hasn't changed, other context properties might have changed\r\n            subscribable['equalityComparer'] = null;\r\n\r\n            // We need to be able to dispose of this computed observable when it's no longer needed. This would be\r\n            // easy if we had a single node to watch, but binding contexts can be used by many different nodes, and\r\n            // we cannot assume that those nodes have any relation to each other. So instead we track any node that\r\n            // the context is attached to, and dispose the computed when all of those nodes have been cleaned.\r\n\r\n            // Add properties to *subscribable* instead of *self* because any properties added to *self* may be overwritten on updates\r\n            nodes = [];\r\n            subscribable._addNode = function(node) {\r\n                nodes.push(node);\r\n                ko.utils.domNodeDisposal.addDisposeCallback(node, function(node) {\r\n                    ko.utils.arrayRemoveItem(nodes, node);\r\n                    if (!nodes.length) {\r\n                        subscribable.dispose();\r\n                        self._subscribable = subscribable = undefined;\r\n                    }\r\n                });\r\n            };\r\n        }\r\n    }\r\n\r\n    // Extend the binding context hierarchy with a new view model object. If the parent context is watching\r\n    // any obsevables, the new child context will automatically get a dependency on the parent context.\r\n    // But this does not mean that the $data value of the child context will also get updated. If the child\r\n    // view model also depends on the parent view model, you must provide a function that returns the correct\r\n    // view model on each update.\r\n    ko.bindingContext.prototype['createChildContext'] = function (dataItemOrAccessor, dataItemAlias, extendCallback) {\r\n        return new ko.bindingContext(dataItemOrAccessor, this, dataItemAlias, function(self, parentContext) {\r\n            // Extend the context hierarchy by setting the appropriate pointers\r\n            self['$parentContext'] = parentContext;\r\n            self['$parent'] = parentContext['$data'];\r\n            self['$parents'] = (parentContext['$parents'] || []).slice(0);\r\n            self['$parents'].unshift(self['$parent']);\r\n            if (extendCallback)\r\n                extendCallback(self);\r\n        });\r\n    };\r\n\r\n    // Extend the binding context with new custom properties. This doesn't change the context hierarchy.\r\n    // Similarly to \"child\" contexts, provide a function here to make sure that the correct values are set\r\n    // when an observable view model is updated.\r\n    ko.bindingContext.prototype['extend'] = function(properties) {\r\n        // If the parent context references an observable view model, \"_subscribable\" will always be the\r\n        // latest view model object. If not, \"_subscribable\" isn't set, and we can use the static \"$data\" value.\r\n        return new ko.bindingContext(this._subscribable || this['$data'], this, null, function(self, parentContext) {\r\n            // This \"child\" context doesn't directly track a parent observable view model,\r\n            // so we need to manually set the $rawData value to match the parent.\r\n            self['$rawData'] = parentContext['$rawData'];\r\n            ko.utils.extend(self, typeof(properties) == \"function\" ? properties() : properties);\r\n        });\r\n    };\r\n\r\n    // Returns the valueAccesor function for a binding value\r\n    function makeValueAccessor(value) {\r\n        return function() {\r\n            return value;\r\n        };\r\n    }\r\n\r\n    // Returns the value of a valueAccessor function\r\n    function evaluateValueAccessor(valueAccessor) {\r\n        return valueAccessor();\r\n    }\r\n\r\n    // Given a function that returns bindings, create and return a new object that contains\r\n    // binding value-accessors functions. Each accessor function calls the original function\r\n    // so that it always gets the latest value and all dependencies are captured. This is used\r\n    // by ko.applyBindingsToNode and getBindingsAndMakeAccessors.\r\n    function makeAccessorsFromFunction(callback) {\r\n        return ko.utils.objectMap(ko.dependencyDetection.ignore(callback), function(value, key) {\r\n            return function() {\r\n                return callback()[key];\r\n            };\r\n        });\r\n    }\r\n\r\n    // Given a bindings function or object, create and return a new object that contains\r\n    // binding value-accessors functions. This is used by ko.applyBindingsToNode.\r\n    function makeBindingAccessors(bindings, context, node) {\r\n        if (typeof bindings === 'function') {\r\n            return makeAccessorsFromFunction(bindings.bind(null, context, node));\r\n        } else {\r\n            return ko.utils.objectMap(bindings, makeValueAccessor);\r\n        }\r\n    }\r\n\r\n    // This function is used if the binding provider doesn't include a getBindingAccessors function.\r\n    // It must be called with 'this' set to the provider instance.\r\n    function getBindingsAndMakeAccessors(node, context) {\r\n        return makeAccessorsFromFunction(this['getBindings'].bind(this, node, context));\r\n    }\r\n\r\n    function validateThatBindingIsAllowedForVirtualElements(bindingName) {\r\n        var validator = ko.virtualElements.allowedBindings[bindingName];\r\n        if (!validator)\r\n            throw new Error(\"The binding '\" + bindingName + \"' cannot be used with virtual elements\")\r\n    }\r\n\r\n    function applyBindingsToDescendantsInternal (bindingContext, elementOrVirtualElement, bindingContextsMayDifferFromDomParentElement) {\r\n        var currentChild,\r\n            nextInQueue = ko.virtualElements.firstChild(elementOrVirtualElement),\r\n            provider = ko.bindingProvider['instance'],\r\n            preprocessNode = provider['preprocessNode'];\r\n\r\n        // Preprocessing allows a binding provider to mutate a node before bindings are applied to it. For example it's\r\n        // possible to insert new siblings after it, and/or replace the node with a different one. This can be used to\r\n        // implement custom binding syntaxes, such as {{ value }} for string interpolation, or custom element types that\r\n        // trigger insertion of <template> contents at that point in the document.\r\n        if (preprocessNode) {\r\n            while (currentChild = nextInQueue) {\r\n                nextInQueue = ko.virtualElements.nextSibling(currentChild);\r\n                preprocessNode.call(provider, currentChild);\r\n            }\r\n            // Reset nextInQueue for the next loop\r\n            nextInQueue = ko.virtualElements.firstChild(elementOrVirtualElement);\r\n        }\r\n\r\n        while (currentChild = nextInQueue) {\r\n            // Keep a record of the next child *before* applying bindings, in case the binding removes the current child from its position\r\n            nextInQueue = ko.virtualElements.nextSibling(currentChild);\r\n            applyBindingsToNodeAndDescendantsInternal(bindingContext, currentChild, bindingContextsMayDifferFromDomParentElement);\r\n        }\r\n    }\r\n\r\n    function applyBindingsToNodeAndDescendantsInternal (bindingContext, nodeVerified, bindingContextMayDifferFromDomParentElement) {\r\n        var shouldBindDescendants = true;\r\n\r\n        // Perf optimisation: Apply bindings only if...\r\n        // (1) We need to store the binding context on this node (because it may differ from the DOM parent node's binding context)\r\n        //     Note that we can't store binding contexts on non-elements (e.g., text nodes), as IE doesn't allow expando properties for those\r\n        // (2) It might have bindings (e.g., it has a data-bind attribute, or it's a marker for a containerless template)\r\n        var isElement = (nodeVerified.nodeType === 1);\r\n        if (isElement) // Workaround IE <= 8 HTML parsing weirdness\r\n            ko.virtualElements.normaliseVirtualElementDomStructure(nodeVerified);\r\n\r\n        var shouldApplyBindings = (isElement && bindingContextMayDifferFromDomParentElement)             // Case (1)\r\n                               || ko.bindingProvider['instance']['nodeHasBindings'](nodeVerified);       // Case (2)\r\n        if (shouldApplyBindings)\r\n            shouldBindDescendants = applyBindingsToNodeInternal(nodeVerified, null, bindingContext, bindingContextMayDifferFromDomParentElement)['shouldBindDescendants'];\r\n\r\n        if (shouldBindDescendants && !bindingDoesNotRecurseIntoElementTypes[ko.utils.tagNameLower(nodeVerified)]) {\r\n            // We're recursing automatically into (real or virtual) child nodes without changing binding contexts. So,\r\n            //  * For children of a *real* element, the binding context is certainly the same as on their DOM .parentNode,\r\n            //    hence bindingContextsMayDifferFromDomParentElement is false\r\n            //  * For children of a *virtual* element, we can't be sure. Evaluating .parentNode on those children may\r\n            //    skip over any number of intermediate virtual elements, any of which might define a custom binding context,\r\n            //    hence bindingContextsMayDifferFromDomParentElement is true\r\n            applyBindingsToDescendantsInternal(bindingContext, nodeVerified, /* bindingContextsMayDifferFromDomParentElement: */ !isElement);\r\n        }\r\n    }\r\n\r\n    var boundElementDomDataKey = ko.utils.domData.nextKey();\r\n\r\n\r\n    function topologicalSortBindings(bindings) {\r\n        // Depth-first sort\r\n        var result = [],                // The list of key/handler pairs that we will return\r\n            bindingsConsidered = {},    // A temporary record of which bindings are already in 'result'\r\n            cyclicDependencyStack = []; // Keeps track of a depth-search so that, if there's a cycle, we know which bindings caused it\r\n        ko.utils.objectForEach(bindings, function pushBinding(bindingKey) {\r\n            if (!bindingsConsidered[bindingKey]) {\r\n                var binding = ko['getBindingHandler'](bindingKey);\r\n                if (binding) {\r\n                    // First add dependencies (if any) of the current binding\r\n                    if (binding['after']) {\r\n                        cyclicDependencyStack.push(bindingKey);\r\n                        ko.utils.arrayForEach(binding['after'], function(bindingDependencyKey) {\r\n                            if (bindings[bindingDependencyKey]) {\r\n                                if (ko.utils.arrayIndexOf(cyclicDependencyStack, bindingDependencyKey) !== -1) {\r\n                                    throw Error(\"Cannot combine the following bindings, because they have a cyclic dependency: \" + cyclicDependencyStack.join(\", \"));\r\n                                } else {\r\n                                    pushBinding(bindingDependencyKey);\r\n                                }\r\n                            }\r\n                        });\r\n                        cyclicDependencyStack.length--;\r\n                    }\r\n                    // Next add the current binding\r\n                    result.push({ key: bindingKey, handler: binding });\r\n                }\r\n                bindingsConsidered[bindingKey] = true;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    function applyBindingsToNodeInternal(node, sourceBindings, bindingContext, bindingContextMayDifferFromDomParentElement) {\r\n        // Prevent multiple applyBindings calls for the same node, except when a binding value is specified\r\n        var alreadyBound = ko.utils.domData.get(node, boundElementDomDataKey);\r\n        if (!sourceBindings) {\r\n            if (alreadyBound) {\r\n                throw Error(\"You cannot apply bindings multiple times to the same element.\");\r\n            }\r\n            ko.utils.domData.set(node, boundElementDomDataKey, true);\r\n        }\r\n\r\n        // Optimization: Don't store the binding context on this node if it's definitely the same as on node.parentNode, because\r\n        // we can easily recover it just by scanning up the node's ancestors in the DOM\r\n        // (note: here, parent node means \"real DOM parent\" not \"virtual parent\", as there's no O(1) way to find the virtual parent)\r\n        if (!alreadyBound && bindingContextMayDifferFromDomParentElement)\r\n            ko.storedBindingContextForNode(node, bindingContext);\r\n\r\n        // Use bindings if given, otherwise fall back on asking the bindings provider to give us some bindings\r\n        var bindings;\r\n        if (sourceBindings && typeof sourceBindings !== 'function') {\r\n            bindings = sourceBindings;\r\n        } else {\r\n            var provider = ko.bindingProvider['instance'],\r\n                getBindings = provider['getBindingAccessors'] || getBindingsAndMakeAccessors;\r\n\r\n            // Get the binding from the provider within a computed observable so that we can update the bindings whenever\r\n            // the binding context is updated or if the binding provider accesses observables.\r\n            var bindingsUpdater = ko.dependentObservable(\r\n                function() {\r\n                    bindings = sourceBindings ? sourceBindings(bindingContext, node) : getBindings.call(provider, node, bindingContext);\r\n                    // Register a dependency on the binding context to support obsevable view models.\r\n                    if (bindings && bindingContext._subscribable)\r\n                        bindingContext._subscribable();\r\n                    return bindings;\r\n                },\r\n                null, { disposeWhenNodeIsRemoved: node }\r\n            );\r\n\r\n            if (!bindings || !bindingsUpdater.isActive())\r\n                bindingsUpdater = null;\r\n        }\r\n\r\n        var bindingHandlerThatControlsDescendantBindings;\r\n        if (bindings) {\r\n            // Return the value accessor for a given binding. When bindings are static (won't be updated because of a binding\r\n            // context update), just return the value accessor from the binding. Otherwise, return a function that always gets\r\n            // the latest binding value and registers a dependency on the binding updater.\r\n            var getValueAccessor = bindingsUpdater\r\n                ? function(bindingKey) {\r\n                    return function() {\r\n                        return evaluateValueAccessor(bindingsUpdater()[bindingKey]);\r\n                    };\r\n                } : function(bindingKey) {\r\n                    return bindings[bindingKey];\r\n                };\r\n\r\n            // Use of allBindings as a function is maintained for backwards compatibility, but its use is deprecated\r\n            function allBindings() {\r\n                return ko.utils.objectMap(bindingsUpdater ? bindingsUpdater() : bindings, evaluateValueAccessor);\r\n            }\r\n            // The following is the 3.x allBindings API\r\n            allBindings['get'] = function(key) {\r\n                return bindings[key] && evaluateValueAccessor(getValueAccessor(key));\r\n            };\r\n            allBindings['has'] = function(key) {\r\n                return key in bindings;\r\n            };\r\n\r\n            // First put the bindings into the right order\r\n            var orderedBindings = topologicalSortBindings(bindings);\r\n\r\n            // Go through the sorted bindings, calling init and update for each\r\n            ko.utils.arrayForEach(orderedBindings, function(bindingKeyAndHandler) {\r\n                // Note that topologicalSortBindings has already filtered out any nonexistent binding handlers,\r\n                // so bindingKeyAndHandler.handler will always be nonnull.\r\n                var handlerInitFn = bindingKeyAndHandler.handler[\"init\"],\r\n                    handlerUpdateFn = bindingKeyAndHandler.handler[\"update\"],\r\n                    bindingKey = bindingKeyAndHandler.key;\r\n\r\n                if (node.nodeType === 8) {\r\n                    validateThatBindingIsAllowedForVirtualElements(bindingKey);\r\n                }\r\n\r\n                try {\r\n                    // Run init, ignoring any dependencies\r\n                    if (typeof handlerInitFn == \"function\") {\r\n                        ko.dependencyDetection.ignore(function() {\r\n                            var initResult = handlerInitFn(node, getValueAccessor(bindingKey), allBindings, bindingContext['$data'], bindingContext);\r\n\r\n                            // If this binding handler claims to control descendant bindings, make a note of this\r\n                            if (initResult && initResult['controlsDescendantBindings']) {\r\n                                if (bindingHandlerThatControlsDescendantBindings !== undefined)\r\n                                    throw new Error(\"Multiple bindings (\" + bindingHandlerThatControlsDescendantBindings + \" and \" + bindingKey + \") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.\");\r\n                                bindingHandlerThatControlsDescendantBindings = bindingKey;\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    // Run update in its own computed wrapper\r\n                    if (typeof handlerUpdateFn == \"function\") {\r\n                        ko.dependentObservable(\r\n                            function() {\r\n                                handlerUpdateFn(node, getValueAccessor(bindingKey), allBindings, bindingContext['$data'], bindingContext);\r\n                            },\r\n                            null,\r\n                            { disposeWhenNodeIsRemoved: node }\r\n                        );\r\n                    }\r\n                } catch (ex) {\r\n                    ex.message = \"Unable to process binding \\\"\" + bindingKey + \": \" + bindings[bindingKey] + \"\\\"\\nMessage: \" + ex.message;\r\n                    throw ex;\r\n                }\r\n            });\r\n        }\r\n\r\n        return {\r\n            'shouldBindDescendants': bindingHandlerThatControlsDescendantBindings === undefined\r\n        };\r\n    };\r\n\r\n    var storedBindingContextDomDataKey = ko.utils.domData.nextKey();\r\n    ko.storedBindingContextForNode = function (node, bindingContext) {\r\n        if (arguments.length == 2) {\r\n            ko.utils.domData.set(node, storedBindingContextDomDataKey, bindingContext);\r\n            if (bindingContext._subscribable)\r\n                bindingContext._subscribable._addNode(node);\r\n        } else {\r\n            return ko.utils.domData.get(node, storedBindingContextDomDataKey);\r\n        }\r\n    }\r\n\r\n    function getBindingContext(viewModelOrBindingContext) {\r\n        return viewModelOrBindingContext && (viewModelOrBindingContext instanceof ko.bindingContext)\r\n            ? viewModelOrBindingContext\r\n            : new ko.bindingContext(viewModelOrBindingContext);\r\n    }\r\n\r\n    ko.applyBindingAccessorsToNode = function (node, bindings, viewModelOrBindingContext) {\r\n        if (node.nodeType === 1) // If it's an element, workaround IE <= 8 HTML parsing weirdness\r\n            ko.virtualElements.normaliseVirtualElementDomStructure(node);\r\n        return applyBindingsToNodeInternal(node, bindings, getBindingContext(viewModelOrBindingContext), true);\r\n    };\r\n\r\n    ko.applyBindingsToNode = function (node, bindings, viewModelOrBindingContext) {\r\n        var context = getBindingContext(viewModelOrBindingContext);\r\n        return ko.applyBindingAccessorsToNode(node, makeBindingAccessors(bindings, context, node), context);\r\n    };\r\n\r\n    ko.applyBindingsToDescendants = function(viewModelOrBindingContext, rootNode) {\r\n        if (rootNode.nodeType === 1 || rootNode.nodeType === 8)\r\n            applyBindingsToDescendantsInternal(getBindingContext(viewModelOrBindingContext), rootNode, true);\r\n    };\r\n\r\n    ko.applyBindings = function (viewModelOrBindingContext, rootNode) {\r\n        // If jQuery is loaded after Knockout, we won't initially have access to it. So save it here.\r\n        if (!jQueryInstance && window['jQuery']) {\r\n            jQueryInstance = window['jQuery'];\r\n        }\r\n\r\n        if (rootNode && (rootNode.nodeType !== 1) && (rootNode.nodeType !== 8))\r\n            throw new Error(\"ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node\");\r\n        rootNode = rootNode || window.document.body; // Make \"rootNode\" parameter optional\r\n\r\n        applyBindingsToNodeAndDescendantsInternal(getBindingContext(viewModelOrBindingContext), rootNode, true);\r\n    };\r\n\r\n    // Retrieving binding context from arbitrary nodes\r\n    ko.contextFor = function(node) {\r\n        // We can only do something meaningful for elements and comment nodes (in particular, not text nodes, as IE can't store domdata for them)\r\n        switch (node.nodeType) {\r\n            case 1:\r\n            case 8:\r\n                var context = ko.storedBindingContextForNode(node);\r\n                if (context) return context;\r\n                if (node.parentNode) return ko.contextFor(node.parentNode);\r\n                break;\r\n        }\r\n        return undefined;\r\n    };\r\n    ko.dataFor = function(node) {\r\n        var context = ko.contextFor(node);\r\n        return context ? context['$data'] : undefined;\r\n    };\r\n\r\n    ko.exportSymbol('bindingHandlers', ko.bindingHandlers);\r\n    ko.exportSymbol('applyBindings', ko.applyBindings);\r\n    ko.exportSymbol('applyBindingsToDescendants', ko.applyBindingsToDescendants);\r\n    ko.exportSymbol('applyBindingAccessorsToNode', ko.applyBindingAccessorsToNode);\r\n    ko.exportSymbol('applyBindingsToNode', ko.applyBindingsToNode);\r\n    ko.exportSymbol('contextFor', ko.contextFor);\r\n    ko.exportSymbol('dataFor', ko.dataFor);\r\n})();\r\n(function(undefined) {\r\n    var loadingSubscribablesCache = {}, // Tracks component loads that are currently in flight\r\n        loadedDefinitionsCache = {};    // Tracks component loads that have already completed\r\n\r\n    ko.components = {\r\n        get: function(componentName, callback) {\r\n            var cachedDefinition = getObjectOwnProperty(loadedDefinitionsCache, componentName);\r\n            if (cachedDefinition) {\r\n                // It's already loaded and cached. Reuse the same definition object.\r\n                // Note that for API consistency, even cache hits complete asynchronously by default.\r\n                // You can bypass this by putting synchronous:true on your component config.\r\n                if (cachedDefinition.isSynchronousComponent) {\r\n                    ko.dependencyDetection.ignore(function() { // See comment in loaderRegistryBehaviors.js for reasoning\r\n                        callback(cachedDefinition.definition);\r\n                    });\r\n                } else {\r\n                    setTimeout(function() { callback(cachedDefinition.definition); }, 0);\r\n                }\r\n            } else {\r\n                // Join the loading process that is already underway, or start a new one.\r\n                loadComponentAndNotify(componentName, callback);\r\n            }\r\n        },\r\n\r\n        clearCachedDefinition: function(componentName) {\r\n            delete loadedDefinitionsCache[componentName];\r\n        },\r\n\r\n        _getFirstResultFromLoaders: getFirstResultFromLoaders\r\n    };\r\n\r\n    function getObjectOwnProperty(obj, propName) {\r\n        return obj.hasOwnProperty(propName) ? obj[propName] : undefined;\r\n    }\r\n\r\n    function loadComponentAndNotify(componentName, callback) {\r\n        var subscribable = getObjectOwnProperty(loadingSubscribablesCache, componentName),\r\n            completedAsync;\r\n        if (!subscribable) {\r\n            // It's not started loading yet. Start loading, and when it's done, move it to loadedDefinitionsCache.\r\n            subscribable = loadingSubscribablesCache[componentName] = new ko.subscribable();\r\n            subscribable.subscribe(callback);\r\n\r\n            beginLoadingComponent(componentName, function(definition, config) {\r\n                var isSynchronousComponent = !!(config && config['synchronous']);\r\n                loadedDefinitionsCache[componentName] = { definition: definition, isSynchronousComponent: isSynchronousComponent };\r\n                delete loadingSubscribablesCache[componentName];\r\n\r\n                // For API consistency, all loads complete asynchronously. However we want to avoid\r\n                // adding an extra setTimeout if it's unnecessary (i.e., the completion is already\r\n                // async) since setTimeout(..., 0) still takes about 16ms or more on most browsers.\r\n                //\r\n                // You can bypass the 'always synchronous' feature by putting the synchronous:true\r\n                // flag on your component configuration when you register it.\r\n                if (completedAsync || isSynchronousComponent) {\r\n                    // Note that notifySubscribers ignores any dependencies read within the callback.\r\n                    // See comment in loaderRegistryBehaviors.js for reasoning\r\n                    subscribable['notifySubscribers'](definition);\r\n                } else {\r\n                    setTimeout(function() {\r\n                        subscribable['notifySubscribers'](definition);\r\n                    }, 0);\r\n                }\r\n            });\r\n            completedAsync = true;\r\n        } else {\r\n            subscribable.subscribe(callback);\r\n        }\r\n    }\r\n\r\n    function beginLoadingComponent(componentName, callback) {\r\n        getFirstResultFromLoaders('getConfig', [componentName], function(config) {\r\n            if (config) {\r\n                // We have a config, so now load its definition\r\n                getFirstResultFromLoaders('loadComponent', [componentName, config], function(definition) {\r\n                    callback(definition, config);\r\n                });\r\n            } else {\r\n                // The component has no config - it's unknown to all the loaders.\r\n                // Note that this is not an error (e.g., a module loading error) - that would abort the\r\n                // process and this callback would not run. For this callback to run, all loaders must\r\n                // have confirmed they don't know about this component.\r\n                callback(null, null);\r\n            }\r\n        });\r\n    }\r\n\r\n    function getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders) {\r\n        // On the first call in the stack, start with the full set of loaders\r\n        if (!candidateLoaders) {\r\n            candidateLoaders = ko.components['loaders'].slice(0); // Use a copy, because we'll be mutating this array\r\n        }\r\n\r\n        // Try the next candidate\r\n        var currentCandidateLoader = candidateLoaders.shift();\r\n        if (currentCandidateLoader) {\r\n            var methodInstance = currentCandidateLoader[methodName];\r\n            if (methodInstance) {\r\n                var wasAborted = false,\r\n                    synchronousReturnValue = methodInstance.apply(currentCandidateLoader, argsExceptCallback.concat(function(result) {\r\n                        if (wasAborted) {\r\n                            callback(null);\r\n                        } else if (result !== null) {\r\n                            // This candidate returned a value. Use it.\r\n                            callback(result);\r\n                        } else {\r\n                            // Try the next candidate\r\n                            getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders);\r\n                        }\r\n                    }));\r\n\r\n                // Currently, loaders may not return anything synchronously. This leaves open the possibility\r\n                // that we'll extend the API to support synchronous return values in the future. It won't be\r\n                // a breaking change, because currently no loader is allowed to return anything except undefined.\r\n                if (synchronousReturnValue !== undefined) {\r\n                    wasAborted = true;\r\n\r\n                    // Method to suppress exceptions will remain undocumented. This is only to keep\r\n                    // KO's specs running tidily, since we can observe the loading got aborted without\r\n                    // having exceptions cluttering up the console too.\r\n                    if (!currentCandidateLoader['suppressLoaderExceptions']) {\r\n                        throw new Error('Component loaders must supply values by invoking the callback, not by returning values synchronously.');\r\n                    }\r\n                }\r\n            } else {\r\n                // This candidate doesn't have the relevant handler. Synchronously move on to the next one.\r\n                getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders);\r\n            }\r\n        } else {\r\n            // No candidates returned a value\r\n            callback(null);\r\n        }\r\n    }\r\n\r\n    // Reference the loaders via string name so it's possible for developers\r\n    // to replace the whole array by assigning to ko.components.loaders\r\n    ko.components['loaders'] = [];\r\n\r\n    ko.exportSymbol('components', ko.components);\r\n    ko.exportSymbol('components.get', ko.components.get);\r\n    ko.exportSymbol('components.clearCachedDefinition', ko.components.clearCachedDefinition);\r\n})();\r\n(function(undefined) {\r\n\r\n    // The default loader is responsible for two things:\r\n    // 1. Maintaining the default in-memory registry of component configuration objects\r\n    //    (i.e., the thing you're writing to when you call ko.components.register(someName, ...))\r\n    // 2. Answering requests for components by fetching configuration objects\r\n    //    from that default in-memory registry and resolving them into standard\r\n    //    component definition objects (of the form { createViewModel: ..., template: ... })\r\n    // Custom loaders may override either of these facilities, i.e.,\r\n    // 1. To supply configuration objects from some other source (e.g., conventions)\r\n    // 2. Or, to resolve configuration objects by loading viewmodels/templates via arbitrary logic.\r\n\r\n    var defaultConfigRegistry = {};\r\n\r\n    ko.components.register = function(componentName, config) {\r\n        if (!config) {\r\n            throw new Error('Invalid configuration for ' + componentName);\r\n        }\r\n\r\n        if (ko.components.isRegistered(componentName)) {\r\n            throw new Error('Component ' + componentName + ' is already registered');\r\n        }\r\n\r\n        defaultConfigRegistry[componentName] = config;\r\n    }\r\n\r\n    ko.components.isRegistered = function(componentName) {\r\n        return componentName in defaultConfigRegistry;\r\n    }\r\n\r\n    ko.components.unregister = function(componentName) {\r\n        delete defaultConfigRegistry[componentName];\r\n        ko.components.clearCachedDefinition(componentName);\r\n    }\r\n\r\n    ko.components.defaultLoader = {\r\n        'getConfig': function(componentName, callback) {\r\n            var result = defaultConfigRegistry.hasOwnProperty(componentName)\r\n                ? defaultConfigRegistry[componentName]\r\n                : null;\r\n            callback(result);\r\n        },\r\n\r\n        'loadComponent': function(componentName, config, callback) {\r\n            var errorCallback = makeErrorCallback(componentName);\r\n            possiblyGetConfigFromAmd(errorCallback, config, function(loadedConfig) {\r\n                resolveConfig(componentName, errorCallback, loadedConfig, callback);\r\n            });\r\n        },\r\n\r\n        'loadTemplate': function(componentName, templateConfig, callback) {\r\n            resolveTemplate(makeErrorCallback(componentName), templateConfig, callback);\r\n        },\r\n\r\n        'loadViewModel': function(componentName, viewModelConfig, callback) {\r\n            resolveViewModel(makeErrorCallback(componentName), viewModelConfig, callback);\r\n        }\r\n    };\r\n\r\n    var createViewModelKey = 'createViewModel';\r\n\r\n    // Takes a config object of the form { template: ..., viewModel: ... }, and asynchronously convert it\r\n    // into the standard component definition format:\r\n    //    { template: <ArrayOfDomNodes>, createViewModel: function(params, componentInfo) { ... } }.\r\n    // Since both template and viewModel may need to be resolved asynchronously, both tasks are performed\r\n    // in parallel, and the results joined when both are ready. We don't depend on any promises infrastructure,\r\n    // so this is implemented manually below.\r\n    function resolveConfig(componentName, errorCallback, config, callback) {\r\n        var result = {},\r\n            makeCallBackWhenZero = 2,\r\n            tryIssueCallback = function() {\r\n                if (--makeCallBackWhenZero === 0) {\r\n                    callback(result);\r\n                }\r\n            },\r\n            templateConfig = config['template'],\r\n            viewModelConfig = config['viewModel'];\r\n\r\n        if (templateConfig) {\r\n            possiblyGetConfigFromAmd(errorCallback, templateConfig, function(loadedConfig) {\r\n                ko.components._getFirstResultFromLoaders('loadTemplate', [componentName, loadedConfig], function(resolvedTemplate) {\r\n                    result['template'] = resolvedTemplate;\r\n                    tryIssueCallback();\r\n                });\r\n            });\r\n        } else {\r\n            tryIssueCallback();\r\n        }\r\n\r\n        if (viewModelConfig) {\r\n            possiblyGetConfigFromAmd(errorCallback, viewModelConfig, function(loadedConfig) {\r\n                ko.components._getFirstResultFromLoaders('loadViewModel', [componentName, loadedConfig], function(resolvedViewModel) {\r\n                    result[createViewModelKey] = resolvedViewModel;\r\n                    tryIssueCallback();\r\n                });\r\n            });\r\n        } else {\r\n            tryIssueCallback();\r\n        }\r\n    }\r\n\r\n    function resolveTemplate(errorCallback, templateConfig, callback) {\r\n        if (typeof templateConfig === 'string') {\r\n            // Markup - parse it\r\n            callback(ko.utils.parseHtmlFragment(templateConfig));\r\n        } else if (templateConfig instanceof Array) {\r\n            // Assume already an array of DOM nodes - pass through unchanged\r\n            callback(templateConfig);\r\n        } else if (isDocumentFragment(templateConfig)) {\r\n            // Document fragment - use its child nodes\r\n            callback(ko.utils.makeArray(templateConfig.childNodes));\r\n        } else if (templateConfig['element']) {\r\n            var element = templateConfig['element'];\r\n            if (isDomElement(element)) {\r\n                // Element instance - copy its child nodes\r\n                callback(cloneNodesFromTemplateSourceElement(element));\r\n            } else if (typeof element === 'string') {\r\n                // Element ID - find it, then copy its child nodes\r\n                var elemInstance = document.getElementById(element);\r\n                if (elemInstance) {\r\n                    callback(cloneNodesFromTemplateSourceElement(elemInstance));\r\n                } else {\r\n                    errorCallback('Cannot find element with ID ' + element);\r\n                }\r\n            } else {\r\n                errorCallback('Unknown element type: ' + element);\r\n            }\r\n        } else {\r\n            errorCallback('Unknown template value: ' + templateConfig);\r\n        }\r\n    }\r\n\r\n    function resolveViewModel(errorCallback, viewModelConfig, callback) {\r\n        if (typeof viewModelConfig === 'function') {\r\n            // Constructor - convert to standard factory function format\r\n            // By design, this does *not* supply componentInfo to the constructor, as the intent is that\r\n            // componentInfo contains non-viewmodel data (e.g., the component's element) that should only\r\n            // be used in factory functions, not viewmodel constructors.\r\n            callback(function (params /*, componentInfo */) {\r\n                return new viewModelConfig(params);\r\n            });\r\n        } else if (typeof viewModelConfig[createViewModelKey] === 'function') {\r\n            // Already a factory function - use it as-is\r\n            callback(viewModelConfig[createViewModelKey]);\r\n        } else if ('instance' in viewModelConfig) {\r\n            // Fixed object instance - promote to createViewModel format for API consistency\r\n            var fixedInstance = viewModelConfig['instance'];\r\n            callback(function (params, componentInfo) {\r\n                return fixedInstance;\r\n            });\r\n        } else if ('viewModel' in viewModelConfig) {\r\n            // Resolved AMD module whose value is of the form { viewModel: ... }\r\n            resolveViewModel(errorCallback, viewModelConfig['viewModel'], callback);\r\n        } else {\r\n            errorCallback('Unknown viewModel value: ' + viewModelConfig);\r\n        }\r\n    }\r\n\r\n    function cloneNodesFromTemplateSourceElement(elemInstance) {\r\n        switch (ko.utils.tagNameLower(elemInstance)) {\r\n            case 'script':\r\n                return ko.utils.parseHtmlFragment(elemInstance.text);\r\n            case 'textarea':\r\n                return ko.utils.parseHtmlFragment(elemInstance.value);\r\n            case 'template':\r\n                // For browsers with proper <template> element support (i.e., where the .content property\r\n                // gives a document fragment), use that document fragment.\r\n                if (isDocumentFragment(elemInstance.content)) {\r\n                    return ko.utils.cloneNodes(elemInstance.content.childNodes);\r\n                }\r\n        }\r\n\r\n        // Regular elements such as <div>, and <template> elements on old browsers that don't really\r\n        // understand <template> and just treat it as a regular container\r\n        return ko.utils.cloneNodes(elemInstance.childNodes);\r\n    }\r\n\r\n    function isDomElement(obj) {\r\n        if (window['HTMLElement']) {\r\n            return obj instanceof HTMLElement;\r\n        } else {\r\n            return obj && obj.tagName && obj.nodeType === 1;\r\n        }\r\n    }\r\n\r\n    function isDocumentFragment(obj) {\r\n        if (window['DocumentFragment']) {\r\n            return obj instanceof DocumentFragment;\r\n        } else {\r\n            return obj && obj.nodeType === 11;\r\n        }\r\n    }\r\n\r\n    function possiblyGetConfigFromAmd(errorCallback, config, callback) {\r\n        if (typeof config['require'] === 'string') {\r\n            // The config is the value of an AMD module\r\n            if (amdRequire || window['require']) {\r\n                (amdRequire || window['require'])([config['require']], callback);\r\n            } else {\r\n                errorCallback('Uses require, but no AMD loader is present');\r\n            }\r\n        } else {\r\n            callback(config);\r\n        }\r\n    }\r\n\r\n    function makeErrorCallback(componentName) {\r\n        return function (message) {\r\n            throw new Error('Component \\'' + componentName + '\\': ' + message);\r\n        };\r\n    }\r\n\r\n    ko.exportSymbol('components.register', ko.components.register);\r\n    ko.exportSymbol('components.isRegistered', ko.components.isRegistered);\r\n    ko.exportSymbol('components.unregister', ko.components.unregister);\r\n\r\n    // Expose the default loader so that developers can directly ask it for configuration\r\n    // or to resolve configuration\r\n    ko.exportSymbol('components.defaultLoader', ko.components.defaultLoader);\r\n\r\n    // By default, the default loader is the only registered component loader\r\n    ko.components['loaders'].push(ko.components.defaultLoader);\r\n\r\n    // Privately expose the underlying config registry for use in old-IE shim\r\n    ko.components._allRegisteredComponents = defaultConfigRegistry;\r\n})();\r\n(function (undefined) {\r\n    // Overridable API for determining which component name applies to a given node. By overriding this,\r\n    // you can for example map specific tagNames to components that are not preregistered.\r\n    ko.components['getComponentNameForNode'] = function(node) {\r\n        var tagNameLower = ko.utils.tagNameLower(node);\r\n        return ko.components.isRegistered(tagNameLower) && tagNameLower;\r\n    };\r\n\r\n    ko.components.addBindingsForCustomElement = function(allBindings, node, bindingContext, valueAccessors) {\r\n        // Determine if it's really a custom element matching a component\r\n        if (node.nodeType === 1) {\r\n            var componentName = ko.components['getComponentNameForNode'](node);\r\n            if (componentName) {\r\n                // It does represent a component, so add a component binding for it\r\n                allBindings = allBindings || {};\r\n\r\n                if (allBindings['component']) {\r\n                    // Avoid silently overwriting some other 'component' binding that may already be on the element\r\n                    throw new Error('Cannot use the \"component\" binding on a custom element matching a component');\r\n                }\r\n\r\n                var componentBindingValue = { 'name': componentName, 'params': getComponentParamsFromCustomElement(node, bindingContext) };\r\n\r\n                allBindings['component'] = valueAccessors\r\n                    ? function() { return componentBindingValue; }\r\n                    : componentBindingValue;\r\n            }\r\n        }\r\n\r\n        return allBindings;\r\n    }\r\n\r\n    var nativeBindingProviderInstance = new ko.bindingProvider();\r\n\r\n    function getComponentParamsFromCustomElement(elem, bindingContext) {\r\n        var paramsAttribute = elem.getAttribute('params');\r\n\r\n        if (paramsAttribute) {\r\n            var params = nativeBindingProviderInstance['parseBindingsString'](paramsAttribute, bindingContext, elem, { 'valueAccessors': true, 'bindingParams': true }),\r\n                rawParamComputedValues = ko.utils.objectMap(params, function(paramValue, paramName) {\r\n                    return ko.computed(paramValue, null, { disposeWhenNodeIsRemoved: elem });\r\n                }),\r\n                result = ko.utils.objectMap(rawParamComputedValues, function(paramValueComputed, paramName) {\r\n                    var paramValue = paramValueComputed.peek();\r\n                    // Does the evaluation of the parameter value unwrap any observables?\r\n                    if (!paramValueComputed.isActive()) {\r\n                        // No it doesn't, so there's no need for any computed wrapper. Just pass through the supplied value directly.\r\n                        // Example: \"someVal: firstName, age: 123\" (whether or not firstName is an observable/computed)\r\n                        return paramValue;\r\n                    } else {\r\n                        // Yes it does. Supply a computed property that unwraps both the outer (binding expression)\r\n                        // level of observability, and any inner (resulting model value) level of observability.\r\n                        // This means the component doesn't have to worry about multiple unwrapping. If the value is a\r\n                        // writable observable, the computed will also be writable and pass the value on to the observable.\r\n                        return ko.computed({\r\n                            'read': function() {\r\n                                return ko.utils.unwrapObservable(paramValueComputed());\r\n                            },\r\n                            'write': ko.isWriteableObservable(paramValue) && function(value) {\r\n                                paramValueComputed()(value);\r\n                            },\r\n                            disposeWhenNodeIsRemoved: elem\r\n                        });\r\n                    }\r\n                });\r\n\r\n            // Give access to the raw computeds, as long as that wouldn't overwrite any custom param also called '$raw'\r\n            // This is in case the developer wants to react to outer (binding) observability separately from inner\r\n            // (model value) observability, or in case the model value observable has subobservables.\r\n            if (!result.hasOwnProperty('$raw')) {\r\n                result['$raw'] = rawParamComputedValues;\r\n            }\r\n\r\n            return result;\r\n        } else {\r\n            // For consistency, absence of a \"params\" attribute is treated the same as the presence of\r\n            // any empty one. Otherwise component viewmodels need special code to check whether or not\r\n            // 'params' or 'params.$raw' is null/undefined before reading subproperties, which is annoying.\r\n            return { '$raw': {} };\r\n        }\r\n    }\r\n\r\n    // --------------------------------------------------------------------------------\r\n    // Compatibility code for older (pre-HTML5) IE browsers\r\n\r\n    if (ko.utils.ieVersion < 9) {\r\n        // Whenever you preregister a component, enable it as a custom element in the current document\r\n        ko.components['register'] = (function(originalFunction) {\r\n            return function(componentName) {\r\n                document.createElement(componentName); // Allows IE<9 to parse markup containing the custom element\r\n                return originalFunction.apply(this, arguments);\r\n            }\r\n        })(ko.components['register']);\r\n\r\n        // Whenever you create a document fragment, enable all preregistered component names as custom elements\r\n        // This is needed to make innerShiv/jQuery HTML parsing correctly handle the custom elements\r\n        document.createDocumentFragment = (function(originalFunction) {\r\n            return function() {\r\n                var newDocFrag = originalFunction(),\r\n                    allComponents = ko.components._allRegisteredComponents;\r\n                for (var componentName in allComponents) {\r\n                    if (allComponents.hasOwnProperty(componentName)) {\r\n                        newDocFrag.createElement(componentName);\r\n                    }\r\n                }\r\n                return newDocFrag;\r\n            };\r\n        })(document.createDocumentFragment);\r\n    }\r\n})();(function(undefined) {\r\n\r\n    var componentLoadingOperationUniqueId = 0;\r\n\r\n    ko.bindingHandlers['component'] = {\r\n        'init': function(element, valueAccessor, ignored1, ignored2, bindingContext) {\r\n            var currentViewModel,\r\n                currentLoadingOperationId,\r\n                disposeAssociatedComponentViewModel = function () {\r\n                    var currentViewModelDispose = currentViewModel && currentViewModel['dispose'];\r\n                    if (typeof currentViewModelDispose === 'function') {\r\n                        currentViewModelDispose.call(currentViewModel);\r\n                    }\r\n\r\n                    // Any in-flight loading operation is no longer relevant, so make sure we ignore its completion\r\n                    currentLoadingOperationId = null;\r\n                },\r\n                originalChildNodes = ko.utils.makeArray(ko.virtualElements.childNodes(element));\r\n\r\n            ko.utils.domNodeDisposal.addDisposeCallback(element, disposeAssociatedComponentViewModel);\r\n\r\n            ko.computed(function () {\r\n                var value = ko.utils.unwrapObservable(valueAccessor()),\r\n                    componentName, componentParams;\r\n\r\n                if (typeof value === 'string') {\r\n                    componentName = value;\r\n                } else {\r\n                    componentName = ko.utils.unwrapObservable(value['name']);\r\n                    componentParams = ko.utils.unwrapObservable(value['params']);\r\n                }\r\n\r\n                if (!componentName) {\r\n                    throw new Error('No component name specified');\r\n                }\r\n\r\n                var loadingOperationId = currentLoadingOperationId = ++componentLoadingOperationUniqueId;\r\n                ko.components.get(componentName, function(componentDefinition) {\r\n                    // If this is not the current load operation for this element, ignore it.\r\n                    if (currentLoadingOperationId !== loadingOperationId) {\r\n                        return;\r\n                    }\r\n\r\n                    // Clean up previous state\r\n                    disposeAssociatedComponentViewModel();\r\n\r\n                    // Instantiate and bind new component. Implicitly this cleans any old DOM nodes.\r\n                    if (!componentDefinition) {\r\n                        throw new Error('Unknown component \\'' + componentName + '\\'');\r\n                    }\r\n                    cloneTemplateIntoElement(componentName, componentDefinition, element);\r\n                    var componentViewModel = createViewModel(componentDefinition, element, originalChildNodes, componentParams),\r\n                        childBindingContext = bindingContext['createChildContext'](componentViewModel, /* dataItemAlias */ undefined, function(ctx) {\r\n                            ctx['$component'] = componentViewModel;\r\n                            ctx['$componentTemplateNodes'] = originalChildNodes;\r\n                        });\r\n                    currentViewModel = componentViewModel;\r\n                    ko.applyBindingsToDescendants(childBindingContext, element);\r\n                });\r\n            }, null, { disposeWhenNodeIsRemoved: element });\r\n\r\n            return { 'controlsDescendantBindings': true };\r\n        }\r\n    };\r\n\r\n    ko.virtualElements.allowedBindings['component'] = true;\r\n\r\n    function cloneTemplateIntoElement(componentName, componentDefinition, element) {\r\n        var template = componentDefinition['template'];\r\n        if (!template) {\r\n            throw new Error('Component \\'' + componentName + '\\' has no template');\r\n        }\r\n\r\n        var clonedNodesArray = ko.utils.cloneNodes(template);\r\n        ko.virtualElements.setDomNodeChildren(element, clonedNodesArray);\r\n    }\r\n\r\n    function createViewModel(componentDefinition, element, originalChildNodes, componentParams) {\r\n        var componentViewModelFactory = componentDefinition['createViewModel'];\r\n        return componentViewModelFactory\r\n            ? componentViewModelFactory.call(componentDefinition, componentParams, { 'element': element, 'templateNodes': originalChildNodes })\r\n            : componentParams; // Template-only component\r\n    }\r\n\r\n})();\r\nvar attrHtmlToJavascriptMap = { 'class': 'className', 'for': 'htmlFor' };\r\nko.bindingHandlers['attr'] = {\r\n    'update': function(element, valueAccessor, allBindings) {\r\n        var value = ko.utils.unwrapObservable(valueAccessor()) || {};\r\n        ko.utils.objectForEach(value, function(attrName, attrValue) {\r\n            attrValue = ko.utils.unwrapObservable(attrValue);\r\n\r\n            // To cover cases like \"attr: { checked:someProp }\", we want to remove the attribute entirely\r\n            // when someProp is a \"no value\"-like value (strictly null, false, or undefined)\r\n            // (because the absence of the \"checked\" attr is how to mark an element as not checked, etc.)\r\n            var toRemove = (attrValue === false) || (attrValue === null) || (attrValue === undefined);\r\n            if (toRemove)\r\n                element.removeAttribute(attrName);\r\n\r\n            // In IE <= 7 and IE8 Quirks Mode, you have to use the Javascript property name instead of the\r\n            // HTML attribute name for certain attributes. IE8 Standards Mode supports the correct behavior,\r\n            // but instead of figuring out the mode, we'll just set the attribute through the Javascript\r\n            // property for IE <= 8.\r\n            if (ko.utils.ieVersion <= 8 && attrName in attrHtmlToJavascriptMap) {\r\n                attrName = attrHtmlToJavascriptMap[attrName];\r\n                if (toRemove)\r\n                    element.removeAttribute(attrName);\r\n                else\r\n                    element[attrName] = attrValue;\r\n            } else if (!toRemove) {\r\n                element.setAttribute(attrName, attrValue.toString());\r\n            }\r\n\r\n            // Treat \"name\" specially - although you can think of it as an attribute, it also needs\r\n            // special handling on older versions of IE (https://github.com/SteveSanderson/knockout/pull/333)\r\n            // Deliberately being case-sensitive here because XHTML would regard \"Name\" as a different thing\r\n            // entirely, and there's no strong reason to allow for such casing in HTML.\r\n            if (attrName === \"name\") {\r\n                ko.utils.setElementName(element, toRemove ? \"\" : attrValue.toString());\r\n            }\r\n        });\r\n    }\r\n};\r\n(function() {\r\n\r\nko.bindingHandlers['checked'] = {\r\n    'after': ['value', 'attr'],\r\n    'init': function (element, valueAccessor, allBindings) {\r\n        var checkedValue = ko.pureComputed(function() {\r\n            // Treat \"value\" like \"checkedValue\" when it is included with \"checked\" binding\r\n            if (allBindings['has']('checkedValue')) {\r\n                return ko.utils.unwrapObservable(allBindings.get('checkedValue'));\r\n            } else if (allBindings['has']('value')) {\r\n                return ko.utils.unwrapObservable(allBindings.get('value'));\r\n            }\r\n\r\n            return element.value;\r\n        });\r\n\r\n        function updateModel() {\r\n            // This updates the model value from the view value.\r\n            // It runs in response to DOM events (click) and changes in checkedValue.\r\n            var isChecked = element.checked,\r\n                elemValue = useCheckedValue ? checkedValue() : isChecked;\r\n\r\n            // When we're first setting up this computed, don't change any model state.\r\n            if (ko.computedContext.isInitial()) {\r\n                return;\r\n            }\r\n\r\n            // We can ignore unchecked radio buttons, because some other radio\r\n            // button will be getting checked, and that one can take care of updating state.\r\n            if (isRadio && !isChecked) {\r\n                return;\r\n            }\r\n\r\n            var modelValue = ko.dependencyDetection.ignore(valueAccessor);\r\n            if (isValueArray) {\r\n                if (oldElemValue !== elemValue) {\r\n                    // When we're responding to the checkedValue changing, and the element is\r\n                    // currently checked, replace the old elem value with the new elem value\r\n                    // in the model array.\r\n                    if (isChecked) {\r\n                        ko.utils.addOrRemoveItem(modelValue, elemValue, true);\r\n                        ko.utils.addOrRemoveItem(modelValue, oldElemValue, false);\r\n                    }\r\n\r\n                    oldElemValue = elemValue;\r\n                } else {\r\n                    // When we're responding to the user having checked/unchecked a checkbox,\r\n                    // add/remove the element value to the model array.\r\n                    ko.utils.addOrRemoveItem(modelValue, elemValue, isChecked);\r\n                }\r\n            } else {\r\n                ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'checked', elemValue, true);\r\n            }\r\n        };\r\n\r\n        function updateView() {\r\n            // This updates the view value from the model value.\r\n            // It runs in response to changes in the bound (checked) value.\r\n            var modelValue = ko.utils.unwrapObservable(valueAccessor());\r\n\r\n            if (isValueArray) {\r\n                // When a checkbox is bound to an array, being checked represents its value being present in that array\r\n                element.checked = ko.utils.arrayIndexOf(modelValue, checkedValue()) >= 0;\r\n            } else if (isCheckbox) {\r\n                // When a checkbox is bound to any other value (not an array), being checked represents the value being trueish\r\n                element.checked = modelValue;\r\n            } else {\r\n                // For radio buttons, being checked means that the radio button's value corresponds to the model value\r\n                element.checked = (checkedValue() === modelValue);\r\n            }\r\n        };\r\n\r\n        var isCheckbox = element.type == \"checkbox\",\r\n            isRadio = element.type == \"radio\";\r\n\r\n        // Only bind to check boxes and radio buttons\r\n        if (!isCheckbox && !isRadio) {\r\n            return;\r\n        }\r\n\r\n        var isValueArray = isCheckbox && (ko.utils.unwrapObservable(valueAccessor()) instanceof Array),\r\n            oldElemValue = isValueArray ? checkedValue() : undefined,\r\n            useCheckedValue = isRadio || isValueArray;\r\n\r\n        // IE 6 won't allow radio buttons to be selected unless they have a name\r\n        if (isRadio && !element.name)\r\n            ko.bindingHandlers['uniqueName']['init'](element, function() { return true });\r\n\r\n        // Set up two computeds to update the binding:\r\n\r\n        // The first responds to changes in the checkedValue value and to element clicks\r\n        ko.computed(updateModel, null, { disposeWhenNodeIsRemoved: element });\r\n        ko.utils.registerEventHandler(element, \"click\", updateModel);\r\n\r\n        // The second responds to changes in the model value (the one associated with the checked binding)\r\n        ko.computed(updateView, null, { disposeWhenNodeIsRemoved: element });\r\n    }\r\n};\r\nko.expressionRewriting.twoWayBindings['checked'] = true;\r\n\r\nko.bindingHandlers['checkedValue'] = {\r\n    'update': function (element, valueAccessor) {\r\n        element.value = ko.utils.unwrapObservable(valueAccessor());\r\n    }\r\n};\r\n\r\n})();var classesWrittenByBindingKey = '__ko__cssValue';\r\nko.bindingHandlers['css'] = {\r\n    'update': function (element, valueAccessor) {\r\n        var value = ko.utils.unwrapObservable(valueAccessor());\r\n        if (value !== null && typeof value == \"object\") {\r\n            ko.utils.objectForEach(value, function(className, shouldHaveClass) {\r\n                shouldHaveClass = ko.utils.unwrapObservable(shouldHaveClass);\r\n                ko.utils.toggleDomNodeCssClass(element, className, shouldHaveClass);\r\n            });\r\n        } else {\r\n            value = String(value || ''); // Make sure we don't try to store or set a non-string value\r\n            ko.utils.toggleDomNodeCssClass(element, element[classesWrittenByBindingKey], false);\r\n            element[classesWrittenByBindingKey] = value;\r\n            ko.utils.toggleDomNodeCssClass(element, value, true);\r\n        }\r\n    }\r\n};\r\nko.bindingHandlers['enable'] = {\r\n    'update': function (element, valueAccessor) {\r\n        var value = ko.utils.unwrapObservable(valueAccessor());\r\n        if (value && element.disabled)\r\n            element.removeAttribute(\"disabled\");\r\n        else if ((!value) && (!element.disabled))\r\n            element.disabled = true;\r\n    }\r\n};\r\n\r\nko.bindingHandlers['disable'] = {\r\n    'update': function (element, valueAccessor) {\r\n        ko.bindingHandlers['enable']['update'](element, function() { return !ko.utils.unwrapObservable(valueAccessor()) });\r\n    }\r\n};\r\n// For certain common events (currently just 'click'), allow a simplified data-binding syntax\r\n// e.g. click:handler instead of the usual full-length event:{click:handler}\r\nfunction makeEventHandlerShortcut(eventName) {\r\n    ko.bindingHandlers[eventName] = {\r\n        'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            var newValueAccessor = function () {\r\n                var result = {};\r\n                result[eventName] = valueAccessor();\r\n                return result;\r\n            };\r\n            return ko.bindingHandlers['event']['init'].call(this, element, newValueAccessor, allBindings, viewModel, bindingContext);\r\n        }\r\n    }\r\n}\r\n\r\nko.bindingHandlers['event'] = {\r\n    'init' : function (element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n        var eventsToHandle = valueAccessor() || {};\r\n        ko.utils.objectForEach(eventsToHandle, function(eventName) {\r\n            if (typeof eventName == \"string\") {\r\n                ko.utils.registerEventHandler(element, eventName, function (event) {\r\n                    var handlerReturnValue;\r\n                    var handlerFunction = valueAccessor()[eventName];\r\n                    if (!handlerFunction)\r\n                        return;\r\n\r\n                    try {\r\n                        // Take all the event args, and prefix with the viewmodel\r\n                        var argsForHandler = ko.utils.makeArray(arguments);\r\n                        viewModel = bindingContext['$data'];\r\n                        argsForHandler.unshift(viewModel);\r\n                        handlerReturnValue = handlerFunction.apply(viewModel, argsForHandler);\r\n                    } finally {\r\n                        if (handlerReturnValue !== true) { // Normally we want to prevent default action. Developer can override this be explicitly returning true.\r\n                            if (event.preventDefault)\r\n                                event.preventDefault();\r\n                            else\r\n                                event.returnValue = false;\r\n                        }\r\n                    }\r\n\r\n                    var bubble = allBindings.get(eventName + 'Bubble') !== false;\r\n                    if (!bubble) {\r\n                        event.cancelBubble = true;\r\n                        if (event.stopPropagation)\r\n                            event.stopPropagation();\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n};\r\n// \"foreach: someExpression\" is equivalent to \"template: { foreach: someExpression }\"\r\n// \"foreach: { data: someExpression, afterAdd: myfn }\" is equivalent to \"template: { foreach: someExpression, afterAdd: myfn }\"\r\nko.bindingHandlers['foreach'] = {\r\n    makeTemplateValueAccessor: function(valueAccessor) {\r\n        return function() {\r\n            var modelValue = valueAccessor(),\r\n                unwrappedValue = ko.utils.peekObservable(modelValue);    // Unwrap without setting a dependency here\r\n\r\n            // If unwrappedValue is the array, pass in the wrapped value on its own\r\n            // The value will be unwrapped and tracked within the template binding\r\n            // (See https://github.com/SteveSanderson/knockout/issues/523)\r\n            if ((!unwrappedValue) || typeof unwrappedValue.length == \"number\")\r\n                return { 'foreach': modelValue, 'templateEngine': ko.nativeTemplateEngine.instance };\r\n\r\n            // If unwrappedValue.data is the array, preserve all relevant options and unwrap again value so we get updates\r\n            ko.utils.unwrapObservable(modelValue);\r\n            return {\r\n                'foreach': unwrappedValue['data'],\r\n                'as': unwrappedValue['as'],\r\n                'includeDestroyed': unwrappedValue['includeDestroyed'],\r\n                'afterAdd': unwrappedValue['afterAdd'],\r\n                'beforeRemove': unwrappedValue['beforeRemove'],\r\n                'afterRender': unwrappedValue['afterRender'],\r\n                'beforeMove': unwrappedValue['beforeMove'],\r\n                'afterMove': unwrappedValue['afterMove'],\r\n                'templateEngine': ko.nativeTemplateEngine.instance\r\n            };\r\n        };\r\n    },\r\n    'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n        return ko.bindingHandlers['template']['init'](element, ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor));\r\n    },\r\n    'update': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n        return ko.bindingHandlers['template']['update'](element, ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor), allBindings, viewModel, bindingContext);\r\n    }\r\n};\r\nko.expressionRewriting.bindingRewriteValidators['foreach'] = false; // Can't rewrite control flow bindings\r\nko.virtualElements.allowedBindings['foreach'] = true;\r\nvar hasfocusUpdatingProperty = '__ko_hasfocusUpdating';\r\nvar hasfocusLastValue = '__ko_hasfocusLastValue';\r\nko.bindingHandlers['hasfocus'] = {\r\n    'init': function(element, valueAccessor, allBindings) {\r\n        var handleElementFocusChange = function(isFocused) {\r\n            // Where possible, ignore which event was raised and determine focus state using activeElement,\r\n            // as this avoids phantom focus/blur events raised when changing tabs in modern browsers.\r\n            // However, not all KO-targeted browsers (Firefox 2) support activeElement. For those browsers,\r\n            // prevent a loss of focus when changing tabs/windows by setting a flag that prevents hasfocus\r\n            // from calling 'blur()' on the element when it loses focus.\r\n            // Discussion at https://github.com/SteveSanderson/knockout/pull/352\r\n            element[hasfocusUpdatingProperty] = true;\r\n            var ownerDoc = element.ownerDocument;\r\n            if (\"activeElement\" in ownerDoc) {\r\n                var active;\r\n                try {\r\n                    active = ownerDoc.activeElement;\r\n                } catch(e) {\r\n                    // IE9 throws if you access activeElement during page load (see issue #703)\r\n                    active = ownerDoc.body;\r\n                }\r\n                isFocused = (active === element);\r\n            }\r\n            var modelValue = valueAccessor();\r\n            ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'hasfocus', isFocused, true);\r\n\r\n            //cache the latest value, so we can avoid unnecessarily calling focus/blur in the update function\r\n            element[hasfocusLastValue] = isFocused;\r\n            element[hasfocusUpdatingProperty] = false;\r\n        };\r\n        var handleElementFocusIn = handleElementFocusChange.bind(null, true);\r\n        var handleElementFocusOut = handleElementFocusChange.bind(null, false);\r\n\r\n        ko.utils.registerEventHandler(element, \"focus\", handleElementFocusIn);\r\n        ko.utils.registerEventHandler(element, \"focusin\", handleElementFocusIn); // For IE\r\n        ko.utils.registerEventHandler(element, \"blur\",  handleElementFocusOut);\r\n        ko.utils.registerEventHandler(element, \"focusout\",  handleElementFocusOut); // For IE\r\n    },\r\n    'update': function(element, valueAccessor) {\r\n        var value = !!ko.utils.unwrapObservable(valueAccessor()); //force boolean to compare with last value\r\n        if (!element[hasfocusUpdatingProperty] && element[hasfocusLastValue] !== value) {\r\n            value ? element.focus() : element.blur();\r\n            ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, value ? \"focusin\" : \"focusout\"]); // For IE, which doesn't reliably fire \"focus\" or \"blur\" events synchronously\r\n        }\r\n    }\r\n};\r\nko.expressionRewriting.twoWayBindings['hasfocus'] = true;\r\n\r\nko.bindingHandlers['hasFocus'] = ko.bindingHandlers['hasfocus']; // Make \"hasFocus\" an alias\r\nko.expressionRewriting.twoWayBindings['hasFocus'] = true;\r\nko.bindingHandlers['html'] = {\r\n    'init': function() {\r\n        // Prevent binding on the dynamically-injected HTML (as developers are unlikely to expect that, and it has security implications)\r\n        return { 'controlsDescendantBindings': true };\r\n    },\r\n    'update': function (element, valueAccessor) {\r\n        // setHtml will unwrap the value if needed\r\n        ko.utils.setHtml(element, valueAccessor());\r\n    }\r\n};\r\n// Makes a binding like with or if\r\nfunction makeWithIfBinding(bindingKey, isWith, isNot, makeContextCallback) {\r\n    ko.bindingHandlers[bindingKey] = {\r\n        'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            var didDisplayOnLastUpdate,\r\n                savedNodes;\r\n            ko.computed(function() {\r\n                var dataValue = ko.utils.unwrapObservable(valueAccessor()),\r\n                    shouldDisplay = !isNot !== !dataValue, // equivalent to isNot ? !dataValue : !!dataValue\r\n                    isFirstRender = !savedNodes,\r\n                    needsRefresh = isFirstRender || isWith || (shouldDisplay !== didDisplayOnLastUpdate);\r\n\r\n                if (needsRefresh) {\r\n                    // Save a copy of the inner nodes on the initial update, but only if we have dependencies.\r\n                    if (isFirstRender && ko.computedContext.getDependenciesCount()) {\r\n                        savedNodes = ko.utils.cloneNodes(ko.virtualElements.childNodes(element), true /* shouldCleanNodes */);\r\n                    }\r\n\r\n                    if (shouldDisplay) {\r\n                        if (!isFirstRender) {\r\n                            ko.virtualElements.setDomNodeChildren(element, ko.utils.cloneNodes(savedNodes));\r\n                        }\r\n                        ko.applyBindingsToDescendants(makeContextCallback ? makeContextCallback(bindingContext, dataValue) : bindingContext, element);\r\n                    } else {\r\n                        ko.virtualElements.emptyNode(element);\r\n                    }\r\n\r\n                    didDisplayOnLastUpdate = shouldDisplay;\r\n                }\r\n            }, null, { disposeWhenNodeIsRemoved: element });\r\n            return { 'controlsDescendantBindings': true };\r\n        }\r\n    };\r\n    ko.expressionRewriting.bindingRewriteValidators[bindingKey] = false; // Can't rewrite control flow bindings\r\n    ko.virtualElements.allowedBindings[bindingKey] = true;\r\n}\r\n\r\n// Construct the actual binding handlers\r\nmakeWithIfBinding('if');\r\nmakeWithIfBinding('ifnot', false /* isWith */, true /* isNot */);\r\nmakeWithIfBinding('with', true /* isWith */, false /* isNot */,\r\n    function(bindingContext, dataValue) {\r\n        return bindingContext['createChildContext'](dataValue);\r\n    }\r\n);\r\nvar captionPlaceholder = {};\r\nko.bindingHandlers['options'] = {\r\n    'init': function(element) {\r\n        if (ko.utils.tagNameLower(element) !== \"select\")\r\n            throw new Error(\"options binding applies only to SELECT elements\");\r\n\r\n        // Remove all existing <option>s.\r\n        while (element.length > 0) {\r\n            element.remove(0);\r\n        }\r\n\r\n        // Ensures that the binding processor doesn't try to bind the options\r\n        return { 'controlsDescendantBindings': true };\r\n    },\r\n    'update': function (element, valueAccessor, allBindings) {\r\n        function selectedOptions() {\r\n            return ko.utils.arrayFilter(element.options, function (node) { return node.selected; });\r\n        }\r\n\r\n        var selectWasPreviouslyEmpty = element.length == 0,\r\n            multiple = element.multiple,\r\n            previousScrollTop = (!selectWasPreviouslyEmpty && multiple) ? element.scrollTop : null,\r\n            unwrappedArray = ko.utils.unwrapObservable(valueAccessor()),\r\n            valueAllowUnset = allBindings.get('valueAllowUnset') && allBindings['has']('value'),\r\n            includeDestroyed = allBindings.get('optionsIncludeDestroyed'),\r\n            arrayToDomNodeChildrenOptions = {},\r\n            captionValue,\r\n            filteredArray,\r\n            previousSelectedValues = [];\r\n\r\n        if (!valueAllowUnset) {\r\n            if (multiple) {\r\n                previousSelectedValues = ko.utils.arrayMap(selectedOptions(), ko.selectExtensions.readValue);\r\n            } else if (element.selectedIndex >= 0) {\r\n                previousSelectedValues.push(ko.selectExtensions.readValue(element.options[element.selectedIndex]));\r\n            }\r\n        }\r\n\r\n        if (unwrappedArray) {\r\n            if (typeof unwrappedArray.length == \"undefined\") // Coerce single value into array\r\n                unwrappedArray = [unwrappedArray];\r\n\r\n            // Filter out any entries marked as destroyed\r\n            filteredArray = ko.utils.arrayFilter(unwrappedArray, function(item) {\r\n                return includeDestroyed || item === undefined || item === null || !ko.utils.unwrapObservable(item['_destroy']);\r\n            });\r\n\r\n            // If caption is included, add it to the array\r\n            if (allBindings['has']('optionsCaption')) {\r\n                captionValue = ko.utils.unwrapObservable(allBindings.get('optionsCaption'));\r\n                // If caption value is null or undefined, don't show a caption\r\n                if (captionValue !== null && captionValue !== undefined) {\r\n                    filteredArray.unshift(captionPlaceholder);\r\n                }\r\n            }\r\n        } else {\r\n            // If a falsy value is provided (e.g. null), we'll simply empty the select element\r\n        }\r\n\r\n        function applyToObject(object, predicate, defaultValue) {\r\n            var predicateType = typeof predicate;\r\n            if (predicateType == \"function\")    // Given a function; run it against the data value\r\n                return predicate(object);\r\n            else if (predicateType == \"string\") // Given a string; treat it as a property name on the data value\r\n                return object[predicate];\r\n            else                                // Given no optionsText arg; use the data value itself\r\n                return defaultValue;\r\n        }\r\n\r\n        // The following functions can run at two different times:\r\n        // The first is when the whole array is being updated directly from this binding handler.\r\n        // The second is when an observable value for a specific array entry is updated.\r\n        // oldOptions will be empty in the first case, but will be filled with the previously generated option in the second.\r\n        var itemUpdate = false;\r\n        function optionForArrayItem(arrayEntry, index, oldOptions) {\r\n            if (oldOptions.length) {\r\n                previousSelectedValues = !valueAllowUnset && oldOptions[0].selected ? [ ko.selectExtensions.readValue(oldOptions[0]) ] : [];\r\n                itemUpdate = true;\r\n            }\r\n            var option = element.ownerDocument.createElement(\"option\");\r\n            if (arrayEntry === captionPlaceholder) {\r\n                ko.utils.setTextContent(option, allBindings.get('optionsCaption'));\r\n                ko.selectExtensions.writeValue(option, undefined);\r\n            } else {\r\n                // Apply a value to the option element\r\n                var optionValue = applyToObject(arrayEntry, allBindings.get('optionsValue'), arrayEntry);\r\n                ko.selectExtensions.writeValue(option, ko.utils.unwrapObservable(optionValue));\r\n\r\n                // Apply some text to the option element\r\n                var optionText = applyToObject(arrayEntry, allBindings.get('optionsText'), optionValue);\r\n                ko.utils.setTextContent(option, optionText);\r\n            }\r\n            return [option];\r\n        }\r\n\r\n        // By using a beforeRemove callback, we delay the removal until after new items are added. This fixes a selection\r\n        // problem in IE<=8 and Firefox. See https://github.com/knockout/knockout/issues/1208\r\n        arrayToDomNodeChildrenOptions['beforeRemove'] =\r\n            function (option) {\r\n                element.removeChild(option);\r\n            };\r\n\r\n        function setSelectionCallback(arrayEntry, newOptions) {\r\n            if (itemUpdate && valueAllowUnset) {\r\n                // The model value is authoritative, so make sure its value is the one selected\r\n                // There is no need to use dependencyDetection.ignore since setDomNodeChildrenFromArrayMapping does so already.\r\n                ko.selectExtensions.writeValue(element, ko.utils.unwrapObservable(allBindings.get('value')), true /* allowUnset */);\r\n            } else if (previousSelectedValues.length) {\r\n                // IE6 doesn't like us to assign selection to OPTION nodes before they're added to the document.\r\n                // That's why we first added them without selection. Now it's time to set the selection.\r\n                var isSelected = ko.utils.arrayIndexOf(previousSelectedValues, ko.selectExtensions.readValue(newOptions[0])) >= 0;\r\n                ko.utils.setOptionNodeSelectionState(newOptions[0], isSelected);\r\n\r\n                // If this option was changed from being selected during a single-item update, notify the change\r\n                if (itemUpdate && !isSelected) {\r\n                    ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, \"change\"]);\r\n                }\r\n            }\r\n        }\r\n\r\n        var callback = setSelectionCallback;\r\n        if (allBindings['has']('optionsAfterRender') && typeof allBindings.get('optionsAfterRender') == \"function\") {\r\n            callback = function(arrayEntry, newOptions) {\r\n                setSelectionCallback(arrayEntry, newOptions);\r\n                ko.dependencyDetection.ignore(allBindings.get('optionsAfterRender'), null, [newOptions[0], arrayEntry !== captionPlaceholder ? arrayEntry : undefined]);\r\n            }\r\n        }\r\n\r\n        ko.utils.setDomNodeChildrenFromArrayMapping(element, filteredArray, optionForArrayItem, arrayToDomNodeChildrenOptions, callback);\r\n\r\n        ko.dependencyDetection.ignore(function () {\r\n            if (valueAllowUnset) {\r\n                // The model value is authoritative, so make sure its value is the one selected\r\n                ko.selectExtensions.writeValue(element, ko.utils.unwrapObservable(allBindings.get('value')), true /* allowUnset */);\r\n            } else {\r\n                // Determine if the selection has changed as a result of updating the options list\r\n                var selectionChanged;\r\n                if (multiple) {\r\n                    // For a multiple-select box, compare the new selection count to the previous one\r\n                    // But if nothing was selected before, the selection can't have changed\r\n                    selectionChanged = previousSelectedValues.length && selectedOptions().length < previousSelectedValues.length;\r\n                } else {\r\n                    // For a single-select box, compare the current value to the previous value\r\n                    // But if nothing was selected before or nothing is selected now, just look for a change in selection\r\n                    selectionChanged = (previousSelectedValues.length && element.selectedIndex >= 0)\r\n                        ? (ko.selectExtensions.readValue(element.options[element.selectedIndex]) !== previousSelectedValues[0])\r\n                        : (previousSelectedValues.length || element.selectedIndex >= 0);\r\n                }\r\n\r\n                // Ensure consistency between model value and selected option.\r\n                // If the dropdown was changed so that selection is no longer the same,\r\n                // notify the value or selectedOptions binding.\r\n                if (selectionChanged) {\r\n                    ko.utils.triggerEvent(element, \"change\");\r\n                }\r\n            }\r\n        });\r\n\r\n        // Workaround for IE bug\r\n        ko.utils.ensureSelectElementIsRenderedCorrectly(element);\r\n\r\n        if (previousScrollTop && Math.abs(previousScrollTop - element.scrollTop) > 20)\r\n            element.scrollTop = previousScrollTop;\r\n    }\r\n};\r\nko.bindingHandlers['options'].optionValueDomDataKey = ko.utils.domData.nextKey();\r\nko.bindingHandlers['selectedOptions'] = {\r\n    'after': ['options', 'foreach'],\r\n    'init': function (element, valueAccessor, allBindings) {\r\n        ko.utils.registerEventHandler(element, \"change\", function () {\r\n            var value = valueAccessor(), valueToWrite = [];\r\n            ko.utils.arrayForEach(element.getElementsByTagName(\"option\"), function(node) {\r\n                if (node.selected)\r\n                    valueToWrite.push(ko.selectExtensions.readValue(node));\r\n            });\r\n            ko.expressionRewriting.writeValueToProperty(value, allBindings, 'selectedOptions', valueToWrite);\r\n        });\r\n    },\r\n    'update': function (element, valueAccessor) {\r\n        if (ko.utils.tagNameLower(element) != \"select\")\r\n            throw new Error(\"values binding applies only to SELECT elements\");\r\n\r\n        var newValue = ko.utils.unwrapObservable(valueAccessor());\r\n        if (newValue && typeof newValue.length == \"number\") {\r\n            ko.utils.arrayForEach(element.getElementsByTagName(\"option\"), function(node) {\r\n                var isSelected = ko.utils.arrayIndexOf(newValue, ko.selectExtensions.readValue(node)) >= 0;\r\n                ko.utils.setOptionNodeSelectionState(node, isSelected);\r\n            });\r\n        }\r\n    }\r\n};\r\nko.expressionRewriting.twoWayBindings['selectedOptions'] = true;\r\nko.bindingHandlers['style'] = {\r\n    'update': function (element, valueAccessor) {\r\n        var value = ko.utils.unwrapObservable(valueAccessor() || {});\r\n        ko.utils.objectForEach(value, function(styleName, styleValue) {\r\n            styleValue = ko.utils.unwrapObservable(styleValue);\r\n\r\n            if (styleValue === null || styleValue === undefined || styleValue === false) {\r\n                // Empty string removes the value, whereas null/undefined have no effect\r\n                styleValue = \"\";\r\n            }\r\n\r\n            element.style[styleName] = styleValue;\r\n        });\r\n    }\r\n};\r\nko.bindingHandlers['submit'] = {\r\n    'init': function (element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n        if (typeof valueAccessor() != \"function\")\r\n            throw new Error(\"The value for a submit binding must be a function\");\r\n        ko.utils.registerEventHandler(element, \"submit\", function (event) {\r\n            var handlerReturnValue;\r\n            var value = valueAccessor();\r\n            try { handlerReturnValue = value.call(bindingContext['$data'], element); }\r\n            finally {\r\n                if (handlerReturnValue !== true) { // Normally we want to prevent default action. Developer can override this be explicitly returning true.\r\n                    if (event.preventDefault)\r\n                        event.preventDefault();\r\n                    else\r\n                        event.returnValue = false;\r\n                }\r\n            }\r\n        });\r\n    }\r\n};\r\nko.bindingHandlers['text'] = {\r\n    'init': function() {\r\n        // Prevent binding on the dynamically-injected text node (as developers are unlikely to expect that, and it has security implications).\r\n        // It should also make things faster, as we no longer have to consider whether the text node might be bindable.\r\n        return { 'controlsDescendantBindings': true };\r\n    },\r\n    'update': function (element, valueAccessor) {\r\n        ko.utils.setTextContent(element, valueAccessor());\r\n    }\r\n};\r\nko.virtualElements.allowedBindings['text'] = true;\r\n(function () {\r\n\r\nif (window && window.navigator) {\r\n    var parseVersion = function (matches) {\r\n        if (matches) {\r\n            return parseFloat(matches[1]);\r\n        }\r\n    };\r\n\r\n    // Detect various browser versions because some old versions don't fully support the 'input' event\r\n    var operaVersion = window.opera && window.opera.version && parseInt(window.opera.version()),\r\n        userAgent = window.navigator.userAgent,\r\n        safariVersion = parseVersion(userAgent.match(/^(?:(?!chrome).)*version\\/([^ ]*) safari/i)),\r\n        firefoxVersion = parseVersion(userAgent.match(/Firefox\\/([^ ]*)/));\r\n}\r\n\r\n// IE 8 and 9 have bugs that prevent the normal events from firing when the value changes.\r\n// But it does fire the 'selectionchange' event on many of those, presumably because the\r\n// cursor is moving and that counts as the selection changing. The 'selectionchange' event is\r\n// fired at the document level only and doesn't directly indicate which element changed. We\r\n// set up just one event handler for the document and use 'activeElement' to determine which\r\n// element was changed.\r\nif (ko.utils.ieVersion < 10) {\r\n    var selectionChangeRegisteredName = ko.utils.domData.nextKey(),\r\n        selectionChangeHandlerName = ko.utils.domData.nextKey();\r\n    var selectionChangeHandler = function(event) {\r\n        var target = this.activeElement,\r\n            handler = target && ko.utils.domData.get(target, selectionChangeHandlerName);\r\n        if (handler) {\r\n            handler(event);\r\n        }\r\n    };\r\n    var registerForSelectionChangeEvent = function (element, handler) {\r\n        var ownerDoc = element.ownerDocument;\r\n        if (!ko.utils.domData.get(ownerDoc, selectionChangeRegisteredName)) {\r\n            ko.utils.domData.set(ownerDoc, selectionChangeRegisteredName, true);\r\n            ko.utils.registerEventHandler(ownerDoc, 'selectionchange', selectionChangeHandler);\r\n        }\r\n        ko.utils.domData.set(element, selectionChangeHandlerName, handler);\r\n    };\r\n}\r\n\r\nko.bindingHandlers['textInput'] = {\r\n    'init': function (element, valueAccessor, allBindings) {\r\n\r\n        var previousElementValue = element.value,\r\n            timeoutHandle,\r\n            elementValueBeforeEvent;\r\n\r\n        var updateModel = function (event) {\r\n            clearTimeout(timeoutHandle);\r\n            elementValueBeforeEvent = timeoutHandle = undefined;\r\n\r\n            var elementValue = element.value;\r\n            if (previousElementValue !== elementValue) {\r\n                // Provide a way for tests to know exactly which event was processed\r\n                if (DEBUG && event) element['_ko_textInputProcessedEvent'] = event.type;\r\n                previousElementValue = elementValue;\r\n                ko.expressionRewriting.writeValueToProperty(valueAccessor(), allBindings, 'textInput', elementValue);\r\n            }\r\n        };\r\n\r\n        var deferUpdateModel = function (event) {\r\n            if (!timeoutHandle) {\r\n                // The elementValueBeforeEvent variable is set *only* during the brief gap between an\r\n                // event firing and the updateModel function running. This allows us to ignore model\r\n                // updates that are from the previous state of the element, usually due to techniques\r\n                // such as rateLimit. Such updates, if not ignored, can cause keystrokes to be lost.\r\n                elementValueBeforeEvent = element.value;\r\n                var handler = DEBUG ? updateModel.bind(element, {type: event.type}) : updateModel;\r\n                timeoutHandle = setTimeout(handler, 4);\r\n            }\r\n        };\r\n\r\n        var updateView = function () {\r\n            var modelValue = ko.utils.unwrapObservable(valueAccessor());\r\n\r\n            if (modelValue === null || modelValue === undefined) {\r\n                modelValue = '';\r\n            }\r\n\r\n            if (elementValueBeforeEvent !== undefined && modelValue === elementValueBeforeEvent) {\r\n                setTimeout(updateView, 4);\r\n                return;\r\n            }\r\n\r\n            // Update the element only if the element and model are different. On some browsers, updating the value\r\n            // will move the cursor to the end of the input, which would be bad while the user is typing.\r\n            if (element.value !== modelValue) {\r\n                previousElementValue = modelValue;  // Make sure we ignore events (propertychange) that result from updating the value\r\n                element.value = modelValue;\r\n            }\r\n        };\r\n\r\n        var onEvent = function (event, handler) {\r\n            ko.utils.registerEventHandler(element, event, handler);\r\n        };\r\n\r\n        if (DEBUG && ko.bindingHandlers['textInput']['_forceUpdateOn']) {\r\n            // Provide a way for tests to specify exactly which events are bound\r\n            ko.utils.arrayForEach(ko.bindingHandlers['textInput']['_forceUpdateOn'], function(eventName) {\r\n                if (eventName.slice(0,5) == 'after') {\r\n                    onEvent(eventName.slice(5), deferUpdateModel);\r\n                } else {\r\n                    onEvent(eventName, updateModel);\r\n                }\r\n            });\r\n        } else {\r\n            if (ko.utils.ieVersion < 10) {\r\n                // Internet Explorer <= 8 doesn't support the 'input' event, but does include 'propertychange' that fires whenever\r\n                // any property of an element changes. Unlike 'input', it also fires if a property is changed from JavaScript code,\r\n                // but that's an acceptable compromise for this binding. IE 9 does support 'input', but since it doesn't fire it\r\n                // when using autocomplete, we'll use 'propertychange' for it also.\r\n                onEvent('propertychange', function(event) {\r\n                    if (event.propertyName === 'value') {\r\n                        updateModel(event);\r\n                    }\r\n                });\r\n\r\n                if (ko.utils.ieVersion == 8) {\r\n                    // IE 8 has a bug where it fails to fire 'propertychange' on the first update following a value change from\r\n                    // JavaScript code. It also doesn't fire if you clear the entire value. To fix this, we bind to the following\r\n                    // events too.\r\n                    onEvent('keyup', updateModel);      // A single keystoke\r\n                    onEvent('keydown', updateModel);    // The first character when a key is held down\r\n                }\r\n                if (ko.utils.ieVersion >= 8) {\r\n                    // Internet Explorer 9 doesn't fire the 'input' event when deleting text, including using\r\n                    // the backspace, delete, or ctrl-x keys, clicking the 'x' to clear the input, dragging text\r\n                    // out of the field, and cutting or deleting text using the context menu. 'selectionchange'\r\n                    // can detect all of those except dragging text out of the field, for which we use 'dragend'.\r\n                    // These are also needed in IE8 because of the bug described above.\r\n                    registerForSelectionChangeEvent(element, updateModel);  // 'selectionchange' covers cut, paste, drop, delete, etc.\r\n                    onEvent('dragend', deferUpdateModel);\r\n                }\r\n            } else {\r\n                // All other supported browsers support the 'input' event, which fires whenever the content of the element is changed\r\n                // through the user interface.\r\n                onEvent('input', updateModel);\r\n\r\n                if (safariVersion < 5 && ko.utils.tagNameLower(element) === \"textarea\") {\r\n                    // Safari <5 doesn't fire the 'input' event for <textarea> elements (it does fire 'textInput'\r\n                    // but only when typing). So we'll just catch as much as we can with keydown, cut, and paste.\r\n                    onEvent('keydown', deferUpdateModel);\r\n                    onEvent('paste', deferUpdateModel);\r\n                    onEvent('cut', deferUpdateModel);\r\n                } else if (operaVersion < 11) {\r\n                    // Opera 10 doesn't always fire the 'input' event for cut, paste, undo & drop operations.\r\n                    // We can try to catch some of those using 'keydown'.\r\n                    onEvent('keydown', deferUpdateModel);\r\n                } else if (firefoxVersion < 4.0) {\r\n                    // Firefox <= 3.6 doesn't fire the 'input' event when text is filled in through autocomplete\r\n                    onEvent('DOMAutoComplete', updateModel);\r\n\r\n                    // Firefox <=3.5 doesn't fire the 'input' event when text is dropped into the input.\r\n                    onEvent('dragdrop', updateModel);       // <3.5\r\n                    onEvent('drop', updateModel);           // 3.5\r\n                }\r\n            }\r\n        }\r\n\r\n        // Bind to the change event so that we can catch programmatic updates of the value that fire this event.\r\n        onEvent('change', updateModel);\r\n\r\n        ko.computed(updateView, null, { disposeWhenNodeIsRemoved: element });\r\n    }\r\n};\r\nko.expressionRewriting.twoWayBindings['textInput'] = true;\r\n\r\n// textinput is an alias for textInput\r\nko.bindingHandlers['textinput'] = {\r\n    // preprocess is the only way to set up a full alias\r\n    'preprocess': function (value, name, addBinding) {\r\n        addBinding('textInput', value);\r\n    }\r\n};\r\n\r\n})();ko.bindingHandlers['uniqueName'] = {\r\n    'init': function (element, valueAccessor) {\r\n        if (valueAccessor()) {\r\n            var name = \"ko_unique_\" + (++ko.bindingHandlers['uniqueName'].currentIndex);\r\n            ko.utils.setElementName(element, name);\r\n        }\r\n    }\r\n};\r\nko.bindingHandlers['uniqueName'].currentIndex = 0;\r\nko.bindingHandlers['value'] = {\r\n    'after': ['options', 'foreach'],\r\n    'init': function (element, valueAccessor, allBindings) {\r\n        // If the value binding is placed on a radio/checkbox, then just pass through to checkedValue and quit\r\n        if (element.tagName.toLowerCase() == \"input\" && (element.type == \"checkbox\" || element.type == \"radio\")) {\r\n            ko.applyBindingAccessorsToNode(element, { 'checkedValue': valueAccessor });\r\n            return;\r\n        }\r\n\r\n        // Always catch \"change\" event; possibly other events too if asked\r\n        var eventsToCatch = [\"change\"];\r\n        var requestedEventsToCatch = allBindings.get(\"valueUpdate\");\r\n        var propertyChangedFired = false;\r\n        var elementValueBeforeEvent = null;\r\n\r\n        if (requestedEventsToCatch) {\r\n            if (typeof requestedEventsToCatch == \"string\") // Allow both individual event names, and arrays of event names\r\n                requestedEventsToCatch = [requestedEventsToCatch];\r\n            ko.utils.arrayPushAll(eventsToCatch, requestedEventsToCatch);\r\n            eventsToCatch = ko.utils.arrayGetDistinctValues(eventsToCatch);\r\n        }\r\n\r\n        var valueUpdateHandler = function() {\r\n            elementValueBeforeEvent = null;\r\n            propertyChangedFired = false;\r\n            var modelValue = valueAccessor();\r\n            var elementValue = ko.selectExtensions.readValue(element);\r\n            ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'value', elementValue);\r\n        }\r\n\r\n        // Workaround for https://github.com/SteveSanderson/knockout/issues/122\r\n        // IE doesn't fire \"change\" events on textboxes if the user selects a value from its autocomplete list\r\n        var ieAutoCompleteHackNeeded = ko.utils.ieVersion && element.tagName.toLowerCase() == \"input\" && element.type == \"text\"\r\n                                       && element.autocomplete != \"off\" && (!element.form || element.form.autocomplete != \"off\");\r\n        if (ieAutoCompleteHackNeeded && ko.utils.arrayIndexOf(eventsToCatch, \"propertychange\") == -1) {\r\n            ko.utils.registerEventHandler(element, \"propertychange\", function () { propertyChangedFired = true });\r\n            ko.utils.registerEventHandler(element, \"focus\", function () { propertyChangedFired = false });\r\n            ko.utils.registerEventHandler(element, \"blur\", function() {\r\n                if (propertyChangedFired) {\r\n                    valueUpdateHandler();\r\n                }\r\n            });\r\n        }\r\n\r\n        ko.utils.arrayForEach(eventsToCatch, function(eventName) {\r\n            // The syntax \"after<eventname>\" means \"run the handler asynchronously after the event\"\r\n            // This is useful, for example, to catch \"keydown\" events after the browser has updated the control\r\n            // (otherwise, ko.selectExtensions.readValue(this) will receive the control's value *before* the key event)\r\n            var handler = valueUpdateHandler;\r\n            if (ko.utils.stringStartsWith(eventName, \"after\")) {\r\n                handler = function() {\r\n                    // The elementValueBeforeEvent variable is non-null *only* during the brief gap between\r\n                    // a keyX event firing and the valueUpdateHandler running, which is scheduled to happen\r\n                    // at the earliest asynchronous opportunity. We store this temporary information so that\r\n                    // if, between keyX and valueUpdateHandler, the underlying model value changes separately,\r\n                    // we can overwrite that model value change with the value the user just typed. Otherwise,\r\n                    // techniques like rateLimit can trigger model changes at critical moments that will\r\n                    // override the user's inputs, causing keystrokes to be lost.\r\n                    elementValueBeforeEvent = ko.selectExtensions.readValue(element);\r\n                    setTimeout(valueUpdateHandler, 0);\r\n                };\r\n                eventName = eventName.substring(\"after\".length);\r\n            }\r\n            ko.utils.registerEventHandler(element, eventName, handler);\r\n        });\r\n\r\n        var updateFromModel = function () {\r\n            var newValue = ko.utils.unwrapObservable(valueAccessor());\r\n            var elementValue = ko.selectExtensions.readValue(element);\r\n\r\n            if (elementValueBeforeEvent !== null && newValue === elementValueBeforeEvent) {\r\n                setTimeout(updateFromModel, 0);\r\n                return;\r\n            }\r\n\r\n            var valueHasChanged = (newValue !== elementValue);\r\n\r\n            if (valueHasChanged) {\r\n                if (ko.utils.tagNameLower(element) === \"select\") {\r\n                    var allowUnset = allBindings.get('valueAllowUnset');\r\n                    var applyValueAction = function () {\r\n                        ko.selectExtensions.writeValue(element, newValue, allowUnset);\r\n                    };\r\n                    applyValueAction();\r\n\r\n                    if (!allowUnset && newValue !== ko.selectExtensions.readValue(element)) {\r\n                        // If you try to set a model value that can't be represented in an already-populated dropdown, reject that change,\r\n                        // because you're not allowed to have a model value that disagrees with a visible UI selection.\r\n                        ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, \"change\"]);\r\n                    } else {\r\n                        // Workaround for IE6 bug: It won't reliably apply values to SELECT nodes during the same execution thread\r\n                        // right after you've changed the set of OPTION nodes on it. So for that node type, we'll schedule a second thread\r\n                        // to apply the value as well.\r\n                        setTimeout(applyValueAction, 0);\r\n                    }\r\n                } else {\r\n                    ko.selectExtensions.writeValue(element, newValue);\r\n                }\r\n            }\r\n        };\r\n\r\n        ko.computed(updateFromModel, null, { disposeWhenNodeIsRemoved: element });\r\n    },\r\n    'update': function() {} // Keep for backwards compatibility with code that may have wrapped value binding\r\n};\r\nko.expressionRewriting.twoWayBindings['value'] = true;\r\nko.bindingHandlers['visible'] = {\r\n    'update': function (element, valueAccessor) {\r\n        var value = ko.utils.unwrapObservable(valueAccessor());\r\n        var isCurrentlyVisible = !(element.style.display == \"none\");\r\n        if (value && !isCurrentlyVisible)\r\n            element.style.display = \"\";\r\n        else if ((!value) && isCurrentlyVisible)\r\n            element.style.display = \"none\";\r\n    }\r\n};\r\n// 'click' is just a shorthand for the usual full-length event:{click:handler}\r\nmakeEventHandlerShortcut('click');\r\n// If you want to make a custom template engine,\r\n//\r\n// [1] Inherit from this class (like ko.nativeTemplateEngine does)\r\n// [2] Override 'renderTemplateSource', supplying a function with this signature:\r\n//\r\n//        function (templateSource, bindingContext, options) {\r\n//            // - templateSource.text() is the text of the template you should render\r\n//            // - bindingContext.$data is the data you should pass into the template\r\n//            //   - you might also want to make bindingContext.$parent, bindingContext.$parents,\r\n//            //     and bindingContext.$root available in the template too\r\n//            // - options gives you access to any other properties set on \"data-bind: { template: options }\"\r\n//            // - templateDocument is the document object of the template\r\n//            //\r\n//            // Return value: an array of DOM nodes\r\n//        }\r\n//\r\n// [3] Override 'createJavaScriptEvaluatorBlock', supplying a function with this signature:\r\n//\r\n//        function (script) {\r\n//            // Return value: Whatever syntax means \"Evaluate the JavaScript statement 'script' and output the result\"\r\n//            //               For example, the jquery.tmpl template engine converts 'someScript' to '${ someScript }'\r\n//        }\r\n//\r\n//     This is only necessary if you want to allow data-bind attributes to reference arbitrary template variables.\r\n//     If you don't want to allow that, you can set the property 'allowTemplateRewriting' to false (like ko.nativeTemplateEngine does)\r\n//     and then you don't need to override 'createJavaScriptEvaluatorBlock'.\r\n\r\nko.templateEngine = function () { };\r\n\r\nko.templateEngine.prototype['renderTemplateSource'] = function (templateSource, bindingContext, options, templateDocument) {\r\n    throw new Error(\"Override renderTemplateSource\");\r\n};\r\n\r\nko.templateEngine.prototype['createJavaScriptEvaluatorBlock'] = function (script) {\r\n    throw new Error(\"Override createJavaScriptEvaluatorBlock\");\r\n};\r\n\r\nko.templateEngine.prototype['makeTemplateSource'] = function(template, templateDocument) {\r\n    // Named template\r\n    if (typeof template == \"string\") {\r\n        templateDocument = templateDocument || document;\r\n        var elem = templateDocument.getElementById(template);\r\n        if (!elem)\r\n            throw new Error(\"Cannot find template with ID \" + template);\r\n        return new ko.templateSources.domElement(elem);\r\n    } else if ((template.nodeType == 1) || (template.nodeType == 8)) {\r\n        // Anonymous template\r\n        return new ko.templateSources.anonymousTemplate(template);\r\n    } else\r\n        throw new Error(\"Unknown template type: \" + template);\r\n};\r\n\r\nko.templateEngine.prototype['renderTemplate'] = function (template, bindingContext, options, templateDocument) {\r\n    var templateSource = this['makeTemplateSource'](template, templateDocument);\r\n    return this['renderTemplateSource'](templateSource, bindingContext, options, templateDocument);\r\n};\r\n\r\nko.templateEngine.prototype['isTemplateRewritten'] = function (template, templateDocument) {\r\n    // Skip rewriting if requested\r\n    if (this['allowTemplateRewriting'] === false)\r\n        return true;\r\n    return this['makeTemplateSource'](template, templateDocument)['data'](\"isRewritten\");\r\n};\r\n\r\nko.templateEngine.prototype['rewriteTemplate'] = function (template, rewriterCallback, templateDocument) {\r\n    var templateSource = this['makeTemplateSource'](template, templateDocument);\r\n    var rewritten = rewriterCallback(templateSource['text']());\r\n    templateSource['text'](rewritten);\r\n    templateSource['data'](\"isRewritten\", true);\r\n};\r\n\r\nko.exportSymbol('templateEngine', ko.templateEngine);\r\n\r\nko.templateRewriting = (function () {\r\n    var memoizeDataBindingAttributeSyntaxRegex = /(<([a-z]+\\d*)(?:\\s+(?!data-bind\\s*=\\s*)[a-z0-9\\-]+(?:=(?:\\\"[^\\\"]*\\\"|\\'[^\\']*\\'|[^>]*))?)*\\s+)data-bind\\s*=\\s*([\"'])([\\s\\S]*?)\\3/gi;\r\n    var memoizeVirtualContainerBindingSyntaxRegex = /<!--\\s*ko\\b\\s*([\\s\\S]*?)\\s*-->/g;\r\n\r\n    function validateDataBindValuesForRewriting(keyValueArray) {\r\n        var allValidators = ko.expressionRewriting.bindingRewriteValidators;\r\n        for (var i = 0; i < keyValueArray.length; i++) {\r\n            var key = keyValueArray[i]['key'];\r\n            if (allValidators.hasOwnProperty(key)) {\r\n                var validator = allValidators[key];\r\n\r\n                if (typeof validator === \"function\") {\r\n                    var possibleErrorMessage = validator(keyValueArray[i]['value']);\r\n                    if (possibleErrorMessage)\r\n                        throw new Error(possibleErrorMessage);\r\n                } else if (!validator) {\r\n                    throw new Error(\"This template engine does not support the '\" + key + \"' binding within its templates\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function constructMemoizedTagReplacement(dataBindAttributeValue, tagToRetain, nodeName, templateEngine) {\r\n        var dataBindKeyValueArray = ko.expressionRewriting.parseObjectLiteral(dataBindAttributeValue);\r\n        validateDataBindValuesForRewriting(dataBindKeyValueArray);\r\n        var rewrittenDataBindAttributeValue = ko.expressionRewriting.preProcessBindings(dataBindKeyValueArray, {'valueAccessors':true});\r\n\r\n        // For no obvious reason, Opera fails to evaluate rewrittenDataBindAttributeValue unless it's wrapped in an additional\r\n        // anonymous function, even though Opera's built-in debugger can evaluate it anyway. No other browser requires this\r\n        // extra indirection.\r\n        var applyBindingsToNextSiblingScript =\r\n            \"ko.__tr_ambtns(function($context,$element){return(function(){return{ \" + rewrittenDataBindAttributeValue + \" } })()},'\" + nodeName.toLowerCase() + \"')\";\r\n        return templateEngine['createJavaScriptEvaluatorBlock'](applyBindingsToNextSiblingScript) + tagToRetain;\r\n    }\r\n\r\n    return {\r\n        ensureTemplateIsRewritten: function (template, templateEngine, templateDocument) {\r\n            if (!templateEngine['isTemplateRewritten'](template, templateDocument))\r\n                templateEngine['rewriteTemplate'](template, function (htmlString) {\r\n                    return ko.templateRewriting.memoizeBindingAttributeSyntax(htmlString, templateEngine);\r\n                }, templateDocument);\r\n        },\r\n\r\n        memoizeBindingAttributeSyntax: function (htmlString, templateEngine) {\r\n            return htmlString.replace(memoizeDataBindingAttributeSyntaxRegex, function () {\r\n                return constructMemoizedTagReplacement(/* dataBindAttributeValue: */ arguments[4], /* tagToRetain: */ arguments[1], /* nodeName: */ arguments[2], templateEngine);\r\n            }).replace(memoizeVirtualContainerBindingSyntaxRegex, function() {\r\n                return constructMemoizedTagReplacement(/* dataBindAttributeValue: */ arguments[1], /* tagToRetain: */ \"<!-- ko -->\", /* nodeName: */ \"#comment\", templateEngine);\r\n            });\r\n        },\r\n\r\n        applyMemoizedBindingsToNextSibling: function (bindings, nodeName) {\r\n            return ko.memoization.memoize(function (domNode, bindingContext) {\r\n                var nodeToBind = domNode.nextSibling;\r\n                if (nodeToBind && nodeToBind.nodeName.toLowerCase() === nodeName) {\r\n                    ko.applyBindingAccessorsToNode(nodeToBind, bindings, bindingContext);\r\n                }\r\n            });\r\n        }\r\n    }\r\n})();\r\n\r\n\r\n// Exported only because it has to be referenced by string lookup from within rewritten template\r\nko.exportSymbol('__tr_ambtns', ko.templateRewriting.applyMemoizedBindingsToNextSibling);\r\n(function() {\r\n    // A template source represents a read/write way of accessing a template. This is to eliminate the need for template loading/saving\r\n    // logic to be duplicated in every template engine (and means they can all work with anonymous templates, etc.)\r\n    //\r\n    // Two are provided by default:\r\n    //  1. ko.templateSources.domElement       - reads/writes the text content of an arbitrary DOM element\r\n    //  2. ko.templateSources.anonymousElement - uses ko.utils.domData to read/write text *associated* with the DOM element, but\r\n    //                                           without reading/writing the actual element text content, since it will be overwritten\r\n    //                                           with the rendered template output.\r\n    // You can implement your own template source if you want to fetch/store templates somewhere other than in DOM elements.\r\n    // Template sources need to have the following functions:\r\n    //   text()             - returns the template text from your storage location\r\n    //   text(value)        - writes the supplied template text to your storage location\r\n    //   data(key)          - reads values stored using data(key, value) - see below\r\n    //   data(key, value)   - associates \"value\" with this template and the key \"key\". Is used to store information like \"isRewritten\".\r\n    //\r\n    // Optionally, template sources can also have the following functions:\r\n    //   nodes()            - returns a DOM element containing the nodes of this template, where available\r\n    //   nodes(value)       - writes the given DOM element to your storage location\r\n    // If a DOM element is available for a given template source, template engines are encouraged to use it in preference over text()\r\n    // for improved speed. However, all templateSources must supply text() even if they don't supply nodes().\r\n    //\r\n    // Once you've implemented a templateSource, make your template engine use it by subclassing whatever template engine you were\r\n    // using and overriding \"makeTemplateSource\" to return an instance of your custom template source.\r\n\r\n    ko.templateSources = {};\r\n\r\n    // ---- ko.templateSources.domElement -----\r\n\r\n    ko.templateSources.domElement = function(element) {\r\n        this.domElement = element;\r\n    }\r\n\r\n    ko.templateSources.domElement.prototype['text'] = function(/* valueToWrite */) {\r\n        var tagNameLower = ko.utils.tagNameLower(this.domElement),\r\n            elemContentsProperty = tagNameLower === \"script\" ? \"text\"\r\n                                 : tagNameLower === \"textarea\" ? \"value\"\r\n                                 : \"innerHTML\";\r\n\r\n        if (arguments.length == 0) {\r\n            return this.domElement[elemContentsProperty];\r\n        } else {\r\n            var valueToWrite = arguments[0];\r\n            if (elemContentsProperty === \"innerHTML\")\r\n                ko.utils.setHtml(this.domElement, valueToWrite);\r\n            else\r\n                this.domElement[elemContentsProperty] = valueToWrite;\r\n        }\r\n    };\r\n\r\n    var dataDomDataPrefix = ko.utils.domData.nextKey() + \"_\";\r\n    ko.templateSources.domElement.prototype['data'] = function(key /*, valueToWrite */) {\r\n        if (arguments.length === 1) {\r\n            return ko.utils.domData.get(this.domElement, dataDomDataPrefix + key);\r\n        } else {\r\n            ko.utils.domData.set(this.domElement, dataDomDataPrefix + key, arguments[1]);\r\n        }\r\n    };\r\n\r\n    // ---- ko.templateSources.anonymousTemplate -----\r\n    // Anonymous templates are normally saved/retrieved as DOM nodes through \"nodes\".\r\n    // For compatibility, you can also read \"text\"; it will be serialized from the nodes on demand.\r\n    // Writing to \"text\" is still supported, but then the template data will not be available as DOM nodes.\r\n\r\n    var anonymousTemplatesDomDataKey = ko.utils.domData.nextKey();\r\n    ko.templateSources.anonymousTemplate = function(element) {\r\n        this.domElement = element;\r\n    }\r\n    ko.templateSources.anonymousTemplate.prototype = new ko.templateSources.domElement();\r\n    ko.templateSources.anonymousTemplate.prototype.constructor = ko.templateSources.anonymousTemplate;\r\n    ko.templateSources.anonymousTemplate.prototype['text'] = function(/* valueToWrite */) {\r\n        if (arguments.length == 0) {\r\n            var templateData = ko.utils.domData.get(this.domElement, anonymousTemplatesDomDataKey) || {};\r\n            if (templateData.textData === undefined && templateData.containerData)\r\n                templateData.textData = templateData.containerData.innerHTML;\r\n            return templateData.textData;\r\n        } else {\r\n            var valueToWrite = arguments[0];\r\n            ko.utils.domData.set(this.domElement, anonymousTemplatesDomDataKey, {textData: valueToWrite});\r\n        }\r\n    };\r\n    ko.templateSources.domElement.prototype['nodes'] = function(/* valueToWrite */) {\r\n        if (arguments.length == 0) {\r\n            var templateData = ko.utils.domData.get(this.domElement, anonymousTemplatesDomDataKey) || {};\r\n            return templateData.containerData;\r\n        } else {\r\n            var valueToWrite = arguments[0];\r\n            ko.utils.domData.set(this.domElement, anonymousTemplatesDomDataKey, {containerData: valueToWrite});\r\n        }\r\n    };\r\n\r\n    ko.exportSymbol('templateSources', ko.templateSources);\r\n    ko.exportSymbol('templateSources.domElement', ko.templateSources.domElement);\r\n    ko.exportSymbol('templateSources.anonymousTemplate', ko.templateSources.anonymousTemplate);\r\n})();\r\n(function () {\r\n    var _templateEngine;\r\n    ko.setTemplateEngine = function (templateEngine) {\r\n        if ((templateEngine != undefined) && !(templateEngine instanceof ko.templateEngine))\r\n            throw new Error(\"templateEngine must inherit from ko.templateEngine\");\r\n        _templateEngine = templateEngine;\r\n    }\r\n\r\n    function invokeForEachNodeInContinuousRange(firstNode, lastNode, action) {\r\n        var node, nextInQueue = firstNode, firstOutOfRangeNode = ko.virtualElements.nextSibling(lastNode);\r\n        while (nextInQueue && ((node = nextInQueue) !== firstOutOfRangeNode)) {\r\n            nextInQueue = ko.virtualElements.nextSibling(node);\r\n            action(node, nextInQueue);\r\n        }\r\n    }\r\n\r\n    function activateBindingsOnContinuousNodeArray(continuousNodeArray, bindingContext) {\r\n        // To be used on any nodes that have been rendered by a template and have been inserted into some parent element\r\n        // Walks through continuousNodeArray (which *must* be continuous, i.e., an uninterrupted sequence of sibling nodes, because\r\n        // the algorithm for walking them relies on this), and for each top-level item in the virtual-element sense,\r\n        // (1) Does a regular \"applyBindings\" to associate bindingContext with this node and to activate any non-memoized bindings\r\n        // (2) Unmemoizes any memos in the DOM subtree (e.g., to activate bindings that had been memoized during template rewriting)\r\n\r\n        if (continuousNodeArray.length) {\r\n            var firstNode = continuousNodeArray[0],\r\n                lastNode = continuousNodeArray[continuousNodeArray.length - 1],\r\n                parentNode = firstNode.parentNode,\r\n                provider = ko.bindingProvider['instance'],\r\n                preprocessNode = provider['preprocessNode'];\r\n\r\n            if (preprocessNode) {\r\n                invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node, nextNodeInRange) {\r\n                    var nodePreviousSibling = node.previousSibling;\r\n                    var newNodes = preprocessNode.call(provider, node);\r\n                    if (newNodes) {\r\n                        if (node === firstNode)\r\n                            firstNode = newNodes[0] || nextNodeInRange;\r\n                        if (node === lastNode)\r\n                            lastNode = newNodes[newNodes.length - 1] || nodePreviousSibling;\r\n                    }\r\n                });\r\n\r\n                // Because preprocessNode can change the nodes, including the first and last nodes, update continuousNodeArray to match.\r\n                // We need the full set, including inner nodes, because the unmemoize step might remove the first node (and so the real\r\n                // first node needs to be in the array).\r\n                continuousNodeArray.length = 0;\r\n                if (!firstNode) { // preprocessNode might have removed all the nodes, in which case there's nothing left to do\r\n                    return;\r\n                }\r\n                if (firstNode === lastNode) {\r\n                    continuousNodeArray.push(firstNode);\r\n                } else {\r\n                    continuousNodeArray.push(firstNode, lastNode);\r\n                    ko.utils.fixUpContinuousNodeArray(continuousNodeArray, parentNode);\r\n                }\r\n            }\r\n\r\n            // Need to applyBindings *before* unmemoziation, because unmemoization might introduce extra nodes (that we don't want to re-bind)\r\n            // whereas a regular applyBindings won't introduce new memoized nodes\r\n            invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node) {\r\n                if (node.nodeType === 1 || node.nodeType === 8)\r\n                    ko.applyBindings(bindingContext, node);\r\n            });\r\n            invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node) {\r\n                if (node.nodeType === 1 || node.nodeType === 8)\r\n                    ko.memoization.unmemoizeDomNodeAndDescendants(node, [bindingContext]);\r\n            });\r\n\r\n            // Make sure any changes done by applyBindings or unmemoize are reflected in the array\r\n            ko.utils.fixUpContinuousNodeArray(continuousNodeArray, parentNode);\r\n        }\r\n    }\r\n\r\n    function getFirstNodeFromPossibleArray(nodeOrNodeArray) {\r\n        return nodeOrNodeArray.nodeType ? nodeOrNodeArray\r\n                                        : nodeOrNodeArray.length > 0 ? nodeOrNodeArray[0]\r\n                                        : null;\r\n    }\r\n\r\n    function executeTemplate(targetNodeOrNodeArray, renderMode, template, bindingContext, options) {\r\n        options = options || {};\r\n        var firstTargetNode = targetNodeOrNodeArray && getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\r\n        var templateDocument = (firstTargetNode || template || {}).ownerDocument;\r\n        var templateEngineToUse = (options['templateEngine'] || _templateEngine);\r\n        ko.templateRewriting.ensureTemplateIsRewritten(template, templateEngineToUse, templateDocument);\r\n        var renderedNodesArray = templateEngineToUse['renderTemplate'](template, bindingContext, options, templateDocument);\r\n\r\n        // Loosely check result is an array of DOM nodes\r\n        if ((typeof renderedNodesArray.length != \"number\") || (renderedNodesArray.length > 0 && typeof renderedNodesArray[0].nodeType != \"number\"))\r\n            throw new Error(\"Template engine must return an array of DOM nodes\");\r\n\r\n        var haveAddedNodesToParent = false;\r\n        switch (renderMode) {\r\n            case \"replaceChildren\":\r\n                ko.virtualElements.setDomNodeChildren(targetNodeOrNodeArray, renderedNodesArray);\r\n                haveAddedNodesToParent = true;\r\n                break;\r\n            case \"replaceNode\":\r\n                ko.utils.replaceDomNodes(targetNodeOrNodeArray, renderedNodesArray);\r\n                haveAddedNodesToParent = true;\r\n                break;\r\n            case \"ignoreTargetNode\": break;\r\n            default:\r\n                throw new Error(\"Unknown renderMode: \" + renderMode);\r\n        }\r\n\r\n        if (haveAddedNodesToParent) {\r\n            activateBindingsOnContinuousNodeArray(renderedNodesArray, bindingContext);\r\n            if (options['afterRender'])\r\n                ko.dependencyDetection.ignore(options['afterRender'], null, [renderedNodesArray, bindingContext['$data']]);\r\n        }\r\n\r\n        return renderedNodesArray;\r\n    }\r\n\r\n    function resolveTemplateName(template, data, context) {\r\n        // The template can be specified as:\r\n        if (ko.isObservable(template)) {\r\n            // 1. An observable, with string value\r\n            return template();\r\n        } else if (typeof template === 'function') {\r\n            // 2. A function of (data, context) returning a string\r\n            return template(data, context);\r\n        } else {\r\n            // 3. A string\r\n            return template;\r\n        }\r\n    }\r\n\r\n    ko.renderTemplate = function (template, dataOrBindingContext, options, targetNodeOrNodeArray, renderMode) {\r\n        options = options || {};\r\n        if ((options['templateEngine'] || _templateEngine) == undefined)\r\n            throw new Error(\"Set a template engine before calling renderTemplate\");\r\n        renderMode = renderMode || \"replaceChildren\";\r\n\r\n        if (targetNodeOrNodeArray) {\r\n            var firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\r\n\r\n            var whenToDispose = function () { return (!firstTargetNode) || !ko.utils.domNodeIsAttachedToDocument(firstTargetNode); }; // Passive disposal (on next evaluation)\r\n            var activelyDisposeWhenNodeIsRemoved = (firstTargetNode && renderMode == \"replaceNode\") ? firstTargetNode.parentNode : firstTargetNode;\r\n\r\n            return ko.dependentObservable( // So the DOM is automatically updated when any dependency changes\r\n                function () {\r\n                    // Ensure we've got a proper binding context to work with\r\n                    var bindingContext = (dataOrBindingContext && (dataOrBindingContext instanceof ko.bindingContext))\r\n                        ? dataOrBindingContext\r\n                        : new ko.bindingContext(ko.utils.unwrapObservable(dataOrBindingContext));\r\n\r\n                    var templateName = resolveTemplateName(template, bindingContext['$data'], bindingContext),\r\n                        renderedNodesArray = executeTemplate(targetNodeOrNodeArray, renderMode, templateName, bindingContext, options);\r\n\r\n                    if (renderMode == \"replaceNode\") {\r\n                        targetNodeOrNodeArray = renderedNodesArray;\r\n                        firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\r\n                    }\r\n                },\r\n                null,\r\n                { disposeWhen: whenToDispose, disposeWhenNodeIsRemoved: activelyDisposeWhenNodeIsRemoved }\r\n            );\r\n        } else {\r\n            // We don't yet have a DOM node to evaluate, so use a memo and render the template later when there is a DOM node\r\n            return ko.memoization.memoize(function (domNode) {\r\n                ko.renderTemplate(template, dataOrBindingContext, options, domNode, \"replaceNode\");\r\n            });\r\n        }\r\n    };\r\n\r\n    ko.renderTemplateForEach = function (template, arrayOrObservableArray, options, targetNode, parentBindingContext) {\r\n        // Since setDomNodeChildrenFromArrayMapping always calls executeTemplateForArrayItem and then\r\n        // activateBindingsCallback for added items, we can store the binding context in the former to use in the latter.\r\n        var arrayItemContext;\r\n\r\n        // This will be called by setDomNodeChildrenFromArrayMapping to get the nodes to add to targetNode\r\n        var executeTemplateForArrayItem = function (arrayValue, index) {\r\n            // Support selecting template as a function of the data being rendered\r\n            arrayItemContext = parentBindingContext['createChildContext'](arrayValue, options['as'], function(context) {\r\n                context['$index'] = index;\r\n            });\r\n\r\n            var templateName = resolveTemplateName(template, arrayValue, arrayItemContext);\r\n            return executeTemplate(null, \"ignoreTargetNode\", templateName, arrayItemContext, options);\r\n        }\r\n\r\n        // This will be called whenever setDomNodeChildrenFromArrayMapping has added nodes to targetNode\r\n        var activateBindingsCallback = function(arrayValue, addedNodesArray, index) {\r\n            activateBindingsOnContinuousNodeArray(addedNodesArray, arrayItemContext);\r\n            if (options['afterRender'])\r\n                options['afterRender'](addedNodesArray, arrayValue);\r\n\r\n            // release the \"cache\" variable, so that it can be collected by\r\n            // the GC when its value isn't used from within the bindings anymore.\r\n            arrayItemContext = null;\r\n        };\r\n\r\n        return ko.dependentObservable(function () {\r\n            var unwrappedArray = ko.utils.unwrapObservable(arrayOrObservableArray) || [];\r\n            if (typeof unwrappedArray.length == \"undefined\") // Coerce single value into array\r\n                unwrappedArray = [unwrappedArray];\r\n\r\n            // Filter out any entries marked as destroyed\r\n            var filteredArray = ko.utils.arrayFilter(unwrappedArray, function(item) {\r\n                return options['includeDestroyed'] || item === undefined || item === null || !ko.utils.unwrapObservable(item['_destroy']);\r\n            });\r\n\r\n            // Call setDomNodeChildrenFromArrayMapping, ignoring any observables unwrapped within (most likely from a callback function).\r\n            // If the array items are observables, though, they will be unwrapped in executeTemplateForArrayItem and managed within setDomNodeChildrenFromArrayMapping.\r\n            ko.dependencyDetection.ignore(ko.utils.setDomNodeChildrenFromArrayMapping, null, [targetNode, filteredArray, executeTemplateForArrayItem, options, activateBindingsCallback]);\r\n\r\n        }, null, { disposeWhenNodeIsRemoved: targetNode });\r\n    };\r\n\r\n    var templateComputedDomDataKey = ko.utils.domData.nextKey();\r\n    function disposeOldComputedAndStoreNewOne(element, newComputed) {\r\n        var oldComputed = ko.utils.domData.get(element, templateComputedDomDataKey);\r\n        if (oldComputed && (typeof(oldComputed.dispose) == 'function'))\r\n            oldComputed.dispose();\r\n        ko.utils.domData.set(element, templateComputedDomDataKey, (newComputed && newComputed.isActive()) ? newComputed : undefined);\r\n    }\r\n\r\n    ko.bindingHandlers['template'] = {\r\n        'init': function(element, valueAccessor) {\r\n            // Support anonymous templates\r\n            var bindingValue = ko.utils.unwrapObservable(valueAccessor());\r\n            if (typeof bindingValue == \"string\" || bindingValue['name']) {\r\n                // It's a named template - clear the element\r\n                ko.virtualElements.emptyNode(element);\r\n            } else if ('nodes' in bindingValue) {\r\n                // We've been given an array of DOM nodes. Save them as the template source.\r\n                // There is no known use case for the node array being an observable array (if the output\r\n                // varies, put that behavior *into* your template - that's what templates are for), and\r\n                // the implementation would be a mess, so assert that it's not observable.\r\n                var nodes = bindingValue['nodes'] || [];\r\n                if (ko.isObservable(nodes)) {\r\n                    throw new Error('The \"nodes\" option must be a plain, non-observable array.');\r\n                }\r\n                var container = ko.utils.moveCleanedNodesToContainerElement(nodes); // This also removes the nodes from their current parent\r\n                new ko.templateSources.anonymousTemplate(element)['nodes'](container);\r\n            } else {\r\n                // It's an anonymous template - store the element contents, then clear the element\r\n                var templateNodes = ko.virtualElements.childNodes(element),\r\n                    container = ko.utils.moveCleanedNodesToContainerElement(templateNodes); // This also removes the nodes from their current parent\r\n                new ko.templateSources.anonymousTemplate(element)['nodes'](container);\r\n            }\r\n            return { 'controlsDescendantBindings': true };\r\n        },\r\n        'update': function (element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            var value = valueAccessor(),\r\n                dataValue,\r\n                options = ko.utils.unwrapObservable(value),\r\n                shouldDisplay = true,\r\n                templateComputed = null,\r\n                templateName;\r\n\r\n            if (typeof options == \"string\") {\r\n                templateName = value;\r\n                options = {};\r\n            } else {\r\n                templateName = options['name'];\r\n\r\n                // Support \"if\"/\"ifnot\" conditions\r\n                if ('if' in options)\r\n                    shouldDisplay = ko.utils.unwrapObservable(options['if']);\r\n                if (shouldDisplay && 'ifnot' in options)\r\n                    shouldDisplay = !ko.utils.unwrapObservable(options['ifnot']);\r\n\r\n                dataValue = ko.utils.unwrapObservable(options['data']);\r\n            }\r\n\r\n            if ('foreach' in options) {\r\n                // Render once for each data point (treating data set as empty if shouldDisplay==false)\r\n                var dataArray = (shouldDisplay && options['foreach']) || [];\r\n                templateComputed = ko.renderTemplateForEach(templateName || element, dataArray, options, element, bindingContext);\r\n            } else if (!shouldDisplay) {\r\n                ko.virtualElements.emptyNode(element);\r\n            } else {\r\n                // Render once for this single data point (or use the viewModel if no data was provided)\r\n                var innerBindingContext = ('data' in options) ?\r\n                    bindingContext['createChildContext'](dataValue, options['as']) :  // Given an explitit 'data' value, we create a child binding context for it\r\n                    bindingContext;                                                        // Given no explicit 'data' value, we retain the same binding context\r\n                templateComputed = ko.renderTemplate(templateName || element, innerBindingContext, options, element);\r\n            }\r\n\r\n            // It only makes sense to have a single template computed per element (otherwise which one should have its output displayed?)\r\n            disposeOldComputedAndStoreNewOne(element, templateComputed);\r\n        }\r\n    };\r\n\r\n    // Anonymous templates can't be rewritten. Give a nice error message if you try to do it.\r\n    ko.expressionRewriting.bindingRewriteValidators['template'] = function(bindingValue) {\r\n        var parsedBindingValue = ko.expressionRewriting.parseObjectLiteral(bindingValue);\r\n\r\n        if ((parsedBindingValue.length == 1) && parsedBindingValue[0]['unknown'])\r\n            return null; // It looks like a string literal, not an object literal, so treat it as a named template (which is allowed for rewriting)\r\n\r\n        if (ko.expressionRewriting.keyValueArrayContainsKey(parsedBindingValue, \"name\"))\r\n            return null; // Named templates can be rewritten, so return \"no error\"\r\n        return \"This template engine does not support anonymous templates nested within its templates\";\r\n    };\r\n\r\n    ko.virtualElements.allowedBindings['template'] = true;\r\n})();\r\n\r\nko.exportSymbol('setTemplateEngine', ko.setTemplateEngine);\r\nko.exportSymbol('renderTemplate', ko.renderTemplate);\r\n// Go through the items that have been added and deleted and try to find matches between them.\r\nko.utils.findMovesInArrayComparison = function (left, right, limitFailedCompares) {\r\n    if (left.length && right.length) {\r\n        var failedCompares, l, r, leftItem, rightItem;\r\n        for (failedCompares = l = 0; (!limitFailedCompares || failedCompares < limitFailedCompares) && (leftItem = left[l]); ++l) {\r\n            for (r = 0; rightItem = right[r]; ++r) {\r\n                if (leftItem['value'] === rightItem['value']) {\r\n                    leftItem['moved'] = rightItem['index'];\r\n                    rightItem['moved'] = leftItem['index'];\r\n                    right.splice(r, 1);         // This item is marked as moved; so remove it from right list\r\n                    failedCompares = r = 0;     // Reset failed compares count because we're checking for consecutive failures\r\n                    break;\r\n                }\r\n            }\r\n            failedCompares += r;\r\n        }\r\n    }\r\n};\r\n\r\nko.utils.compareArrays = (function () {\r\n    var statusNotInOld = 'added', statusNotInNew = 'deleted';\r\n\r\n    // Simple calculation based on Levenshtein distance.\r\n    function compareArrays(oldArray, newArray, options) {\r\n        // For backward compatibility, if the third arg is actually a bool, interpret\r\n        // it as the old parameter 'dontLimitMoves'. Newer code should use { dontLimitMoves: true }.\r\n        options = (typeof options === 'boolean') ? { 'dontLimitMoves': options } : (options || {});\r\n        oldArray = oldArray || [];\r\n        newArray = newArray || [];\r\n\r\n        if (oldArray.length <= newArray.length)\r\n            return compareSmallArrayToBigArray(oldArray, newArray, statusNotInOld, statusNotInNew, options);\r\n        else\r\n            return compareSmallArrayToBigArray(newArray, oldArray, statusNotInNew, statusNotInOld, options);\r\n    }\r\n\r\n    function compareSmallArrayToBigArray(smlArray, bigArray, statusNotInSml, statusNotInBig, options) {\r\n        var myMin = Math.min,\r\n            myMax = Math.max,\r\n            editDistanceMatrix = [],\r\n            smlIndex, smlIndexMax = smlArray.length,\r\n            bigIndex, bigIndexMax = bigArray.length,\r\n            compareRange = (bigIndexMax - smlIndexMax) || 1,\r\n            maxDistance = smlIndexMax + bigIndexMax + 1,\r\n            thisRow, lastRow,\r\n            bigIndexMaxForRow, bigIndexMinForRow;\r\n\r\n        for (smlIndex = 0; smlIndex <= smlIndexMax; smlIndex++) {\r\n            lastRow = thisRow;\r\n            editDistanceMatrix.push(thisRow = []);\r\n            bigIndexMaxForRow = myMin(bigIndexMax, smlIndex + compareRange);\r\n            bigIndexMinForRow = myMax(0, smlIndex - 1);\r\n            for (bigIndex = bigIndexMinForRow; bigIndex <= bigIndexMaxForRow; bigIndex++) {\r\n                if (!bigIndex)\r\n                    thisRow[bigIndex] = smlIndex + 1;\r\n                else if (!smlIndex)  // Top row - transform empty array into new array via additions\r\n                    thisRow[bigIndex] = bigIndex + 1;\r\n                else if (smlArray[smlIndex - 1] === bigArray[bigIndex - 1])\r\n                    thisRow[bigIndex] = lastRow[bigIndex - 1];                  // copy value (no edit)\r\n                else {\r\n                    var northDistance = lastRow[bigIndex] || maxDistance;       // not in big (deletion)\r\n                    var westDistance = thisRow[bigIndex - 1] || maxDistance;    // not in small (addition)\r\n                    thisRow[bigIndex] = myMin(northDistance, westDistance) + 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        var editScript = [], meMinusOne, notInSml = [], notInBig = [];\r\n        for (smlIndex = smlIndexMax, bigIndex = bigIndexMax; smlIndex || bigIndex;) {\r\n            meMinusOne = editDistanceMatrix[smlIndex][bigIndex] - 1;\r\n            if (bigIndex && meMinusOne === editDistanceMatrix[smlIndex][bigIndex-1]) {\r\n                notInSml.push(editScript[editScript.length] = {     // added\r\n                    'status': statusNotInSml,\r\n                    'value': bigArray[--bigIndex],\r\n                    'index': bigIndex });\r\n            } else if (smlIndex && meMinusOne === editDistanceMatrix[smlIndex - 1][bigIndex]) {\r\n                notInBig.push(editScript[editScript.length] = {     // deleted\r\n                    'status': statusNotInBig,\r\n                    'value': smlArray[--smlIndex],\r\n                    'index': smlIndex });\r\n            } else {\r\n                --bigIndex;\r\n                --smlIndex;\r\n                if (!options['sparse']) {\r\n                    editScript.push({\r\n                        'status': \"retained\",\r\n                        'value': bigArray[bigIndex] });\r\n                }\r\n            }\r\n        }\r\n\r\n        // Set a limit on the number of consecutive non-matching comparisons; having it a multiple of\r\n        // smlIndexMax keeps the time complexity of this algorithm linear.\r\n        ko.utils.findMovesInArrayComparison(notInSml, notInBig, smlIndexMax * 10);\r\n\r\n        return editScript.reverse();\r\n    }\r\n\r\n    return compareArrays;\r\n})();\r\n\r\nko.exportSymbol('utils.compareArrays', ko.utils.compareArrays);\r\n(function () {\r\n    // Objective:\r\n    // * Given an input array, a container DOM node, and a function from array elements to arrays of DOM nodes,\r\n    //   map the array elements to arrays of DOM nodes, concatenate together all these arrays, and use them to populate the container DOM node\r\n    // * Next time we're given the same combination of things (with the array possibly having mutated), update the container DOM node\r\n    //   so that its children is again the concatenation of the mappings of the array elements, but don't re-map any array elements that we\r\n    //   previously mapped - retain those nodes, and just insert/delete other ones\r\n\r\n    // \"callbackAfterAddingNodes\" will be invoked after any \"mapping\"-generated nodes are inserted into the container node\r\n    // You can use this, for example, to activate bindings on those nodes.\r\n\r\n    function mapNodeAndRefreshWhenChanged(containerNode, mapping, valueToMap, callbackAfterAddingNodes, index) {\r\n        // Map this array value inside a dependentObservable so we re-map when any dependency changes\r\n        var mappedNodes = [];\r\n        var dependentObservable = ko.dependentObservable(function() {\r\n            var newMappedNodes = mapping(valueToMap, index, ko.utils.fixUpContinuousNodeArray(mappedNodes, containerNode)) || [];\r\n\r\n            // On subsequent evaluations, just replace the previously-inserted DOM nodes\r\n            if (mappedNodes.length > 0) {\r\n                ko.utils.replaceDomNodes(mappedNodes, newMappedNodes);\r\n                if (callbackAfterAddingNodes)\r\n                    ko.dependencyDetection.ignore(callbackAfterAddingNodes, null, [valueToMap, newMappedNodes, index]);\r\n            }\r\n\r\n            // Replace the contents of the mappedNodes array, thereby updating the record\r\n            // of which nodes would be deleted if valueToMap was itself later removed\r\n            mappedNodes.length = 0;\r\n            ko.utils.arrayPushAll(mappedNodes, newMappedNodes);\r\n        }, null, { disposeWhenNodeIsRemoved: containerNode, disposeWhen: function() { return !ko.utils.anyDomNodeIsAttachedToDocument(mappedNodes); } });\r\n        return { mappedNodes : mappedNodes, dependentObservable : (dependentObservable.isActive() ? dependentObservable : undefined) };\r\n    }\r\n\r\n    var lastMappingResultDomDataKey = ko.utils.domData.nextKey();\r\n\r\n    ko.utils.setDomNodeChildrenFromArrayMapping = function (domNode, array, mapping, options, callbackAfterAddingNodes) {\r\n        // Compare the provided array against the previous one\r\n        array = array || [];\r\n        options = options || {};\r\n        var isFirstExecution = ko.utils.domData.get(domNode, lastMappingResultDomDataKey) === undefined;\r\n        var lastMappingResult = ko.utils.domData.get(domNode, lastMappingResultDomDataKey) || [];\r\n        var lastArray = ko.utils.arrayMap(lastMappingResult, function (x) { return x.arrayEntry; });\r\n        var editScript = ko.utils.compareArrays(lastArray, array, options['dontLimitMoves']);\r\n\r\n        // Build the new mapping result\r\n        var newMappingResult = [];\r\n        var lastMappingResultIndex = 0;\r\n        var newMappingResultIndex = 0;\r\n\r\n        var nodesToDelete = [];\r\n        var itemsToProcess = [];\r\n        var itemsForBeforeRemoveCallbacks = [];\r\n        var itemsForMoveCallbacks = [];\r\n        var itemsForAfterAddCallbacks = [];\r\n        var mapData;\r\n\r\n        function itemMovedOrRetained(editScriptIndex, oldPosition) {\r\n            mapData = lastMappingResult[oldPosition];\r\n            if (newMappingResultIndex !== oldPosition)\r\n                itemsForMoveCallbacks[editScriptIndex] = mapData;\r\n            // Since updating the index might change the nodes, do so before calling fixUpContinuousNodeArray\r\n            mapData.indexObservable(newMappingResultIndex++);\r\n            ko.utils.fixUpContinuousNodeArray(mapData.mappedNodes, domNode);\r\n            newMappingResult.push(mapData);\r\n            itemsToProcess.push(mapData);\r\n        }\r\n\r\n        function callCallback(callback, items) {\r\n            if (callback) {\r\n                for (var i = 0, n = items.length; i < n; i++) {\r\n                    if (items[i]) {\r\n                        ko.utils.arrayForEach(items[i].mappedNodes, function(node) {\r\n                            callback(node, i, items[i].arrayEntry);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (var i = 0, editScriptItem, movedIndex; editScriptItem = editScript[i]; i++) {\r\n            movedIndex = editScriptItem['moved'];\r\n            switch (editScriptItem['status']) {\r\n                case \"deleted\":\r\n                    if (movedIndex === undefined) {\r\n                        mapData = lastMappingResult[lastMappingResultIndex];\r\n\r\n                        // Stop tracking changes to the mapping for these nodes\r\n                        if (mapData.dependentObservable)\r\n                            mapData.dependentObservable.dispose();\r\n\r\n                        // Queue these nodes for later removal\r\n                        nodesToDelete.push.apply(nodesToDelete, ko.utils.fixUpContinuousNodeArray(mapData.mappedNodes, domNode));\r\n                        if (options['beforeRemove']) {\r\n                            itemsForBeforeRemoveCallbacks[i] = mapData;\r\n                            itemsToProcess.push(mapData);\r\n                        }\r\n                    }\r\n                    lastMappingResultIndex++;\r\n                    break;\r\n\r\n                case \"retained\":\r\n                    itemMovedOrRetained(i, lastMappingResultIndex++);\r\n                    break;\r\n\r\n                case \"added\":\r\n                    if (movedIndex !== undefined) {\r\n                        itemMovedOrRetained(i, movedIndex);\r\n                    } else {\r\n                        mapData = { arrayEntry: editScriptItem['value'], indexObservable: ko.observable(newMappingResultIndex++) };\r\n                        newMappingResult.push(mapData);\r\n                        itemsToProcess.push(mapData);\r\n                        if (!isFirstExecution)\r\n                            itemsForAfterAddCallbacks[i] = mapData;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // Call beforeMove first before any changes have been made to the DOM\r\n        callCallback(options['beforeMove'], itemsForMoveCallbacks);\r\n\r\n        // Next remove nodes for deleted items (or just clean if there's a beforeRemove callback)\r\n        ko.utils.arrayForEach(nodesToDelete, options['beforeRemove'] ? ko.cleanNode : ko.removeNode);\r\n\r\n        // Next add/reorder the remaining items (will include deleted items if there's a beforeRemove callback)\r\n        for (var i = 0, nextNode = ko.virtualElements.firstChild(domNode), lastNode, node; mapData = itemsToProcess[i]; i++) {\r\n            // Get nodes for newly added items\r\n            if (!mapData.mappedNodes)\r\n                ko.utils.extend(mapData, mapNodeAndRefreshWhenChanged(domNode, mapping, mapData.arrayEntry, callbackAfterAddingNodes, mapData.indexObservable));\r\n\r\n            // Put nodes in the right place if they aren't there already\r\n            for (var j = 0; node = mapData.mappedNodes[j]; nextNode = node.nextSibling, lastNode = node, j++) {\r\n                if (node !== nextNode)\r\n                    ko.virtualElements.insertAfter(domNode, node, lastNode);\r\n            }\r\n\r\n            // Run the callbacks for newly added nodes (for example, to apply bindings, etc.)\r\n            if (!mapData.initialized && callbackAfterAddingNodes) {\r\n                callbackAfterAddingNodes(mapData.arrayEntry, mapData.mappedNodes, mapData.indexObservable);\r\n                mapData.initialized = true;\r\n            }\r\n        }\r\n\r\n        // If there's a beforeRemove callback, call it after reordering.\r\n        // Note that we assume that the beforeRemove callback will usually be used to remove the nodes using\r\n        // some sort of animation, which is why we first reorder the nodes that will be removed. If the\r\n        // callback instead removes the nodes right away, it would be more efficient to skip reordering them.\r\n        // Perhaps we'll make that change in the future if this scenario becomes more common.\r\n        callCallback(options['beforeRemove'], itemsForBeforeRemoveCallbacks);\r\n\r\n        // Finally call afterMove and afterAdd callbacks\r\n        callCallback(options['afterMove'], itemsForMoveCallbacks);\r\n        callCallback(options['afterAdd'], itemsForAfterAddCallbacks);\r\n\r\n        // Store a copy of the array items we just considered so we can difference it next time\r\n        ko.utils.domData.set(domNode, lastMappingResultDomDataKey, newMappingResult);\r\n    }\r\n})();\r\n\r\nko.exportSymbol('utils.setDomNodeChildrenFromArrayMapping', ko.utils.setDomNodeChildrenFromArrayMapping);\r\nko.nativeTemplateEngine = function () {\r\n    this['allowTemplateRewriting'] = false;\r\n}\r\n\r\nko.nativeTemplateEngine.prototype = new ko.templateEngine();\r\nko.nativeTemplateEngine.prototype.constructor = ko.nativeTemplateEngine;\r\nko.nativeTemplateEngine.prototype['renderTemplateSource'] = function (templateSource, bindingContext, options, templateDocument) {\r\n    var useNodesIfAvailable = !(ko.utils.ieVersion < 9), // IE<9 cloneNode doesn't work properly\r\n        templateNodesFunc = useNodesIfAvailable ? templateSource['nodes'] : null,\r\n        templateNodes = templateNodesFunc ? templateSource['nodes']() : null;\r\n\r\n    if (templateNodes) {\r\n        return ko.utils.makeArray(templateNodes.cloneNode(true).childNodes);\r\n    } else {\r\n        var templateText = templateSource['text']();\r\n        return ko.utils.parseHtmlFragment(templateText, templateDocument);\r\n    }\r\n};\r\n\r\nko.nativeTemplateEngine.instance = new ko.nativeTemplateEngine();\r\nko.setTemplateEngine(ko.nativeTemplateEngine.instance);\r\n\r\nko.exportSymbol('nativeTemplateEngine', ko.nativeTemplateEngine);\r\n(function() {\r\n    ko.jqueryTmplTemplateEngine = function () {\r\n        // Detect which version of jquery-tmpl you're using. Unfortunately jquery-tmpl\r\n        // doesn't expose a version number, so we have to infer it.\r\n        // Note that as of Knockout 1.3, we only support jQuery.tmpl 1.0.0pre and later,\r\n        // which KO internally refers to as version \"2\", so older versions are no longer detected.\r\n        var jQueryTmplVersion = this.jQueryTmplVersion = (function() {\r\n            if (!jQueryInstance || !(jQueryInstance['tmpl']))\r\n                return 0;\r\n            // Since it exposes no official version number, we use our own numbering system. To be updated as jquery-tmpl evolves.\r\n            try {\r\n                if (jQueryInstance['tmpl']['tag']['tmpl']['open'].toString().indexOf('__') >= 0) {\r\n                    // Since 1.0.0pre, custom tags should append markup to an array called \"__\"\r\n                    return 2; // Final version of jquery.tmpl\r\n                }\r\n            } catch(ex) { /* Apparently not the version we were looking for */ }\r\n\r\n            return 1; // Any older version that we don't support\r\n        })();\r\n\r\n        function ensureHasReferencedJQueryTemplates() {\r\n            if (jQueryTmplVersion < 2)\r\n                throw new Error(\"Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.\");\r\n        }\r\n\r\n        function executeTemplate(compiledTemplate, data, jQueryTemplateOptions) {\r\n            return jQueryInstance['tmpl'](compiledTemplate, data, jQueryTemplateOptions);\r\n        }\r\n\r\n        this['renderTemplateSource'] = function(templateSource, bindingContext, options, templateDocument) {\r\n            templateDocument = templateDocument || document;\r\n            options = options || {};\r\n            ensureHasReferencedJQueryTemplates();\r\n\r\n            // Ensure we have stored a precompiled version of this template (don't want to reparse on every render)\r\n            var precompiled = templateSource['data']('precompiled');\r\n            if (!precompiled) {\r\n                var templateText = templateSource['text']() || \"\";\r\n                // Wrap in \"with($whatever.koBindingContext) { ... }\"\r\n                templateText = \"{{ko_with $item.koBindingContext}}\" + templateText + \"{{/ko_with}}\";\r\n\r\n                precompiled = jQueryInstance['template'](null, templateText);\r\n                templateSource['data']('precompiled', precompiled);\r\n            }\r\n\r\n            var data = [bindingContext['$data']]; // Prewrap the data in an array to stop jquery.tmpl from trying to unwrap any arrays\r\n            var jQueryTemplateOptions = jQueryInstance['extend']({ 'koBindingContext': bindingContext }, options['templateOptions']);\r\n\r\n            var resultNodes = executeTemplate(precompiled, data, jQueryTemplateOptions);\r\n            resultNodes['appendTo'](templateDocument.createElement(\"div\")); // Using \"appendTo\" forces jQuery/jQuery.tmpl to perform necessary cleanup work\r\n\r\n            jQueryInstance['fragments'] = {}; // Clear jQuery's fragment cache to avoid a memory leak after a large number of template renders\r\n            return resultNodes;\r\n        };\r\n\r\n        this['createJavaScriptEvaluatorBlock'] = function(script) {\r\n            return \"{{ko_code ((function() { return \" + script + \" })()) }}\";\r\n        };\r\n\r\n        this['addTemplate'] = function(templateName, templateMarkup) {\r\n            document.write(\"<script type='text/html' id='\" + templateName + \"'>\" + templateMarkup + \"<\" + \"/script>\");\r\n        };\r\n\r\n        if (jQueryTmplVersion > 0) {\r\n            jQueryInstance['tmpl']['tag']['ko_code'] = {\r\n                open: \"__.push($1 || '');\"\r\n            };\r\n            jQueryInstance['tmpl']['tag']['ko_with'] = {\r\n                open: \"with($1) {\",\r\n                close: \"} \"\r\n            };\r\n        }\r\n    };\r\n\r\n    ko.jqueryTmplTemplateEngine.prototype = new ko.templateEngine();\r\n    ko.jqueryTmplTemplateEngine.prototype.constructor = ko.jqueryTmplTemplateEngine;\r\n\r\n    // Use this one by default *only if jquery.tmpl is referenced*\r\n    var jqueryTmplTemplateEngineInstance = new ko.jqueryTmplTemplateEngine();\r\n    if (jqueryTmplTemplateEngineInstance.jQueryTmplVersion > 0)\r\n        ko.setTemplateEngine(jqueryTmplTemplateEngineInstance);\r\n\r\n    ko.exportSymbol('jqueryTmplTemplateEngine', ko.jqueryTmplTemplateEngine);\r\n})();\r\n}));\r\n}());\r\n})();\r\n","mage/accordion.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    \"jquery\",\r\n    \"mage/tabs\"\r\n], function($, tabs){\r\n    \"use strict\";\r\n\r\n    $.widget(\"mage.accordion\", tabs, {\r\n        options: {\r\n            active : [0],\r\n            multipleCollapsible: false,\r\n            openOnFocus: false\r\n        },\r\n\r\n        _callCollapsible: function() {\r\n            if((typeof this.options.active) === \"string\") {\r\n                this.options.active = this.options.active.split(\" \").map(function(item) {\r\n                    return parseInt(item, 10);\r\n                });\r\n            }\r\n            var self = this,\r\n                disabled = false,\r\n                active = false;\r\n\r\n            $.each(this.collapsibles, function(i) {\r\n                disabled = active = false;\r\n                if($.inArray(i,self.options.disabled) !== -1) {\r\n                    disabled = true;\r\n                }\r\n                if($.inArray(i,self.options.active) !== -1) {\r\n                    active = true;\r\n                }\r\n                self._instantiateCollapsible(this,i,active,disabled);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Overwrites default functionality to provide the option to activate/deactivate multiple sections simultaneous\r\n         * @param action\r\n         * @param index\r\n         * @private\r\n         */\r\n        _toggleActivate: function(action,index) {\r\n            if($.isArray( index && this.options.multipleCollapsible)) {\r\n                var self = this;\r\n                $.each(index, function() {\r\n                    self.collapsibles.eq(this).collapsible(action);\r\n                });\r\n            } else if( (index === undefined) && this.options.multipleCollapsible) {\r\n                this.collapsibles.collapsible(action);\r\n            } else {\r\n                this._super(action,index);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * If the Accordion allows multiple section to be active at the same time, if deep linking is used\r\n         * sections that don't contain the id from anchor shouldn't be closed, otherwise the accordion uses the\r\n         * tabs behavior\r\n         * @private\r\n         */\r\n        _handleDeepLinking: function() {\r\n            if(!this.options.multipleCollapsible) {\r\n                this._super();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Prevent default behavior that closes the other sections when one gets activated if the Accordion allows\r\n         * multiple sections simultaneous\r\n         * @private\r\n         */\r\n        _closeOthers: function() {\r\n            if(!this.options.multipleCollapsible) {\r\n                this._super();\r\n            }\r\n            $.each(this.collapsibles, function() {\r\n                $(this).on(\"beforeOpen\", function() {\r\n                    var section = $(this);\r\n                    section.addClass('allow').prevAll().addClass('allow');\r\n                    section.nextAll().removeClass('allow');\r\n                });\r\n            });\r\n        }\r\n    });\r\n    \r\n    return $.mage.accordion;\r\n});\r\n","mage/calendar.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/*jshint browser:true jquery:true */\r\n/*eslint max-depth: 0*/\r\n\r\n(function (factory) {\r\n    'use strict';\r\n\r\n    if (typeof define === 'function' && define.amd) {\r\n        define([\r\n            'jquery',\r\n            'jquery/ui',\r\n            'jquery/jquery-ui-timepicker-addon'\r\n        ], factory);\r\n    } else {\r\n        factory(window.jQuery);\r\n    }\r\n}(function ($) {\r\n    'use strict';\r\n\r\n    var calendarBasePrototype,\r\n        datepickerPrototype = $.datepicker.constructor.prototype;\r\n\r\n    $.datepicker.markerClassName = '_has-datepicker';\r\n\r\n    /**\r\n     * Extend JQuery date picker prototype with store local time methods\r\n     */\r\n    $.extend(datepickerPrototype, {\r\n        /**\r\n         * Get date/time according to store settings.\r\n         * We use serverTimezoneOffset (in seconds) instead of serverTimezoneSeconds\r\n         * in order to have ability to know actual store time even if page hadn't been reloaded\r\n         * @returns {Date}\r\n         */\r\n        _getTimezoneDate: function (options) {\r\n            // local time in ms\r\n            var ms = Date.now();\r\n\r\n            options = options || $.calendarConfig || {};\r\n\r\n            // Adjust milliseconds according to store timezone offset,\r\n            // mind the GMT zero offset\r\n            if (typeof options.serverTimezoneOffset !== 'undefined') {\r\n                // Make UTC time and add store timezone offset in seconds\r\n                ms += new Date().getTimezoneOffset() * 60 * 1000 + options.serverTimezoneOffset * 1000;\r\n            } else if (typeof options.serverTimezoneSeconds !== 'undefined') {\r\n                //Set milliseconds according to client local timezone offset\r\n                ms = (options.serverTimezoneSeconds + new Date().getTimezoneOffset() * 60) * 1000;\r\n            }\r\n\r\n            return new Date(ms);\r\n        },\r\n\r\n        /**\r\n         * Set date/time according to store settings.\r\n         * @param {String|Object} target - the target input field or division or span\r\n         */\r\n        _setTimezoneDateDatepicker: function (target) {\r\n            this._setDateDatepicker(target, this._getTimezoneDate());\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Widget calendar\r\n     */\r\n    $.widget('mage.calendar', {\r\n\r\n        /**\r\n         * Merge global options with options passed to widget invoke\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this._enableAMPM();\r\n            this.options = $.extend(\r\n                {},\r\n                $.calendarConfig ? $.calendarConfig : {},\r\n                this.options.showsTime ? {\r\n                    showTime: true,\r\n                    showHour: true,\r\n                    showMinute: true\r\n                } : {},\r\n                this.options\r\n            );\r\n            this._initPicker(this.element);\r\n            this._overwriteGenerateHtml();\r\n        },\r\n\r\n        /**\r\n         * Get picker name\r\n         * @protected\r\n         */\r\n        _picker: function () {\r\n            return this.options.showsTime ? 'datetimepicker' : 'datepicker';\r\n        },\r\n\r\n        /**\r\n         * Fix for Timepicker - Set ampm option for Timepicker if timeformat contains string 'tt'\r\n         * @protected\r\n         */\r\n        _enableAMPM: function () {\r\n            if (this.options.timeFormat && this.options.timeFormat.indexOf('tt') >= 0) {\r\n                this.options.ampm = true;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Wrapper for overwrite jQuery UI datepicker function.\r\n         */\r\n        _overwriteGenerateHtml: function () {\r\n            /**\r\n             * Overwrite jQuery UI datepicker function.\r\n             * Reason: magento date could be set before calendar show\r\n             * but local date will be styled as current in original _generateHTML\r\n             *\r\n             * @param {Object} inst - instance datepicker.\r\n             * @return {String} html template\r\n             */\r\n            $.datepicker.constructor.prototype._generateHTML = function (inst) {\r\n                var today = this._getTimezoneDate(),\r\n                    isRTL = this._get(inst, 'isRTL'),\r\n                    showButtonPanel = this._get(inst, 'showButtonPanel'),\r\n                    hideIfNoPrevNext = this._get(inst, 'hideIfNoPrevNext'),\r\n                    navigationAsDateFormat = this._get(inst, 'navigationAsDateFormat'),\r\n                    numMonths = this._getNumberOfMonths(inst),\r\n                    showCurrentAtPos = this._get(inst, 'showCurrentAtPos'),\r\n                    stepMonths = this._get(inst, 'stepMonths'),\r\n                    isMultiMonth = parseInt(numMonths[0], 10) !== 1 || parseInt(numMonths[1], 10) !== 1,\r\n                    currentDate = this._daylightSavingAdjust(!inst.currentDay ? new Date(9999, 9, 9) :\r\n                        new Date(inst.currentYear, inst.currentMonth, inst.currentDay)),\r\n                    minDate = this._getMinMaxDate(inst, 'min'),\r\n                    maxDate = this._getMinMaxDate(inst, 'max'),\r\n                    drawMonth = inst.drawMonth - showCurrentAtPos,\r\n                    drawYear = inst.drawYear,\r\n                    maxDraw,\r\n                    prevText = this._get(inst, 'prevText'),\r\n                    prev,\r\n                    nextText = this._get(inst, 'nextText'),\r\n                    next,\r\n                    currentText = this._get(inst, 'currentText'),\r\n                    gotoDate,\r\n                    controls,\r\n                    buttonPanel,\r\n                    firstDay,\r\n                    showWeek = this._get(inst, 'showWeek'),\r\n                    dayNames = this._get(inst, 'dayNames'),\r\n                    dayNamesMin = this._get(inst, 'dayNamesMin'),\r\n                    monthNames = this._get(inst, 'monthNames'),\r\n                    monthNamesShort =  this._get(inst, 'monthNamesShort'),\r\n                    beforeShowDay = this._get(inst, 'beforeShowDay'),\r\n                    showOtherMonths = this._get(inst, 'showOtherMonths'),\r\n                    selectOtherMonths = this._get(inst, 'selectOtherMonths'),\r\n                    defaultDate = this._getDefaultDate(inst),\r\n                    html = '',\r\n                    row = 0,\r\n                    col = 0,\r\n                    selectedDate,\r\n                    cornerClass = ' ui-corner-all',\r\n                    group = '',\r\n                    calender = '',\r\n                    dow = 0,\r\n                    thead,\r\n                    day,\r\n                    daysInMonth,\r\n                    leadDays,\r\n                    curRows,\r\n                    numRows,\r\n                    printDate,\r\n                    dRow = 0,\r\n                    tbody,\r\n                    daySettings,\r\n                    otherMonth,\r\n                    unselectable;\r\n\r\n                if (drawMonth < 0) {\r\n                    drawMonth += 12;\r\n                    drawYear--;\r\n                }\r\n\r\n                if (maxDate) {\r\n                    maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),\r\n                        maxDate.getMonth() - numMonths[0] * numMonths[1] + 1, maxDate.getDate()));\r\n                    maxDraw = minDate && maxDraw < minDate ? minDate : maxDraw;\r\n\r\n                    while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {\r\n                        drawMonth--;\r\n\r\n                        if (drawMonth < 0) {\r\n                            drawMonth = 11;\r\n                            drawYear--;\r\n\r\n                        }\r\n                    }\r\n                }\r\n                inst.drawMonth = drawMonth;\r\n                inst.drawYear = drawYear;\r\n                prevText = !navigationAsDateFormat ? prevText : this.formatDate(prevText,\r\n                    this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),\r\n                    this._getFormatConfig(inst));\r\n                prev = this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?\r\n                    '<a class=\"ui-datepicker-prev ui-corner-all\" data-handler=\"prev\" data-event=\"click\"' +\r\n                    ' title=\"' + prevText + '\">' +\r\n                    '<span class=\"ui-icon ui-icon-circle-triangle-' + (isRTL ? 'e' : 'w') + '\">' +\r\n                    '' + prevText + '</span></a>'\r\n                    : hideIfNoPrevNext ? ''\r\n                        :   '<a class=\"ui-datepicker-prev ui-corner-all ui-state-disabled\" title=\"' +\r\n                            '' + prevText + '\"><span class=\"ui-icon ui-icon-circle-triangle-' +\r\n                            '' + (isRTL ? 'e' : 'w') + '\">' + prevText + '</span></a>';\r\n                nextText = !navigationAsDateFormat ?\r\n                    nextText\r\n                    :   this.formatDate(nextText,\r\n                        this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),\r\n                        this._getFormatConfig(inst));\r\n                next = this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?\r\n                    '<a class=\"ui-datepicker-next ui-corner-all\" data-handler=\"next\" data-event=\"click\"' +\r\n                    'title=\"' + nextText + '\"><span class=\"ui-icon ui-icon-circle-triangle-' +\r\n                    '' + (isRTL ? 'w' : 'e') + '\">' + nextText + '</span></a>'\r\n                    : hideIfNoPrevNext ? ''\r\n                        :   '<a class=\"ui-datepicker-next ui-corner-all ui-state-disabled\" title=\"' + nextText + '\">' +\r\n                            '<span class=\"ui-icon ui-icon-circle-triangle-' + (isRTL ? 'w' : 'e') + '\">' + nextText +\r\n                            '</span></a>';\r\n                gotoDate = this._get(inst, 'gotoCurrent') && inst.currentDay ? currentDate : today;\r\n                currentText = !navigationAsDateFormat ? currentText :\r\n                    this.formatDate(currentText, gotoDate, this._getFormatConfig(inst));\r\n                controls = !inst.inline ?\r\n                    '<button type=\"button\" class=\"ui-datepicker-close ui-state-default ui-priority-primary ' +\r\n                    'ui-corner-all\" data-handler=\"hide\" data-event=\"click\">' +\r\n                    this._get(inst, 'closeText') + '</button>'\r\n                    : '';\r\n                buttonPanel = showButtonPanel ?\r\n                    '<div class=\"ui-datepicker-buttonpane ui-widget-content\">' + (isRTL ? controls : '') +\r\n                    (this._isInRange(inst, gotoDate) ? '<button type=\"button\" class=\"ui-datepicker-current ' +\r\n                    'ui-state-default ui-priority-secondary ui-corner-all\" data-handler=\"today\" data-event=\"click\"' +\r\n                    '>' + currentText + '</button>' : '') + (isRTL ? '' : controls) + '</div>' : '';\r\n                firstDay = parseInt(this._get(inst, 'firstDay'), 10);\r\n                firstDay = isNaN(firstDay) ? 0 : firstDay;\r\n\r\n                for (row = 0; row < numMonths[0]; row++) {\r\n                    this.maxRows = 4;\r\n\r\n                    for (col = 0; col < numMonths[1]; col++) {\r\n                        selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));\r\n\r\n                        calender = '';\r\n\r\n                        if (isMultiMonth) {\r\n                            calender += '<div class=\"ui-datepicker-group';\r\n\r\n                            if (numMonths[1] > 1) {\r\n                                switch (col) {\r\n                                    case 0: calender += ' ui-datepicker-group-first';\r\n                                        cornerClass = ' ui-corner-' + (isRTL ? 'right' : 'left');\r\n                                        break;\r\n\r\n                                    case numMonths[1] - 1: calender += ' ui-datepicker-group-last';\r\n                                        cornerClass = ' ui-corner-' + (isRTL ? 'left' : 'right');\r\n                                        break;\r\n\r\n                                    default: calender += ' ui-datepicker-group-middle'; cornerClass = '';\r\n                                }\r\n                            }\r\n                            calender += '\">';\r\n                        }\r\n                        calender += '<div class=\"ui-datepicker-header ' +\r\n                            'ui-widget-header ui-helper-clearfix' + cornerClass + '\">' +\r\n                            (/all|left/.test(cornerClass) && parseInt(row, 10) === 0 ? isRTL ? next : prev : '') +\r\n                            (/all|right/.test(cornerClass) && parseInt(row, 10) === 0 ? isRTL ? prev : next : '') +\r\n                            this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,\r\n                            row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers\r\n                            '</div><table class=\"ui-datepicker-calendar\"><thead>' +\r\n                            '<tr>';\r\n                        thead = showWeek ?\r\n                            '<th class=\"ui-datepicker-week-col\">' + this._get(inst, 'weekHeader') + '</th>' : '';\r\n\r\n                        for (dow = 0; dow < 7; dow++) { // days of the week\r\n                            day = (dow + firstDay) % 7;\r\n                            thead += '<th' + ((dow + firstDay + 6) % 7 >= 5 ?\r\n                                ' class=\"ui-datepicker-week-end\"' : '') + '>' +\r\n                                '<span title=\"' + dayNames[day] + '\">' + dayNamesMin[day] + '</span></th>';\r\n                        }\r\n                        calender += thead + '</tr></thead><tbody>';\r\n                        daysInMonth = this._getDaysInMonth(drawYear, drawMonth);\r\n\r\n                        if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {\r\n                            inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);\r\n                        }\r\n                        leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;\r\n                        curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate\r\n                        numRows = isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows;\r\n                        this.maxRows = numRows;\r\n                        printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));\r\n\r\n                        for (dRow = 0; dRow < numRows; dRow++) { // create date picker rows\r\n                            calender += '<tr>';\r\n                            tbody = !showWeek ? '' : '<td class=\"ui-datepicker-week-col\">' +\r\n                            this._get(inst, 'calculateWeek')(printDate) + '</td>';\r\n\r\n                            for (dow = 0; dow < 7; dow++) { // create date picker days\r\n                                daySettings = beforeShowDay ?\r\n                                    beforeShowDay.apply(inst.input ? inst.input[0] : null, [printDate]) : [true, ''];\r\n                                otherMonth = printDate.getMonth() !== drawMonth;\r\n                                unselectable = otherMonth && !selectOtherMonths || !daySettings[0] ||\r\n                                minDate && printDate < minDate || maxDate && printDate > maxDate;\r\n                                tbody += '<td class=\"' +\r\n                                ((dow + firstDay + 6) % 7 >= 5 ? ' ui-datepicker-week-end' : '') + // highlight weekends\r\n                                (otherMonth ? ' ui-datepicker-other-month' : '') + // highlight days from other months\r\n                                (printDate.getTime() === selectedDate.getTime() &&\r\n                                drawMonth === inst.selectedMonth && inst._keyEvent || // user pressed key\r\n                                defaultDate.getTime() === printDate.getTime() &&\r\n                                defaultDate.getTime() === selectedDate.getTime() ?\r\n                                    // or defaultDate is current printedDate and defaultDate is selectedDate\r\n                                ' ' + this._dayOverClass : '') + // highlight selected day\r\n                                (unselectable ? ' ' + this._unselectableClass + ' ui-state-disabled' : '') +\r\n                                (otherMonth && !showOtherMonths ? '' : ' ' + daySettings[1] + // highlight custom dates\r\n                                (printDate.getTime() === currentDate.getTime() ? ' ' + this._currentClass : '') +\r\n                                (printDate.getDate() === today.getDate() && printDate.getMonth() === today.getMonth() &&\r\n                                printDate.getYear() === today.getYear() ? ' ui-datepicker-today' : '')) + '\"' +\r\n                                ((!otherMonth || showOtherMonths) && daySettings[2] ?\r\n                                ' title=\"' + daySettings[2] + '\"' : '') + // cell title\r\n                                (unselectable ? '' : ' data-handler=\"selectDay\" data-event=\"click\" data-month=\"' +\r\n                                '' + printDate.getMonth() + '\" data-year=\"' + printDate.getFullYear() + '\"') + '>' +\r\n                                (otherMonth && !showOtherMonths ? '&#xa0;' : // display for other months\r\n                                    unselectable ? '<span class=\"ui-state-default\">' + printDate.getDate() + '</span>'\r\n                                        : '<a class=\"ui-state-default' +\r\n                                    (printDate.getTime() === today.getTime() ? ' ' : '') +\r\n                                    (printDate.getTime() === currentDate.getTime() ? ' ui-state-active' : '') +\r\n                                    (otherMonth ? ' ui-priority-secondary' : '') +\r\n                                    '\" href=\"#\">' + printDate.getDate() + '</a>') + '</td>';\r\n                                printDate.setDate(printDate.getDate() + 1);\r\n                                printDate = this._daylightSavingAdjust(printDate);\r\n                            }\r\n                            calender += tbody + '</tr>';\r\n                        }\r\n                        drawMonth++;\r\n\r\n                        if (drawMonth > 11) {\r\n                            drawMonth = 0;\r\n                            drawYear++;\r\n                        }\r\n                        calender += '</tbody></table>' + (isMultiMonth ? '</div>' +\r\n                        (numMonths[0] > 0 && col === numMonths[1] - 1 ? '<div class=\"ui-datepicker-row-break\"></div>'\r\n                            : '') : '');\r\n                        group += calender;\r\n                    }\r\n                    html += group;\r\n                }\r\n                html += buttonPanel + ($.ui.ie6 && !inst.inline ?\r\n                    '<iframe src=\"javascript:false;\" class=\"ui-datepicker-cover\" frameborder=\"0\"></iframe>' : '');\r\n                inst._keyEvent = false;\r\n\r\n                return html;\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Set current date if the date is not set\r\n         * @protected\r\n         * @param {Object} element\r\n         */\r\n        _setCurrentDate: function (element) {\r\n            if (!element.val()) {\r\n                element[this._picker()]('setTimezoneDate').val('');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Init Datetimepicker\r\n         * @protected\r\n         * @param {Object} element\r\n         */\r\n        _initPicker: function (element) {\r\n            var picker = element[this._picker()](this.options),\r\n                pickerButtonText = picker.next('.ui-datepicker-trigger')\r\n                    .find('img')\r\n                    .attr('title');\r\n\r\n            picker.next('.ui-datepicker-trigger')\r\n                .addClass('v-middle')\r\n                .text('') // Remove jQuery UI datepicker generated image\r\n                .append('<span>' + pickerButtonText + '</span>');\r\n            this._setCurrentDate(element);\r\n        },\r\n\r\n        /**\r\n         * destroy instance of datetimepicker\r\n         */\r\n        _destroy: function () {\r\n            this.element[this._picker()]('destroy');\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * Method is kept for backward compatibility and unit-tests acceptance\r\n         * see \\mage\\calendar\\calendar-test.js\r\n         * @return {Object} date\r\n         */\r\n        getTimezoneDate: function () {\r\n            return datepickerPrototype._getTimezoneDate.call(this, this.options);\r\n        }\r\n    });\r\n\r\n    calendarBasePrototype = $.mage.calendar.prototype;\r\n\r\n    /**\r\n     * Extension for Calendar - date and time format convert functionality\r\n     * @var {Object}\r\n     */\r\n    $.widget('mage.calendar', $.extend({}, calendarBasePrototype,\r\n            /** @lends {$.mage.calendar.prototype} */ {\r\n                /**\r\n                 * key - backend format, value - jquery format\r\n                 * @type {Object}\r\n                 * @private\r\n                 */\r\n                dateTimeFormat: {\r\n                    date: {\r\n                        'EEEE': 'DD',\r\n                        'EEE': 'D',\r\n                        'EE': 'D',\r\n                        'E': 'D',\r\n                        'D': 'o',\r\n                        'MMMM': 'MM',\r\n                        'MMM': 'M',\r\n                        'MM': 'mm',\r\n                        'M': 'mm',\r\n                        'yyyy': 'yy',\r\n                        'y': 'yy',\r\n                        'Y': 'yy',\r\n                        'yy': 'yy' // Always long year format on frontend\r\n                    },\r\n                    time: {\r\n                        'a': 'TT'\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Add Date and Time converting to _create method\r\n                 * @protected\r\n                 */\r\n                _create: function () {\r\n                    if (this.options.dateFormat) {\r\n                        this.options.dateFormat = this._convertFormat(this.options.dateFormat, 'date');\r\n                    }\r\n\r\n                    if (this.options.timeFormat) {\r\n                        this.options.timeFormat = this._convertFormat(this.options.timeFormat, 'time');\r\n                    }\r\n                    calendarBasePrototype._create.apply(this, arguments);\r\n                },\r\n\r\n                /**\r\n                 * Converting date or time format\r\n                 * @protected\r\n                 * @param {String} format\r\n                 * @param {String} type\r\n                 * @return {String}\r\n                 */\r\n                _convertFormat: function (format, type) {\r\n                    var symbols = format.match(/([a-z]+)/ig),\r\n                        separators = format.match(/([^a-z]+)/ig),\r\n                        self = this,\r\n                        convertedFormat = '';\r\n\r\n                    if (symbols) {\r\n                        $.each(symbols, function (key, val) {\r\n                            convertedFormat +=\r\n                                (self.dateTimeFormat[type][val] || val) +\r\n                                (separators[key] || '');\r\n                        });\r\n                    }\r\n\r\n                    return convertedFormat;\r\n                }\r\n            })\r\n    );\r\n\r\n    /**\r\n     * Widget dateRange\r\n     * @extends $.mage.calendar\r\n     */\r\n    $.widget('mage.dateRange', $.mage.calendar, {\r\n\r\n        /**\r\n         * creates two instances of datetimepicker for date range selection\r\n         * @protected\r\n         */\r\n        _initPicker: function () {\r\n            var from,\r\n                to;\r\n\r\n            if (this.options.from && this.options.to) {\r\n                from = this.element.find('#' + this.options.from.id);\r\n                to = this.element.find('#' + this.options.to.id);\r\n                this.options.onSelect = $.proxy(function (selectedDate) {\r\n                    to[this._picker()]('option', 'minDate', selectedDate);\r\n                }, this);\r\n                $.mage.calendar.prototype._initPicker.call(this, from);\r\n                from.on('change', $.proxy(function () {\r\n                    to[this._picker()]('option', 'minDate', from[this._picker()]('getDate'));\r\n                }, this));\r\n                this.options.onSelect = $.proxy(function (selectedDate) {\r\n                    from[this._picker()]('option', 'maxDate', selectedDate);\r\n                }, this);\r\n                $.mage.calendar.prototype._initPicker.call(this, to);\r\n                to.on('change', $.proxy(function () {\r\n                    from[this._picker()]('option', 'maxDate', to[this._picker()]('getDate'));\r\n                }, this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * destroy two instances of datetimepicker\r\n         */\r\n        _destroy: function () {\r\n            if (this.options.from) {\r\n                this.element.find('#' + this.options.from.id)[this._picker()]('destroy');\r\n            }\r\n\r\n            if (this.options.to) {\r\n                this.element.find('#' + this.options.to.id)[this._picker()]('destroy');\r\n            }\r\n            this._super();\r\n        }\r\n    });\r\n\r\n    // Overrides the \"today\" button functionality to select today's date when clicked.\r\n    $.datepicker._gotoTodayOriginal = $.datepicker._gotoToday;\r\n\r\n    /**\r\n     * overwrite jQuery UI _showDatepicker function for proper HTML generation conditions.\r\n     *\r\n     */\r\n    $.datepicker._showDatepickerOriginal = $.datepicker._showDatepicker;\r\n\r\n    /**\r\n     * Triggers original method showDataPicker for rendering calendar\r\n     * @param {HTMLObject} input\r\n     * @private\r\n     */\r\n    $.datepicker._showDatepicker = function (input) {\r\n        if (!input.disabled) {\r\n            $.datepicker._showDatepickerOriginal.call(this, input);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * _gotoToday\r\n     * @param {Object} el\r\n     */\r\n    $.datepicker._gotoToday = function (el) {\r\n        //Set date/time according to timezone offset\r\n        $(el).datepicker('setTimezoneDate')\r\n            // To ensure that user can re-select date field without clicking outside it first.\r\n            .blur();\r\n    };\r\n\r\n    return {\r\n        dateRange:  $.mage.dateRange,\r\n        calendar:   $.mage.calendar\r\n    };\r\n}));\r\n","mage/collapsible.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    \"jquery\",\r\n    \"jquery/ui\",\r\n    'jquery/jquery-storageapi',\r\n    \"mage/mage\"\r\n], function($){\r\n    \"use strict\";\r\n    \r\n    var hideProps = {},\r\n        showProps = {};\r\n\r\n    hideProps.height =  \"hide\";\r\n    showProps.height =  \"show\";\r\n\r\n    $.widget(\"mage.collapsible\", {\r\n        options: {\r\n            active: false,\r\n            disabled: false,\r\n            collapsible: true,\r\n            header: \"[data-role=title]\",\r\n            content: \"[data-role=content]\",\r\n            trigger: \"[data-role=trigger]\",\r\n            closedState: null,\r\n            openedState: null,\r\n            disabledState: null,\r\n            ajaxUrlElement: \"[data-ajax=true]\",\r\n            ajaxContent: false,\r\n            loadingClass: null,\r\n            saveState: false,\r\n            animate: false,\r\n            icons: {\r\n                activeHeader: null,\r\n                header: null\r\n            },\r\n            collateral: {\r\n                element: null,\r\n                openedState: null\r\n            }\r\n        },\r\n\r\n        _create: function () {\r\n            this.storage= $.localStorage;\r\n            this.icons = false;\r\n            if((typeof this.options.icons) === \"string\") {\r\n                this.options.icons = $.parseJSON(this.options.icons);\r\n            }\r\n\r\n            this._processPanels();\r\n            this._processState();\r\n            this._refresh();\r\n\r\n\r\n            if (this.options.icons.header && this.options.icons.activeHeader) {\r\n                this._createIcons();\r\n                this.icons = true;\r\n            }\r\n\r\n            this._bind(\"click\");\r\n            this._trigger('created');\r\n        },\r\n\r\n        _refresh: function () {\r\n            this.trigger.attr(\"tabIndex\",0);\r\n            if (this.options.active && !this.options.disabled) {\r\n                if (this.options.openedState) {\r\n                    this.element.addClass(this.options.openedState);\r\n                }\r\n                if (this.options.collateral.element && this.options.collateral.openedState) {\r\n                    $(this.options.collateral.element).addClass(this.options.collateral.openedState);\r\n                }\r\n                if (this.options.ajaxContent) {\r\n                    this._loadContent();\r\n                }\r\n                // ARIA (updates aria attributes)\r\n                this.header.attr({\r\n                    'aria-selected': false\r\n                });\r\n            }\r\n            else if (this.options.disabled) {\r\n                this.disable();\r\n            } else {\r\n                this.content.hide();\r\n                if(this.options.closedState) {\r\n                    this.element.addClass(this.options.closedState);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Processing the state:\r\n         *     If deep linking is used and the anchor is the id of the content or the content contains this id,\r\n         *     and the collapsible element is a nested one having collapsible parents, in order to see the content,\r\n         *     all the parents must be expanded.\r\n         * @private\r\n         */\r\n        _processState: function () {\r\n            var anchor = window.location.hash,\r\n                isValid = $.mage.isValidSelector(anchor),\r\n                urlPath = window.location.pathname.replace(/\\./g, ''),\r\n                state;\r\n\r\n            this.stateKey = encodeURIComponent(urlPath + this.element.attr(\"id\"));\r\n            \r\n            if ( isValid && ( $(this.content.find(anchor)).length > 0 || this.content.attr(\"id\") === anchor.replace(\"#\",\"\")) ) {\r\n                this.element.parents(\"[data-collapsible=true]\").collapsible(\"forceActivate\");\r\n                if(!this.options.disabled) {\r\n                    this.options.active = true;\r\n                    if (this.options.saveState) {\r\n                        this.storage.set(this.stateKey,true);\r\n                    }\r\n                }\r\n            } else if (this.options.saveState && !this.options.disabled) {\r\n                state = this.storage.get(this.stateKey);\r\n                if (typeof state === 'undefined' || state === null) {\r\n                    this.storage.set(this.stateKey,this.options.active);\r\n                } else if (state === true) {\r\n                    this.options.active = true;\r\n                } else if (state === false) {\r\n                    this.options.active = false;\r\n                }\r\n            }\r\n        },\r\n\r\n        _createIcons: function () {\r\n            var icons = this.options.icons;\r\n            if (icons) {\r\n                $(\"<span>\")\r\n                    .addClass(icons.header)\r\n                    .attr(\"data-role\",\"icons\")\r\n                    .prependTo(this.header);\r\n                if (this.options.active && !this.options.disabled) {\r\n                    this.header.children(\"[data-role=icons]\")\r\n                        .removeClass(icons.header)\r\n                        .addClass(icons.activeHeader);\r\n                }\r\n            }\r\n        },\r\n\r\n        _destroyIcons: function () {\r\n            this.header\r\n                .children(\"[data-role=icons]\")\r\n                .remove();\r\n        },\r\n\r\n        _destroy: function () {\r\n            var options = this.options;\r\n\r\n            this.element.removeAttr(\"data-collapsible\");\r\n\r\n            this.trigger.removeAttr(\"tabIndex\");\r\n            if(options.openedState) {\r\n                this.element.removeClass(options.openedState);\r\n            }\r\n            if (this.options.collateral.element && this.options.collateral.openedState) {\r\n                $(this.options.collateral.element).removeClass(this.options.collateral.openedState);\r\n            }\r\n            if(options.closedState){\r\n                this.element.removeClass(options.closedState);\r\n            }\r\n            if(options.disabledState){\r\n                this.element.removeClass(options.disabledState);\r\n            }\r\n\r\n            if (this.icons) {\r\n                this._destroyIcons();\r\n            }\r\n        },\r\n\r\n        _processPanels: function () {\r\n            this.element.attr(\"data-collapsible\", \"true\");\r\n\r\n            if (typeof this.options.header === \"object\") {\r\n                this.header = this.options.header;\r\n            } else {\r\n                var headers = this.element.find(this.options.header);\r\n                if(headers.length > 0) {\r\n                    this.header = headers.eq(0);\r\n                } else {\r\n                    this.header = this.element;\r\n                }\r\n            }\r\n\r\n            if (typeof this.options.content === \"object\") {\r\n                this.content = this.options.content;\r\n            } else {\r\n                this.content = this.header.next(this.options.content).eq(0);\r\n            }\r\n\r\n            // ARIA (init aria attributes)\r\n            if (this.header.attr('id')) {\r\n                this.content.attr('aria-labelledby', this.header.attr('id'));\r\n            }\r\n\r\n            if (this.content.attr('id')) {\r\n                this.header.attr('aria-controls', this.content.attr('id'));\r\n            }\r\n\r\n            this.header\r\n                .attr({\r\n                    'role': 'tab',\r\n                    'aria-selected': this.options.active,\r\n                    'aria-expanded': this.options.active\r\n                });\r\n\r\n            // For collapsible widget only (not tabs or accordion)\r\n            if (this.header.parent().attr('role') != 'presentation') {\r\n                this.header\r\n                    .parent()\r\n                    .attr('role', 'tablist');\r\n            }\r\n\r\n            this.content.attr({\r\n                'role': 'tabpanel',\r\n                'aria-hidden': !this.options.active\r\n            });\r\n\r\n            if (typeof this.options.trigger === \"object\") {\r\n                this.trigger = this.options.trigger;\r\n            } else {\r\n                var triggers = this.header.find(this.options.trigger);\r\n                if(triggers.length > 0) {\r\n                    this.trigger = triggers.eq(0);\r\n                } else {\r\n                    this.trigger = this.header;\r\n                }\r\n            }\r\n        },\r\n\r\n        _keydown: function (event) {\r\n            if (event.altKey || event.ctrlKey) {\r\n                return;\r\n            }\r\n\r\n            var keyCode = $.ui.keyCode;\r\n\r\n            switch (event.keyCode) {\r\n                case keyCode.SPACE:\r\n                case keyCode.ENTER:\r\n                    this._eventHandler(event);\r\n                    break;\r\n            }\r\n\r\n        },\r\n\r\n        _bind: function (event) {\r\n            this.events = {\r\n                keydown: \"_keydown\"\r\n            };\r\n            var self = this;\r\n            if (event) {\r\n                $.each(event.split(\" \"), function (index, eventName) {\r\n                    self.events[ eventName ] = \"_eventHandler\";\r\n                });\r\n            }\r\n            this._off(this.trigger);\r\n            if(!this.options.disabled) {\r\n                this._on(this.trigger, this.events);\r\n            }\r\n        },\r\n\r\n        disable: function() {\r\n            this._off(this.trigger);\r\n            this.forceDeactivate();\r\n            this.options.disabled = true;\r\n            if(this.options.disabledState) {\r\n                this.element.addClass(this.options.disabledState);\r\n            }\r\n            this.trigger.attr(\"tabIndex\",-1);\r\n        },\r\n\r\n        enable: function() {\r\n            this._on(this.trigger, this.events);\r\n            this.options.disabled = false;\r\n            if(this.options.disabledState) {\r\n                this.element.removeClass(this.options.disabledState);\r\n            }\r\n        },\r\n\r\n        _eventHandler: function (event) {\r\n\r\n            if (this.options.active && this.options.collapsible) {\r\n                this.deactivate();\r\n            } else {\r\n                this.activate();\r\n\r\n            }\r\n            event.preventDefault();\r\n\r\n        },\r\n\r\n        _animate: function(prop) {\r\n            var duration,\r\n                easing,\r\n                animate = this.options.animate;\r\n\r\n            if ( typeof animate === \"number\" ) {\r\n                duration = animate;\r\n            }\r\n            if (typeof animate === \"string\" ) {\r\n                animate = $.parseJSON(animate);\r\n            }\r\n            duration = duration || animate.duration;\r\n            easing = animate.easing;\r\n            this.content.animate(prop,duration,easing);\r\n        },\r\n\r\n        deactivate: function () {\r\n            if(this.options.animate) {\r\n                this._animate(hideProps);\r\n            } else {\r\n                this.content.hide();\r\n            }\r\n            this._close();\r\n        },\r\n\r\n        forceDeactivate: function () {\r\n            this.content.hide();\r\n            this._close();\r\n\r\n        },\r\n\r\n        _close: function () {\r\n\r\n            this.options.active = false;\r\n\r\n            if (this.options.saveState) {\r\n                this.storage.set(this.stateKey,false);\r\n            }\r\n            if (this.options.openedState) {\r\n                this.element.removeClass(this.options.openedState);\r\n            }\r\n            if (this.options.collateral.element && this.options.collateral.openedState) {\r\n                $(this.options.collateral.element).removeClass(this.options.collateral.openedState);\r\n            }\r\n            if(this.options.closedState) {\r\n                this.element.addClass(this.options.closedState);\r\n            }\r\n            if (this.icons) {\r\n                this.header.children(\"[data-role=icons]\")\r\n                    .removeClass(this.options.icons.activeHeader)\r\n                    .addClass(this.options.icons.header);\r\n            }\r\n\r\n            // ARIA (updates aria attributes)\r\n            this.header.attr({\r\n                'aria-selected': 'false',\r\n                'aria-expanded': 'false'\r\n            });\r\n            this.content.attr({\r\n                'aria-hidden': 'true'\r\n            });\r\n\r\n            this.element.trigger('dimensionsChanged', {opened: false});\r\n        },\r\n\r\n        activate: function () {\r\n            if (!this.options.disabled) {\r\n                if (this.options.animate) {\r\n                    this._animate(showProps);\r\n                } else {\r\n                    this.content.show();\r\n                }\r\n                this._open();\r\n            }\r\n        },\r\n\r\n        forceActivate: function () {\r\n            if (!this.options.disabled) {\r\n                this.content.show();\r\n                this._open();\r\n            }\r\n        },\r\n\r\n        _open: function () {\r\n\r\n            this.element.trigger(\"beforeOpen\");\r\n\r\n            this.options.active = true;\r\n\r\n            if (this.options.ajaxContent) {\r\n                this._loadContent();\r\n            }\r\n            if (this.options.saveState) {\r\n                this.storage.set(this.stateKey,true);\r\n            }\r\n            if (this.options.openedState) {\r\n                this.element.addClass(this.options.openedState);\r\n            }\r\n            if (this.options.collateral.element && this.options.collateral.openedState) {\r\n                $(this.options.collateral.element).addClass(this.options.collateral.openedState);\r\n            }\r\n            if (this.options.closedState) {\r\n                this.element.removeClass(this.options.closedState);\r\n            }\r\n            if (this.icons) {\r\n                this.header.children(\"[data-role=icons]\")\r\n                    .removeClass(this.options.icons.header)\r\n                    .addClass(this.options.icons.activeHeader);\r\n            }\r\n\r\n            // ARIA (updates aria attributes)\r\n            this.header.attr({\r\n                'aria-selected': 'true',\r\n                'aria-expanded': 'true'\r\n            });\r\n            this.content.attr({\r\n                'aria-hidden': 'false'\r\n            });\r\n\r\n            this.element.trigger('dimensionsChanged', {opened: true});\r\n        },\r\n\r\n        _loadContent: function () {\r\n            var url = this.element.find(this.options.ajaxUrlElement).attr(\"href\");\r\n            if(url) {\r\n                this.xhr = $.get({\r\n                    url: url,\r\n                    dataType: 'html'\r\n                }, function () {\r\n                });\r\n            }\r\n            var that = this;\r\n            if (that.xhr && that.xhr.statusText !== \"canceled\") {\r\n                if(that.options.loadingClass) {\r\n                    that.element.addClass(that.options.loadingClass);\r\n                }\r\n                that.content.attr(\"aria-busy\", \"true\");\r\n                that.xhr\r\n                    .success(function (response) {\r\n                        setTimeout(function () {\r\n                            that.content.html(response);\r\n                        }, 1);\r\n                    })\r\n                    .complete(function (jqXHR, status) {\r\n                        setTimeout(function () {\r\n                            if (status === \"abort\") {\r\n                                that.content.stop(false, true);\r\n                            }\r\n                            if(that.options.loadingClass) {\r\n                                that.element.removeClass(that.options.loadingClass);\r\n                            }\r\n                            that.content.removeAttr(\"aria-busy\");\r\n                            if (jqXHR === that.xhr) {\r\n                                delete that.xhr;\r\n                            }\r\n                        }, 1);\r\n                    });\r\n            }\r\n        }\r\n\r\n    });\r\n    \r\n    return $.mage.collapsible;\r\n});\r\n","mage/cookies.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint eqnull:true browser:true jquery:true*/\r\n/*global jQuery*/\r\n(function (factory) {\r\n    'use strict';\r\n\r\n    if (typeof define === 'function' && define.amd) {\r\n        define([\r\n            'jquery',\r\n            'mage/mage',\r\n            'jquery/jquery.cookie'\r\n        ], factory);\r\n    } else {\r\n        factory(jQuery);\r\n    }\r\n}(function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Helper for cookies manipulation\r\n     * @returns {CookieHelper}\r\n     * @constructor\r\n     */\r\n    var CookieHelper = function () {\r\n\r\n        /**\r\n         * Cookie default values.\r\n         * @type {Object}\r\n         */\r\n        this.defaults = {\r\n            expires: null,\r\n            path: '/',\r\n            domain: null,\r\n            secure: false,\r\n            lifetime: null\r\n        };\r\n\r\n        /**\r\n         * Calculate cookie expiration date based on its lifetime.\r\n         * @param {Object} options - Cookie option values\r\n         * @return {Date|null} Calculated cookie expiration date or null if no lifetime provided.\r\n         * @private\r\n         */\r\n        function lifetimeToExpires(options, defaults) {\r\n            var expires,\r\n                lifetime;\r\n\r\n            lifetime = options.lifetime || defaults.lifetime;\r\n\r\n            if (lifetime && lifetime > 0) {\r\n                expires = options.expires || new Date();\r\n                \r\n                return new Date(expires.getTime() + lifetime * 1000);\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        /**\r\n         * Set a cookie's value by cookie name based on optional cookie options.\r\n         * @param {String} name - The name of the cookie.\r\n         * @param {String} value - The cookie's value.\r\n         * @param {Object} options - Optional options (e.g. lifetime, expires, path, etc.)\r\n         */\r\n        this.set = function (name, value, options) {\r\n            var expires,\r\n                path,\r\n                domain,\r\n                secure;\r\n\r\n            options = $.extend({}, this.defaults, options || {});\r\n            expires = lifetimeToExpires(options, this.defaults) || options.expires;\r\n            path = options.path;\r\n            domain = options.domain;\r\n            secure = options.secure;\r\n\r\n            document.cookie = name + '=' + encodeURIComponent(value) +\r\n                (expires ? '; expires=' + expires.toGMTString() :  '') +\r\n                (path ? '; path=' + path : '') +\r\n                (domain ? '; domain=' + domain : '') +\r\n                (secure ? '; secure' : '');\r\n        };\r\n\r\n        /**\r\n         * Get a cookie's value by cookie name.\r\n         * @param {String} name  - The name of the cookie.\r\n         * @return {(null|String)}\r\n         */\r\n        this.get = function (name) {\r\n            var arg = name + '=',\r\n                aLength = arg.length,\r\n                cLength = document.cookie.length,\r\n                i = 0,\r\n                j = 0;\r\n\r\n            while (i < cLength) {\r\n                j = i + aLength;\r\n\r\n                if (document.cookie.substring(i, j) === arg) {\r\n                    return this.getCookieVal(j);\r\n                }\r\n                i = document.cookie.indexOf(' ', i) + 1;\r\n\r\n                if (i === 0) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Clear a cookie's value by name.\r\n         * @param {String} name - The name of the cookie being cleared.\r\n         */\r\n        this.clear = function (name) {\r\n            if (this.get(name)) {\r\n                this.set(name, '', {\r\n                    expires: new Date('Jan 01 1970 00:00:01 GMT')\r\n                });\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Return URI decoded cookie component value (e.g. expires, path, etc.) based on a\r\n         * numeric offset in the document's cookie value.\r\n         * @param {Number} offset - Offset into the document's cookie value.\r\n         * @return {String}\r\n         */\r\n        this.getCookieVal = function (offset) {\r\n            var endstr = document.cookie.indexOf(';', offset);\r\n\r\n            if (endstr === -1) {\r\n                endstr = document.cookie.length;\r\n            }\r\n\r\n            return decodeURIComponent(document.cookie.substring(offset, endstr));\r\n        };\r\n\r\n        return this;\r\n    };\r\n\r\n    $.extend(true, $, {\r\n        mage: {\r\n            cookies: new CookieHelper()\r\n        }\r\n    });\r\n\r\n    return function (pageOptions) {\r\n        $.extend($.mage.cookies.defaults, pageOptions);\r\n        $.extend($.cookie.defaults, $.mage.cookies.defaults);\r\n    };\r\n}));\r\n","mage/decorate.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint browser:true jquery:true*/\r\n(function (factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define([\r\n            \"jquery\",\r\n            \"mage/translate\"\r\n        ], factory);\r\n    } else {\r\n        factory(jQuery);\r\n    }\r\n}(function ($) {\r\n\r\n    var methods = {\r\n        /**\r\n         * Decorate a list (e.g. a <ul> containing <li>) recursively if specified.\r\n         * @param {boolean} isRecursive\r\n         */\r\n        list: function (isRecursive) {\r\n            return this.each(function() {\r\n                var list = $(this);\r\n                if (list.length > 0) {\r\n                    var items = (typeof(isRecursive) === undefined || isRecursive) ?\r\n                        list.find('li') :\r\n                        list.children();\r\n                    items.decorate('generic', ['odd', 'even', 'last']);\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Annotate a set of DOM elements with decorator classes.\r\n         * @param {Array} decoratorParams\r\n         */\r\n        generic: function (decoratorParams) {\r\n            var elements = $(this);\r\n            if (elements) {\r\n                var allSupportedParams = {\r\n                    even: 'odd', // Flip jQuery odd/even so that index 0 is odd.\r\n                    odd: 'even',\r\n                    last: 'last',\r\n                    first: 'first'\r\n                };\r\n\r\n                decoratorParams = decoratorParams || allSupportedParams;\r\n\r\n                $.each(decoratorParams, function(index, param) {\r\n                    if (param === 'even' || param === 'odd') {\r\n                        elements.filter(':' + param).removeClass('odd even').addClass(allSupportedParams[param]);\r\n                    } else {\r\n                        elements.filter(':' + param).addClass(allSupportedParams[param]);\r\n                    }\r\n                });\r\n            }\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Decorate DOM elements in an HTML table with specified classes.\r\n         * @param {Object} instanceOptions\r\n         */\r\n        table: function (instanceOptions) {\r\n            return this.each(function() {\r\n                var table = $(this);\r\n                if (table.length > 0) {\r\n                    var options = {\r\n                        'tbody': false,\r\n                        'tbody tr': ['odd', 'even', 'first', 'last'],\r\n                        'thead tr': ['first', 'last'],\r\n                        'tfoot tr': ['first', 'last'],\r\n                        'tr td': ['last']\r\n                    };\r\n\r\n                    $.extend(options, instanceOptions || {});\r\n\r\n                    $.each(options, function (key, value) {\r\n                        if (options[key]) {\r\n                            if (key === 'tr td') {\r\n                                $.each(table.find('tr'), function () {\r\n                                    $(this).find('td').decorate('generic', options['tr td']);\r\n                                });\r\n                            } else {\r\n                                table.find(key).decorate('generic', value);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Annotate data list elements with CSS classes.\r\n         */\r\n        dataList: function() {\r\n            return this.each(function() {\r\n                var list = $(this);\r\n                if (list) {\r\n                    list.find('dt').decorate('generic', ['odd', 'even', 'last']);\r\n                    list.find('dd').decorate('generic', ['odd', 'even', 'last']);\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    $.fn.decorate = function(method) {\r\n        if (methods[method]) {\r\n            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\r\n        } else if (typeof method === 'object' || ! method) {\r\n            return methods.init.apply(this, arguments);\r\n        } else {\r\n            var message = $.mage.__('Method %s does not exist on jQuery.decorate');\r\n            $.error(message.replace('%s', method));\r\n        }\r\n    };\r\n\r\n}));\r\n","mage/deletable-item.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint jquery:true*/\r\ndefine([\r\n    \"jquery\",\r\n    \"jquery/ui\"\r\n], function($){\r\n    \"use strict\";\r\n    \r\n    /**\r\n     * This widget is used to tag a DOM element as deletable. By default, it will use the click event on the item with a\r\n     * data role of delete to trigger the deletion.\r\n     */\r\n    $.widget('mage.deletableItem', {\r\n        options: {\r\n            deleteEvent: 'click',\r\n            deleteSelector: '[data-role=\"delete\"]',\r\n            hiddenClass: 'no-display'\r\n        },\r\n\r\n        /**\r\n         * This method binds elements found in this widget.\r\n         */\r\n        _bind: function () {\r\n            var handlers = {};\r\n\r\n            // since the first handler is dynamic, generate the object using array notation\r\n            handlers[this.options.deleteEvent + ' ' + this.options.deleteSelector] = '_onDeleteClicked';\r\n            handlers.hideDelete = '_onHideDelete';\r\n            handlers.showDelete = '_onShowDelete';\r\n\r\n            this._on(handlers);\r\n        },\r\n\r\n        /**\r\n         * This method constructs a new widget.\r\n         */\r\n        _create: function () {\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * This method is to initialize the control\r\n         * @private\r\n         */\r\n        _init: function() {\r\n            this._onHideDelete(); // by default, hide the control\r\n        },\r\n\r\n        /**\r\n         * This method removes the entity from the DOM.\r\n         * @private\r\n         */\r\n        _onDeleteClicked: function (e) {\r\n            e.stopPropagation();\r\n            this.element.trigger('deleteItem');\r\n        },\r\n\r\n        /**\r\n         * This method hides the delete capability of this item (i.e. making it not deletable)\r\n         * @private\r\n         */\r\n        _onHideDelete: function () {\r\n            this.element.find(this.options.deleteSelector).addClass(this.options.hiddenClass);\r\n        },\r\n\r\n        /**\r\n         * This method shows the delete capability of this item (i.e. making it deletable)\r\n         * @private\r\n         */\r\n        _onShowDelete: function () {\r\n            this.element.find(this.options.deleteSelector).removeClass(this.options.hiddenClass);\r\n        }\r\n    });\r\n    \r\n    return $.mage.deletableItem;\r\n});\r\n","mage/dropdown.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    \"jquery\",\r\n    \"jquery/ui\",\r\n    \"mage/translate\"\r\n], function($){\r\n    'use strict';\r\n\r\n    var timer = null;\r\n    /**\r\n     * Dropdown Widget - this widget is a wrapper for the jQuery UI Dialog\r\n     */\r\n    $.widget('mage.dropdownDialog', $.ui.dialog, {\r\n        options: {\r\n            triggerEvent : \"click\",\r\n            triggerClass: null,\r\n            parentClass: null,\r\n            triggerTarget: null,\r\n            defaultDialogClass: \"mage-dropdown-dialog\",\r\n            dialogContentClass: null,\r\n            shadowHinter: null,\r\n            closeOnMouseLeave: true,\r\n            closeOnClickOutside: true,\r\n            minHeight: null,\r\n            minWidth: null,\r\n            width: null,\r\n            modal: false,\r\n            timeout: null,\r\n            autoOpen: false,\r\n            createTitleBar: false,\r\n            autoPosition: false,\r\n            autoSize: false,\r\n            draggable: false,\r\n            resizable: false,\r\n            bodyClass: '',\r\n            buttons: [\r\n                {\r\n                    'class': \"action close\",\r\n                    'text': $.mage.__(\"Close\"),\r\n                    'click': function () {\r\n                        $(this).dropdownDialog(\"close\");\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n        /**\r\n         * extend default functionality to bind the opener for dropdown\r\n         * @private\r\n         */\r\n        _create: function() {\r\n            this._super();\r\n            this.uiDialog.addClass(this.options.defaultDialogClass);\r\n            var _self = this;\r\n\r\n            if (_self.options.triggerTarget) {\r\n                $(_self.options.triggerTarget).on(_self.options.triggerEvent,function(event) {\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n                    if(!_self._isOpen) {\r\n                        $('.' + _self.options.defaultDialogClass + ' > .ui-dialog-content').dropdownDialog(\"close\");\r\n                        _self.open();\r\n                    }\r\n                    else {\r\n                        _self.close(event);\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (_self.options.shadowHinter) {\r\n                _self.hinter = $('<div class=\"' + _self.options.shadowHinter + '\"/>');\r\n                _self.element.append(_self.hinter);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * extend default functionality to close the dropdown  with custom delay on mouse out and also to close when clicking outside\r\n         */\r\n        open: function () {\r\n            this._super();\r\n            var _self = this;\r\n            if(_self.options.dialogContentClass) {\r\n                _self.element.addClass(_self.options.dialogContentClass);\r\n            }\r\n            if(_self.options.closeOnMouseLeave) {\r\n\r\n                this._mouseEnter(_self.uiDialog);\r\n                this._mouseLeave(_self.uiDialog);\r\n                if(_self.options.triggerTarget) {\r\n                    this._mouseLeave($(_self.options.triggerTarget));\r\n                }\r\n            }\r\n\r\n            if(_self.options.closeOnClickOutside) {\r\n                $('body').on('click.outsideDropdown', function (event) {\r\n                    if(_self._isOpen && !$(event.target).closest('.ui-dialog').length) {\r\n                        if (timer) {\r\n                            clearTimeout(timer);\r\n                        }\r\n                        _self.close(event);\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n            // adding the class on the opener and parent element for dropdown\r\n            if(_self.options.triggerClass) {\r\n                $(_self.options.triggerTarget).addClass(_self.options.triggerClass);\r\n            }\r\n            if(_self.options.parentClass) {\r\n                $(_self.options.appendTo).addClass(_self.options.parentClass);\r\n            }\r\n            if(_self.options.bodyClass) {\r\n                $('body').addClass(_self.options.bodyClass);\r\n            }\r\n\r\n            if (_self.options.shadowHinter) {\r\n                _self._setShadowHinterPosition();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * extend default functionality to reset the timer and remove the active class for opener\r\n         * @param event\r\n         */\r\n        close: function(event) {\r\n            this._super();\r\n            if(this.options.dialogContentClass) {\r\n                this.element.removeClass(this.options.dialogContentClass);\r\n            }\r\n            if(this.options.triggerClass) {\r\n                $(this.options.triggerTarget).removeClass(this.options.triggerClass);\r\n            }\r\n            if(this.options.parentClass) {\r\n                $(this.options.appendTo).removeClass(this.options.parentClass);\r\n            }\r\n            if(this.options.bodyClass) {\r\n                $('body').removeClass(this.options.bodyClass);\r\n            }\r\n            if(timer) {\r\n                clearTimeout(timer);\r\n            }\r\n            if(this.options.triggerTarget) {\r\n                $(this.options.triggerTarget).off(\"mouseleave\");\r\n            }\r\n            this.uiDialog.off(\"mouseenter\");\r\n            this.uiDialog.off(\"mouseleave\");\r\n            $('body').off('click.outsideDropdown');\r\n        },\r\n\r\n        /**\r\n         * _setShadowHinterPosition\r\n         * @private\r\n         */\r\n        _setShadowHinterPosition: function () {\r\n            var _self = this,\r\n                offset;\r\n            offset = _self.options.position.of.offset().left -\r\n                _self.element.offset().left +\r\n                _self.options.position.of.outerWidth() / 2;\r\n            offset = isNaN(offset) ? 0 : Math.floor(offset);\r\n            _self.hinter.css('left', offset);\r\n        },\r\n\r\n        _position: function() {\r\n            if(this.options.autoPosition) {\r\n                this._super();\r\n            }\r\n        },\r\n        _createTitlebar: function() {\r\n            if(this.options.createTitleBar) {\r\n                this._super();\r\n            }\r\n            else {\r\n                // the title bar close button is referenced in _focusTabbable function, so to prevent errors it must be declared\r\n                this.uiDialogTitlebarClose = $(\"<div>\");\r\n            }\r\n        },\r\n\r\n        _size: function() {\r\n            if(this.options.autoSize) {\r\n                this._super();\r\n            }\r\n        },\r\n\r\n        _mouseLeave : function(handler) {\r\n            var _self = this;\r\n            handler.on(\"mouseleave\", function (event) {\r\n                event.stopPropagation();\r\n                if (_self._isOpen) {\r\n                    if (timer) {\r\n                        clearTimeout(timer);\r\n                    }\r\n                    timer = setTimeout(function (event) {\r\n                        _self.close(event);\r\n                    }, _self.options.timeout);\r\n                }\r\n            });\r\n        },\r\n\r\n        _mouseEnter : function(handler){\r\n            handler.on(\"mouseenter\", function (event) {\r\n                event.stopPropagation();\r\n                if (timer) {\r\n                    clearTimeout(timer);\r\n                }\r\n            });\r\n        },\r\n\r\n        _setOption: function( key, value ) {\r\n            this._super(key, value);\r\n            if ( key === \"triggerTarget\" ) {\r\n                this.options.triggerTarget = value;\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.dropdownDialog;\r\n});\r\n","mage/dropdowns.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    \"jquery\"\r\n], function($){\r\n    'use strict';\r\n\r\n    $.fn.dropdown = function(options) {\r\n        var defaults = {\r\n            parent: null,\r\n            autoclose: true,\r\n            btnArrow: '.arrow',\r\n            menu: '[data-target=\"dropdown\"]',\r\n            activeClass: 'active'\r\n        };\r\n\r\n        options = $.extend(defaults, options);\r\n        var actionElem = $(this),\r\n            self = this;\r\n\r\n        this.openDropdown = function(elem) {\r\n            elem\r\n                .addClass(options.activeClass)\r\n                .attr('aria-expanded', true)\r\n                .parent()\r\n                    .addClass(options.activeClass);\r\n\r\n            elem.parent()\r\n                .find(options.menu)\r\n                .attr('aria-hidden', false);\r\n\r\n            $(options.btnArrow, elem).text('-');\r\n        };\r\n\r\n        this.closeDropdown = function(elem) {\r\n            elem\r\n                .removeClass(options.activeClass)\r\n                .attr('aria-expanded', false)\r\n                .parent()\r\n                    .removeClass(options.activeClass);\r\n\r\n            elem.parent()\r\n                .find(options.menu)\r\n                .attr('aria-hidden', true);\r\n\r\n            $(options.btnArrow, elem).text('+');\r\n        };\r\n\r\n        /* Reset all dropdowns */\r\n        this.reset = function(param) {\r\n            var params = param || {},\r\n                dropdowns = params.elems || actionElem;\r\n\r\n            dropdowns.each(function(index, elem) {\r\n                self.closeDropdown($(elem));\r\n            });\r\n        };\r\n\r\n        /* document Event bindings */\r\n        if(options.autoclose === true) {\r\n            $(document).on('click.hideDropdown', this.reset);\r\n            $(document).on('keyup.hideDropdown', function(e) {\r\n                var ESC_CODE = '27';\r\n\r\n                if (e.keyCode == ESC_CODE) {\r\n                    self.reset();\r\n                }\r\n            });\r\n        }\r\n\r\n        if (options.events) {\r\n            $.each(options.events, function(index, event) {\r\n                $(document).on(event.name, event.selector, event.action);\r\n            });\r\n        }\r\n\r\n        return this.each(function() {\r\n            var elem = $(this),\r\n                parent = $(options.parent).length > 0 ? $(options.parent) : elem.parent(),\r\n                menu = $(options.menu, parent) || $('.dropdown-menu', parent);\r\n\r\n            // ARIA (adding aria attributes)\r\n            if (menu.length) {\r\n                elem.attr('aria-haspopup', true);\r\n            }\r\n\r\n            if (!elem.hasClass(options.activeClass)) {\r\n                elem.attr('aria-expanded', false);\r\n                menu.attr('aria-hidden', true);\r\n            } else {\r\n                elem.attr('aria-expanded', true);\r\n                menu.attr('aria-hidden', false);\r\n            }\r\n\r\n            if (elem.attr('data-trigger-keypress-button')) {\r\n                elem.keypress(function(e) {\r\n                    var ENTER_CODE = '13';\r\n\r\n                    if (e.which == ENTER_CODE) {\r\n                        elem.trigger('click.toggleDropdown');\r\n                    }\r\n                })\r\n            }\r\n\r\n            elem.on('click.toggleDropdown', function() {\r\n                if(options.autoclose === true) {\r\n                    var elem = actionElem;\r\n\r\n                    actionElem = $();\r\n                    $(document).trigger('click.hideDropdown');\r\n                    actionElem = elem;\r\n                }\r\n                self[elem.hasClass(options.activeClass) ? 'closeDropdown' : 'openDropdown'](elem);\r\n\r\n                return false;\r\n            });\r\n        });\r\n    };\r\n    \r\n    return function(data, el){\r\n        $(el).dropdown(data);\r\n    };\r\n});\r\n","mage/edit-trigger.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint browser:true jquery:true */\r\n(function (root, factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define([\r\n            \"jquery\",\r\n            \"mage/template\",\r\n            \"jquery/ui\"\r\n        ], factory);\r\n    } else {\r\n        factory(root.jQuery, root.mageTemplate);\r\n    }\r\n}(this, function ($, mageTemplate) {\r\n    \"use strict\";\r\n    $.widget(\"mage.editTrigger\", {\r\n        options: {\r\n            img: '',\r\n            alt: '[TR]',\r\n            template: '#translate-inline-icon',\r\n            zIndex: 2000,\r\n            editSelector: '[data-translate]',\r\n            delay: 2000,\r\n            offsetTop: -3,\r\n            singleElement: true\r\n        },\r\n        /**\r\n         * editTriger creation\r\n         * @protected\r\n         */\r\n        _create: function() {\r\n            this.tmpl = mageTemplate(this.options.template);\r\n            this._initTrigger();\r\n            this._bind();\r\n        },\r\n        _getCss: function() {\r\n            return {\r\n                position: 'absolute',\r\n                cursor: 'pointer',\r\n                display: 'none',\r\n                'z-index': this.options.zIndex\r\n            };\r\n        },\r\n        _createTrigger: function(appendTo) {\r\n            var tmpl = this.tmpl({\r\n                data: this.options\r\n            });\r\n\r\n            return $(tmpl)\r\n                .css(this._getCss())\r\n                .data('role', 'edit-trigger-element')\r\n                .appendTo(appendTo);\r\n        },\r\n        _initTrigger: function() {\r\n            this.trigger = this._createTrigger($('body'));\r\n        },\r\n        /**\r\n         * Bind on mousemove event\r\n         * @protected\r\n         */\r\n        _bind: function() {\r\n            this.trigger.on('click.' + this.widgetName, $.proxy(this._onClick, this));\r\n            this.element.on('mousemove.' + this.widgetName, $.proxy(this._onMouseMove, this));\r\n        },\r\n        /**\r\n         * Show editTriger\r\n         */\r\n        show: function() {\r\n            if (this.trigger.is(':hidden')) {\r\n                this.trigger.show();\r\n            }\r\n        },\r\n        /**\r\n         * Hide editTriger\r\n         */\r\n        hide: function() {\r\n            this.currentTarget = null;\r\n            if (this.trigger && this.trigger.is(':visible')) {\r\n                this.trigger.hide();\r\n            }\r\n        },\r\n        /**\r\n         * Set editTriger position\r\n         * @protected\r\n         */\r\n        _setPosition: function(el) {\r\n            var offset = el.offset();\r\n            this.trigger.css({\r\n                top: offset.top + el.outerHeight() + this.options.offsetTop,\r\n                left: offset.left\r\n            });\r\n        },\r\n        /**\r\n         * Show/hide trigger on mouse move\r\n         * @param {Object} event object\r\n         * @protected\r\n         */\r\n        _onMouseMove: function(e) {\r\n            var target = $(e.target);\r\n            target = target.is(this.trigger) || target.is(this.options.editSelector) ?\r\n                target :\r\n                target.parents(this.options.editSelector).first();\r\n\r\n            if (target.size()) {\r\n                if (!target.is(this.trigger)) {\r\n                    this._setPosition(target);\r\n                    this.currentTarget = target;\r\n                }\r\n                this.show();\r\n            } else {\r\n                this.hide();\r\n            }\r\n        },\r\n        /**\r\n         * Trigger event \"edit\" on element for translate\r\n         * @param {Object} event object\r\n         * @protected\r\n         */\r\n        _onClick: function(e) {\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n            $(this.currentTarget).trigger('edit.' + this.widgetName);\r\n            this.hide(true);\r\n        },\r\n        /**\r\n         * Destroy editTriger\r\n         */\r\n        destroy: function() {\r\n            this.trigger.remove();\r\n            this.element.off('.' + this.widgetName);\r\n            return $.Widget.prototype.destroy.call(this);\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Extention for widget editTrigger - hide trigger with delay\r\n     */\r\n    var editTriggerPrototype = $.mage.editTrigger.prototype;\r\n    $.widget(\"mage.editTrigger\", $.extend({}, editTriggerPrototype, {\r\n        /**\r\n         * Added clear timeout on trigger show\r\n         */\r\n        show: function() {\r\n            editTriggerPrototype.show.apply(this, arguments);\r\n            if(this.options.delay){\r\n                this._clearTimer();\r\n            }\r\n        },\r\n        /**\r\n         * Added setTimeout on trigger hide\r\n         */\r\n        hide: function(immediate) {\r\n            if(!immediate && this.options.delay){\r\n                if(!this.timer){\r\n                    this.timer = setTimeout($.proxy(function() {\r\n                        editTriggerPrototype.hide.apply(this, arguments);\r\n                        this._clearTimer();\r\n                    }, this), this.options.delay);\r\n                }\r\n            } else {\r\n                editTriggerPrototype.hide.apply(this, arguments);\r\n            }\r\n        },\r\n        /**\r\n         * Clear timer\r\n         * @protected\r\n         */\r\n        _clearTimer: function() {\r\n            if (this.timer) {\r\n                clearTimeout(this.timer);\r\n                this.timer = null;\r\n            }\r\n        }\r\n    }));\r\n\r\n    return $.mage.editTrigger;\r\n}));\r\n","mage/fieldset-controls.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint browser:true jquery:true */\r\ndefine([\r\n    \"jquery\",\r\n    \"jquery/ui\"\r\n], function($){\r\n    \"use strict\";\r\n\r\n    /**\r\n     * This widget will allow a control with the fieldsetResetControl widget attached to reset a set of input fields.\r\n     * The input fields to reset are defined by the inputSelector selector. The widget will store a clone of the fields\r\n     * on create, and on trigger of fieldsetReset event it resets the defined fields. The event is triggered by the\r\n     * reset control widget.\r\n     *\r\n     * For inputs of type file, the whole dom element is replaced as changing the value is a security violation\r\n     * For inputs of type checkbox or radio, the checked attribute is added or removed as appropriate\r\n     * For all others the jquery .val method is used to update to value to the original.\r\n     */\r\n    $.widget('mage.fieldsetControls', {\r\n        original: undefined,\r\n        options: {\r\n            inputSelector: '[data-reset=\"true\"]'\r\n        },\r\n        _create: function() {\r\n            this.original = this.element.find(this.options.inputSelector).clone(true);\r\n            this._bind();\r\n        },\r\n        _bind: function() {\r\n            this._on({\r\n                'fieldsetReset': '_onReset'\r\n            });\r\n        },\r\n        _onReset: function(e) {\r\n            e.stopPropagation();\r\n            // find all the ones we have to remove\r\n            var items = this.element.find(this.options.inputSelector);\r\n            // loop over replacing each one.\r\n            items.each($.proxy(function(index, item) {\r\n                if ($(item).attr('type') == 'file') {\r\n                    // Replace the current one we found with a clone of the original saved earlier\r\n                    $(item).replaceWith($(this.original[index]).clone(true));\r\n                }\r\n                else if ($(item).attr('type') == 'checkbox' || $(item).attr('type') == 'radio') {\r\n                    // Return to original state.\r\n                    if ($(this.original[index]).attr('checked') === undefined) {\r\n                        $(item).removeAttr('checked');\r\n                    }\r\n                    else {\r\n                        $(item).attr('checked',$(this.original[index]).attr('checked'));\r\n                    }\r\n                }\r\n                else {\r\n                    // Replace the value with the original\r\n                    $(item).val($(this.original[index]).val());\r\n                }\r\n            }, this));\r\n        }\r\n    });\r\n    \r\n    $.widget('mage.fieldsetResetControl', {\r\n        _create: function() {\r\n            this._bind();\r\n        },\r\n        _bind: function() {\r\n            this._on({\r\n                click: '_onClick'\r\n            });\r\n        },\r\n        _onClick: function(e) {\r\n            e.stopPropagation();\r\n            $(this.element).trigger('fieldsetReset');\r\n        }\r\n    });\r\n\r\n    return {\r\n        fieldsetControls: $.mage.fieldsetControls,\r\n        fieldsetResetControl: $.mage.fieldsetResetControl\r\n    };\r\n});\r\n","mage/ie-class-fixer.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n(function () {\r\n\r\n    var userAgent = navigator.userAgent, // user agent identifier\r\n        html = document.documentElement, // html tag\r\n        version = 9, // minimal supported version of IE\r\n        gap = ''; // gap between classes\r\n\r\n    if (html.className) { // check if neighbour class exist in html tag\r\n        gap = ' ';\r\n    } // end if\r\n\r\n    for (version; version <= 10; version++) { // loop from minimal to 10 version of IE\r\n        if (userAgent.indexOf('MSIE ' + version) > -1) { // match IE individual name\r\n            html.className += gap + 'ie' + version;\r\n        } // end if\r\n    }\r\n\r\n    if (userAgent.match(/Trident.*rv[ :]*11\\./)) { // Special case for IE11\r\n        html.className += gap + 'ie11';\r\n    } // end if\r\n\r\n})();\r\n","mage/item-table.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint jquery:true*/\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'jquery/ui'\r\n], function ($, mageTemplate) {\r\n    'use strict';\r\n\r\n    $.widget('mage.itemTable', {\r\n        options: {\r\n            addBlock: '[data-template=\"add-block\"]',\r\n            addBlockData: {},\r\n            addEvent: 'click',\r\n            addSelector: '[data-role=\"add\"]',\r\n            itemsSelector: '[data-container=\"items\"]',\r\n            keepLastRow: true\r\n        },\r\n\r\n        /**\r\n         * This method adds a new instance of the block to the items.\r\n         * @private\r\n         */\r\n        _add: function () {\r\n            var hideShowDelete,\r\n                deletableItems,\r\n                addedBlock;\r\n\r\n            // adding a new row, so increment the count to give each row a unique index\r\n            this.rowIndex++;\r\n\r\n            // make sure the block data has the rowIndex\r\n            this.options.addBlockData.rowIndex = this.rowIndex;\r\n\r\n            // render the form\r\n            addedBlock = $(this.addBlockTmpl({\r\n                data: this.options.addBlockData\r\n            }));\r\n\r\n            // add the row to the item block\r\n            this.element.find(this.options.itemsSelector).append(addedBlock);\r\n\r\n            // initialize all mage content\r\n            addedBlock.trigger('contentUpdated');\r\n\r\n            // determine all existing items in the collection\r\n            deletableItems = this._getDeletableItems();\r\n\r\n            // for the most part, show the delete mechanism, except in the case where there is only one it should not\r\n            // be deleted\r\n            hideShowDelete = 'showDelete';\r\n\r\n            if (this.options.keepLastRow && deletableItems.length === 1) {\r\n                hideShowDelete = 'hideDelete';\r\n            }\r\n\r\n            // loop through each control and perform that action on the deletable item\r\n            $.each(deletableItems, function (index) {\r\n                $(deletableItems[index]).trigger(hideShowDelete);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * This method binds elements found in this widget.\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            var handlers = {};\r\n\r\n            // since the first handler is dynamic, generate the object using array notation\r\n            handlers[this.options.addEvent + ' ' + this.options.addSelector] = '_add';\r\n            handlers.deleteItem = '_onDeleteItem';\r\n\r\n            this._on(handlers);\r\n        },\r\n\r\n        /**\r\n         * This method constructs a new widget.\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this._bind();\r\n\r\n            this.addBlockTmpl = mageTemplate(this.options.addBlock);\r\n\r\n            // nothing in the table, so indicate that\r\n            this.rowIndex = -1;\r\n\r\n            // make sure the block data is an object\r\n            if (this.options.addBlockData == null || typeof this.options.addBlockData !== 'object') {\r\n                // reset the block data to an empty object\r\n                this.options.addBlockData = {};\r\n            }\r\n\r\n            // add the first row to the table\r\n            this._add();\r\n        },\r\n\r\n        /**\r\n         * This method returns the list of widgets associated with deletable items from the container (direct children\r\n         * only).\r\n         * @private\r\n         */\r\n        _getDeletableItems: function () {\r\n            return this.element.find(this.options.itemsSelector + '> .deletableItem');\r\n        },\r\n\r\n        /**\r\n         * This method removes the item associated with the message.\r\n         * @private\r\n         */\r\n        _onDeleteItem: function (e) {\r\n            // parent elements don't need to see this event\r\n            e.stopPropagation();\r\n\r\n            // remove the deletable item\r\n            $(e.target).remove();\r\n\r\n            if (this.options.keepLastRow) {\r\n                // determine if there is only one element remaining, in which case, disable the delete mechanism on it\r\n                var deletableItems = this._getDeletableItems();\r\n\r\n                if (deletableItems.length === 1) {\r\n                    $(deletableItems[0]).trigger('hideDelete');\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.itemTable;\r\n});\r\n","mage/loader.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint browser:true */\r\n/*global console:true*/\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'jquery/ui',\r\n    'mage/translate'\r\n], function ($, mageTemplate) {\r\n    'use strict';\r\n\r\n    $.widget('mage.loader', {\r\n        loaderStarted: 0,\r\n        options: {\r\n            icon: '',\r\n            texts: {\r\n                loaderText: $.mage.__('Please wait...'),\r\n                imgAlt: $.mage.__('Loading...')\r\n            },\r\n            template:\r\n                '<div class=\"loading-mask\" data-role=\"loader\">' +\r\n                    '<div class=\"loader\">' +\r\n                        '<img alt=\"<%- data.texts.imgAlt %>\" src=\"<%- data.icon %>\">' +\r\n                        '<p><%- data.texts.loaderText %></p>' +\r\n                    '</div>' +\r\n                '</div>'\r\n\r\n        },\r\n\r\n        /**\r\n         * Loader creation\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * Bind on ajax events\r\n         * @protected\r\n         */\r\n        _bind: function () {\r\n            this._on({\r\n                'processStop': 'hide',\r\n                'processStart': 'show',\r\n                'show.loader': 'show',\r\n                'hide.loader': 'hide',\r\n                'contentUpdated.loader': '_contentUpdated'\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Verify loader present after content updated\r\n         *\r\n         * This will be cleaned up by the task MAGETWO-11070\r\n         *\r\n         * @param {EventObject} e\r\n         * @private\r\n         */\r\n        _contentUpdated: function (e) {\r\n            this.show(e);\r\n        },\r\n\r\n        /**\r\n         * Show loader\r\n         */\r\n        show: function (e, ctx) {\r\n            this._render();\r\n            this.loaderStarted++;\r\n            this.spinner.show();\r\n\r\n            if (ctx) {\r\n                this.spinner\r\n                    .css({\r\n                        width: ctx.outerWidth(),\r\n                        height: ctx.outerHeight(),\r\n                        position: 'absolute'\r\n                    })\r\n                    .position({\r\n                        my: 'top left',\r\n                        at: 'top left',\r\n                        of: ctx\r\n                    });\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Hide loader\r\n         */\r\n        hide: function () {\r\n            if (this.loaderStarted > 0) {\r\n                this.loaderStarted--;\r\n\r\n                if (this.loaderStarted === 0) {\r\n                    this.spinner.hide();\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Render loader\r\n         * @protected\r\n         */\r\n        _render: function () {\r\n            var html;\r\n\r\n            if (!this.spinnerTemplate) {\r\n                this.spinnerTemplate = mageTemplate(this.options.template);\r\n\r\n                html = $(this.spinnerTemplate({\r\n                    data: this.options\r\n                }));\r\n\r\n                html.prependTo(this.element);\r\n\r\n                this.spinner = html;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Destroy loader\r\n         */\r\n        _destroy: function () {\r\n            this.spinner.remove();\r\n        }\r\n    });\r\n\r\n    /**\r\n     * This widget takes care of registering the needed loader listeners on the body\r\n     */\r\n    $.widget('mage.loaderAjax', {\r\n        options: {\r\n            defaultContainer: '[data-container=body]',\r\n            loadingClass: 'ajax-loading'\r\n        },\r\n\r\n        _create: function () {\r\n            this._bind();\r\n            // There should only be one instance of this widget, and it should be attached\r\n            // to the body only. Having it on the page twice will trigger multiple processStarts.\r\n            if (window.console && !this.element.is(this.options.defaultContainer) && $.mage.isDevMode(undefined)) {\r\n                console.warn('This widget is intended to be attached to the body, not below.');\r\n            }\r\n        },\r\n\r\n        _bind: function () {\r\n            $(document).on({\r\n                'ajaxSend': this._onAjaxSend.bind(this),\r\n                'ajaxComplete': this._onAjaxComplete.bind(this)\r\n            });\r\n        },\r\n\r\n        _getJqueryObj: function (loaderContext) {\r\n            var ctx;\r\n            // Check to see if context is jQuery object or not.\r\n            if (loaderContext) {\r\n                if (loaderContext.jquery) {\r\n                    ctx = loaderContext;\r\n                } else {\r\n                    ctx = $(loaderContext);\r\n                }\r\n            } else {\r\n                ctx = $('[data-container=\"body\"]');\r\n            }\r\n\r\n            return ctx;\r\n        },\r\n\r\n        _onAjaxSend: function (e, jqxhr, settings) {\r\n            $(this.options.defaultContainer)\r\n                .addClass(this.options.loadingClass)\r\n                .attr({\r\n                    'aria-busy': true\r\n                })\r\n\r\n            if (settings && settings.showLoader) {\r\n                var ctx = this._getJqueryObj(settings.loaderContext);\r\n                ctx.trigger('processStart');\r\n\r\n                // Check to make sure the loader is there on the page if not report it on the console.\r\n                // NOTE that this check should be removed before going live. It is just an aid to help\r\n                // in finding the uses of the loader that maybe broken.\r\n                if (window.console && !ctx.parents('[data-role=\"loader\"]').length) {\r\n                    console.warn('Expected to start loader but did not find one in the dom');\r\n                }\r\n            }\r\n        },\r\n\r\n        _onAjaxComplete: function (e, jqxhr, settings) {\r\n            $(this.options.defaultContainer)\r\n                .removeClass(this.options.loadingClass)\r\n                .attr('aria-busy', false);\r\n\r\n            if (settings && settings.showLoader) {\r\n                this._getJqueryObj(settings.loaderContext).trigger('processStop');\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    return {\r\n        loader: $.mage.loader,\r\n        loaderAjax: $.mage.loaderAjax\r\n    };\r\n});\r\n","mage/mage.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint eqnull:true browser:true expr:true */\r\n(function (root, factory) {\r\n    'use strict';\r\n\r\n    if (typeof define === 'function' && define.amd) {\r\n        define([\r\n            'jquery',\r\n            'mage/apply/main'\r\n        ], factory);\r\n    } else {\r\n        factory(root.jQuery);\r\n    }\r\n}(this, function ($, mage) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Main namespace for Magento extensions\r\n     * @type {Object}\r\n     */\r\n    $.mage = $.mage || {};\r\n\r\n    /**\r\n     * Plugin mage, initialize components on elements\r\n     * @param {String} name - Components' path.\r\n     * @param {Object} config - Components' config.\r\n     * @returns {JQuery} Chainable.\r\n     */\r\n    $.fn.mage = function (name, config) {\r\n        config = config || {};\r\n\r\n        this.each(function (index, el) {\r\n            mage.applyFor(el, config, name);\r\n        });\r\n\r\n        return this;\r\n    };\r\n\r\n    $.extend($.mage, {\r\n        /**\r\n         * Handle all components declared via data attribute\r\n         * @return {Object} $.mage\r\n         */\r\n        init: function () {\r\n            mage.apply();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Method handling redirects and page refresh\r\n         * @param {String} url - redirect URL\r\n         * @param {(undefined|String)} type - 'assign', 'reload', 'replace'\r\n         * @param {(undefined|Number)} timeout - timeout in milliseconds before processing the redirect or reload\r\n         * @param {(undefined|Boolean)} forced - true|false used for 'reload' only\r\n         */\r\n        redirect: function (url, type, timeout, forced) {\r\n            var _redirect;\r\n\r\n            forced  = !!forced;\r\n            timeout = timeout || 0;\r\n            type    = type || 'assign';\r\n\r\n            _redirect = function () {\r\n                window.location[type](type === 'reload' ? forced : url);\r\n            };\r\n\r\n            timeout ? setTimeout(_redirect, timeout) : _redirect();\r\n        },\r\n\r\n        /**\r\n         * Checks if provided string is a valid selector.\r\n         * @param {String} selector - Selector to check.\r\n         * @returns {Boolean}\r\n         */\r\n        isValidSelector: function (selector) {\r\n            try {\r\n                document.querySelector(selector);\r\n\r\n                return true;\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Init components inside of dynamically updated elements\r\n     */\r\n    $('body').on('contentUpdated', function () {\r\n        if (mage) {\r\n            mage.apply();\r\n        }\r\n    });\r\n\r\n    return $.mage;\r\n}));\r\n","mage/menu.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    \"jquery\",\r\n    \"matchMedia\",\r\n    \"jquery/ui\",\r\n    \"jquery/jquery.mobile.custom\",\r\n    \"mage/translate\"\r\n], function ($, mediaCheck) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Menu Widget - this widget is a wrapper for the jQuery UI Menu\r\n     */\r\n    $.widget('mage.menu', $.ui.menu, {\r\n        options: {\r\n            responsive: false,\r\n            expanded: false,\r\n            delay: 300,\r\n            mediaBreakpoint: '(max-width: 768px)'\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            var self = this;\r\n\r\n            this._super();\r\n            $(window).on('resize', function () {\r\n                self.element.find('.submenu-reverse').removeClass('submenu-reverse');\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _init: function () {\r\n            this._super();\r\n            this.delay = this.options.delay;\r\n\r\n            if (this.options.expanded === true) {\r\n                this.isExpanded();\r\n            }\r\n\r\n            if (this.options.responsive === true) {\r\n                mediaCheck({\r\n                    media: this.options.mediaBreakpoint,\r\n                    entry: $.proxy(function () {\r\n                        this._toggleMobileMode();\r\n                    }, this),\r\n                    exit: $.proxy(function () {\r\n                        this._toggleDesktopMode();\r\n                    }, this)\r\n                });\r\n            }\r\n\r\n            this._assignControls()._listen();\r\n            this._setActiveMenu();\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _assignControls: function () {\r\n            this.controls = {\r\n                toggleBtn: $('[data-action=\"toggle-nav\"]'),\r\n                swipeArea: $('.nav-sections')\r\n            };\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _listen: function () {\r\n            var controls = this.controls,\r\n                toggle = this.toggle;\r\n\r\n            this._on(controls.toggleBtn, {\r\n                'click': toggle\r\n            });\r\n            this._on(controls.swipeArea, {\r\n                'swipeleft': toggle\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Toggle.\r\n         */\r\n        toggle: function () {\r\n            if ($('html').hasClass('nav-open')) {\r\n                $('html').removeClass('nav-open');\r\n                setTimeout(function () {\r\n                    $('html').removeClass('nav-before-open');\r\n                }, 300);\r\n            } else {\r\n                $('html').addClass('nav-before-open');\r\n                setTimeout(function () {\r\n                    $('html').addClass('nav-open');\r\n                }, 42);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Tries to figure out the active category for current page and add appropriate classes:\r\n         *  - 'active' class for active category\r\n         *  - 'has-active' class for all parents of active category\r\n         *\r\n         *  First, checks whether current URL is URL of category page,\r\n         *  otherwise tries to retrieve category URL in case of current URL is product view page URL\r\n         *  which has category tree path in it.\r\n         *\r\n         * @return void\r\n         * @private\r\n         */\r\n        _setActiveMenu: function () {\r\n            var currentUrl = window.location.href.split('?')[0];\r\n\r\n            if (!this._setActiveMenuForCategory(currentUrl)) {\r\n                this._setActiveMenuForProduct(currentUrl);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Looks for category with provided URL and adds 'active' CSS class to it if it was not set before.\r\n         * If menu item has parent categories, sets 'has-active' class to all af them.\r\n         *\r\n         * @param {String} url - possible category URL\r\n         * @returns {Boolean} - true if active category was founded by provided URL, otherwise return false\r\n         * @private\r\n         */\r\n        _setActiveMenuForCategory: function (url) {\r\n            var activeCategoryLink = this.element.find('a[href=\"' + url + '\"]'),\r\n                classes,\r\n                classNav;\r\n\r\n            if (!activeCategoryLink || !activeCategoryLink.hasClass('ui-corner-all')) {\r\n\r\n                //category was not found by provided URL\r\n                return false;\r\n            } else if (!activeCategoryLink.parent().hasClass('active')) {\r\n                activeCategoryLink.parent().addClass('active');\r\n                classes = activeCategoryLink.parent().attr('class');\r\n                classNav = classes.match(/(nav\\-)[0-9]+(\\-[0-9]+)+/gi);\r\n\r\n                if (classNav) {\r\n                    this._setActiveParent(classNav[0]);\r\n                }\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Sets 'has-active' CSS class to all parent categories which have part of provided class in childClassName\r\n         *\r\n         * @example\r\n         *  childClassName - 'nav-1-2-3'\r\n         *  CSS class 'has-active' will be added to categories have 'nav-1-2' and 'nav-1' classes\r\n         *\r\n         * @param {String} childClassName - Class name of active category <li> element\r\n         * @return void\r\n         * @private\r\n         */\r\n        _setActiveParent: function (childClassName) {\r\n            var parentElement,\r\n                parentClass = childClassName.substr(0, childClassName.lastIndexOf('-'));\r\n\r\n            if (parentClass.lastIndexOf('-') !== -1) {\r\n                parentElement = this.element.find('.' + parentClass);\r\n\r\n                if (parentElement) {\r\n                    parentElement.addClass('has-active');\r\n                }\r\n                this._setActiveParent(parentClass);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Tries to retrieve category URL from current URL and mark this category as active\r\n         * @see _setActiveMenuForCategory(url)\r\n         *\r\n         * @example\r\n         *  currentUrl - http://magento.com/category1/category12/product.html,\r\n         *  category URLs has extensions .phtml - http://magento.com/category1.phtml\r\n         *  method sets active category which has URL http://magento.com/category1/category12.phtml\r\n         *\r\n         * @param {String} currentUrl - current page URL without parameters\r\n         * @return void\r\n         * @private\r\n         */\r\n        _setActiveMenuForProduct: function (currentUrl) {\r\n            var categoryUrlExtension,\r\n                lastUrlSection,\r\n                possibleCategoryUrl,\r\n                //retrieve first category URL to know what extension is used for category URLs\r\n                firstCategoryUrl = this.element.find('> li a').attr('href');\r\n\r\n            if (firstCategoryUrl) {\r\n                lastUrlSection = firstCategoryUrl.substr(firstCategoryUrl.lastIndexOf('/'));\r\n                categoryUrlExtension = lastUrlSection.lastIndexOf('.') !== -1 ?\r\n                    lastUrlSection.substr(lastUrlSection.lastIndexOf('.')) : '';\r\n\r\n                possibleCategoryUrl = currentUrl.substr(0, currentUrl.lastIndexOf('/')) + categoryUrlExtension;\r\n                this._setActiveMenuForCategory(possibleCategoryUrl);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Add class for expanded option.\r\n         */\r\n        isExpanded: function () {\r\n            var subMenus = this.element.find(this.options.menus),\r\n                expandedMenus = subMenus.find('ul');\r\n\r\n            expandedMenus.addClass('expanded');\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _activate: function (event) {\r\n            window.location.href = this.active.find('> a').attr('href');\r\n            this.collapseAll(event);\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _keydown: function (event) {\r\n            var match, prev, character, skip, regex,\r\n                preventDefault = true;\r\n\r\n            /* eslint-disable max-depth */\r\n            /**\r\n             * @param {String} value\r\n             */\r\n            function escape(value) {\r\n                return value.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\r\n            }\r\n\r\n            if (this.active.closest('ul').attr('aria-expanded') != 'true') {\r\n\r\n                switch (event.keyCode) {\r\n                    case $.ui.keyCode.PAGE_UP:\r\n                        this.previousPage(event);\r\n                        break;\r\n                    case $.ui.keyCode.PAGE_DOWN:\r\n                        this.nextPage(event);\r\n                        break;\r\n                    case $.ui.keyCode.HOME:\r\n                        this._move(\"first\", \"first\", event);\r\n                        break;\r\n                    case $.ui.keyCode.END:\r\n                        this._move(\"last\", \"last\", event);\r\n                        break;\r\n                    case $.ui.keyCode.UP:\r\n                        this.previous(event);\r\n                        break;\r\n                    case $.ui.keyCode.DOWN:\r\n                        if (this.active && !this.active.is(\".ui-state-disabled\")) {\r\n                            this.expand(event);\r\n                        }\r\n                        break;\r\n                    case $.ui.keyCode.LEFT:\r\n                        this.previous(event);\r\n                        break;\r\n                    case $.ui.keyCode.RIGHT:\r\n                        this.next(event);\r\n                        break;\r\n                    case $.ui.keyCode.ENTER:\r\n                    case $.ui.keyCode.SPACE:\r\n                        this._activate(event);\r\n                        break;\r\n                    case $.ui.keyCode.ESCAPE:\r\n                        this.collapse(event);\r\n                        break;\r\n                    default:\r\n                        preventDefault = false;\r\n                        prev = this.previousFilter || \"\";\r\n                        character = String.fromCharCode(event.keyCode);\r\n                        skip = false;\r\n\r\n                        clearTimeout(this.filterTimer);\r\n\r\n                        if (character === prev) {\r\n                            skip = true;\r\n                        } else {\r\n                            character = prev + character;\r\n                        }\r\n\r\n                        regex = new RegExp(\"^\" + escape(character), \"i\");\r\n                        match = this.activeMenu.children(\".ui-menu-item\").filter(function () {\r\n                            return regex.test($(this).children(\"a\").text());\r\n                        });\r\n                        match = skip && match.index(this.active.next()) !== -1 ?\r\n                            this.active.nextAll(\".ui-menu-item\") :\r\n                            match;\r\n\r\n                        // If no matches on the current filter, reset to the last character pressed\r\n                        // to move down the menu to the first item that starts with that character\r\n                        if (!match.length) {\r\n                            character = String.fromCharCode(event.keyCode);\r\n                            regex = new RegExp(\"^\" + escape(character), \"i\");\r\n                            match = this.activeMenu.children(\".ui-menu-item\").filter(function () {\r\n                                return regex.test($(this).children(\"a\").text());\r\n                            });\r\n                        }\r\n\r\n                        if (match.length) {\r\n                            this.focus(event, match);\r\n                            if (match.length > 1) {\r\n                                this.previousFilter = character;\r\n                                this.filterTimer = this._delay(function () {\r\n                                    delete this.previousFilter;\r\n                                }, 1000);\r\n                            } else {\r\n                                delete this.previousFilter;\r\n                            }\r\n                        } else {\r\n                            delete this.previousFilter;\r\n                        }\r\n                }\r\n            } else {\r\n                switch (event.keyCode) {\r\n                    case $.ui.keyCode.DOWN:\r\n                        this.next(event);\r\n                        break;\r\n                    case $.ui.keyCode.UP:\r\n                        this.previous(event);\r\n                        break;\r\n                    case $.ui.keyCode.RIGHT:\r\n                        if (this.active && !this.active.is(\".ui-state-disabled\")) {\r\n                            this.expand(event);\r\n                        }\r\n                        break;\r\n                    case $.ui.keyCode.ENTER:\r\n                    case $.ui.keyCode.SPACE:\r\n                        this._activate(event);\r\n                        break;\r\n                    case $.ui.keyCode.LEFT:\r\n                    case $.ui.keyCode.ESCAPE:\r\n                        this.collapse(event);\r\n                        break;\r\n                    default:\r\n                        preventDefault = false;\r\n                        prev = this.previousFilter || \"\";\r\n                        character = String.fromCharCode(event.keyCode);\r\n                        skip = false;\r\n\r\n                        clearTimeout(this.filterTimer);\r\n\r\n                        if (character === prev) {\r\n                            skip = true;\r\n                        } else {\r\n                            character = prev + character;\r\n                        }\r\n\r\n                        regex = new RegExp(\"^\" + escape(character), \"i\");\r\n                        match = this.activeMenu.children(\".ui-menu-item\").filter(function () {\r\n                            return regex.test($(this).children(\"a\").text());\r\n                        });\r\n                        match = skip && match.index(this.active.next()) !== -1 ?\r\n                            this.active.nextAll(\".ui-menu-item\") :\r\n                            match;\r\n\r\n                        // If no matches on the current filter, reset to the last character pressed\r\n                        // to move down the menu to the first item that starts with that character\r\n                        if (!match.length) {\r\n                            character = String.fromCharCode(event.keyCode);\r\n                            regex = new RegExp(\"^\" + escape(character), \"i\");\r\n                            match = this.activeMenu.children(\".ui-menu-item\").filter(function () {\r\n                                return regex.test($(this).children(\"a\").text());\r\n                            });\r\n                        }\r\n\r\n                        if (match.length) {\r\n                            this.focus(event, match);\r\n                            if (match.length > 1) {\r\n                                this.previousFilter = character;\r\n                                this.filterTimer = this._delay(function () {\r\n                                    delete this.previousFilter;\r\n                                }, 1000);\r\n                            } else {\r\n                                delete this.previousFilter;\r\n                            }\r\n                        } else {\r\n                            delete this.previousFilter;\r\n                        }\r\n                }\r\n            }\r\n\r\n            if (preventDefault) {\r\n                event.preventDefault();\r\n            }\r\n        },\r\n\r\n        _toggleMobileMode: function () {\r\n            $(this.element).off('mouseenter mouseleave');\r\n            this._on({\r\n                \"click .ui-menu-item:has(a)\": function (event) {\r\n                    event.preventDefault();\r\n\r\n                    var target = $(event.target).closest(\".ui-menu-item\");\r\n\r\n                    if (!target.hasClass('level-top') || !target.has(\".ui-menu\").length) {\r\n                        window.location.href = target.find('> a').attr('href');\r\n                    }\r\n                }\r\n            });\r\n\r\n            var subMenus = this.element.find('.level-top');\r\n            $.each(subMenus, $.proxy(function (index, item) {\r\n                var category = $(item).find('> a span').not('.ui-menu-icon').text(),\r\n                    categoryUrl = $(item).find('> a').attr('href'),\r\n                    menu = $(item).find('> .ui-menu');\r\n\r\n                this.categoryLink = $('<a>')\r\n                    .attr('href', categoryUrl)\r\n                    .text($.mage.__('All ') + category);\r\n\r\n                this.categoryParent = $('<li>')\r\n                    .addClass('ui-menu-item all-category')\r\n                    .html(this.categoryLink);\r\n\r\n                if (menu.find('.all-category').length === 0) {\r\n                    menu.prepend(this.categoryParent);\r\n                }\r\n\r\n            }, this));\r\n        },\r\n\r\n        _toggleDesktopMode: function () {\r\n            this._on({\r\n                // Prevent focus from sticking to links inside menu after clicking\r\n                // them (focus should always stay on UL during navigation).\r\n                \"mousedown .ui-menu-item > a\": function (event) {\r\n                    event.preventDefault();\r\n                },\r\n                \"click .ui-state-disabled > a\": function (event) {\r\n                    event.preventDefault();\r\n                },\r\n                \"click .ui-menu-item:has(a)\": function (event) {\r\n                    var target = $(event.target).closest(\".ui-menu-item\");\r\n                    if (!this.mouseHandled && target.not(\".ui-state-disabled\").length) {\r\n                        this.select(event);\r\n\r\n                        // Only set the mouseHandled flag if the event will bubble, see #9469.\r\n                        if (!event.isPropagationStopped()) {\r\n                            this.mouseHandled = true;\r\n                        }\r\n\r\n                        // Open submenu on click\r\n                        if (target.has(\".ui-menu\").length) {\r\n                            this.expand(event);\r\n                        } else if (!this.element.is(\":focus\") && $(this.document[0].activeElement).closest(\".ui-menu\").length) {\r\n\r\n                            // Redirect focus to the menu\r\n                            this.element.trigger(\"focus\", [true]);\r\n\r\n                            // If the active item is on the top level, let it stay active.\r\n                            // Otherwise, blur the active item since it is no longer visible.\r\n                            if (this.active && this.active.parents(\".ui-menu\").length === 1) {\r\n                                clearTimeout(this.timer);\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"mouseenter .ui-menu-item\": function (event) {\r\n                    var target = $(event.currentTarget),\r\n                        ulElement,\r\n                        ulElementWidth,\r\n                        width,\r\n                        targetPageX,\r\n                        rightBound;\r\n\r\n                    if (target.has('ul')) {\r\n                        ulElement = target.find('ul');\r\n                        ulElementWidth = target.find('ul').outerWidth(true);\r\n                        width = target.outerWidth() * 2;\r\n                        targetPageX = target.offset().left;\r\n                        rightBound = $(window).width();\r\n\r\n                        if ((ulElementWidth + width + targetPageX) > rightBound) {\r\n                            ulElement.addClass('submenu-reverse');\r\n                        }\r\n                        if ((targetPageX - ulElementWidth) < 0) {\r\n                            ulElement.removeClass('submenu-reverse');\r\n                        }\r\n                    }\r\n\r\n                    // Remove ui-state-active class from siblings of the newly focused menu item\r\n                    // to avoid a jump caused by adjacent elements both having a class with a border\r\n                    target.siblings().children(\".ui-state-active\").removeClass(\"ui-state-active\");\r\n                    this.focus(event, target);\r\n                },\r\n                \"mouseleave\": function (event) {\r\n                    this.collapseAll(event, true);\r\n                },\r\n                \"mouseleave .ui-menu\": \"collapseAll\"\r\n            });\r\n\r\n            var categoryParent = this.element.find('.all-category'),\r\n                html = $('html');\r\n\r\n            categoryParent.remove();\r\n\r\n            if (html.hasClass('nav-open')) {\r\n                html.removeClass('nav-open');\r\n                setTimeout(function () {\r\n                    html.removeClass('nav-before-open');\r\n                }, 300);\r\n            }\r\n        },\r\n        _delay: function(handler, delay) {\r\n            var instance = this,\r\n                handlerProxy = function () {\r\n                return (typeof handler === \"string\" ? instance[handler] : handler)\r\n                    .apply(instance, arguments);\r\n            };\r\n            \r\n            return setTimeout(handlerProxy, delay || 0);\r\n        }\r\n    });\r\n\r\n\r\n    $.widget('mage.navigation', $.mage.menu, {\r\n\r\n        options: {\r\n            responsiveAction: 'wrap', //option for responsive handling\r\n            maxItems: null, //option to set max number of menu items\r\n            container: '#menu', //container to check against navigation length\r\n            moreText: $.mage.__('more'),\r\n            breakpoint: 768\r\n        },\r\n\r\n        _init: function () {\r\n            this._super();\r\n\r\n            var that = this,\r\n                moreMenu = $('[responsive=more]'),\r\n                responsive = this.options.responsiveAction;\r\n\r\n            this.element\r\n                .addClass('ui-menu-responsive')\r\n                .attr('responsive', 'main');\r\n\r\n            this.setupMoreMenu();\r\n            this.setMaxItems();\r\n\r\n            //check responsive option\r\n            if (responsive == \"onResize\") {\r\n                $(window).on('resize', function () {\r\n                    if ($(window).width() > that.options.breakpoint) {\r\n                        that._responsive();\r\n                        $('[responsive=more]').show();\r\n                    } else {\r\n                        that.element.children().show();\r\n                        $('[responsive=more]').hide();\r\n                    }\r\n                });\r\n            } else if (responsive == \"onReload\") {\r\n                this._responsive();\r\n            }\r\n        },\r\n\r\n        setupMoreMenu: function () {\r\n            var moreListItems = this.element.children().clone(),\r\n                moreLink = $('<a>' + this.options.moreText + '</a>');\r\n\r\n            moreListItems.hide();\r\n\r\n            moreLink.attr('href', '#');\r\n\r\n            this.moreItemsList = $('<ul>')\r\n                .append(moreListItems);\r\n\r\n            this.moreListContainer = $('<li>')\r\n                .append(moreLink)\r\n                .append(this.moreItemsList);\r\n\r\n            this.responsiveMenu = $('<ul>')\r\n                .addClass('ui-menu-more')\r\n                .attr('responsive', 'more')\r\n                .append(this.moreListContainer)\r\n                .menu({\r\n                    position: {\r\n                        my: \"right top\",\r\n                        at: \"right bottom\"\r\n                    }\r\n                })\r\n                .insertAfter(this.element);\r\n        },\r\n\r\n        _responsive: function () {\r\n            var container = $(this.options.container),\r\n                containerSize = container.width(),\r\n                width = 0,\r\n                items = this.element.children('li'),\r\n                more = $('.ui-menu-more > li > ul > li a');\r\n\r\n\r\n            items = items.map(function () {\r\n                var item = {};\r\n\r\n                item.item = $(this);\r\n                item.itemSize = $(this).outerWidth();\r\n                return item;\r\n            });\r\n\r\n            $.each(items, function (index, item) {\r\n                var itemText = items[index].item\r\n                    .find('a:first')\r\n                    .text();\r\n\r\n                width += parseInt(items[index].itemSize, null);\r\n\r\n                if (width < containerSize) {\r\n                    items[index].item.show();\r\n\r\n                    more.each(function () {\r\n                        var text = $(this).text();\r\n                        if (text === itemText) {\r\n                            $(this).parent().hide();\r\n                        }\r\n                    });\r\n                } else if (width > containerSize) {\r\n                    items[index].item.hide();\r\n\r\n                    more.each(function () {\r\n                        var text = $(this).text();\r\n                        if (text === itemText) {\r\n                            $(this).parent().show();\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        },\r\n\r\n        setMaxItems: function () {\r\n            var items = this.element.children('li'),\r\n                itemsCount = items.length,\r\n                maxItems = this.options.maxItems,\r\n                overflow = itemsCount - maxItems,\r\n                overflowItems = items.slice(overflow);\r\n\r\n            overflowItems.hide();\r\n\r\n            overflowItems.each(function () {\r\n                var itemText = $(this).find('a:first').text();\r\n\r\n                $(this).hide();\r\n\r\n                $('.ui-menu-more > li > ul > li a').each(function () {\r\n                    var text = $(this).text();\r\n                    if (text === itemText) {\r\n                        $(this).parent().show();\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    });\r\n\r\n    return {\r\n        menu: $.mage.menu,\r\n        navigation: $.mage.navigation\r\n    };\r\n});\r\n","mage/popup-window.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint browser:true jquery:true*/\r\ndefine([\r\n    \"jquery\",\r\n    \"jquery/ui\"\r\n], function($){\r\n    \"use strict\";\r\n    \r\n    $.widget('mage.popupWindow', {\r\n        options: {\r\n            centerBrowser: 0, // center window over browser window? {1 (YES) or 0 (NO)}. overrides top and left\r\n            centerScreen: 0, // center window over entire screen? {1 (YES) or 0 (NO)}. overrides top and left\r\n            height: 500, // sets the height in pixels of the window.\r\n            left: 0, // left position when the window appears.\r\n            location: 0, // determines whether the address bar is displayed {1 (YES) or 0 (NO)}.\r\n            menubar: 0, // determines whether the menu bar is displayed {1 (YES) or 0 (NO)}.\r\n            resizable: 0, // whether the window can be resized {1 (YES) or 0 (NO)}. Can also be overloaded using resizable.\r\n            scrollbars: 0, // determines whether scrollbars appear on the window {1 (YES) or 0 (NO)}.\r\n            status: 0, // whether a status line appears at the bottom of the window {1 (YES) or 0 (NO)}.\r\n            width: 500, // sets the width in pixels of the window.\r\n            windowName: null, // name of window set from the name attribute of the element that invokes the click\r\n            windowURL: null, // url used for the popup\r\n            top: 0, // top position when the window appears.\r\n            toolbar: 0 // determines whether a toolbar (includes the forward and back buttons) is displayed {1 (YES) or 0 (NO)}.\r\n        },\r\n\r\n        _create: function() {\r\n            this.element.on('click', $.proxy(this._openPopupWindow, this));\r\n        },\r\n\r\n        _openPopupWindow: function(event) {\r\n            var element = $(event.target),\r\n                settings = this.options,\r\n                windowFeatures =\r\n                    'height=' + settings.height +\r\n                        ',width=' + settings.width +\r\n                        ',toolbar=' + settings.toolbar +\r\n                        ',scrollbars=' + settings.scrollbars +\r\n                        ',status=' + settings.status +\r\n                        ',resizable=' + settings.resizable +\r\n                        ',location=' + settings.location +\r\n                        ',menuBar=' + settings.menubar,\r\n                centeredX,\r\n                centeredY;\r\n\r\n            settings.windowName = settings.windowName || element.attr('name');\r\n            settings.windowURL = settings.windowURL || element.attr('href');\r\n\r\n            if (settings.centerBrowser) {\r\n                if ($.browser.msie) { // Hacked together for IE browsers\r\n                    centeredY = (window.screenTop - 120) + ((((document.documentElement.clientHeight + 120) / 2) - (settings.height / 2)));\r\n                    centeredX = window.screenLeft + ((((document.body.offsetWidth + 20) / 2) - (settings.width / 2)));\r\n                } else {\r\n                    centeredY = window.screenY + (((window.outerHeight / 2) - (settings.height / 2)));\r\n                    centeredX = window.screenX + (((window.outerWidth / 2) - (settings.width / 2)));\r\n                }\r\n                windowFeatures += ',left=' + centeredX +',top=' + centeredY;\r\n            } else if (settings.centerScreen) {\r\n                centeredY = (screen.height - settings.height) / 2;\r\n                centeredX = (screen.width - settings.width) / 2;\r\n                windowFeatures += ',left=' + centeredX +',top=' + centeredY;\r\n            } else {\r\n                windowFeatures += ',left=' + settings.left +',top=' + settings.top;\r\n            }\r\n\r\n            window.open(settings.windowURL, settings.windowName, windowFeatures).focus();\r\n            event.preventDefault();\r\n        }\r\n    });\r\n    \r\n    return $.mage.popupWindow;\r\n});\r\n","mage/redirect-url.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint browser:true jquery:true */\r\ndefine([\r\n    \"jquery\",\r\n    \"jquery/ui\"\r\n], function($){\r\n    \"use strict\";\r\n    \r\n    $.widget('mage.redirectUrl', {\r\n        options: {\r\n            event: 'click',\r\n            url: undefined\r\n        },\r\n\r\n        /**\r\n         * This method binds elements found in this widget.\r\n         * @private\r\n         */\r\n        _bind: function() {\r\n            var handlers = {};\r\n            handlers[this.options.event] = '_onEvent';\r\n            this._on(handlers);\r\n        },\r\n\r\n        /**\r\n         * This method constructs a new widget.\r\n         * @private\r\n         */\r\n        _create: function() {\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * This method set the url for the redirect.\r\n         * @private\r\n         */\r\n        _onEvent: function(){\r\n            if (this.options.url) {\r\n                location.href = this.options.url;\r\n            } else {\r\n                location.href = this.element.val();\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.redirectUrl;\r\n});\r\n","mage/smart-keyboard-handler.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery'\r\n],function($){\r\n    'use strict';\r\n\r\n    function KeyboardHandler() {\r\n        var body = $('body'),\r\n            focusState = false,\r\n            tabFocusClass = '_keyfocus',\r\n            productsGrid = '[data-container=\"product-grid\"]',\r\n            catalogProductsGrid = $(productsGrid),\r\n            CODE_TAB = 9;\r\n\r\n        return {\r\n            apply: smartKeyboardFocus\r\n        };\r\n\r\n        /**\r\n         * Tab key onKeypress handler. Apply main logic:\r\n         *  - call differ actions onTabKeyPress and onClick\r\n         */\r\n        function smartKeyboardFocus() {\r\n            $(document).on('keydown keypress', function(event) {\r\n                if (event.which === CODE_TAB && !focusState) {\r\n                    body\r\n                        .on('focusin.keyboardHandler', onFocusInHandler)\r\n                        .on('click', onClickHandler);\r\n                }\r\n            });\r\n\r\n            // ARIA support for catalog grid products\r\n            if (catalogProductsGrid.length) {\r\n                body.on('focusin.gridProducts', productsGrid, function() {\r\n                    if (body.hasClass(tabFocusClass)) {\r\n                        $(this).addClass('active');\r\n                    }\r\n                });\r\n                body.on('focusout.gridProducts', productsGrid, function() {\r\n                    $(this).removeClass('active');\r\n                });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Handle logic, when onTabKeyPress fired at first.\r\n         * Then it changes state.\r\n         */\r\n        function onFocusInHandler () {\r\n            focusState = true;\r\n            $('body').addClass(tabFocusClass)\r\n                .off('focusin.keyboardHandler', onFocusInHandler);\r\n        }\r\n\r\n        /**\r\n         * Handle logic to remove state after onTabKeyPress to normal.\r\n         * @param {Event} event\r\n         */\r\n        function onClickHandler(event) {\r\n            focusState  = false;\r\n            $('body').removeClass(tabFocusClass)\r\n                .off('click', onClickHandler);\r\n        }\r\n    }\r\n\r\n    return new KeyboardHandler;\r\n});\r\n","mage/sticky.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint browser:true jquery:true*/\r\ndefine([\r\n    \"jquery\",\r\n    \"jquery/ui\"\r\n], function($){\r\n    \"use strict\";\r\n    \r\n    $.widget('mage.sticky', {\r\n        options: {\r\n            container: ''\r\n        },\r\n\r\n        /**\r\n         * Bind handlers to scroll event\r\n         * @private\r\n         */\r\n        _create: function() {\r\n            $(window).on({\r\n                'scroll': $.proxy(this._stick, this),\r\n                'resize': $.proxy(this.reset, this)\r\n            });\r\n\r\n            this.element.on('dimensionsChanged', $.proxy(this.reset, this));\r\n\r\n            this.reset();\r\n        },\r\n\r\n        /**\r\n         * float Block on windowScroll\r\n         * @private\r\n         */\r\n        _stick: function() {\r\n            var offset,\r\n                isStatic;\r\n\r\n            isStatic = this.element.css('position') === 'static';\r\n\r\n            if( !isStatic && this.element.is(':visible') ) {\r\n                offset = $(document).scrollTop() - this.parentOffset;\r\n\r\n                offset = Math.max( 0, Math.min( offset, this.maxOffset) );\r\n                \r\n                this.element.css( 'top', offset );\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Defines maximum offset value of the element. \r\n         * @private\r\n         */\r\n        _calculateDimens: function(){\r\n            var $parent         = this.element.parent(),\r\n                topMargin       = parseInt( this.element.css(\"margin-top\"), 10 ),\r\n                parentHeight    = $parent.height() - topMargin,\r\n                height          = this.element.innerHeight(),\r\n                maxScroll       = document.body.offsetHeight - window.innerHeight;\r\n\r\n            if(this.options.container.length > 0) {\r\n               maxScroll = $(this.options.container).height();\r\n            }\r\n\r\n            this.parentOffset   = $parent.offset().top + topMargin;\r\n            this.maxOffset      = maxScroll - this.parentOffset;\r\n\r\n            if( this.maxOffset + height >= parentHeight ){\r\n                this.maxOffset = parentHeight - height;\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Facade method that palces sticky element where it should be.\r\n         */\r\n        reset: function(){\r\n            this._calculateDimens()\r\n                ._stick();\r\n        }\r\n    });\r\n    \r\n    return $.mage.sticky;\r\n});\r\n","mage/storage.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine(['jquery', 'mage/url'], function ($, urlBuilder) {\r\n    'use strict';\r\n\r\n    return {\r\n        /**\r\n         * Perform asynchronous GET request to server.\r\n         * @param {String} url\r\n         * @param {Boolean} global\r\n         * @param {String} contentType\r\n         * @returns {Deferred}\r\n         */\r\n        get: function (url, global, contentType) {\r\n            global = global === undefined ? true : global;\r\n            contentType = contentType || 'application/json';\r\n\r\n            return $.ajax({\r\n                url: urlBuilder.build(url),\r\n                type: 'GET',\r\n                global: global,\r\n                contentType: contentType\r\n            });\r\n        },\r\n        /**\r\n         * Perform asynchronous POST request to server.\r\n         * @param {String} url\r\n         * @param {String} data\r\n         * @param {Boolean} global\r\n         * @param {String} contentType\r\n         * @returns {Deferred}\r\n         */\r\n        post: function (url, data, global, contentType) {\r\n            global = global === undefined ? true : global;\r\n            contentType = contentType || 'application/json';\r\n\r\n            return $.ajax({\r\n                url: urlBuilder.build(url),\r\n                type: 'POST',\r\n                data: data,\r\n                global: global,\r\n                contentType: contentType\r\n            });\r\n        },\r\n        /**\r\n         * Perform asynchronous PUT request to server.\r\n         * @param {String} url\r\n         * @param {String} data\r\n         * @param {Boolean} global\r\n         * @param {String} contentType\r\n         * @returns {Deferred}\r\n         */\r\n        put: function(url, data, global, contentType) {\r\n            global = global === undefined ? true : global;\r\n            contentType = contentType || 'application/json';\r\n\r\n            return $.ajax({\r\n                url: urlBuilder.build(url),\r\n                type: 'PUT',\r\n                data: data,\r\n                global: global,\r\n                contentType: contentType\r\n            });\r\n        },\r\n        /**\r\n         * Perform asynchronous DELETE request to server.\r\n         * @param {String} url\r\n         * @param {Boolean} global\r\n         * @param {String} contentType\r\n         * @returns {Deferred}\r\n         */\r\n        delete: function(url, global, contentType) {\r\n            global = global === undefined ? true : global;\r\n            contentType = contentType || 'application/json';\r\n\r\n            return $.ajax({\r\n                url: urlBuilder.build(url),\r\n                type: 'DELETE',\r\n                global: global,\r\n                contentType: contentType\r\n            });\r\n        }\r\n    };\r\n});\r\n","mage/tabs.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    \"jquery\",\r\n    \"jquery/ui\",\r\n    \"mage/mage\",\r\n    \"mage/collapsible\"\r\n], function($){\r\n    \"use strict\";\r\n        \r\n    $.widget(\"mage.tabs\", {\r\n        options: {\r\n            active: 0,\r\n            disabled: [],\r\n            openOnFocus: true,\r\n            collapsible: false,\r\n            collapsibleElement: \"[data-role=collapsible]\",\r\n            header: \"[data-role=title]\",\r\n            content: \"[data-role=content]\",\r\n            trigger: \"[data-role=trigger]\",\r\n            closedState: null,\r\n            openedState: null,\r\n            disabledState: null,\r\n            ajaxUrlElement: \"[data-ajax=true]\",\r\n            ajaxContent: false,\r\n            loadingClass: null,\r\n            saveState: false,\r\n            animate: false,\r\n            icons: {\r\n                activeHeader: null,\r\n                header: null\r\n            }\r\n        },\r\n\r\n        _create : function () {\r\n            if((typeof this.options.disabled) === \"string\") {\r\n                this.options.disabled = this.options.disabled.split(\" \").map(function(item) {\r\n                    return parseInt(item, 10);\r\n                });\r\n            }\r\n            this._processPanels();\r\n\r\n            this._handleDeepLinking();\r\n\r\n            this._processTabIndex();\r\n\r\n            this._closeOthers();\r\n\r\n            this._bind();\r\n        },\r\n\r\n        _destroy: function() {\r\n            $.each(this.collapsibles, function() {\r\n                $(this).collapsible(\"destroy\");\r\n            });\r\n        },\r\n\r\n        /**\r\n         * If deep linking is used, all sections must be closed but the one that contains the anchor.\r\n         * @private\r\n         */\r\n        _handleDeepLinking: function() {\r\n            var self = this,\r\n                anchor = window.location.hash,\r\n                isValid = $.mage.isValidSelector(anchor),\r\n                anchorId = anchor.replace(\"#\",\"\");\r\n\r\n            if (anchor && isValid) {\r\n                $.each(self.contents,function(i) {\r\n                    if($(this).attr(\"id\") === anchorId) {\r\n                        self.collapsibles.not(self.collapsibles.eq(i)).collapsible(\"forceDeactivate\");\r\n                        return false;\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * When the widget gets instantiated, the first tab that is not disabled receive focusable property\r\n         * Updated: for accessibility all tabs receive tabIndex 0\r\n         * @private\r\n         */\r\n        _processTabIndex: function() {\r\n            var self = this;\r\n            self.triggers.attr(\"tabIndex\",0);\r\n            $.each(this.collapsibles, function(i) {\r\n                if(!$(this).collapsible(\"option\",\"disabled\")) {\r\n                    self.triggers.eq(i).attr(\"tabIndex\", 0);\r\n                    return false;\r\n                }\r\n            });\r\n            $.each(this.collapsibles, function(i) {\r\n                $(this).on(\"beforeOpen\", function () {\r\n                    self.triggers.attr(\"tabIndex\",0);\r\n                    self.triggers.eq(i).attr(\"tabIndex\",0);\r\n\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Prepare the elements for instantiating the collapsible widget\r\n         * @private\r\n         */\r\n        _processPanels: function() {\r\n            this.contents = this.element.find(this.options.content);\r\n\r\n            this.collapsibles = this.element.find(this.options.collapsibleElement);\r\n\r\n            this.collapsibles\r\n                .attr('role', 'presentation')\r\n                .parent()\r\n                .attr('role', 'tablist');\r\n\r\n            this.headers = this.element.find(this.options.header);\r\n            if (this.headers.length === 0) {\r\n                this.headers = this.collapsibles;\r\n            }\r\n            this.triggers = this.element.find(this.options.trigger);\r\n            if (this.triggers.length === 0) {\r\n                this.triggers = this.headers;\r\n            }\r\n            this._callCollapsible();\r\n        },\r\n\r\n        /**\r\n         * Setting the disabled and active tabs and calling instantiation of collapsible\r\n         * @private\r\n         */\r\n        _callCollapsible: function() {\r\n            var self = this,\r\n                disabled = false,\r\n                active = false;\r\n\r\n            $.each(this.collapsibles, function(i) {\r\n                disabled = active = false;\r\n                if($.inArray(i,self.options.disabled) !== -1) {\r\n                    disabled = true;\r\n                }\r\n                if(i === self.options.active) {\r\n                    active = true;\r\n                }\r\n                self._instantiateCollapsible(this,i,active,disabled);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Instantiate collapsible\r\n         * @param element\r\n         * @param index\r\n         * @param active\r\n         * @param disabled\r\n         * @private\r\n         */\r\n        _instantiateCollapsible: function(element,index,active,disabled) {\r\n            $(element).collapsible(\r\n                $.extend({}, this.options, {\r\n                    active: active,\r\n                    disabled: disabled,\r\n                    header: this.headers.eq(index),\r\n                    content: this.contents.eq(index),\r\n                    trigger: this.triggers.eq(index)}\r\n                ));\r\n        },\r\n\r\n        /**\r\n         * Adding callback to close others tabs when one gets opened\r\n         * @private\r\n         */\r\n        _closeOthers: function() {\r\n            var self = this;\r\n            $.each(this.collapsibles, function() {\r\n                $(this).on(\"beforeOpen\", function () {\r\n                    self.collapsibles.not(this).collapsible(\"forceDeactivate\");\r\n                });\r\n            });\r\n        },\r\n\r\n        activate: function(index) {\r\n            this._toggleActivate(\"activate\",index);\r\n        },\r\n\r\n        deactivate: function(index) {\r\n            this._toggleActivate(\"deactivate\",index);\r\n        },\r\n\r\n        _toggleActivate: function(action,index) {\r\n            this.collapsibles.eq(index).collapsible(action);\r\n        },\r\n\r\n        disable: function(index) {\r\n            this._toggleEnable(\"disable\",index);\r\n        },\r\n\r\n        enable: function(index) {\r\n            this._toggleEnable(\"enable\",index);\r\n        },\r\n\r\n        _toggleEnable: function(action,index) {\r\n            if($.isArray( index )) {\r\n                var self = this;\r\n                $.each(index, function() {\r\n                    self.collapsibles.eq(this).collapsible(action);\r\n                });\r\n            } else if(index === undefined) {\r\n                this.collapsibles.collapsible(action);\r\n            } else {\r\n                this.collapsibles.eq(index).collapsible(action);\r\n            }\r\n        },\r\n\r\n        _keydown: function( event ) {\r\n            if ( event.altKey || event.ctrlKey ) {\r\n                return;\r\n            }\r\n            var keyCode = $.ui.keyCode,\r\n                toFocus = false,\r\n                toFocusIndex,\r\n                enabledTriggers = [],\r\n                length,\r\n                currentIndex,\r\n                self = this;\r\n\r\n            $.each(this.triggers, function() {\r\n                if(!self.collapsibles.eq(self.triggers.index($(this))).collapsible(\"option\",\"disabled\")) {\r\n                    enabledTriggers.push(this);\r\n                }\r\n            });\r\n            length = $(enabledTriggers).length;\r\n            currentIndex = $(enabledTriggers).index(event.target);\r\n            var nextToFocus = function(direction) {\r\n                if(length > 0) {\r\n                    if(direction === \"right\") {\r\n                        toFocusIndex = (currentIndex + 1) % length;\r\n                    } else {\r\n                        toFocusIndex = (currentIndex + length - 1) % length;\r\n                    }\r\n                    return enabledTriggers[toFocusIndex];\r\n                }\r\n                else return event.target;\r\n            };\r\n\r\n            switch ( event.keyCode ) {\r\n                case keyCode.RIGHT:\r\n                case keyCode.DOWN:\r\n                    toFocus = nextToFocus(\"right\");\r\n                    break;\r\n                case keyCode.LEFT:\r\n                case keyCode.UP:\r\n                    toFocus = nextToFocus(\"left\");\r\n                    break;\r\n                case keyCode.HOME:\r\n                    toFocus = enabledTriggers[0];\r\n                    break;\r\n                case keyCode.END:\r\n                    toFocus = enabledTriggers[length - 1];\r\n                    break;\r\n            }\r\n\r\n            if ( toFocus ) {\r\n                toFocusIndex = this.triggers.index(toFocus);\r\n                $( event.target ).attr( \"tabIndex\", -1 );\r\n                $( toFocus ).attr( \"tabIndex\", 0 );\r\n                toFocus.focus();\r\n                if(this.options.openOnFocus) {\r\n                    this.activate(toFocusIndex);\r\n                }\r\n                event.preventDefault();\r\n            }\r\n        },\r\n\r\n        _bind: function () {\r\n            var events = {\r\n                keydown: \"_keydown\"\r\n            };\r\n            this._off(this.triggers);\r\n            this._on(this.triggers, events);\r\n        }\r\n    });\r\n\r\n    return $.mage.tabs;\r\n});\r\n","mage/template.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n(function (root, factory) {\r\n    'use strict';\r\n\r\n    if (typeof define === 'function' && define.amd) {\r\n        define([\r\n            'underscore'\r\n        ], factory);\r\n    } else {\r\n        root.mageTemplate = factory(root._);\r\n    }\r\n}(this, function (_) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Checks if provided string is a valid DOM selector.\r\n     *\r\n     * @param {String} selector - Selector to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function isSelector(selector) {\r\n        try {\r\n            document.querySelector(selector);\r\n\r\n            return true;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unescapes characters used in underscore templates.\r\n     *\r\n     * @param {String} str - String to be processed.\r\n     * @returns {String}\r\n     */\r\n    function unescape(str) {\r\n        return str.replace(/&lt;%|%3C%/g, '<%').replace(/%&gt;|%%3E/g, '%>');\r\n    }\r\n\r\n    /**\r\n     * If 'tmpl' is a valid selector, returns target node's innerHTML if found.\r\n     * Else, returns empty string and emits console warning.\r\n     * If 'tmpl' is not a selector, returns 'tmpl' as is.\r\n     *\r\n     * @param {String} tmpl\r\n     * @returns {String}\r\n     */\r\n    function getTmplString(tmpl) {\r\n        if (isSelector(tmpl)) {\r\n            tmpl = document.querySelector(tmpl);\r\n\r\n            if (tmpl) {\r\n                tmpl = tmpl.innerHTML.trim();\r\n            } else {\r\n                console.warn('No template was found by selector: ' + tmpl);\r\n\r\n                tmpl = '';\r\n            }\r\n        }\r\n\r\n        return unescape(tmpl);\r\n    }\r\n\r\n    /**\r\n     * Compiles or renders template provided either\r\n     * by selector or by the template string.\r\n     *\r\n     * @param {String} tmpl - Template string or selector.\r\n     * @param {(Object|Array|Function)} [data] - Data object with which to render template.\r\n     * @returns {String|Function}\r\n     */\r\n    return function (tmpl, data) {\r\n        var render;\r\n\r\n        tmpl   = getTmplString(tmpl);\r\n        render = _.template(tmpl);\r\n\r\n        return !_.isUndefined(data) ?\r\n            render(data) :\r\n            render;\r\n    };\r\n}));\r\n","mage/terms.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    \"jquery\"\r\n], function($){\r\n\r\n    'use strict';\r\n\r\n    $.fn.terms = function(args){\r\n\r\n        // default\r\n        var defaults = {\r\n            start:0,\r\n            wrapper:'',\r\n            showAnchor:'',\r\n            effects:'slide'\r\n        };\r\n\r\n        var options = $.extend(defaults, args);\r\n\r\n        this.each(function() {\r\n            var obj = $(this),\r\n                wrapper = (options.wrapper !== '') ? '> ' + options.wrapper : '',\r\n                switches = $(wrapper + '> [data-section=\"title\"] > [data-toggle=\"switch\"]',obj),\r\n                terms = $(wrapper + '> [data-section=\"content\"]',obj),\r\n                t = switches.length,\r\n                marginTop = $(switches[0]).closest('[data-section=\"title\"]').css('position') == 'absolute' ? 0 : null,\r\n                title,\r\n                current,\r\n\r\n                init = function() {\r\n                    if (t > 0) {\r\n                        if($(switches[0]).closest('[data-section=\"title\"]').css('display')=='table-cell') {\r\n                            obj.addClass('adjusted');\r\n                            var linksList;\r\n                            if (obj[0].tagName=='DL') {\r\n                                linksList = $('<dd>');\r\n                            } else {\r\n                                linksList = $('<div>');\r\n                            }\r\n                            linksList.addClass('sections-nav');\r\n                            obj.prepend(linksList);\r\n\r\n                            for (var i=0; i < t; i++) {\r\n                                title = $(switches[i]).html();\r\n                                var classes = $(switches[i]).closest('[data-section=\"title\"]').attr('class');\r\n                                var dataSection = $(switches[i]).closest('[data-section=\"title\"]').attr('data-section');\r\n                                var itemHref = $(switches[i]).attr('href');\r\n                                var itemClass = $(switches[i]).attr('class');\r\n                                $(switches[i]).parent('[data-section=\"title\"]').hide();\r\n                                switches[i] = $('<a/>',{\r\n                                    href: itemHref,\r\n                                    'class' : itemClass,\r\n                                    html: title\r\n                                }).appendTo(linksList);\r\n                                $(switches[i]).wrap('<strong class=\"'+classes+'\" data-section=\"'+dataSection+'\" />');\r\n                            }\r\n                        }\r\n                        $(switches).each(function(ind,el){\r\n                            $(el).click(function(event){\r\n                                event.preventDefault();\r\n                                showItem(ind);\r\n                            });\r\n                            if (marginTop !== null) {\r\n                                $(el).closest('[data-section=\"title\"]').css({'top' : marginTop + 'px'});\r\n                                marginTop = marginTop + $(el).closest('[data-section=\"title\"]').outerHeight(true);\r\n                                obj.css({'min-height' : marginTop + 'px' });\r\n                            }\r\n                        });\r\n\r\n                        var fromUrl = false;\r\n                        if (window.location.hash.length > 0) {\r\n                            $(terms).each(function(ind,el) {\r\n                                if ( '#info-'+$(el).attr('id') == window.location.hash) {\r\n                                    showItem(ind);\r\n                                    $('html, body').animate({\r\n                                        scrollTop: $(switches[ind]).offset().top\r\n                                    }, 700);\r\n                                    fromUrl = true;\r\n                                }\r\n                            });\r\n                        }\r\n                        if (fromUrl === false) {\r\n                            if ( options.start % 1 === 0 ) {\r\n                                current = options.start + 1;\r\n                                showItem(options.start);\r\n                            } else {\r\n                                $(terms).each(function(ind,el) {\r\n                                    if ( $(el).attr('id') == options.start) {\r\n                                        current = ind + 1;\r\n                                        showItem(ind);\r\n                                        $('html, body').animate({\r\n                                            scrollTop: $(switches[ind]).offset().top\r\n                                        }, 700);\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n\r\n\r\n                showItem = function(item) {\r\n                    if (item != current && !$(switches[item]).closest('[data-section=\"title\"]').hasClass('disabled') ) {\r\n                        $(switches).closest('[data-section=\"title\"]').removeClass('active');\r\n                        if (options.wrapper !== '') {\r\n                            $(switches).parent().parent().removeClass('active');\r\n                        }\r\n                        $(terms).removeClass('active');\r\n                        $(switches[item]).closest('[data-section=\"title\"]').addClass('active');\r\n                        if (options.wrapper !== '') {\r\n                            $(switches[current]).parent().parent().addClass('active');\r\n                        }\r\n                        $(terms[item]).addClass('active');\r\n\r\n                        /*if ($(terms[item]).attr('id')) {\r\n                         scr = document.body.scrollTop;\r\n                         window.location.hash='#tab-' + $(terms[item]).attr('id');\r\n                         document.body.scrollTop = scr;\r\n                         }*/\r\n                        current = item;\r\n                    } else if (\r\n                    // Check if this is accordion width as criteria for now\r\n                        (obj.attr('data-sections') == 'accordion' ||\r\n                            $(switches[item]).closest('[data-section=\"title\"]').css('width') == obj.css('width')\r\n                            ) &&\r\n                            item == current && !$(switches[item]).closest('[data-section=\"title\"]').hasClass('disabled')\r\n                        ) {\r\n                        $(switches).closest('[data-section=\"title\"]').removeClass('active');\r\n                        if (options.wrapper !== '') {\r\n                            $(switches).parent().parent().removeClass('active');\r\n                        }\r\n                        $(terms).removeClass('active');\r\n                        current = -1;\r\n                    }\r\n                };\r\n\r\n            init();\r\n        });\r\n    };\r\n\r\n    return function(data, el){\r\n        $(el).terms(data);\r\n    };\r\n});\r\n","mage/toggle.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint browser:true jquery:true*/\r\ndefine([\r\n    \"jquery\",\r\n    \"jquery/ui\"\r\n], function($){\r\n    \"use strict\";\r\n\r\n    $.widget(\"mage.toggleAdvanced\", {\r\n\r\n        options: {\r\n            baseToggleClass: \"active\"      // Class used to be toggled on clicked element\r\n        },\r\n\r\n        /**\r\n         * Toggle creation\r\n         * @private\r\n         */\r\n        _create: function() {\r\n            this.beforeCreate();\r\n            this._bindCore();\r\n            this.afterCreate();\r\n        },\r\n\r\n        /**\r\n         *  Core bound events & setup\r\n         * @protected\r\n         */\r\n        _bindCore: function() {\r\n            var widget = this;\r\n            this.element.on('click', $.proxy(function(e) {\r\n                widget._onClick();\r\n                e.preventDefault();\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * Binding Click event\r\n         *\r\n         * @protected\r\n         */\r\n        _onClick: function() {\r\n            this._prepareOptions();\r\n            this._toggleSelectors();\r\n        },\r\n\r\n        /**\r\n         * Method used to look for data attributes to override default options\r\n         *\r\n         * @protected\r\n         */\r\n        _prepareOptions: function() {\r\n            this.options.baseToggleClass = (this.element.data('base-toggle-class')) ?\r\n                this.element.data('base-toggle-class') :this.options.baseToggleClass;\r\n        },\r\n\r\n        /**\r\n         * Method responsible for hiding and revealing specified DOM elements\r\n         * Toggle the class on clicked element\r\n         *\r\n         * @protected\r\n         */\r\n        _toggleSelectors: function () {\r\n            this.element.toggleClass(this.options.baseToggleClass);\r\n        },\r\n\r\n        /**\r\n         * Method used to inject 3rd party functionality before create\r\n         * @public\r\n         */\r\n        beforeCreate: function() {},\r\n\r\n        /**\r\n         * Method used to inject 3rd party functionality after create\r\n         * @public\r\n         */\r\n        afterCreate: function() {}\r\n    });\r\n\r\n    // Extension for mage.toggle - Adding selectors support for other DOM elements we wish to toggle\r\n    $.widget('mage.toggleAdvanced', $.mage.toggleAdvanced, {\r\n\r\n        options: {\r\n            selectorsToggleClass: \"hidden\",    // Class used to be toggled on selectors DOM elements\r\n            toggleContainers: null\r\n        },\r\n\r\n        /**\r\n         * Method responsible for hiding and revealing specified DOM elements\r\n         * If data-toggle-selectors attribute is present - toggle will be done on these selectors\r\n         * Otherwise we toggle the class on clicked element\r\n         *\r\n         * @protected\r\n         * @override\r\n         */\r\n        _toggleSelectors: function () {\r\n            this._super();\r\n            if (this.options.toggleContainers) {\r\n                $(this.options.toggleContainers).toggleClass(this.options.selectorsToggleClass);\r\n            } else {\r\n                this.element.toggleClass(this.options.baseToggleClass);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Method used to look for data attributes to override default options\r\n         *\r\n         * @protected\r\n         * @override\r\n         */\r\n        _prepareOptions: function() {\r\n            this.options.selectorsToggleClass = (this.element.data('selectors-toggle-class')) ?\r\n                this.element.data('selectors-toggle-class') :this.options.selectorsToggleClass;\r\n            this.options.toggleContainers = (this.element.data('toggle-selectors')) ?\r\n                this.element.data('toggle-selectors') :this.options.toggleContainers;\r\n            this._super();\r\n        }\r\n    });\r\n\r\n    // Extension for mage.toggle - Adding label toggle\r\n    $.widget('mage.toggleAdvanced', $.mage.toggleAdvanced, {\r\n\r\n        options: {\r\n            newLabel: null,             // Text of the new label to be used on toggle\r\n            curLabel: null,             // Text of the old label to be used on toggle\r\n            currentLabelElement: null   // Current label container\r\n        },\r\n\r\n        /**\r\n         * Binding Click event\r\n         *\r\n         * @protected\r\n         * @override\r\n         */\r\n        _onClick: function() {\r\n            this._super();\r\n            this._toggleLabel();\r\n        },\r\n\r\n        /**\r\n         * Method responsible for replacing clicked element labels\r\n         * @protected\r\n         */\r\n        _toggleLabel: function() {\r\n            if (this.options.newLabel) {\r\n                var cachedLabel = this.options.newLabel,\r\n                    currentLabelSelector = (this.options.currentLabelElement) ?\r\n                        $(this.options.currentLabelElement) : this.element;\r\n\r\n                this.element.data('toggle-label', this.options.curLabel);\r\n                currentLabelSelector.html(this.options.newLabel);\r\n\r\n                this.options.curLabel = this.options.newLabel;\r\n                this.options.newLabel = cachedLabel;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Method used to look for data attributes to override default options\r\n         *\r\n         * @protected\r\n         * @override\r\n         */\r\n        _prepareOptions: function() {\r\n            this.options.newLabel = (this.element.data('toggle-label')) ?\r\n                this.element.data('toggle-label') : this.options.newLabel;\r\n\r\n            this.options.currentLabelElement = (this.element.data('current-label-el')) ?\r\n                this.element.data('current-label-el') : this.options.currentLabelElement;\r\n\r\n            if(!this.options.currentLabelElement) {\r\n                this.options.currentLabelElement = this.element;\r\n            }\r\n\r\n            this.options.curLabel = $(this.options.currentLabelElement).html();\r\n\r\n            this._super();\r\n        }\r\n    });\r\n    \r\n    return $.mage.toggleAdvanced;\r\n});\r\n","mage/tooltip.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    \"jquery\",\r\n    \"jquery/ui\"\r\n], function($){\r\n\t'use strict';\r\n\t\r\n\t//Widget Wrapper\r\n\t$.widget('mage.tooltip', $.ui.tooltip, {\r\n\t});\r\n\r\n    return $.mage.tooltip;\r\n});\r\n","mage/translate-inline.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint browser:true*/\r\n(function (root, factory) {\r\n    'use strict';\r\n\r\n    if (typeof define === 'function' && define.amd) {\r\n        define([\r\n            \"jquery\",\r\n            \"mage/template\",\r\n            \"jquery/ui\",\r\n            \"mage/translate\"\r\n        ], factory);\r\n    } else {\r\n        factory(root.jQuery, root.mageTemplate);\r\n    }\r\n}(this, function ($, mageTemplate) {\r\n    'use strict';\r\n\r\n    $.widget(\"mage.translateInline\", $.ui.dialog, {\r\n        options: {\r\n            translateForm: {\r\n                template: '#translate-form-template',\r\n                data: {\r\n                    id: 'translate-inline-form',\r\n                    message: 'Please refresh the page to see your changes after submitting this form.'\r\n                }\r\n            },\r\n            autoOpen : false,\r\n            translateArea: null,\r\n            modal: true,\r\n            dialogClass: 'popup-window',\r\n            width: '75%',\r\n            title: $.mage.__('Translate'),\r\n            height: 470,\r\n            position: {\r\n                my: 'left top',\r\n                at: 'center top',\r\n                of: 'body'\r\n            },\r\n            buttons: [{\r\n                text: $.mage.__('Submit'),\r\n                'class': 'action-primary',\r\n                click: function(e) {\r\n                    $(this).translateInline('submit');\r\n                }\r\n            },\r\n            {\r\n                text: $.mage.__('Close'),\r\n                'class': 'action-close',\r\n                click: function() {\r\n                    $(this).translateInline('close');\r\n                }\r\n            }],\r\n            open: function () {\r\n                $(this).closest('.ui-dialog').addClass('ui-dialog-active');\r\n\r\n                var topMargin = jQuery(this).closest('.ui-dialog').children('.ui-dialog-titlebar').outerHeight() + 45;\r\n                jQuery(this).closest('.ui-dialog').css('margin-top', topMargin);\r\n            },\r\n            close: function () {\r\n                $(this).closest('.ui-dialog').removeClass('ui-dialog-active');\r\n            }\r\n        },\r\n        /**\r\n         * Translate Inline creation\r\n         * @protected\r\n         */\r\n        _create: function() {\r\n            this.tmpl = mageTemplate(this.options.translateForm.template);\r\n            (this.options.translateArea && $(this.options.translateArea).length ?\r\n                $(this.options.translateArea) :\r\n                this.element.closest('body'))\r\n                    .on('edit.editTrigger', $.proxy(this._onEdit, this));\r\n            this._super();\r\n        },\r\n\r\n        _prepareContent: function(templateData) {\r\n            var data = $.extend({\r\n                items: templateData,\r\n                escape: $.mage.escapeHTML\r\n            }, this.options.translateForm.data);\r\n            this.data = data;\r\n\r\n            return $(this.tmpl({\r\n                data: data\r\n            }));\r\n        },\r\n\r\n        /**\r\n         * Render translation form and open dialog\r\n         * @param {Object} event object\r\n         * @protected\r\n         */\r\n        _onEdit: function(e) {\r\n            this.target = e.target;\r\n            this.element.html(this._prepareContent($(e.target).data('translate')));\r\n            this.open(e);\r\n        },\r\n\r\n        submit: function() {\r\n            if (this.formIsSubmitted) {\r\n                return;\r\n            }\r\n            this._formSubmit();\r\n        },\r\n        /**\r\n         * Send ajax request on form submit\r\n         * @protected\r\n         */\r\n        _formSubmit: function() {\r\n            this.formIsSubmitted = true;\r\n            var parameters = $.param({area: this.options.area}) +\r\n                '&' + $('#' + this.options.translateForm.data.id).serialize();\r\n\r\n            $.ajax({\r\n                url: this.options.ajaxUrl,\r\n                type: 'POST',\r\n                data: parameters,\r\n                loaderContext: this.element,\r\n                showLoader: true\r\n            }).complete($.proxy(this._formSubmitComplete, this));\r\n        },\r\n\r\n        _formSubmitComplete: function(response) {\r\n            this.close();\r\n            this.formIsSubmitted = false;\r\n            this._updatePlaceholder(response.responseJSON[this.data.items[0]['original']])\r\n        },\r\n\r\n        _updatePlaceholder: function(newValue) {\r\n            var target = jQuery(this.target);\r\n            target.data('translate')[0]['shown'] = newValue;\r\n            target.data('translate')[0]['translated'] = newValue;\r\n            target.html(newValue);\r\n        },\r\n\r\n        /**\r\n         * Destroy translateInline\r\n         */\r\n        destroy: function() {\r\n            this.element.off('.editTrigger');\r\n            this._super();\r\n        }\r\n    });\r\n    /*\r\n     * @TODO move the \"escapeHTML\" method into the file with global utility functions\r\n     */\r\n    $.extend(true, $, {\r\n        mage: {\r\n            escapeHTML: function(str) {\r\n                return str ?\r\n                    jQuery('<div/>').text(str).html().replace(/\"/g, '&quot;'):\r\n                    false;\r\n            }\r\n        }\r\n    });\r\n\r\n    $.widget('ui.button', $.ui.button, {\r\n        _create: function () {\r\n            this._super();\r\n            /**\r\n             * Decode HTML entities to prevent incorrect rendering of dialog button label\r\n             */\r\n            this.options.label = this.options.label\r\n                ? jQuery('<div/>').html(this.options.label).text()\r\n                : this.options.label;\r\n            /**\r\n             * Reset button to make decoded label visible\r\n             */\r\n            this._resetButton();\r\n        }\r\n    });\r\n\r\n    $.widget('ui.dialog', $.ui.dialog, {\r\n        /**\r\n         * Prevent rendering of dialog title as escaped HTML\r\n         */\r\n        _title: function (title) {\r\n            this._super(title);\r\n            if (this.options.title) {\r\n                title.html(this.options.title);\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.translateInline;\r\n}));\r\n","mage/translate.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint browser:true jquery:true*/\r\n(function (factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define([\r\n            \"jquery\",\r\n            \"mage/mage\"\r\n        ], factory);\r\n    } else {\r\n        factory(jQuery);\r\n    }\r\n}(function ($) {\r\n    $.extend(true, $, {\r\n        mage: {\r\n            translate: (function() {\r\n                /**\r\n                 * Key-value translations storage\r\n                 * @type {Object}\r\n                 * @private\r\n                 */\r\n                var _data = {};\r\n\r\n                /**\r\n                 * Add new translation (two string parameters) or several translations (object)\r\n                 * @param {(Object.<string>|string)}\r\n                 * @param {string}\r\n                 */\r\n                this.add = function() {\r\n                    if (arguments.length > 1) {\r\n                        _data[arguments[0]] = arguments[1];\r\n                    } else if (typeof arguments[0] === 'object') {\r\n                        $.extend(_data, arguments[0]);\r\n                    }\r\n                };\r\n\r\n                /**\r\n                 * Make a translation with parsing (to handle case when _data represents tuple)\r\n                 * @param {string} text\r\n                 * @return {string}\r\n                 */\r\n                this.translate = function (text) {\r\n                    return _data[text] ? _data[text] : text;\r\n                };\r\n\r\n                return this;\r\n            }())\r\n        }\r\n    });\r\n    /**\r\n     * Sort alias for jQuery.mage.translate.translate method\r\n     * @type {function(string): string}\r\n     */\r\n    $.mage.__ = $.proxy($.mage.translate.translate, $.mage.translate);\r\n\r\n    return $.mage.__;\r\n}));\r\n","mage/trim-input.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.trimInput', {\r\n        options: {\r\n            cache: {}\r\n        },\r\n\r\n        /**\r\n         * Widget initialization\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this.options.cache.input = $(this.element);\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * Event binding, will monitor change, keyup and paste events.\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            if (this.options.cache.input.length) {\r\n                this._on(this.options.cache.input, {\r\n                    'change': this._trimInput,\r\n                    'keyup': this._trimInput,\r\n                    'paste': this._trimInput\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Trim value\r\n         * @private\r\n         */\r\n        _trimInput: function () {\r\n            var input = this._getInputValue().trim();\r\n\r\n            this.options.cache.input.val(input);\r\n        },\r\n\r\n        /**\r\n         * Get input value\r\n         * @returns {*}\r\n         * @private\r\n         */\r\n        _getInputValue: function () {\r\n            return this.options.cache.input.val();\r\n        }\r\n    });\r\n\r\n    return $.mage.trimInput;\r\n});\r\n","mage/url.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint regexdash:true eqnull:true browser:true jquery:true*/\r\ndefine([], function () {\r\n    var baseUrl = '';\r\n    return {\r\n        setBaseUrl: function (url) {\r\n            baseUrl = url;\r\n        },\r\n        build: function(path) {\r\n            if (path.indexOf(baseUrl) != -1) {\r\n                return path;\r\n            }\r\n            return baseUrl + path;\r\n        }\r\n    }\r\n});\r\n","mage/validation.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint regexdash:true eqnull:true browser:true jquery:true*/\r\n(function (factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define([\r\n            'jquery',\r\n            'jquery/ui',\r\n            'jquery/validate',\r\n            'mage/translate'\r\n        ], factory);\r\n    } else {\r\n        factory(jQuery);\r\n    }\r\n}(function ($) {\r\n    \"use strict\";\r\n    $.extend(true, $, {\r\n        // @TODO: Move methods 'isEmpty', 'isEmptyNoTrim', 'parseNumber', 'stripHtml' in file with utility functions\r\n        mage: {\r\n            /**\r\n             * Check if string is empty with trim\r\n             * @param {string} value\r\n             */\r\n            isEmpty: function (value) {\r\n                return (value === '' || value === undefined || (value == null) || (value.length === 0) || /^\\s+$/.test(value));\r\n            },\r\n\r\n            /**\r\n             * Check if string is empty no trim\r\n             * @param {string} value\r\n             */\r\n            isEmptyNoTrim: function (value) {\r\n                return (value === '' || (value == null) || (value.length === 0));\r\n            },\r\n\r\n\r\n            /**\r\n             * Checks if {value} is between numbers {from} and {to}\r\n             * @param {string} value\r\n             * @param {string} from\r\n             * @param {string} to\r\n             * @returns {boolean}\r\n             */\r\n            isBetween: function (value, from, to) {\r\n                return ($.mage.isEmpty(from) || value >= $.mage.parseNumber(from)) &&\r\n                    ($.mage.isEmpty(to) || value <= $.mage.parseNumber(to));\r\n            },\r\n\r\n            /**\r\n             * Parse price string\r\n             * @param {string} value\r\n             */\r\n            parseNumber: function (value) {\r\n                if (typeof value !== 'string') {\r\n                    return parseFloat(value);\r\n                }\r\n                var isDot = value.indexOf('.');\r\n                var isComa = value.indexOf(',');\r\n                if (isDot !== -1 && isComa !== -1) {\r\n                    if (isComa > isDot) {\r\n                        value = value.replace('.', '').replace(',', '.');\r\n                    } else {\r\n                        value = value.replace(',', '');\r\n                    }\r\n                } else if (isComa !== -1) {\r\n                    value = value.replace(',', '.');\r\n                }\r\n                return parseFloat(value);\r\n            },\r\n\r\n            /**\r\n             * Removes HTML tags and space characters, numbers and punctuation.\r\n             * @param value Value being stripped.\r\n             * @return {*}\r\n             */\r\n            stripHtml: function (value) {\r\n                return value.replace(/<.[^<>]*?>/g, ' ').replace(/&nbsp;|&#160;/gi, ' ')\r\n                    .replace(/[0-9.(),;:!?%#$'\"_+=\\/-]*/g, '');\r\n            }\r\n        }\r\n    });\r\n\r\n    $.validator.addMethod = function (name, method, message, dontSkip) {\r\n        $.validator.methods[name] = method;\r\n        $.validator.messages[name] = message !== undefined ? message : $.validator.messages[name];\r\n\r\n        if (method.length < 3 || dontSkip) {\r\n            $.validator.addClassRules(name, $.validator.normalizeRule(name));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Javascript object with credit card types\r\n     * 0 - regexp for card number\r\n     * 1 - regexp for cvn\r\n     * 2 - check or not credit card number trough Luhn algorithm by\r\n     */\r\n    var creditCartTypes = {\r\n        'SO': [new RegExp('^(6334[5-9]([0-9]{11}|[0-9]{13,14}))|(6767([0-9]{12}|[0-9]{14,15}))$'), new RegExp('^([0-9]{3}|[0-9]{4})?$'), true],\r\n        'SM': [new RegExp('(^(5[0678])[0-9]{11,18}$)|(^(6[^05])[0-9]{11,18}$)|(^(601)[^1][0-9]{9,16}$)|(^(6011)[0-9]{9,11}$)|(^(6011)[0-9]{13,16}$)|(^(65)[0-9]{11,13}$)|(^(65)[0-9]{15,18}$)|(^(49030)[2-9]([0-9]{10}$|[0-9]{12,13}$))|(^(49033)[5-9]([0-9]{10}$|[0-9]{12,13}$))|(^(49110)[1-2]([0-9]{10}$|[0-9]{12,13}$))|(^(49117)[4-9]([0-9]{10}$|[0-9]{12,13}$))|(^(49118)[0-2]([0-9]{10}$|[0-9]{12,13}$))|(^(4936)([0-9]{12}$|[0-9]{14,15}$))'), new RegExp('^([0-9]{3}|[0-9]{4})?$'), true],\r\n        'VI': [new RegExp('^4[0-9]{12}([0-9]{3})?$'), new RegExp('^[0-9]{3}$'), true],\r\n        'MC': [new RegExp('^(?:5[1-5][0-9]{2}|222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}$'), new RegExp('^[0-9]{3}$'), true],\r\n        'AE': [new RegExp('^3[47][0-9]{13}$'), new RegExp('^[0-9]{4}$'), true],\r\n        'DI': [new RegExp('^(6011(0|[2-4]|74|7[7-9]|8[6-9]|9)|6(4[4-9]|5))\\\\d*$'), new RegExp('^[0-9]{3}$'), true],\r\n        'JCB': [new RegExp('^35(2[8-9]|[3-8])\\\\d*$'), new RegExp('^[0-9]{3}$'), true],\r\n        'DN': [new RegExp('^(3(0[0-5]|095|6|[8-9]))\\\\d*$'), new RegExp('^[0-9]{3}$'), true],\r\n        'UN': [new RegExp('^(622(1(2[6-9]|[3-9])|[3-8]|9([[0-1]|2[0-5]))|62[4-6]|628([2-8]))\\\\d*?$'), new RegExp('^[0-9]{3}$'), true],\r\n        'MI': [new RegExp('^(5(0|[6-9])|63|67(?!59|6770|6774))\\\\d*$'), new RegExp('^[0-9]{3}$'), true],\r\n        'MD': [new RegExp('^6759(?!24|38|40|6[3-9]|70|76)|676770|676774\\\\d*$'), new RegExp('^[0-9]{3}$'), true]\r\n    };\r\n\r\n    /**\r\n     * validate credit card number using mod10\r\n     * @param s\r\n     * @return {Boolean}\r\n     */\r\n    function validateCreditCard(s) {\r\n        // remove non-numerics\r\n        var v = \"0123456789\",\r\n            w = \"\", i, j, k, m, c, a, x;\r\n        for (i = 0; i < s.length; i++) {\r\n            x = s.charAt(i);\r\n            if (v.indexOf(x, 0) != -1)\r\n                w += x;\r\n        }\r\n        // validate number\r\n        j = w.length / 2;\r\n        k = Math.floor(j);\r\n        m = Math.ceil(j) - k;\r\n        c = 0;\r\n        for (i = 0; i < k; i++) {\r\n            a = w.charAt(i * 2 + m) * 2;\r\n            c += a > 9 ? Math.floor(a / 10 + a % 10) : a;\r\n        }\r\n        for (i = 0; i < k + m; i++) {\r\n            c += w.charAt(i * 2 + 1 - m) * 1;\r\n        }\r\n        return (c % 10 === 0);\r\n    }\r\n\r\n    /**\r\n     * validate all table required inputs at once, using single hidden input\r\n     * @param {String} value\r\n     * @param {HTMLElement} element\r\n     *\r\n     * @return {Boolean}\r\n     */\r\n    function tableSingleValidation(value, element) {\r\n        var empty = $(element).closest('table')\r\n            .find('input.required-option:visible')\r\n            .filter(function (i, el) {\r\n                return $.mage.isEmpty(el.value);\r\n            })\r\n            .length;\r\n        return empty === 0;\r\n    }\r\n\r\n    /**\r\n     * Collection of validation rules including rules from additional-methods.js\r\n     * @type {Object}\r\n     */\r\n    var rules = {\r\n        \"max-words\": [\r\n            function (value, element, params) {\r\n                return this.optional(element) || $.mage.stripHtml(value).match(/\\b\\w+\\b/g).length < params;\r\n            },\r\n            $.mage.__('Please enter {0} words or less.')\r\n        ],\r\n        \"min-words\": [\r\n            function (value, element, params) {\r\n                return this.optional(element) || $.mage.stripHtml(value).match(/\\b\\w+\\b/g).length >= params;\r\n            },\r\n            $.mage.__('Please enter at least {0} words.')\r\n        ],\r\n        \"range-words\": [\r\n            function (value, element, params) {\r\n                return this.optional(element) ||\r\n                    $.mage.stripHtml(value).match(/\\b\\w+\\b/g).length >= params[0] &&\r\n                    value.match(/bw+b/g).length < params[1];\r\n            },\r\n            $.mage.__('Please enter between {0} and {1} words.')\r\n        ],\r\n        \"letters-with-basic-punc\": [\r\n            function (value, element) {\r\n                return this.optional(element) || /^[a-z\\-.,()'\\\"\\s]+$/i.test(value);\r\n            },\r\n            $.mage.__('Letters or punctuation only please')\r\n        ],\r\n        \"alphanumeric\": [\r\n            function (value, element) {\r\n                return this.optional(element) || /^\\w+$/i.test(value);\r\n            },\r\n            $.mage.__('Letters, numbers, spaces or underscores only please')\r\n        ],\r\n        \"letters-only\": [\r\n            function (value, element) {\r\n                return this.optional(element) || /^[a-z]+$/i.test(value);\r\n            },\r\n            $.mage.__('Letters only please')\r\n        ],\r\n        \"no-whitespace\": [\r\n            function (value, element) {\r\n                return this.optional(element) || /^\\S+$/i.test(value);\r\n            },\r\n            $.mage.__('No white space please')\r\n        ],\r\n        \"zip-range\": [\r\n            function (value, element) {\r\n                return this.optional(element) || /^90[2-5]-\\d{2}-\\d{4}$/.test(value);\r\n            },\r\n            $.mage.__('Your ZIP-code must be in the range 902xx-xxxx to 905-xx-xxxx')\r\n        ],\r\n        \"integer\": [\r\n            function (value, element) {\r\n                return this.optional(element) || /^-?\\d+$/.test(value);\r\n            },\r\n            $.mage.__('A positive or negative non-decimal number please')\r\n        ],\r\n        \"vinUS\": [\r\n            function (v) {\r\n                if (v.length !== 17) {\r\n                    return false;\r\n                }\r\n                var i, n, d, f, cd, cdv;\r\n                var LL = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"P\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\r\n                var VL = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 7, 9, 2, 3, 4, 5, 6, 7, 8, 9];\r\n                var FL = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2];\r\n                var rs = 0;\r\n                for (i = 0; i < 17; i++) {\r\n                    f = FL[i];\r\n                    d = v.slice(i, i + 1);\r\n                    if (i === 8) {\r\n                        cdv = d;\r\n                    }\r\n                    if (!isNaN(d)) {\r\n                        d *= f;\r\n                    } else {\r\n                        for (n = 0; n < LL.length; n++) {\r\n                            if (d.toUpperCase() === LL[n]) {\r\n                                d = VL[n];\r\n                                d *= f;\r\n                                if (isNaN(cdv) && n === 8) {\r\n                                    cdv = LL[n];\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    rs += d;\r\n                }\r\n                cd = rs % 11;\r\n                if (cd === 10) {\r\n                    cd = \"X\";\r\n                }\r\n                if (cd === cdv) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            $.mage.__('The specified vehicle identification number (VIN) is invalid.')\r\n        ],\r\n        \"dateITA\": [\r\n            function (value, element) {\r\n                var check = false;\r\n                var re = /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/;\r\n                if (re.test(value)) {\r\n                    var adata = value.split('/');\r\n                    var gg = parseInt(adata[0], 10);\r\n                    var mm = parseInt(adata[1], 10);\r\n                    var aaaa = parseInt(adata[2], 10);\r\n                    var xdata = new Date(aaaa, mm - 1, gg);\r\n                    if ((xdata.getFullYear() === aaaa) &&\r\n                        (xdata.getMonth() === mm - 1) && (xdata.getDate() === gg )) {\r\n                        check = true;\r\n                    } else {\r\n                        check = false;\r\n                    }\r\n                } else {\r\n                    check = false;\r\n                }\r\n                return this.optional(element) || check;\r\n            },\r\n            $.mage.__('Please enter a correct date')\r\n        ],\r\n        \"dateNL\": [\r\n            function (value, element) {\r\n                return this.optional(element) || /^\\d\\d?[\\.\\/-]\\d\\d?[\\.\\/-]\\d\\d\\d?\\d?$/.test(value);\r\n            },\r\n            'Vul hier een geldige datum in.'\r\n        ],\r\n        \"time\": [\r\n            function (value, element) {\r\n                return this.optional(element) || /^([01]\\d|2[0-3])(:[0-5]\\d){0,2}$/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid time, between 00:00 and 23:59')\r\n        ],\r\n        \"time12h\": [\r\n            function (value, element) {\r\n                return this.optional(element) || /^((0?[1-9]|1[012])(:[0-5]\\d){0,2}(\\ [AP]M))$/i.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid time, between 00:00 am and 12:00 pm')\r\n        ],\r\n        \"phoneUS\": [\r\n            function (phone_number, element) {\r\n                phone_number = phone_number.replace(/\\s+/g, \"\");\r\n                return this.optional(element) || phone_number.length > 9 &&\r\n                    phone_number.match(/^(1-?)?(\\([2-9]\\d{2}\\)|[2-9]\\d{2})-?[2-9]\\d{2}-?\\d{4}$/);\r\n            },\r\n            $.mage.__('Please specify a valid phone number')\r\n        ],\r\n        \"phoneUK\": [\r\n            function (phone_number, element) {\r\n                return this.optional(element) || phone_number.length > 9 &&\r\n                    phone_number.match(/^(\\(?(0|\\+44)[1-9]{1}\\d{1,4}?\\)?\\s?\\d{3,4}\\s?\\d{3,4})$/);\r\n            },\r\n            $.mage.__('Please specify a valid phone number')\r\n        ],\r\n        \"mobileUK\": [\r\n            function (phone_number, element) {\r\n                return this.optional(element) || phone_number.length > 9 &&\r\n                    phone_number.match(/^((0|\\+44)7\\d{3}\\s?\\d{6})$/);\r\n            },\r\n            $.mage.__('Please specify a valid mobile number')\r\n        ],\r\n        \"stripped-min-length\": [\r\n            function (value, element, param) {\r\n                return $(value).text().length >= param;\r\n            },\r\n            $.mage.__('Please enter at least {0} characters')\r\n        ],\r\n        \"email2\": [\r\n            function (value, element) {\r\n                return this.optional(element) || /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)*(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?$/i.test(value);\r\n            },\r\n            $.validator.messages.email\r\n        ],\r\n        \"url2\": [\r\n            function (value, element) {\r\n                return this.optional(element) || /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)*(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i.test(value);\r\n            },\r\n            $.validator.messages.url\r\n        ],\r\n        \"credit-card-types\": [\r\n            function (value, element, param) {\r\n                if (/[^0-9-]+/.test(value)) {\r\n                    return false;\r\n                }\r\n                value = value.replace(/\\D/g, \"\");\r\n\r\n                var validTypes = 0x0000;\r\n\r\n                if (param.mastercard) {\r\n                    validTypes |= 0x0001;\r\n                }\r\n                if (param.visa) {\r\n                    validTypes |= 0x0002;\r\n                }\r\n                if (param.amex) {\r\n                    validTypes |= 0x0004;\r\n                }\r\n                if (param.dinersclub) {\r\n                    validTypes |= 0x0008;\r\n                }\r\n                if (param.enroute) {\r\n                    validTypes |= 0x0010;\r\n                }\r\n                if (param.discover) {\r\n                    validTypes |= 0x0020;\r\n                }\r\n                if (param.jcb) {\r\n                    validTypes |= 0x0040;\r\n                }\r\n                if (param.unknown) {\r\n                    validTypes |= 0x0080;\r\n                }\r\n                if (param.all) {\r\n                    validTypes = 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040 | 0x0080;\r\n                }\r\n                if (validTypes & 0x0001 && /^(51|52|53|54|55)/.test(value)) { //mastercard\r\n                    return value.length === 16;\r\n                }\r\n                if (validTypes & 0x0002 && /^(4)/.test(value)) { //visa\r\n                    return value.length === 16;\r\n                }\r\n                if (validTypes & 0x0004 && /^(34|37)/.test(value)) { //amex\r\n                    return value.length === 15;\r\n                }\r\n                if (validTypes & 0x0008 && /^(300|301|302|303|304|305|36|38)/.test(value)) { //dinersclub\r\n                    return value.length === 14;\r\n                }\r\n                if (validTypes & 0x0010 && /^(2014|2149)/.test(value)) { //enroute\r\n                    return value.length === 15;\r\n                }\r\n                if (validTypes & 0x0020 && /^(6011)/.test(value)) { //discover\r\n                    return value.length === 16;\r\n                }\r\n                if (validTypes & 0x0040 && /^(3)/.test(value)) { //jcb\r\n                    return value.length === 16;\r\n                }\r\n                if (validTypes & 0x0040 && /^(2131|1800)/.test(value)) { //jcb\r\n                    return value.length === 15;\r\n                }\r\n                if (validTypes & 0x0080) { //unknown\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            $.mage.__('Please enter a valid credit card number.')\r\n        ],\r\n        \"ipv4\": [\r\n            function (value, element) {\r\n                return this.optional(element) || /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/i.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid IP v4 address.')\r\n        ],\r\n        \"ipv6\": [\r\n            function (value, element) {\r\n                return this.optional(element) || /^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$/i.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid IP v6 address.')\r\n        ],\r\n        \"pattern\": [\r\n            function (value, element, param) {\r\n                return this.optional(element) || param.test(value);\r\n            },\r\n            $.mage.__('Invalid format.')\r\n        ],\r\n        \"allow-container-className\": [\r\n            function (element) {\r\n                if (element.type === 'radio' || element.type === 'checkbox') {\r\n                    return $(element).hasClass('change-container-classname');\r\n                }\r\n            },\r\n            ''\r\n        ],\r\n        \"validate-no-html-tags\": [\r\n            function (value) {\r\n                return !/<(\\/)?\\w+/.test(value);\r\n            },\r\n            $.mage.__('HTML tags are not allowed.')\r\n        ],\r\n        \"validate-select\": [\r\n            function (value) {\r\n                return ((value !== \"none\") && (value != null) && (value.length !== 0));\r\n            },\r\n            $.mage.__('Please select an option.')\r\n        ],\r\n        \"validate-no-empty\": [\r\n            function (value) {\r\n                return !$.mage.isEmpty(value);\r\n            },\r\n            $.mage.__('Empty Value.')\r\n        ],\r\n        \"validate-alphanum-with-spaces\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[a-zA-Z0-9 ]+$/.test(v);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9) or spaces only in this field.')\r\n        ],\r\n        \"validate-data\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[A-Za-z]+[A-Za-z0-9_]+$/.test(v);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9) or underscore (_) in this field, and the first character should be a letter.')\r\n        ],\r\n        \"validate-street\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[ \\w]{3,}([A-Za-z]\\.)?([ \\w]*\\#\\d+)?(\\r\\n| )[ \\w]{3,}/.test(v);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9), spaces and \"#\" in this field.')\r\n        ],\r\n        \"validate-phoneStrict\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^(\\()?\\d{3}(\\))?(-|\\s)?\\d{3}(-|\\s)\\d{4}$/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid phone number. For example (123) 456-7890 or 123-456-7890.')\r\n        ],\r\n        \"validate-phoneLax\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^((\\d[\\-. ]?)?((\\(\\d{3}\\))|\\d{3}))?[\\-. ]?\\d{3}[\\-. ]?\\d{4}$/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid phone number. For example (123) 456-7890 or 123-456-7890.')\r\n        ],\r\n        \"validate-fax\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^(\\()?\\d{3}(\\))?(-|\\s)?\\d{3}(-|\\s)\\d{4}$/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid fax number (Ex: 123-456-7890).')\r\n        ],\r\n        \"validate-email\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^([a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*@([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*\\.(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]){2,})$/i.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid email address (Ex: johndoe@domain.com).')\r\n        ],\r\n        \"validate-emailSender\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[\\S ]+$/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid email address (Ex: johndoe@domain.com).')\r\n        ],\r\n        \"validate-password\": [\r\n            function (v) {\r\n                if (v == null) {\r\n                    return false;\r\n                }\r\n                /*strip leading and trailing spaces*/\r\n                var pass = $.trim(v);\r\n                if (!pass.length) {\r\n                    return true;\r\n                }\r\n                return !(pass.length > 0 && pass.length < 6);\r\n            },\r\n            $.mage.__('Please enter 6 or more characters. Leading and trailing spaces will be ignored.')\r\n        ],\r\n        \"validate-admin-password\": [\r\n            function (v) {\r\n                if (v == null) {\r\n                    return false;\r\n                }\r\n                var pass = $.trim(v);\r\n                /*strip leading and trailing spaces*/\r\n                if (0 === pass.length) {\r\n                    return true;\r\n                }\r\n                if (!(/[a-z]/i.test(v)) || !(/[0-9]/.test(v))) {\r\n                    return false;\r\n                }\r\n                if (pass.length < 7) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter 7 or more characters, using both numeric and alphabetic.')\r\n        ],\r\n        \"validate-customer-password\": [\r\n            function (v, elm) {\r\n                var validator = this,\r\n                    length = 0,\r\n                    counter = 0;\r\n                var passwordMinLength = $(elm).data('password-min-length');\r\n                var passwordMinCharacterSets = $(elm).data('password-min-character-sets');\r\n                var pass = $.trim(v);\r\n                var result = pass.length >= passwordMinLength;\r\n                if (result == false) {\r\n                    /*eslint-disable max-len*/\r\n                    validator.passwordErrorMessage = $.mage.__('Minimum length of this field must be equal or greater than %1 symbols. Leading and trailing spaces will be ignored.').replace('%1', passwordMinLength);\r\n\r\n                    /*eslint-enable max-len*/\r\n                    return result;\r\n                }\r\n                if (pass.match(/\\d+/)) {\r\n                    counter ++;\r\n                }\r\n                if (pass.match(/[a-z]+/)) {\r\n                    counter ++;\r\n                }\r\n                if (pass.match(/[A-Z]+/)) {\r\n                    counter ++;\r\n                }\r\n                if (pass.match(/[^a-zA-Z0-9]+/)) {\r\n                    counter ++;\r\n                }\r\n                if (counter < passwordMinCharacterSets) {\r\n                    result = false;\r\n\r\n                    /*eslint-disable max-len*/\r\n                    validator.passwordErrorMessage = $.mage.__('Minimum of different classes of characters in password is %1. Classes of characters: Lower Case, Upper Case, Digits, Special Characters.').replace('%1', passwordMinCharacterSets);\r\n\r\n                    /*eslint-enable max-len*/\r\n                }\r\n                return result;\r\n            }, function () {\r\n                return this.passwordErrorMessage;\r\n            }\r\n        ],\r\n        \"validate-url\": [\r\n            function (v) {\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n                v = (v || '').replace(/^\\s+/, '').replace(/\\s+$/, '');\r\n                return (/^(http|https|ftp):\\/\\/(([A-Z0-9]([A-Z0-9_-]*[A-Z0-9]|))(\\.[A-Z0-9]([A-Z0-9_-]*[A-Z0-9]|))*)(:(\\d+))?(\\/[A-Z0-9~](([A-Z0-9_~-]|\\.)*[A-Z0-9~]|))*\\/?(.*)?$/i).test(v);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid URL. Protocol is required (http://, https:// or ftp://).')\r\n        ],\r\n        \"validate-clean-url\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^(http|https|ftp):\\/\\/(([A-Z0-9][A-Z0-9_-]*)(\\.[A-Z0-9][A-Z0-9_-]*)+.(com|org|net|dk|at|us|tv|info|uk|co.uk|biz|se)$)(:(\\d+))?\\/?/i.test(v) || /^(www)((\\.[A-Z0-9][A-Z0-9_-]*)+.(com|org|net|dk|at|us|tv|info|uk|co.uk|biz|se)$)(:(\\d+))?\\/?/i.test(v);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid URL. For example http://www.example.com or www.example.com.')\r\n        ],\r\n        \"validate-xml-identifier\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[A-Z][A-Z0-9_\\/-]*$/i.test(v);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid XML-identifier (Ex: something_1, block5, id-4).')\r\n        ],\r\n        \"validate-ssn\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^\\d{3}-?\\d{2}-?\\d{4}$/.test(v);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid social security number (Ex: 123-45-6789).')\r\n        ],\r\n        \"validate-zip-us\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /(^\\d{5}$)|(^\\d{5}-\\d{4}$)/.test(v);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid zip code (Ex: 90602 or 90602-1234).')\r\n        ],\r\n        \"validate-date-au\": [\r\n            function (v) {\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n                var regex = /^(\\d{2})\\/(\\d{2})\\/(\\d{4})$/;\r\n                if ($.mage.isEmpty(v) || !regex.test(v)) {\r\n                    return false;\r\n                }\r\n                var d = new Date(v.replace(regex, '$2/$1/$3'));\r\n                return parseInt(RegExp.$2, 10) === (1 + d.getMonth()) &&\r\n                    parseInt(RegExp.$1, 10) === d.getDate() &&\r\n                    parseInt(RegExp.$3, 10) === d.getFullYear();\r\n\r\n            },\r\n            $.mage.__('Please use this date format: dd/mm/yyyy. For example 17/03/2006 for the 17th of March, 2006.')\r\n        ],\r\n        \"validate-currency-dollar\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^\\$?\\-?([1-9]{1}[0-9]{0,2}(\\,[0-9]{3})*(\\.[0-9]{0,2})?|[1-9]{1}\\d*(\\.[0-9]{0,2})?|0(\\.[0-9]{0,2})?|(\\.[0-9]{1,2})?)$/.test(v);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid $ amount. For example $100.00.')\r\n        ],\r\n        \"validate-not-negative-number\": [\r\n            function (v) {\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n                v = $.mage.parseNumber(v);\r\n                return !isNaN(v) && v >= 0;\r\n\r\n            },\r\n            $.mage.__('Please enter a number 0 or greater in this field.')\r\n        ],\r\n        // validate-not-negative-number should be replaced in all places with this one and then removed\r\n        \"validate-zero-or-greater\": [\r\n            function (v) {\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n                v = $.mage.parseNumber(v);\r\n                return !isNaN(v) && v >= 0;\r\n\r\n            },\r\n            $.mage.__('Please enter a number 0 or greater in this field.')\r\n        ],\r\n        \"validate-greater-than-zero\": [\r\n            function (v) {\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n                v = $.mage.parseNumber(v);\r\n                return !isNaN(v) && v > 0;\r\n            },\r\n            $.mage.__('Please enter a number greater than 0 in this field.')\r\n        ],\r\n        \"validate-css-length\": [\r\n            function (v) {\r\n                if (v !== '') {\r\n                    return (/^[0-9]*\\.*[0-9]+(px|pc|pt|ex|em|mm|cm|in|%)?$/).test(v);\r\n                }\r\n                return true;\r\n            },\r\n            $.mage.__('Please input a valid CSS-length (Ex: 100px, 77pt, 20em, .5ex or 50%).')\r\n        ],\r\n        /** @description Additional methods */\r\n        \"validate-number\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || (!isNaN($.mage.parseNumber(v)) && /^\\s*-?\\d*(\\.\\d*)?\\s*$/.test(v));\r\n            },\r\n            $.mage.__('Please enter a valid number in this field.')\r\n        ],\r\n        \"required-number\": [\r\n            function (v) {\r\n                return !!v.length;\r\n            },\r\n            $.mage.__('Please enter a valid number in this field.')\r\n        ],\r\n        \"validate-number-range\": [\r\n            function (v, elm, param) {\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n\r\n                var numValue = $.mage.parseNumber(v);\r\n                if (isNaN(numValue)) {\r\n                    return false;\r\n                }\r\n\r\n                var dataAttrRange = /^(-?[\\d.,]+)?-(-?[\\d.,]+)?$/,\r\n                    classNameRange = /^number-range-(-?[\\d.,]+)?-(-?[\\d.,]+)?$/,\r\n                    result = true,\r\n                    range, m, classes, ii;\r\n\r\n                range = param;\r\n                if (typeof range === 'object') {\r\n                    m = dataAttrRange.exec(range);\r\n                    if (m) {\r\n                        result = result && $.mage.isBetween(numValue, m[1], m[2]);\r\n                    }\r\n                } else if (elm && elm.className) {\r\n                    classes = elm.className.split(\" \");\r\n                    ii = classes.length;\r\n\r\n                    while (ii--) {\r\n                        range = classes[ii];\r\n                        m = classNameRange.exec(range);\r\n                        if (m) {\r\n                            result = result && $.mage.isBetween(numValue, m[1], m[2]);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            },\r\n            $.mage.__('The value is not within the specified range.'),\r\n            true\r\n        ],\r\n        \"validate-digits\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || !/[^\\d]/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid number in this field.')\r\n        ],\r\n        \"validate-digits-range\": [\r\n            function (v, elm, param) {\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n\r\n                var numValue = $.mage.parseNumber(v);\r\n                if (isNaN(numValue)) {\r\n                    return false;\r\n                }\r\n\r\n                var dataAttrRange = /^(-?\\d+)?-(-?\\d+)?$/,\r\n                    classNameRange = /^digits-range-(-?\\d+)?-(-?\\d+)?$/,\r\n                    result = true,\r\n                    range, m, classes, ii;\r\n                range = param;\r\n\r\n                if (typeof range === 'object') {\r\n                    m = dataAttrRange.exec(range);\r\n                    if (m) {\r\n                        result = result && $.mage.isBetween(numValue, m[1], m[2]);\r\n                    }\r\n                } else if (elm && elm.className) {\r\n                    classes = elm.className.split(\" \");\r\n                    ii = classes.length;\r\n\r\n                    while (ii--) {\r\n                        range = classes[ii];\r\n                        m = classNameRange.exec(range);\r\n                        if (m) {\r\n                            result = result && $.mage.isBetween(numValue, m[1], m[2]);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            },\r\n            $.mage.__('The value is not within the specified range.'),\r\n            true\r\n        ],\r\n        'validate-range': [\r\n            function (v, elm) {\r\n                var minValue, maxValue;\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                } else if ($.validator.methods['validate-digits'] && $.validator.methods['validate-digits'](v)) {\r\n                    minValue = maxValue = $.mage.parseNumber(v);\r\n                } else {\r\n                    var ranges = /^(-?\\d+)?-(-?\\d+)?$/.exec(v);\r\n\r\n                    if (ranges) {\r\n                        minValue = $.mage.parseNumber(ranges[1]);\r\n                        maxValue = $.mage.parseNumber(ranges[2]);\r\n                        if (minValue > maxValue) {\r\n                            return false;\r\n                        }\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                }\r\n                var reRange = /^range-(-?\\d+)?-(-?\\d+)?$/,\r\n                    result = true;\r\n\r\n                var values = $(elm).prop('class').split(\" \");\r\n\r\n                for (var i = values.length - 1; i >= 0; i--) {\r\n                    var name = values[i];\r\n                    var validRange = reRange.exec(name);\r\n                    if (validRange) {\r\n                        var minValidRange = $.mage.parseNumber(validRange[1]);\r\n                        var maxValidRange = $.mage.parseNumber(validRange[2]);\r\n                        result = result &&\r\n                        (isNaN(minValidRange) || minValue >= minValidRange) &&\r\n                        (isNaN(maxValidRange) || maxValue <= maxValidRange);\r\n                    }\r\n                }\r\n                return result;\r\n            },\r\n            $.mage.__('The value is not within the specified range.')\r\n        ],\r\n        \"validate-alpha\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[a-zA-Z]+$/.test(v);\r\n            },\r\n            $.mage.__('Please use letters only (a-z or A-Z) in this field.')\r\n        ],\r\n        \"validate-code\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[a-z]+[a-z0-9_]+$/.test(v);\r\n            },\r\n            $.mage.__('Please use only letters (a-z), numbers (0-9) or underscore (_) in this field, and the first character should be a letter.')\r\n        ],\r\n        \"validate-alphanum\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[a-zA-Z0-9]+$/.test(v);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z) or numbers (0-9) in this field. No spaces or other characters are allowed.')\r\n        ],\r\n        \"validate-date\": [\r\n            function (v) {\r\n                var test = new Date(v);\r\n                return $.mage.isEmptyNoTrim(v) || !isNaN(test);\r\n            },\r\n            $.mage.__('Please enter a valid date.')\r\n\r\n        ],\r\n        \"validate-date-range\": [\r\n            function (v, elm) {\r\n                var m = /\\bdate-range-(\\w+)-(\\w+)\\b/.exec(elm.className);\r\n                if (!m || m[2] === 'to' || $.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n\r\n                var currentYear = new Date().getFullYear() + '';\r\n                var normalizedTime = function (v) {\r\n                    v = v.split(/[.\\/]/);\r\n                    if (v[2] && v[2].length < 4) {\r\n                        v[2] = currentYear.substr(0, v[2].length) + v[2];\r\n                    }\r\n                    return new Date(v.join('/')).getTime();\r\n                };\r\n\r\n                var dependentElements = $(elm.form).find('.validate-date-range.date-range-' + m[1] + '-to');\r\n                return !dependentElements.length || $.mage.isEmptyNoTrim(dependentElements[0].value) ||\r\n                    normalizedTime(v) <= normalizedTime(dependentElements[0].value);\r\n            },\r\n            $.mage.__('Make sure the To Date is later than or the same as the From Date.')\r\n        ],\r\n        \"validate-cpassword\": [\r\n            function () {\r\n                var conf = $('#confirmation').length > 0 ? $('#confirmation') : $($('.validate-cpassword')[0]);\r\n                var pass = false;\r\n                if ($('#password')) {\r\n                    pass = $('#password');\r\n                }\r\n                var passwordElements = $('.validate-password');\r\n                for (var i = 0; i < passwordElements.length; i++) {\r\n                    var passwordElement = $(passwordElements[i]);\r\n                    if (passwordElement.closest('form').attr('id') === conf.closest('form').attr('id')) {\r\n                        pass = passwordElement;\r\n                    }\r\n                }\r\n                if ($('.validate-admin-password').length) {\r\n                    pass = $($('.validate-admin-password')[0]);\r\n                }\r\n                return (pass.val() === conf.val());\r\n            },\r\n            $.mage.__('Please make sure your passwords match.')\r\n        ],\r\n        \"validate-identifier\": [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[a-z0-9][a-z0-9_\\/-]+(\\.[a-z0-9_-]+)?$/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid URL Key (Ex: \"example-page\", \"example-page.html\" or \"anotherlevel/example-page\").')\r\n        ],\r\n        \"validate-zip-international\": [\r\n            /*function(v) {\r\n             // @TODO: Cleanup\r\n             return Validation.get('IsEmpty').test(v) || /(^[A-z0-9]{2,10}([\\s]{0,1}|[\\-]{0,1})[A-z0-9]{2,10}$)/.test(v);\r\n             }*/\r\n            function () {\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter a valid zip code.')\r\n        ],\r\n        \"validate-one-required\": [\r\n            function (v, elm) {\r\n                var p = $(elm).parent();\r\n                var options = p.find('input');\r\n                return options.map(function (elm) {\r\n                        return $(elm).val();\r\n                    }).length > 0;\r\n            },\r\n            $.mage.__('Please select one of the options above.')\r\n        ],\r\n        \"validate-state\": [\r\n            function (v) {\r\n                return (v !== 0 || v === '');\r\n            },\r\n            $.mage.__('Please select State/Province.')\r\n        ],\r\n        \"required-file\": [\r\n            function (v, elm) {\r\n                var result = !$.mage.isEmptyNoTrim(v);\r\n                if (!result) {\r\n                    var ovId = $(elm).attr('id') + '_value';\r\n                    if ($(ovId)) {\r\n                        result = !$.mage.isEmptyNoTrim($(ovId).val());\r\n                    }\r\n                }\r\n                return result;\r\n            },\r\n            $.mage.__('Please select a file.')\r\n        ],\r\n        \"validate-ajax-error\": [\r\n            function (v, element) {\r\n                element = $(element);\r\n                element.on('change.ajaxError', function () {\r\n                    element.removeClass('validate-ajax-error');\r\n                    element.off('change.ajaxError');\r\n                });\r\n                return !element.hasClass('validate-ajax-error');\r\n            },\r\n            ''\r\n        ],\r\n        \"validate-optional-datetime\": [\r\n            function (v, elm, param) {\r\n                var dateTimeParts = $('.datetime-picker[id^=\"options_' + param + '\"]'),\r\n                    hasWithValue = false, hasWithNoValue = false,\r\n                    pattern = /day_part$/i;\r\n                for (var i = 0; i < dateTimeParts.length; i++) {\r\n                    if (!pattern.test($(dateTimeParts[i]).attr('id'))) {\r\n                        if ($(dateTimeParts[i]).val() === \"\") {\r\n                            hasWithValue = true;\r\n                        } else {\r\n                            hasWithNoValue = true;\r\n                        }\r\n                    }\r\n                }\r\n                return hasWithValue ^ hasWithNoValue;\r\n            },\r\n            $.mage.__('The field isn\\'t complete.')\r\n        ],\r\n        \"validate-required-datetime\": [\r\n            function (v, elm, param) {\r\n                var dateTimeParts = $('.datetime-picker[id^=\"options_' + param + '\"]');\r\n                for (var i = 0; i < dateTimeParts.length; i++) {\r\n                    if (dateTimeParts[i].value === \"\") {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            },\r\n            $.mage.__('This is a required field.')\r\n        ],\r\n        \"validate-one-required-by-name\": [\r\n            function (v, elm, selector) {\r\n                var name = elm.name.replace(/([\\\\\"])/g, '\\\\$1'),\r\n                    container = this.currentForm,\r\n                    selector = selector === true ? 'input[name=\"' + name + '\"]:checked' : selector;\r\n\r\n                return !!container.querySelectorAll(selector).length;\r\n            },\r\n            $.mage.__('Please select one of the options.')\r\n        ],\r\n        \"less-than-equals-to\": [\r\n            function (value, element, params) {\r\n                if ($.isNumeric($(params).val()) && $.isNumeric(value)) {\r\n                    this.lteToVal = $(params).val();\r\n                    return parseFloat(value) <= parseFloat($(params).val());\r\n                }\r\n                return true;\r\n            },\r\n            function () {\r\n                var message = $.mage.__('Please enter a value less than or equal to %s.');\r\n                return message.replace('%s', this.lteToVal);\r\n            }\r\n        ],\r\n        \"greater-than-equals-to\": [\r\n            function (value, element, params) {\r\n                if ($.isNumeric($(params).val()) && $.isNumeric(value)) {\r\n                    this.gteToVal = $(params).val();\r\n                    return parseFloat(value) >= parseFloat($(params).val());\r\n                }\r\n                return true;\r\n            },\r\n            function () {\r\n                var message = $.mage.__('Please enter a value greater than or equal to %s.');\r\n                return message.replace('%s', this.gteToVal);\r\n            }\r\n        ],\r\n        \"validate-emails\": [\r\n            function (value) {\r\n                if ($.mage.isEmpty(value)) {\r\n                    return true;\r\n                }\r\n                var valid_regexp = /^([a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*@([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*\\.(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]){2,})$/i,\r\n                    emails = value.split(/[\\s\\n\\,]+/g);\r\n                for (var i = 0; i < emails.length; i++) {\r\n                    if (!valid_regexp.test(emails[i].trim())) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            },\r\n            $.mage.__(\"Please enter valid email addresses, separated by commas. For example, johndoe@domain.com, johnsmith@domain.com.\")\r\n        ],\r\n\r\n        \"validate-cc-type-select\": [\r\n            /**\r\n             * Validate credit card type matches credit card number\r\n             * @param value - select credit card type\r\n             * @param element - element contains the select box for credit card types\r\n             * @param params - selector for credit card number\r\n             * @return {boolean}\r\n             */\r\n                function (value, element, params) {\r\n                if (value && params && creditCartTypes[value]) {\r\n                    return creditCartTypes[value][0].test($(params).val().replace(/\\s+/g, ''));\r\n                }\r\n                return false;\r\n            },\r\n            $.mage.__('Card type does not match credit card number.')\r\n        ],\r\n        \"validate-cc-number\": [\r\n            /**\r\n             * Validate credit card number based on mod 10\r\n             * @param value - credit card number\r\n             * @return {boolean}\r\n             */\r\n                function (value) {\r\n                if (value) {\r\n                    return validateCreditCard(value);\r\n                }\r\n                return false;\r\n            },\r\n            $.mage.__('Please enter a valid credit card number.')\r\n        ],\r\n        \"validate-cc-type\": [\r\n            /**\r\n             * Validate credit card number is for the correct credit card type\r\n             * @param value - credit card number\r\n             * @param element - element contains credit card number\r\n             * @param params - selector for credit card type\r\n             * @return {boolean}\r\n             */\r\n                function (value, element, params) {\r\n                if (value && params) {\r\n                    var ccType = $(params).val();\r\n                    value = value.replace(/\\s/g, '').replace(/\\-/g, '');\r\n                    if (creditCartTypes[ccType] && creditCartTypes[ccType][0]) {\r\n                        return creditCartTypes[ccType][0].test(value);\r\n                    } else if (creditCartTypes[ccType] && !creditCartTypes[ccType][0]) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            },\r\n            $.mage.__('Credit card number does not match credit card type.')\r\n        ],\r\n        \"validate-cc-exp\": [\r\n            /**\r\n             * Validate credit card expiration date, make sure it's within the year and not before current month\r\n             * @param value - month\r\n             * @param element - element contains month\r\n             * @param params - year selector\r\n             * @return {Boolean}\r\n             */\r\n                function (value, element, params) {\r\n                var isValid = false;\r\n                if (value && params) {\r\n                    var month = value,\r\n                        year = $(params).val(),\r\n                        currentTime = new Date(),\r\n                        currentMonth = currentTime.getMonth() + 1,\r\n                        currentYear = currentTime.getFullYear();\r\n                    isValid = !year || year > currentYear || (year == currentYear && month >= currentMonth);\r\n                }\r\n                return isValid;\r\n            },\r\n            $.mage.__('Incorrect credit card expiration date.')\r\n        ],\r\n        \"validate-cc-cvn\": [\r\n            /**\r\n             * Validate credit card cvn based on credit card type\r\n             * @param value - credit card cvn\r\n             * @param element - element contains credit card cvn\r\n             * @param params - credit card type selector\r\n             * @return {*}\r\n             */\r\n                function (value, element, params) {\r\n                if (value && params) {\r\n                    var ccType = $(params).val();\r\n                    if (creditCartTypes[ccType] && creditCartTypes[ccType][0]) {\r\n                        return creditCartTypes[ccType][1].test(value);\r\n                    }\r\n                }\r\n                return false;\r\n            },\r\n            $.mage.__('Please enter a valid credit card verification number.')\r\n        ],\r\n        \"validate-cc-ukss\": [\r\n            /**\r\n             * Validate Switch/Solo/Maestro issue number and start date is filled\r\n             * @param value - input field value\r\n             * @return {*}\r\n             */\r\n                function (value) {\r\n                return value;\r\n            },\r\n            $.mage.__('Please enter issue number or start date for switch/solo card type.')\r\n        ],\r\n\r\n        \"validate-length\": [\r\n            function (v, elm) {\r\n                var reMax = new RegExp(/^maximum-length-[0-9]+$/),\r\n                    reMin = new RegExp(/^minimum-length-[0-9]+$/),\r\n                    validator = this,\r\n                    result = true,\r\n                    length = 0;\r\n                $.each(elm.className.split(' '), function (index, name) {\r\n                    if (name.match(reMax) && result) {\r\n                        length = name.split('-')[2];\r\n                        validator.attrLength = length;\r\n                        result = (v.length <= length);\r\n                    }\r\n                    if (name.match(reMin) && result && $.mage.isEmpty(v)) {\r\n                        length = name.split('-')[2];\r\n                        result = v.length >= length;\r\n                    }\r\n                });\r\n                return result;\r\n            }, function () {\r\n                return $.mage.__(\"Maximum length of this field must be equal or less than %1 symbols.\")\r\n                    .replace('%1', this.attrLength);\r\n            }\r\n        ],\r\n        'required-entry': [\r\n            function (value) {\r\n                return !$.mage.isEmpty(value);\r\n            }, $.mage.__('This is a required field.')\r\n        ],\r\n        'not-negative-amount': [\r\n            function (v) {\r\n                if (v.length)\r\n                    return (/^\\s*\\d+([,.]\\d+)*\\s*%?\\s*$/).test(v);\r\n                else\r\n                    return true;\r\n            },\r\n            $.mage.__('Please enter positive number in this field.')\r\n        ],\r\n        'validate-per-page-value-list': [\r\n            function (v) {\r\n                var isValid = !$.mage.isEmpty(v);\r\n                var values = v.split(',');\r\n                for (var i = 0; i < values.length; i++) {\r\n                    if (!/^[0-9]+$/.test(values[i])) {\r\n                        isValid = false;\r\n                    }\r\n                }\r\n                return isValid;\r\n            },\r\n            $.mage.__('Please enter a valid value, ex: 10,20,30')\r\n        ],\r\n        'validate-per-page-value': [\r\n            function (v, elm) {\r\n                if ($.mage.isEmpty(v)) {\r\n                    return false;\r\n                }\r\n                var values = $('#' + elm.id + '_values').val().split(',');\r\n                return values.indexOf(v) != -1;\r\n            },\r\n            $.mage.__('Please enter a valid value from list')\r\n        ],\r\n        'validate-new-password': [\r\n            function (v) {\r\n\r\n                if ($.validator.methods['validate-password'] && !$.validator.methods['validate-password'](v)) {\r\n                    return false;\r\n                }\r\n                if ($.mage.isEmpty(v) && v !== '') {\r\n                    return false;\r\n                }\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter 6 or more characters. Leading and trailing spaces will be ignored.')\r\n        ],\r\n        'required-if-not-specified': [\r\n            function (value, element, params) {\r\n                var valid = false;\r\n\r\n                // if there is an alternate, determine its validity\r\n                var alternate = $(params);\r\n                if (alternate.length > 0) {\r\n                    valid = this.check(alternate);\r\n                    // if valid, it may be blank, so check for that\r\n                    if (valid) {\r\n                        var alternateValue = alternate.val();\r\n                        if (typeof alternateValue == 'undefined' || alternateValue.length === 0) {\r\n                            valid = false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!valid)\r\n                    valid = !this.optional(element);\r\n\r\n                return valid;\r\n            },\r\n            $.mage.__('This is a required field.')\r\n        ],\r\n        'required-if-all-sku-empty-and-file-not-loaded': [\r\n            function (value, element, params) {\r\n                var valid = false;\r\n                var alternate = $(params.specifiedId);\r\n\r\n                if (alternate.length > 0) {\r\n                    valid = this.check(alternate);\r\n                    // if valid, it may be blank, so check for that\r\n                    if (valid) {\r\n                        var alternateValue = alternate.val();\r\n                        if (typeof alternateValue == 'undefined' || alternateValue.length === 0) {\r\n                            valid = false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!valid)\r\n                    valid = !this.optional(element);\r\n\r\n                $('input[' + params.dataSku + '=true]').each(function () {\r\n                    if ($(this).val() !== '') {\r\n                        valid = true;\r\n                    }\r\n                });\r\n\r\n                return valid;\r\n            },\r\n            $.mage.__('Please enter valid SKU key.')\r\n        ],\r\n        'required-if-specified': [\r\n            function (value, element, params) {\r\n                var valid = true;\r\n\r\n                // if there is an dependent, determine its validity\r\n                var dependent = $(params);\r\n                if (dependent.length > 0) {\r\n                    valid = this.check(dependent);\r\n                    // if valid, it may be blank, so check for that\r\n                    if (valid) {\r\n                        var dependentValue = dependent.val();\r\n                        valid = typeof dependentValue != 'undefined' && dependentValue.length > 0;\r\n                    }\r\n                }\r\n\r\n                if (valid) {\r\n                    valid = !this.optional(element);\r\n                } else {\r\n                    valid = true; // dependent was not valid, so don't even check\r\n                }\r\n\r\n                return valid;\r\n            },\r\n            $.mage.__('This is a required field.')\r\n        ],\r\n        'required-number-if-specified': [\r\n            function (value, element, params) {\r\n                var valid = true,\r\n                    dependent = $(params),\r\n                    depeValue;\r\n\r\n                if (dependent.length) {\r\n                    valid = this.check(dependent);\r\n\r\n                    if (valid) {\r\n                        depeValue = dependent[0].value;\r\n                        valid = !!(depeValue && depeValue.length);\r\n                    }\r\n                }\r\n\r\n                return valid ? !!value.length : true;\r\n            },\r\n            $.mage.__('Please enter a valid number.')\r\n        ],\r\n        'datetime-validation': [\r\n            function (value, element) {\r\n                var isValid = true;\r\n\r\n                if ($(element).val().length === 0) {\r\n                    isValid = false;\r\n                    $(element).addClass('mage-error');\r\n                }\r\n\r\n                return isValid;\r\n            },\r\n            $.mage.__('This is required field')\r\n        ],\r\n        'required-text-swatch-entry': [\r\n            tableSingleValidation,\r\n            $.mage.__('Admin is a required field in the each row.')\r\n        ],\r\n        'required-visual-swatch-entry': [\r\n            tableSingleValidation,\r\n            $.mage.__('Admin is a required field in the each row.')\r\n        ],\r\n        'required-dropdown-attribute-entry': [\r\n            tableSingleValidation,\r\n            $.mage.__('Admin is a required field in the each row.')\r\n        ],\r\n        'validate-item-quantity': [\r\n            function (value, element, params) {\r\n                // obtain values for validation\r\n                var qty = $.mage.parseNumber(value);\r\n\r\n                // validate quantity\r\n                var isMinAllowedValid = typeof params.minAllowed === 'undefined' || (qty >= $.mage.parseNumber(params.minAllowed));\r\n                var isMaxAllowedValid = typeof params.maxAllowed === 'undefined' || (qty <= $.mage.parseNumber(params.maxAllowed));\r\n                var isQtyIncrementsValid = typeof params.qtyIncrements === 'undefined' || (qty % $.mage.parseNumber(params.qtyIncrements) === 0);\r\n\r\n                return isMaxAllowedValid && isMinAllowedValid && isQtyIncrementsValid && qty > 0;\r\n            },\r\n            ''\r\n        ]\r\n    };\r\n\r\n    $.each(rules, function (i, rule) {\r\n        rule.unshift(i);\r\n        $.validator.addMethod.apply($.validator, rule);\r\n    });\r\n    $.validator.addClassRules({\r\n        \"required-option\": {\r\n            required: true\r\n        },\r\n        \"required-options-count\": {\r\n            required: true\r\n        },\r\n        \"validate-both-passwords\": {\r\n            'validate-cpassword': true\r\n        }\r\n    });\r\n    $.validator.messages = $.extend($.validator.messages, {\r\n        required: $.mage.__('This is a required field.'),\r\n        remote: $.mage.__('Please fix this field.'),\r\n        email: $.mage.__('Please enter a valid email address.'),\r\n        url: $.mage.__('Please enter a valid URL.'),\r\n        date: $.mage.__('Please enter a valid date.'),\r\n        dateISO: $.mage.__('Please enter a valid date (ISO).'),\r\n        number: $.mage.__('Please enter a valid number.'),\r\n        digits: $.mage.__('Please enter only digits.'),\r\n        creditcard: $.mage.__('Please enter a valid credit card number.'),\r\n        equalTo: $.mage.__('Please enter the same value again.'),\r\n        maxlength: $.validator.format($.mage.__('Please enter no more than {0} characters.')),\r\n        minlength: $.validator.format($.mage.__('Please enter at least {0} characters.')),\r\n        rangelength: $.validator.format($.mage.__('Please enter a value between {0} and {1} characters long.')),\r\n        range: $.validator.format($.mage.__('Please enter a value between {0} and {1}.')),\r\n        max: $.validator.format($.mage.__('Please enter a value less than or equal to {0}.')),\r\n        min: $.validator.format($.mage.__('Please enter a value greater than or equal to {0}.'))\r\n    });\r\n\r\n    if ($.metadata) {\r\n        // Setting the type as html5 to enable data-validate attribute\r\n        $.metadata.setType(\"html5\");\r\n    }\r\n\r\n    var showLabel = $.validator.prototype.showLabel;\r\n    $.extend(true, $.validator.prototype, {\r\n        showLabel: function (element, message) {\r\n            showLabel.call(this, element, message);\r\n\r\n            // ARIA (adding aria-invalid & aria-describedby)\r\n            var label = this.errorsFor(element),\r\n                elem = $(element);\r\n\r\n            if (!label.attr('id')) {\r\n                label.attr('id', this.idOrName(element) + '-error');\r\n            }\r\n            elem.attr('aria-invalid', 'true')\r\n                .attr('aria-describedby', label.attr('id'));\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Validate form field without instantiating validate plug-in\r\n     * @param {Element||String} element - DOM element or selector\r\n     * @return {Boolean} validation result\r\n     */\r\n    $.validator.validateElement = function (element) {\r\n        element = $(element);\r\n        var form = element.get(0).form,\r\n            validator = form ? $(form).data('validator') : null;\r\n        if (validator) {\r\n            return validator.element(element.get(0));\r\n        } else {\r\n            var valid = true,\r\n                classes = element.prop('class').split(' ');\r\n            $.each(classes, $.proxy(function (i, className) {\r\n                if (this.methods[className] && !this.methods[className](element.val(), element.get(0))) {\r\n                    valid = false;\r\n                    return valid;\r\n                }\r\n            }, this));\r\n            return valid;\r\n        }\r\n    };\r\n\r\n    var originValidateDelegate = $.fn.validateDelegate;\r\n\r\n    $.fn.validateDelegate = function () {\r\n        if (!this[0].form) {\r\n            return this;\r\n        }\r\n\r\n        return originValidateDelegate.apply(this, arguments);\r\n    };\r\n\r\n    /**\r\n     * Validate single element.\r\n     *\r\n     * @param {Element} element\r\n     * @param {Object} config\r\n     * @returns {*}\r\n     */\r\n    $.validator.validateSingleElement = function (element, config) {\r\n        var errors = {},\r\n            valid = true,\r\n            validateConfig = {\r\n                errorElement: 'label',\r\n                ignore: '.ignore-validate'\r\n            },\r\n            form, validator, classes, elementValue;\r\n\r\n        $.extend(validateConfig, config);\r\n        element = $(element).not(validateConfig.ignore);\r\n\r\n        if (!element.length) {\r\n            return true;\r\n        }\r\n\r\n        form = element.get(0).form;\r\n        validator = form ? $(form).data('validator') : null;\r\n\r\n        if (validator) {\r\n            return validator.element(element.get(0));\r\n        }\r\n\r\n        classes = element.prop('class').split(' ');\r\n        validator = element.parent().data('validator') ||\r\n            $.mage.validation(validateConfig, element.parent()).validate;\r\n\r\n        element.removeClass(validator.settings.errorClass);\r\n        validator.toHide = validator.toShow;\r\n        validator.hideErrors();\r\n        validator.toShow = validator.toHide = $([]);\r\n\r\n        $.each(classes, $.proxy(function (i, className) {\r\n            elementValue = element.val();\r\n            if (element.is(':checkbox') || element.is(':radio')) {\r\n                elementValue = element.is(':checked') || null;\r\n            }\r\n            if (this.methods[className] && !this.methods[className](elementValue, element.get(0))) {\r\n                valid = false;\r\n                errors[element.get(0).name] = this.messages[className];\r\n                validator.invalid[element.get(0).name] = true;\r\n                validator.showErrors(errors);\r\n\r\n                return valid;\r\n            }\r\n        }, this));\r\n\r\n        return valid;\r\n    };\r\n\r\n    $.widget(\"mage.validation\", {\r\n        options: {\r\n            meta: \"validate\",\r\n            onfocusout: false,\r\n            onkeyup: false,\r\n            onclick: false,\r\n            ignoreTitle: true,\r\n            errorClass: 'mage-error',\r\n            errorElement: 'div',\r\n            errorPlacement: function (error, element) {\r\n                var errorPlacement = element;\r\n                // logic for date-picker error placement\r\n                if (element.hasClass('hasDatepicker')) {\r\n                    errorPlacement = element.siblings('img');\r\n                }\r\n                // logic for field wrapper\r\n                var fieldWrapper = element.closest('.addon');\r\n                if (fieldWrapper.length) {\r\n                    errorPlacement = fieldWrapper.after(error);\r\n                }\r\n                //logic for checkboxes/radio\r\n                if (element.is(':checkbox') || element.is(':radio')) {\r\n                    errorPlacement = element.siblings('label').last();\r\n                }\r\n                errorPlacement.after(error);\r\n            }\r\n        },\r\n        /**\r\n         * Check if form pass validation rules without submit\r\n         * @return boolean\r\n         */\r\n        isValid: function () {\r\n            return this.element.valid();\r\n        },\r\n\r\n        /**\r\n         * Remove validation error messages\r\n         */\r\n        clearError: function () {\r\n            if (arguments.length) {\r\n                $.each(arguments, $.proxy(function (index, item) {\r\n                    this.validate.prepareElement(item);\r\n                    this.validate.hideErrors();\r\n                }, this));\r\n            } else {\r\n                this.validate.resetForm();\r\n            }\r\n        },\r\n        /**\r\n         * Validation creation\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this.validate = this.element.validate(this.options);\r\n\r\n            // ARIA (adding aria-required attribute)\r\n            this.element\r\n                .find('.field.required')\r\n                .find('.control')\r\n                .find('input, select, textarea')\r\n                .attr('aria-required', 'true');\r\n\r\n            this._listenFormValidate();\r\n        },\r\n        /**\r\n         * Validation listening\r\n         * @protected\r\n         */\r\n        _listenFormValidate: function () {\r\n            $('form').on('invalid-form.validate', function (event, validation) {\r\n                var firstActive = $(validation.errorList[0].element || []),\r\n                    lastActive = $(validation.findLastActive() || validation.errorList.length && validation.errorList[0].element || []);\r\n\r\n                if (lastActive.is(':hidden')) {\r\n                    var parent = lastActive.parent();\r\n                    var windowHeight = $(window).height();\r\n                    $('html, body').animate({\r\n                        scrollTop: parent.offset().top - windowHeight / 2\r\n                    });\r\n                }\r\n\r\n                // ARIA (removing aria attributes if success)\r\n                var successList = validation.successList;\r\n                if (successList.length) {\r\n                    $.each(successList, function () {\r\n                        $(this)\r\n                            .removeAttr('aria-describedby')\r\n                            .removeAttr('aria-invalid');\r\n                    })\r\n                }\r\n                if (firstActive.length) {\r\n                    firstActive.focus();\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.validation;\r\n}));\r\n","mage/app/config.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint regexdash:true eqnull:true browser:true jquery:true*/\r\ndefine([], function () {\r\n    var baseUrl = '';\r\n    return {\r\n        getBaseUrl: function () {\r\n            return this.values.baseUrl;\r\n        },\r\n        getFormKey: function() {\r\n            return this.values.formKey;\r\n        }\r\n    }\r\n});\r\n","mage/apply/main.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'jquery',\r\n    './scripts'\r\n], function (_, $, processScripts) {\r\n    'use strict';\r\n\r\n    var dataAttr = 'data-mage-init',\r\n        nodeSelector = '[' + dataAttr + ']';\r\n\r\n    /**\r\n     * Initializes components assigned to a specified element via data-* attribute.\r\n     *\r\n     * @param {HTMLElement} el - Element to initialize components with.\r\n     * @param {Object|String} config - Initial components' config.\r\n     * @param {String} component - Components' path.\r\n     */\r\n    function init(el, config, component) {\r\n        require([component], function (fn) {\r\n\r\n            if (typeof fn === 'object') {\r\n                fn = fn[component].bind(fn);\r\n            }\r\n\r\n            if (_.isFunction(fn)) {\r\n                fn(config, el);\r\n            } else if ($(el)[component]) {\r\n                $(el)[component](config);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Parses elements 'data-mage-init' attribute as a valid JSON data.\r\n     * Note: data-mage-init attribute will be removed.\r\n     *\r\n     * @param {HTMLElement} el - Element whose attribute should be parsed.\r\n     * @returns {Object}\r\n     */\r\n    function getData(el) {\r\n        var data = el.getAttribute(dataAttr);\r\n\r\n        el.removeAttribute(dataAttr);\r\n\r\n        return {\r\n            el: el,\r\n            data: JSON.parse(data)\r\n        };\r\n    }\r\n\r\n    return {\r\n        /**\r\n         * Initializes components assigned to HTML elements via [data-mage-init].\r\n         *\r\n         * @example Sample 'data-mage-init' declaration.\r\n         *      data-mage-init='{\"path/to/component\": {\"foo\": \"bar\"}}'\r\n         */\r\n        apply: function () {\r\n            var virtuals = processScripts(),\r\n                nodes = document.querySelectorAll(nodeSelector);\r\n\r\n            _.toArray(nodes)\r\n                .map(getData)\r\n                .concat(virtuals)\r\n                .forEach(function (itemContainer) {\r\n                    var element = itemContainer.el;\r\n\r\n                    _.each(itemContainer.data, function (obj, key) {\r\n                            if (obj.mixins) {\r\n                                require(obj.mixins, function () {\r\n                                    for (var i = 0, len = arguments.length; i < len; i++) {\r\n                                        $.extend(true, itemContainer.data[key], arguments[i](itemContainer.data[key], element));\r\n                                    }\r\n\r\n                                    delete obj.mixins;\r\n                                    init.call(null, element, obj, key);\r\n                                });\r\n                            } else {\r\n                                init.call(null, element, obj, key);\r\n                            }\r\n\r\n                        }\r\n                    );\r\n\r\n                });\r\n        },\r\n        applyFor: init\r\n    };\r\n});\r\n","mage/apply/scripts.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'jquery'\r\n], function (_, $) {\r\n    'use strict';\r\n\r\n    var scriptSelector = 'script[type=\"text/x-magento-init\"]',\r\n        dataAttr = 'data-mage-init',\r\n        virtuals = [];\r\n\r\n    /**\r\n     * Adds components to the virtual list.\r\n     *\r\n     * @param {Object} components\r\n     */\r\n    function addVirtual(components) {\r\n        virtuals.push({\r\n            el: false,\r\n            data: components\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Merges provided data with a current data\r\n     * of a elements' \"data-mage-init\" attribute.\r\n     *\r\n     * @param {Object} components - Object with components and theirs configuration.\r\n     * @param {HTMLElement} elem - Element whose data should be modified.\r\n     */\r\n    function setData(components, elem) {\r\n        var data = elem.getAttribute(dataAttr);\r\n\r\n        data = !!data ? JSON.parse(data) : {};\r\n        _.each(components, function(obj, key) {\r\n            if (_.has(obj, 'mixins')) {\r\n                data[key] = data[key] || {};\r\n                data[key].mixins = data[key].mixins || [];\r\n                data[key].mixins = data[key].mixins.concat(obj.mixins);\r\n                delete obj.mixins;\r\n            }\r\n        });\r\n\r\n        data = $.extend(true, data, components);\r\n        data = JSON.stringify(data);\r\n        elem.setAttribute(dataAttr, data);\r\n    }\r\n\r\n    /**\r\n     * Search for the elements by privded selector and extends theirs data.\r\n     *\r\n     * @param {Object} components - Object with components and theirs configuration.\r\n     * @param {String} selector - Selector for the elements.\r\n     */\r\n    function processElems(components, selector) {\r\n        var elems,\r\n            iterator;\r\n\r\n        if (selector === '*') {\r\n            addVirtual(components);\r\n\r\n            return;\r\n        }\r\n\r\n        elems = document.querySelectorAll(selector);\r\n        iterator = setData.bind(null, components);\r\n\r\n        _.toArray(elems).forEach(iterator);\r\n    }\r\n\r\n    /**\r\n     * Parses content of a provided script node.\r\n     * Note: node will be removed from DOM.\r\n     *\r\n     * @param {HTMLScriptElement} node - Node to be processed.\r\n     * @returns {Object}\r\n     */\r\n    function getNodeData(node) {\r\n        var data = node.textContent;\r\n\r\n        node.parentNode.removeChild(node);\r\n\r\n        return JSON.parse(data);\r\n    }\r\n\r\n    /**\r\n     * Parses 'script' tags with a custom type attribute and moves it's data\r\n     * to a 'data-mage-init' attribute of an elemennt found by provided selector.\r\n     * Note: All found script nodes will be removed from DOM.\r\n     *\r\n     * @returns {Array} An array of components not assigned to the specific element.\r\n     *\r\n     * @example Sample declaration.\r\n     *      <script type=\"text/x-magento-init\">\r\n     *          {\r\n     *              \"body\": {\r\n     *                  \"path/to/component\": {\"foo\": \"bar\"}\r\n     *              }\r\n     *          }\r\n     *      </script>\r\n     *\r\n     * @example Providing data without selector.\r\n     *      {\r\n     *          \"*\": {\r\n     *              \"path/to/component\": {\"bar\": \"baz\"}\r\n     *          }\r\n     *      }\r\n     */\r\n    return function () {\r\n        var nodes = document.querySelectorAll(scriptSelector);\r\n\r\n        _.toArray(nodes)\r\n            .map(getNodeData)\r\n            .forEach(function (item) {\r\n                _.each(item, processElems);\r\n            });\r\n\r\n        return virtuals.splice(0, virtuals.length);\r\n    };\r\n});\r\n","mage/gallery/gallery.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'fotorama/fotorama',\r\n    'underscore',\r\n    'matchMedia',\r\n    'mage/template',\r\n    'text!mage/gallery/gallery.html',\r\n    'uiClass',\r\n    'mage/translate'\r\n], function ($, fotorama, _, mediaCheck, template, galleryTpl, Class, $t) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Retrieves index if the main item.\r\n     * @param {Array.<Object>} data - Set of gallery items.\r\n     */\r\n    var getMainImageIndex = function (data) {\r\n            var mainIndex;\r\n            if (_.every(data, function (item) {\r\n                    return _.isObject(item);\r\n                })\r\n            ) {\r\n                mainIndex = _.findIndex(data, function (item) {\r\n                    return item.isMain;\r\n                });\r\n            }\r\n            return mainIndex > 0 ? mainIndex : 0;\r\n        },\r\n\r\n        /**\r\n         * Helper for parse translate property\r\n         *\r\n         * @param {Element} el - el that to parse\r\n         * @returns {Array} - array of properties.\r\n         */\r\n        getTranslate = function (el) {\r\n            var slideTransform = $(el).attr('style').split(';');\r\n\r\n            slideTransform = $.map(slideTransform, function (style) {\r\n                style = style.trim();\r\n\r\n                if (style.startsWith('transform: translate3d')) {\r\n                    return style.match(/transform: translate3d\\((.+)px,(.+)px,(.+)px\\)/);\r\n                }\r\n\r\n                return false;\r\n            });\r\n\r\n            return slideTransform.filter(Boolean);\r\n        },\r\n\r\n        _toNumber = function (str) {\r\n\r\n            var type = typeof(str);\r\n\r\n            if (type === 'string') {\r\n                return parseInt(str);\r\n            } else {\r\n                return str;\r\n            }\r\n        };\r\n\r\n    return Class.extend({\r\n\r\n        defaults: {\r\n            settings: {},\r\n            config: {},\r\n            startConfig: {}\r\n        },\r\n\r\n        /**\r\n         * Checks if device has touch interface.\r\n         * @return {Boolean} The result of searching touch events on device.\r\n         */\r\n        isTouchEnabled: (function () {\r\n            return 'ontouchstart' in document.documentElement;\r\n        })(),\r\n\r\n        /**\r\n         * Initializes gallery.\r\n         * @param {Object} config - Gallery configuration.\r\n         * @param {String} element - String selector of gallery DOM element.\r\n         */\r\n        initialize: function (config, element) {\r\n            var self = this;\r\n\r\n            this._super();\r\n\r\n            _.bindAll(this,\r\n                '_focusSwitcher'\r\n            );\r\n\r\n            /*turn off arrows for touch devices*/\r\n            if (this.isTouchEnabled) {\r\n                config.options.arrows = false;\r\n\r\n                if (config.fullscreen) {\r\n                    config.fullscreen.arrows = false;\r\n                }\r\n            }\r\n\r\n            config.options.width = _toNumber(config.options.width);\r\n            config.options.height = _toNumber(config.options.height);\r\n            config.options.thumbwidth = _toNumber(config.options.thumbwidth);\r\n            config.options.thumbheight = _toNumber(config.options.thumbheight);\r\n\r\n            config.options.swipe = true;\r\n            this.config = config;\r\n\r\n            this.settings = {\r\n                $element: $(element),\r\n                $pageWrapper: $('body>.page-wrapper'),\r\n                currentConfig: config,\r\n                defaultConfig: _.clone(config),\r\n                fullscreenConfig: _.clone(config.fullscreen),\r\n                breakpoints: config.breakpoints,\r\n                activeBreakpoint: {},\r\n                fotoramaApi: null,\r\n                isFullscreen: false,\r\n                api: null,\r\n                data: _.clone(config.data)\r\n            };\r\n            config.options.ratio = config.options.width / config.options.height;\r\n            config.options.height = null;\r\n\r\n            $.extend(true, this.startConfig, config);\r\n\r\n            this.initGallery();\r\n            this.initApi();\r\n            this.setupBreakpoints();\r\n            this.initFullscreenSettings();\r\n\r\n            this.settings.$element.on('mouseup', '.fotorama__stage__frame', function () {\r\n                if (\r\n                    !$(this).parents('.fotorama__shadows--left, .fotorama__shadows--right').length &&\r\n                    !$(this).hasClass('fotorama-video-container')\r\n                ) {\r\n                    self.openFullScreen();\r\n                }\r\n            });\r\n\r\n            if (this.isTouchEnabled && this.settings.isFullscreen) {\r\n                this.settings.$element.on('tap', '.fotorama__stage__frame', function () {\r\n                    var translate = getTranslate($(this).parents('.fotorama__stage__shaft'));\r\n\r\n                    if (translate[1] === '0' && !$(this).hasClass('fotorama-video-container')) {\r\n                        self.openFullScreen();\r\n                        self.settings.$pageWrapper.hide();\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Open gallery fullscreen\r\n         */\r\n        openFullScreen: function () {\r\n            this.settings.api.fotorama.requestFullScreen();\r\n            this.settings.$fullscreenIcon.css({\r\n                opacity: 1,\r\n                visibility: 'visible',\r\n                display: 'block'\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Gallery fullscreen settings.\r\n         */\r\n        initFullscreenSettings: function () {\r\n            var settings = this.settings,\r\n                self = this;\r\n\r\n            settings.$gallery = this.settings.$element.find('[data-gallery-role=\"gallery\"]');\r\n            settings.$fullscreenIcon = this.settings.$element.find('[data-gallery-role=\"fotorama__fullscreen-icon\"]');\r\n            settings.focusableStart = this.settings.$element.find('[data-gallery-role=\"fotorama__focusable-start\"]');\r\n            settings.focusableEnd = this.settings.$element.find('[data-gallery-role=\"fotorama__focusable-end\"]');\r\n            settings.closeIcon = this.settings.$element.find('[data-gallery-role=\"fotorama__fullscreen-icon\"]');\r\n            settings.fullscreenConfig.swipe = true;\r\n\r\n            settings.$gallery.on('fotorama:fullscreenenter', function () {\r\n                settings.closeIcon.show();\r\n                settings.focusableStart.attr('tabindex', '0');\r\n                settings.focusableEnd.attr('tabindex', '0');\r\n                settings.focusableStart.bind('focusin', self._focusSwitcher);\r\n                settings.focusableEnd.bind('focusin', self._focusSwitcher);\r\n                settings.api.updateOptions(settings.defaultConfig.options, true);\r\n                settings.api.updateOptions(settings.fullscreenConfig, true);\r\n\r\n                if (!_.isEqual(settings.activeBreakpoint, {}) && settings.breakpoints) {\r\n                    settings.api.updateOptions(settings.activeBreakpoint.options, true);\r\n                }\r\n                settings.isFullscreen = true;\r\n            });\r\n\r\n            settings.$gallery.on('fotorama:fullscreenexit', function () {\r\n                settings.closeIcon.hide();\r\n                settings.focusableStart.attr('tabindex', '-1');\r\n                settings.focusableEnd.attr('tabindex', '-1');\r\n                settings.api.updateOptions(settings.defaultConfig.options, true);\r\n                settings.focusableStart.unbind('focusin', this._focusSwitcher);\r\n                settings.focusableEnd.unbind('focusin', this._focusSwitcher);\r\n                settings.closeIcon.hide();\r\n\r\n                if (!_.isEqual(settings.activeBreakpoint, {}) && settings.breakpoints) {\r\n                    settings.api.updateOptions(settings.activeBreakpoint.options, true);\r\n                }\r\n                settings.isFullscreen = false;\r\n                settings.$element.data('gallery').updateOptions({\r\n                    swipe: true\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Switcher focus.\r\n         */\r\n        _focusSwitcher: function (e) {\r\n            var target = $(e.target),\r\n                settings = this.settings;\r\n\r\n            if (target.is(settings.focusableStart)) {\r\n                this._setFocus('start');\r\n            } else if (target.is(settings.focusableEnd)) {\r\n                this._setFocus('end');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set focus to element.\r\n         * @param {String} position - can be \"start\" and \"end\"\r\n         *      positions.\r\n         *      If position is \"end\" - sets focus to first\r\n         *      focusable element in modal window scope.\r\n         *      If position is \"start\" - sets focus to last\r\n         *      focusable element in modal window scope\r\n         */\r\n        _setFocus: function (position) {\r\n            var settings = this.settings,\r\n                focusableElements,\r\n                infelicity;\r\n\r\n            if (position === 'end') {\r\n                settings.$gallery.find(settings.closeIcon).focus();\r\n            } else if (position === 'start') {\r\n                infelicity = 3; //Constant for find last focusable element\r\n                focusableElements = settings.$gallery.find(':focusable');\r\n                focusableElements.eq(focusableElements.length - infelicity).focus();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes gallery with configuration options.\r\n         */\r\n        initGallery: function () {\r\n            var breakpoints = {},\r\n                settings = this.settings,\r\n                config = this.config,\r\n                tpl = template(galleryTpl, {\r\n                    next: $t('Next'),\r\n                    previous: $t('Previous')\r\n                }),\r\n                mainImageIndex;\r\n\r\n            if (settings.breakpoints) {\r\n                _.each(_.values(settings.breakpoints), function (breakpoint) {\r\n                    var conditions;\r\n\r\n                    _.each(_.pairs(breakpoint.conditions), function (pair) {\r\n                        conditions = conditions ? conditions + ' and (' + pair[0] + ': ' + pair[1] + ')' :\r\n                        '(' + pair[0] + ': ' + pair[1] + ')';\r\n                    });\r\n                    breakpoints[conditions] = breakpoint.options;\r\n                });\r\n                settings.breakpoints = breakpoints;\r\n            }\r\n\r\n            _.extend(config, config.options);\r\n            config.options = undefined;\r\n\r\n            config.click = false;\r\n            config.breakpoints = null;\r\n            settings.currentConfig = config;\r\n            settings.$element.html(tpl);\r\n            settings.$element.removeClass('_block-content-loading');\r\n            settings.$elementF = $(settings.$element.children()[0]);\r\n            settings.$elementF.fotorama(config);\r\n            settings.fotoramaApi = settings.$elementF.data('fotorama');\r\n            $.extend(true, config, this.startConfig);\r\n\r\n            mainImageIndex = getMainImageIndex(config.data);\r\n            if (mainImageIndex) {\r\n                this.settings.fotoramaApi.show(mainImageIndex);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Creates breakpoints for gallery.\r\n         */\r\n        setupBreakpoints: function () {\r\n            var pairs,\r\n                settings = this.settings,\r\n                config = this.config,\r\n                startConfig = this.startConfig,\r\n                triggeredBreakpoints = 0,\r\n                isTouchEnabled = this.isTouchEnabled;\r\n\r\n            if (_.isObject(settings.breakpoints)) {\r\n                pairs = _.pairs(settings.breakpoints);\r\n                _.each(pairs, function (pair) {\r\n                    mediaCheck({\r\n                        media: pair[0],\r\n\r\n                        /**\r\n                         * Is triggered when breakpoint enties.\r\n                         */\r\n                        entry: function () {\r\n                            $.extend(true, config, _.clone(startConfig));\r\n\r\n                            settings.api.updateOptions(settings.defaultConfig.options, true);\r\n\r\n                            if (settings.isFullscreen) {\r\n                                settings.api.updateOptions(settings.fullscreenConfig, true);\r\n                            }\r\n\r\n                            if (isTouchEnabled) {\r\n                                settings.breakpoints[pair[0]].options.arrows = false;\r\n                                if (settings.breakpoints[pair[0]].options.fullscreen) {\r\n                                    settings.breakpoints[pair[0]].options.fullscreen.arrows = false;\r\n                                }\r\n                            }\r\n\r\n                            settings.api.updateOptions(settings.breakpoints[pair[0]].options, true);\r\n                            $.extend(true, config, settings.breakpoints[pair[0]]);\r\n                            settings.activeBreakpoint = settings.breakpoints[pair[0]];\r\n                        },\r\n\r\n                        /**\r\n                         * Is triggered when breakpoint exits.\r\n                         */\r\n                        exit: function () {\r\n                            $.extend(true, config, _.clone(startConfig));\r\n                            settings.api.updateOptions(settings.defaultConfig.options, true);\r\n\r\n                            if (settings.isFullscreen) {\r\n                                settings.api.updateOptions(settings.fullscreenConfig, true);\r\n                            }\r\n                            settings.activeBreakpoint = {};\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Creates gallery's API.\r\n         */\r\n        initApi: function () {\r\n            var settings = this.settings,\r\n                config = this.config,\r\n                api = {\r\n\r\n                    /**\r\n                     * Contains fotorama's API methods.\r\n                     */\r\n                    fotorama: settings.fotoramaApi,\r\n\r\n                    /**\r\n                     * Displays the last image on preview.\r\n                     */\r\n                    last: function () {\r\n                        settings.fotoramaApi.show('>>');\r\n                    },\r\n\r\n                    /**\r\n                     * Displays the first image on preview.\r\n                     */\r\n                    first: function () {\r\n                        settings.fotoramaApi.show('<<');\r\n                    },\r\n\r\n                    /**\r\n                     * Displays previous element on preview.\r\n                     */\r\n                    prev: function () {\r\n                        settings.fotoramaApi.show('<');\r\n                    },\r\n\r\n                    /**\r\n                     * Displays next element on preview.\r\n                     */\r\n                    next: function () {\r\n                        settings.fotoramaApi.show('>');\r\n                    },\r\n\r\n                    /**\r\n                     * Displays image with appropriate count number on preview.\r\n                     * @param {Number} index - Number of image that should be displayed.\r\n                     */\r\n                    seek: function (index) {\r\n                        if (_.isNumber(index) && index !== 0) {\r\n\r\n                            if (index > 0) {\r\n                                index -= 1;\r\n                            }\r\n                            settings.fotoramaApi.show(index);\r\n                        }\r\n                    },\r\n\r\n                    /**\r\n                     * Updates gallery with new set of options.\r\n                     * @param {Object} configuration - Standart gallery configuration object.\r\n                     * @param {Boolean} isInternal - Is this function called via breakpoints.\r\n                     */\r\n                    updateOptions: function (configuration, isInternal) {\r\n\r\n                        var $selectable = \r\n                                $('a[href], area[href], input, select, textarea, button, iframe, object, embed, *[tabindex], *[contenteditable]')\r\n                                .not('[tabindex=-1], [disabled], :hidden'),\r\n                            fotorama = settings.fotoramaApi,\r\n                            $focus = $(':focus'),\r\n                            index;\r\n\r\n                        if (_.isObject(configuration)) {\r\n\r\n                            //Saves index of focus\r\n                            $selectable.each(function (number) {\r\n            \r\n                                if ($(this).is($focus)) {\r\n                                    index = number;\r\n                                }\r\n                            });\r\n\r\n                            if (this.isTouchEnabled) {\r\n                                configuration.arrows = false;\r\n                            }\r\n                            configuration.click = false;\r\n                            configuration.breakpoints = null;\r\n\r\n                            if (!isInternal) {\r\n                                !_.isEqual(settings.activeBreakpoint, {} && settings.brekpoints) ?\r\n                                    $.extend(true, settings.activeBreakpoint.options, configuration) :\r\n\r\n                                    settings.isFullscreen ?\r\n                                        $.extend(true, settings.fullscreenConfig, configuration) :\r\n                                        $.extend(true, settings.defaultConfig.options, configuration);\r\n\r\n                            }\r\n                            $.extend(true, settings.currentConfig.options, configuration);\r\n                            settings.fotoramaApi.setOptions(settings.currentConfig.options);\r\n\r\n                            if (_.isNumber(index)) {\r\n                                $selectable.eq(index).focus();\r\n                            }\r\n                        }\r\n                    },\r\n\r\n                    /**\r\n                     * Updates gallery with specific set of items.\r\n                     * @param {Array.<Object>} data - Set of gallery items to update.\r\n                     */\r\n                    updateData: function (data) {\r\n                        if (_.isArray(data)) {\r\n                            settings.fotoramaApi.load(data);\r\n\r\n                            $.extend(false, settings, {\r\n                                data: data,\r\n                                defaultConfig: data\r\n                            });\r\n                            $.extend(false, config, {\r\n                                data: data\r\n                            });\r\n                        }\r\n                    },\r\n\r\n                    /**\r\n                     * Returns current images list\r\n                     *\r\n                     * @returns {Array}\r\n                     */\r\n                    returnCurrentImages: function () {\r\n                        var images = [];\r\n\r\n                        _.each(this.fotorama.data, function (item) {\r\n                            images.push(_.omit(item, '$navThumbFrame', '$navDotFrame', '$stageFrame', 'labelledby'));\r\n                        });\r\n\r\n                        return images;\r\n                    },\r\n\r\n                    /**\r\n                     * Updates gallery data partially by index\r\n                     * @param {Number} index - Index of image in data array to be updated.\r\n                     * @param {Object} item - Standart gallery image object.\r\n                     *\r\n                     */\r\n                    updateDataByIndex: function(index, item){\r\n                        settings.fotoramaApi.spliceByIndex(index, item);\r\n                    }\r\n                };\r\n\r\n            settings.$element.data('gallery', api);\r\n            settings.api = settings.$element.data('gallery');\r\n            settings.$element.trigger('gallery:loaded');\r\n        }\r\n    });\r\n});\r\n","mage/requirejs/resolver.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'domReady!'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    var context     = require.s.contexts._,\r\n        execCb      = context.execCb,\r\n        registry    = context.registry,\r\n        callbacks   = [],\r\n        retries     = 10,\r\n        updateDelay = 1,\r\n        ready,\r\n        update;\r\n\r\n    /**\r\n     * Checks if provided callback already exists in the callbacks list.\r\n     *\r\n     * @param {Object} callback - Callback object to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function isSubscribed(callback) {\r\n        return !!_.findWhere(callbacks, callback);\r\n    }\r\n\r\n    /**\r\n     * Checks if provided module is rejected during load.\r\n     *\r\n     * @param {Object} module - Module to be checked.\r\n     * @return {Boolean}\r\n     */\r\n    function isRejected(module) {\r\n        return registry[module.id] && registry[module.id].error;\r\n    }\r\n\r\n    /**\r\n     * Checks if provided module has unresolved dependencies.\r\n     *\r\n     * @param {Object} module - Module to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function isPending(module) {\r\n        if (!module.depCount) {\r\n            return false;\r\n        }\r\n\r\n        return module.depCount > _.filter(module.depMaps, isRejected).length;\r\n    }\r\n\r\n    /**\r\n     * Checks if requirejs's registry object contains pending modules.\r\n     *\r\n     * @returns {Boolean}\r\n     */\r\n    function hasPending() {\r\n        return _.some(registry, isPending);\r\n    }\r\n\r\n    /**\r\n     * Checks if 'resolver' module is in ready\r\n     * state and that there are no pending modules.\r\n     *\r\n     * @returns {Boolean}\r\n     */\r\n    function isReady() {\r\n        return ready && !hasPending();\r\n    }\r\n\r\n    /**\r\n     * Invokes provided callback handler.\r\n     *\r\n     * @param {Object} callback\r\n     */\r\n    function invoke(callback) {\r\n        callback.handler.call(callback.ctx);\r\n    }\r\n\r\n    /**\r\n     * Sets 'resolver' module to a ready state\r\n     * and invokes pending callbacks.\r\n     */\r\n    function resolve() {\r\n        ready = true;\r\n\r\n        callbacks.splice(0).forEach(invoke);\r\n    }\r\n\r\n    /**\r\n     * Drops 'ready' flag and runs the update process.\r\n     */\r\n    function tick() {\r\n        ready = false;\r\n\r\n        update(retries);\r\n    }\r\n\r\n    /**\r\n     * Adds callback which will be invoked\r\n     * when all of the pending modules are initiated.\r\n     *\r\n     * @param {Function} handler - 'Ready' event handler function.\r\n     * @param {Object} [ctx] - Optional context with which handler\r\n     *      will be invoked.\r\n     */\r\n    function subscribe(handler, ctx) {\r\n        var callback = {\r\n            handler: handler,\r\n            ctx: ctx\r\n        };\r\n\r\n        if (!isSubscribed(callback)) {\r\n            callbacks.push(callback);\r\n\r\n            if (isReady()) {\r\n                _.defer(tick);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks for all modules to be initiated\r\n     * and invokes pending callbacks if it's so.\r\n     *\r\n     * @param {Number} [retry] - Number of retries\r\n     *      that will be used to repeat the 'update' function\r\n     *      invokation in case if there are no pending requests.\r\n     */\r\n    update = _.debounce(function (retry) {\r\n        if (!hasPending()) {\r\n            retry ? update(--retry) : resolve();\r\n        }\r\n    }, updateDelay);\r\n\r\n    /**\r\n     * Overrides requirejs's original 'execCb' method\r\n     * in order to track pending modules.\r\n     *\r\n     * @returns {*} Result of original method call.\r\n     */\r\n    context.execCb = function () {\r\n        var exported = execCb.apply(context, arguments);\r\n\r\n        tick();\r\n\r\n        return exported;\r\n    };\r\n\r\n    return subscribe;\r\n});\r\n","mage/requirejs/text.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/* inspired by http://github.com/requirejs/text */\r\n/*global XMLHttpRequest, XDomainRequest */\r\n\r\ndefine(['module'], function (module) {\r\n    'use strict';\r\n\r\n    var xmlRegExp = /^\\s*<\\?xml(\\s)+version=[\\'\\\"](\\d)*.(\\d)*[\\'\\\"](\\s)*\\?>/im,\r\n        bodyRegExp = /<body[^>]*>\\s*([\\s\\S]+)\\s*<\\/body>/im,\r\n        stripReg = /!strip$/i,\r\n        defaultConfig = module.config && module.config() || {};\r\n\r\n    /**\r\n     * Strips <?xml ...?> declarations so that external SVG and XML documents can be\r\n     * added to a document without worry.\r\n     * Also, if the string is an HTML document, only the part inside the body tag is returned.\r\n     *\r\n     * @param {String} external\r\n     * @returns {String}\r\n     */\r\n    function stripContent(external) {\r\n        var matches;\r\n\r\n        if (!external) {\r\n            return '';\r\n        }\r\n\r\n        matches = external.match(bodyRegExp);\r\n        external = matches ?\r\n            matches[1] :\r\n            external.replace(xmlRegExp, '');\r\n\r\n        return external;\r\n    }\r\n\r\n    /**\r\n     * Checks that url match current location\r\n     *\r\n     * @param {String} url\r\n     * @returns {Boolean}\r\n     */\r\n    function sameDomain(url) {\r\n        var uProtocol, uHostName, uPort,\r\n            xdRegExp = /^([\\w:]+)?\\/\\/([^\\/\\\\]+)/i,\r\n            location = window.location,\r\n            match = xdRegExp.exec(url);\r\n\r\n        if (!match) {\r\n            return true;\r\n        }\r\n        uProtocol = match[1];\r\n        uHostName = match[2];\r\n\r\n        uHostName = uHostName.split(':');\r\n        uPort = uHostName[1] || '';\r\n        uHostName = uHostName[0];\r\n\r\n        return (!uProtocol || uProtocol === location.protocol) &&\r\n            (!uHostName || uHostName.toLowerCase() === location.hostname.toLowerCase()) &&\r\n            (!uPort && !uHostName || uPort === location.port);\r\n    }\r\n\r\n    /**\r\n     * @returns {XMLHttpRequest|XDomainRequest|null}\r\n     */\r\n    function createRequest(url) {\r\n        var xhr = new XMLHttpRequest();\r\n\r\n        if (!sameDomain(url) && typeof XDomainRequest !== 'undefined') {\r\n            xhr = new XDomainRequest();\r\n        }\r\n\r\n        return xhr;\r\n    }\r\n\r\n    /**\r\n     * XHR requester. Returns value to callback.\r\n     *\r\n     * @param {String} url\r\n     * @param {Function} callback\r\n     * @param {Function} fail\r\n     * @param {Object} headers\r\n     */\r\n    function getContent(url, callback, fail, headers) {\r\n        var xhr = createRequest(url),\r\n            header,\r\n            errorHandler = fail || Function();\r\n\r\n        xhr.open('GET', url);\r\n\r\n        /*eslint-disable max-depth */\r\n        if ('setRequestHeader' in xhr && headers) {\r\n            for (header in headers) {\r\n                if (headers.hasOwnProperty(header)) {\r\n                    xhr.setRequestHeader(header.toLowerCase(), headers[header]);\r\n                }\r\n            }\r\n        }\r\n\r\n        /*eslint-enable max-depth */\r\n\r\n        if (defaultConfig.onXhr) {\r\n            defaultConfig.onXhr(xhr, url);\r\n        }\r\n\r\n        /**\r\n         * onload handler\r\n         */\r\n        xhr.onload = function () {\r\n\r\n            callback(xhr.responseText);\r\n\r\n            if (defaultConfig.onXhrComplete) {\r\n                defaultConfig.onXhrComplete(xhr, url);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * onerror handler\r\n         */\r\n        xhr.onerror = function (event) {\r\n            errorHandler(event);\r\n\r\n            if (defaultConfig.onXhrFailure) {\r\n                defaultConfig.onXhrFailure(xhr, url, event);\r\n            }\r\n        };\r\n\r\n        xhr.send();\r\n    }\r\n\r\n    /**\r\n     * Main method used by RequireJs.\r\n     *\r\n     * @param {String} name - has format: some.module.filext!strip\r\n     * @param {Function} req\r\n     * @param {Function|undefined} onLoad\r\n     */\r\n    function loadContent(name, req, onLoad) {\r\n\r\n        var toStrip = stripReg.test(name),\r\n            url = req.toUrl(name.replace(stripReg, '')),\r\n            headers = defaultConfig.headers;\r\n\r\n        getContent(url, function (content) {\r\n                content = toStrip ? stripContent(content) : content;\r\n                onLoad(content);\r\n            }, onLoad.error, headers);\r\n    }\r\n\r\n    return {\r\n        load: loadContent,\r\n        get: getContent\r\n    };\r\n});\r\n","mage/utils/arrays.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    './strings'\r\n], function (_, utils) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Defines index of an item in a specified container.\r\n     *\r\n     * @param {*} item - Item whose index should be defined.\r\n     * @param {Array} container - Container upon which to perform search.\r\n     * @returns {Number}\r\n     */\r\n    function getIndex(item, container) {\r\n        var index = container.indexOf(item);\r\n\r\n        if (~index) {\r\n            return index;\r\n        }\r\n\r\n        return _.findIndex(container, function (value) {\r\n            return value && value.name === item;\r\n        });\r\n    }\r\n\r\n    return {\r\n       /**\r\n         * Facade method to remove/add value from/to array\r\n         * without creating a new instance.\r\n         *\r\n         * @param {Array} arr - Array to be modified.\r\n         * @param {*} value - Value to add/remove.\r\n         * @param {Boolean} add - Flag that specfies operation.\r\n         * @returns {Utils} Chainable.\r\n         */\r\n        toggle: function (arr, value, add) {\r\n            return add ?\r\n                this.add(arr, value) :\r\n                this.remove(arr, value);\r\n        },\r\n\r\n        /**\r\n         * Removes the incoming value from array in case\r\n         * without creating a new instance of it.\r\n         *\r\n         * @param {Array} arr - Array to be modified.\r\n         * @param {*} value - Value to be removed.\r\n         * @returns {Utils} Chainable.\r\n         */\r\n        remove: function (arr, value) {\r\n            var index = arr.indexOf(value);\r\n\r\n            if (~index) {\r\n                arr.splice(index, 1);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds the incoming value to array if\r\n         * it's not alredy present in there.\r\n         *\r\n         * @param {Array} arr - Array to be modifed.\r\n         * @param {...*} Values to be added.\r\n         * @returns {Utils} Chainable.\r\n         */\r\n        add: function (arr) {\r\n            var values = _.toArray(arguments).slice(1);\r\n\r\n            values.forEach(function (value) {\r\n                if (!~arr.indexOf(value)) {\r\n                    arr.push(value);\r\n                }\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Inserts specified item into container at a specified position.\r\n         *\r\n         * @param {*} item - Item to be inserted into container.\r\n         * @param {Array} container - Container of items.\r\n         * @param {*} [position=-1] - Position at which item should be inserted.\r\n         *      Position can represent:\r\n         *          - specific index in container\r\n         *          - item which might already be present in container\r\n         *          - structure with one of these properties: after, before\r\n         * @returns {Boolean|*}\r\n         *      - true if element has changed its' position\r\n         *      - false if nothing has changed\r\n         *      - inserted value if it wasn't present in container\r\n         */\r\n        insert: function (item, container, position) {\r\n            var currentIndex = getIndex(item, container),\r\n                newIndex,\r\n                target;\r\n\r\n            if (typeof position === 'undefined' || position == null) {\r\n                position = -1;\r\n            } else if (typeof position === 'string') {\r\n                position = isNaN(+position) ? position : +position;\r\n            }\r\n\r\n            newIndex = position;\r\n\r\n            if (~currentIndex) {\r\n                target = container.splice(currentIndex, 1)[0];\r\n\r\n                if (typeof item === 'string') {\r\n                    item = target;\r\n                }\r\n            }\r\n\r\n            if (typeof position !== 'number') {\r\n                target = position.after || position.before || position;\r\n\r\n                newIndex = getIndex(target, container);\r\n\r\n                if (~newIndex && (position.after || newIndex >= currentIndex)) {\r\n                    newIndex++;\r\n                }\r\n            }\r\n\r\n            if (newIndex < 0) {\r\n                newIndex += container.length + 1;\r\n            }\r\n\r\n            container[newIndex] ?\r\n                container.splice(newIndex, 0, item) :\r\n                container[newIndex] = item;\r\n\r\n            return !~currentIndex ? item : currentIndex !== newIndex;\r\n        },\r\n\r\n        formatOffset: function (elems, offset) {\r\n            if (utils.isEmpty(offset)) {\r\n                offset = -1;\r\n            }\r\n\r\n            offset = +offset;\r\n\r\n            if (offset < 0) {\r\n                offset += elems.length + 1;\r\n            }\r\n\r\n            return offset;\r\n        }\r\n    };\r\n});\r\n","mage/utils/compare.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mage/utils/objects'\r\n], function (_, utils) {\r\n    'use strict';\r\n\r\n    var result = [];\r\n\r\n    /**\r\n     * Checks if all of the provided arrays contains equal values.\r\n     *\r\n     * @param {(Boolean|Array)} [keepOrder=false]\r\n     * @param {Array} target\r\n     * @returns {Boolean}\r\n     */\r\n    function equalArrays(keepOrder, target) {\r\n        var args = _.toArray(arguments),\r\n            arrays;\r\n\r\n        if (!Array.isArray(keepOrder)) {\r\n            arrays      = args.slice(2);\r\n        } else {\r\n            target      = keepOrder;\r\n            keepOrder   = false;\r\n            arrays      = args.slice(1);\r\n        }\r\n\r\n        if (!arrays.length) {\r\n            return true;\r\n        }\r\n\r\n        return arrays.every(function (array) {\r\n            if (array === target) {\r\n                return true;\r\n            } else if (array.length !== target.length) {\r\n                return false;\r\n            } else if (!keepOrder) {\r\n                return !_.difference(target, array).length;\r\n            }\r\n\r\n            return array.every(function (value, index) {\r\n                return target.indexOf(value) === index;\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if two values are different.\r\n     *\r\n     * @param {*} a - First value.\r\n     * @param {*} b - Second value.\r\n     * @returns {Boolean}\r\n     */\r\n    function isDifferent(a, b) {\r\n        var oldIsPrimitive = utils.isPrimitive(a);\r\n\r\n        if (Array.isArray(a) && Array.isArray(b)) {\r\n            return !equalArrays(true, a, b);\r\n        }\r\n\r\n        return oldIsPrimitive ? a !== b : true;\r\n    }\r\n\r\n    /**\r\n     * @param {String} prefix\r\n     * @param {String} part\r\n     */\r\n    function getPath(prefix, part) {\r\n        return prefix ? prefix + '.' + part : part;\r\n    }\r\n\r\n    /**\r\n     * Checks if object has own specified property.\r\n     *\r\n     * @param {*} obj - Value to be checked.\r\n     * @param {String} key - Key of the property.\r\n     * @returns {Boolean}\r\n     */\r\n    function hasOwn(obj, key) {\r\n        return Object.prototype.hasOwnProperty.call(obj, key);\r\n    }\r\n\r\n    /**\r\n     * @param {Array} changes\r\n     */\r\n    function getContainers(changes) {\r\n        var containers  = {},\r\n            indexed     = _.indexBy(changes, 'path');\r\n\r\n        _.each(indexed, function (change, name) {\r\n            var path;\r\n\r\n            name.split('.').forEach(function (part) {\r\n                path = getPath(path, part);\r\n\r\n                if (path in indexed) {\r\n                    return;\r\n                }\r\n\r\n                (containers[path] = containers[path] || []).push(change);\r\n            });\r\n        });\r\n\r\n        return containers;\r\n    }\r\n\r\n    /**\r\n     * @param {String} path\r\n     * @param {String} name\r\n     * @param {String} type\r\n     * @param {String} newValue\r\n     * @param {String} oldValue\r\n     */\r\n    function addChange(path, name, type, newValue, oldValue) {\r\n        var data;\r\n\r\n        data = {\r\n            path: path,\r\n            name: name,\r\n            type: type\r\n        };\r\n\r\n        if (type !== 'remove') {\r\n            data.value = newValue;\r\n            data.oldValue = oldValue;\r\n        } else {\r\n            data.oldValue = newValue;\r\n        }\r\n\r\n        result.push(data);\r\n    }\r\n\r\n    /**\r\n     * @param {String} ns\r\n     * @param {String} name\r\n     * @param {String} type\r\n     * @param {String} iterator\r\n     * @param {String} placeholder\r\n     */\r\n    function setAll(ns, name, type, iterator, placeholder) {\r\n        var key;\r\n\r\n        if (arguments.length > 4) {\r\n            type === 'add' ?\r\n                addChange(ns, name, 'update', iterator, placeholder) :\r\n                addChange(ns, name, 'update', placeholder, iterator);\r\n        } else {\r\n            addChange(ns, name, type, iterator);\r\n        }\r\n\r\n        if (!utils.isObject(iterator)) {\r\n            return;\r\n        }\r\n\r\n        for (key in iterator) {\r\n            if (hasOwn(iterator, key)) {\r\n                setAll(getPath(ns, key), key, type, iterator[key]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*eslint-disable max-depth*/\r\n    /**\r\n     * @param {Object} old\r\n     * @param {Object} current\r\n     * @param {String} ns\r\n     * @param {String} name\r\n     */\r\n    function compare(old, current, ns, name) {\r\n        var key,\r\n            oldIsObj = utils.isObject(old),\r\n            newIsObj = utils.isObject(current);\r\n\r\n        if (oldIsObj && newIsObj) {\r\n            for (key in old) {\r\n                if (hasOwn(old, key) && !hasOwn(current, key)) {\r\n                    setAll(getPath(ns, key), key, 'remove', old[key]);\r\n                }\r\n            }\r\n\r\n            for (key in current) {\r\n                if (hasOwn(current, key)) {\r\n                    hasOwn(old, key) ?\r\n                        compare(old[key], current[key], getPath(ns, key), key) :\r\n                        setAll(getPath(ns, key), key, 'add', current[key]);\r\n                }\r\n            }\r\n        } else if (oldIsObj) {\r\n            setAll(ns, name, 'remove', old, current);\r\n        } else if (newIsObj) {\r\n            setAll(ns, name, 'add', current, old);\r\n        } else if (isDifferent(old, current)) {\r\n            addChange(ns, name, 'update', current, old);\r\n        }\r\n    }\r\n\r\n    /*eslint-enable max-depth*/\r\n\r\n    return {\r\n\r\n        /**\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        compare: function () {\r\n            var changes;\r\n\r\n            compare.apply(null, arguments);\r\n\r\n            changes = result.splice(0);\r\n\r\n            return {\r\n                containers: getContainers(changes),\r\n                changes: changes,\r\n                equal: !changes.length\r\n            };\r\n        },\r\n\r\n        equalArrays: equalArrays\r\n    };\r\n});\r\n","mage/utils/main.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine(function (require) {\r\n    'use strict';\r\n\r\n    var utils = {},\r\n        _ = require('underscore');\r\n\r\n    return _.extend(\r\n        utils,\r\n        require('./arrays'),\r\n        require('./compare'),\r\n        require('./misc'),\r\n        require('./objects'),\r\n        require('./strings'),\r\n        require('./template')\r\n    );\r\n});\r\n","mage/utils/misc.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'jquery',\r\n    'FormData'\r\n], function (_, $) {\r\n    'use strict';\r\n\r\n    var defaultAttributes,\r\n        ajaxSettings,\r\n        map;\r\n\r\n    defaultAttributes = {\r\n        method: 'post',\r\n        enctype: 'multipart/form-data'\r\n    };\r\n\r\n    ajaxSettings = {\r\n        default: {\r\n            method: 'POST',\r\n            cache: false,\r\n            processData: false,\r\n            contentType: false\r\n        },\r\n        simple: {\r\n            method: 'POST',\r\n            dataType: 'json'\r\n        }\r\n    };\r\n\r\n    map = {\r\n        'D': 'DDD',\r\n        'dd': 'DD',\r\n        'd': 'D',\r\n        'EEEE': 'dddd',\r\n        'EEE': 'ddd',\r\n        'e': 'd',\r\n        'yyyy': 'YYYY',\r\n        'yy': 'YY',\r\n        'y': 'YYYY',\r\n        'a': 'A'\r\n    };\r\n\r\n    return {\r\n\r\n        /**\r\n         * Generates a unique identifier.\r\n         *\r\n         * @param {Number} [size=7] - Length of a resulting identifier.\r\n         * @returns {String}\r\n         */\r\n        uniqueid: function (size) {\r\n            var code = Math.random() * 25 + 65 | 0,\r\n                idstr = String.fromCharCode(code);\r\n\r\n            size = size || 7;\r\n\r\n            while (idstr.length < size) {\r\n                code = Math.floor(Math.random() * 42 + 48);\r\n\r\n                if (code < 58 || code > 64) {\r\n                    idstr += String.fromCharCode(code);\r\n                }\r\n            }\r\n\r\n            return idstr;\r\n        },\r\n\r\n        /**\r\n         * Limits function call.\r\n         *\r\n         * @param {Object} owner\r\n         * @param {String} target\r\n         * @param {Number} limit\r\n         */\r\n        limit: function (owner, target, limit) {\r\n            var fn = owner[target];\r\n\r\n            owner[target] = _.debounce(fn.bind(owner), limit);\r\n        },\r\n\r\n        /**\r\n         * Converts mage date format to a moment.js format.\r\n         *\r\n         * @param {String} mageFormat\r\n         * @returns {String}\r\n         */\r\n        normalizeDate: function (mageFormat) {\r\n            var result = mageFormat;\r\n\r\n            _.each(map, function (moment, mage) {\r\n                result = result.replace(mage, moment);\r\n            });\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Puts provided value in range of min and max parameters.\r\n         *\r\n         * @param {Number} value - Value to be located.\r\n         * @param {Number} min - Min value.\r\n         * @param {Number} max - Max value.\r\n         * @returns {Number}\r\n         */\r\n        inRange: function (value, min, max) {\r\n            return Math.min(Math.max(min, value), max);\r\n        },\r\n\r\n        /**\r\n         * Serializes and sends data via POST request.\r\n         *\r\n         * @param {Object} options - Options object that consists of\r\n         *      a 'url' and 'data' properties.\r\n         * @param {Object} attrs - Attributes that will be added to virtual form.\r\n         */\r\n        submit: function (options, attrs) {\r\n            var form        = document.createElement('form'),\r\n                data        = this.serialize(options.data),\r\n                attributes  = _.extend({}, defaultAttributes, attrs || {}),\r\n                field;\r\n\r\n            if (!attributes.action) {\r\n                attributes.action = options.url;\r\n            }\r\n\r\n            data['form_key'] = window.FORM_KEY;\r\n\r\n            _.each(attributes, function (value, name) {\r\n                form.setAttribute(name, value);\r\n            });\r\n\r\n            _.each(data, function (value, name) {\r\n                field = document.createElement('input');\r\n\r\n                field.setAttribute('name', name);\r\n                field.setAttribute('type', 'hidden');\r\n\r\n                field.value = value;\r\n\r\n                form.appendChild(field);\r\n            });\r\n\r\n            document.body.appendChild(form);\r\n\r\n            form.submit();\r\n        },\r\n\r\n        /**\r\n         * Serializes and sends data via AJAX POST request.\r\n         *\r\n         * @param {Object} options - Options object that consists of\r\n         *      a 'url' and 'data' properties.\r\n         * @param {Object} config\r\n         */\r\n        ajaxSubmit: function (options, config) {\r\n            var t = new Date().getTime(),\r\n                settings;\r\n\r\n            options.data['form_key'] = window.FORM_KEY;\r\n            options.data = this.prepareFormData(options.data, config.ajaxSaveType);\r\n            settings = _.extend({}, ajaxSettings[config.ajaxSaveType], options || {});\r\n\r\n            $('body').trigger('processStart');\r\n\r\n            return $.ajax(settings)\r\n                .done(function (data) {\r\n                    data.t = t;\r\n                    config.response.data(data);\r\n                    config.response.status(undefined);\r\n                    config.response.status(!data.error);\r\n                })\r\n                .fail(function (xhr) {\r\n                    config.response.status(undefined);\r\n                    config.response.status(false);\r\n                    config.response.data({\r\n                        error: true,\r\n                        messages: xhr.statusText,\r\n                        t: t\r\n                    });\r\n                })\r\n                .always(function () {\r\n                    $('body').trigger('processStop');\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Creates FormData object and append this data.\r\n         *\r\n         * @param {Object} data\r\n         * @param {String} type\r\n         * @returns {FormData}\r\n         */\r\n        prepareFormData: function (data, type) {\r\n            var formData;\r\n\r\n            if (type === 'default') {\r\n                formData = new FormData();\r\n                _.each(this.serialize(data), function (val, name) {\r\n                    formData.append(name, val);\r\n                });\r\n            } else if (type === 'simple') {\r\n                formData = this.serialize(data);\r\n            }\r\n\r\n            return formData;\r\n        },\r\n\r\n        /**\r\n         * Filters data object. Finds properties with suffix\r\n         * and sets their values to properties with the same name without suffix.\r\n         *\r\n         * @param {Object} data - The data object that should be filtered\r\n         * @param {String} suffix - The string by which data object should be filtered\r\n         * @param {String} separator - The string that is separator between property and suffix\r\n         *\r\n         * @returns {Object} Filtered data object\r\n         */\r\n        filterFormData: function (data, suffix, separator) {\r\n            data = data || {};\r\n            suffix = suffix || 'prepared-for-send';\r\n            separator = separator || '-';\r\n\r\n            _.each(data, function (value, key) {\r\n                if (_.isObject(value) && !value.length) {\r\n                    this.filterFormData(value, suffix, separator);\r\n                } else if (_.isString(key) && ~key.indexOf(suffix)) {\r\n                    data[key.split(separator)[0]] = value;\r\n                    delete data[key];\r\n                }\r\n            }, this);\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Converts PHP IntlFormatter format to moment format.\r\n         *\r\n         * @param {String} format - PHP format\r\n         * @returns {String} - moment compatible formatting\r\n         */\r\n        convertToMomentFormat: function (format) {\r\n            var newFormat;\r\n\r\n            newFormat = format.replace(/yyyy|yy|y/, 'YYYY'); // replace the year\r\n            newFormat = newFormat.replace(/dd|d/g, 'DD'); // replace the day\r\n\r\n            return newFormat;\r\n        }\r\n    };\r\n});\r\n","mage/utils/objects.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'underscore'\r\n], function (ko, $, _) {\r\n    'use strict';\r\n\r\n    var primitives = [\r\n        'undefined',\r\n        'boolean',\r\n        'number',\r\n        'string'\r\n    ];\r\n\r\n    /**\r\n     * Sets nested property of a specified object.\r\n     * @private\r\n     *\r\n     * @param {Object} parent - Object to look inside for the properties.\r\n     * @param {Array} path - Splitted path the property.\r\n     * @param {*} value - Value of the last property in 'path' array.\r\n     * returns {*} New value for the property.\r\n     */\r\n    function setNested(parent, path, value) {\r\n        var last = path.pop(),\r\n            len = path.length,\r\n            pi = 0,\r\n            part = path[pi];\r\n\r\n        for (; pi < len; part = path[++pi]) {\r\n            if (!_.isObject(parent[part])) {\r\n                parent[part] = {};\r\n            }\r\n\r\n            parent = parent[part];\r\n        }\r\n\r\n        if (typeof parent[last] === 'function') {\r\n            parent[last](value);\r\n        } else {\r\n            parent[last] = value;\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Retrieves value of a nested property.\r\n     * @private\r\n     *\r\n     * @param {Object} parent - Object to look inside for the properties.\r\n     * @param {Array} path - Splitted path the property.\r\n     * @returns {*} Value of the property.\r\n     */\r\n    function getNested(parent, path) {\r\n        var exists = true,\r\n            len = path.length,\r\n            pi = 0;\r\n\r\n        for (; pi < len && exists; pi++) {\r\n            parent = parent[path[pi]];\r\n\r\n            if (typeof parent === 'undefined') {\r\n                exists = false;\r\n            }\r\n        }\r\n\r\n        if (exists) {\r\n            if (ko.isObservable(parent)) {\r\n                parent = parent();\r\n            }\r\n\r\n            return parent;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes property from a specified object.\r\n     * @private\r\n     *\r\n     * @param {Object} parent - Object from which to remove property.\r\n     * @param {Array} path - Splitted path to the property.\r\n     */\r\n    function removeNested(parent, path) {\r\n        var field = path.pop();\r\n\r\n        parent = getNested(parent, path);\r\n\r\n        if (_.isObject(parent)) {\r\n            delete parent[field];\r\n        }\r\n    }\r\n\r\n    return {\r\n\r\n        /**\r\n         * Retrieves or defines objects' property by a composite path.\r\n         *\r\n         * @param {Object} data - Container for the properties specified in path.\r\n         * @param {String} path - Objects' properties divided by dots.\r\n         * @param {*} [value] - New value for the last property.\r\n         * @returns {*} Returns value of the last property in chain.\r\n         *\r\n         * @example\r\n         *      utils.nested({}, 'one.two', 3);\r\n         *      => { one: {two: 3} }\r\n         */\r\n        nested: function (data, path, value) {\r\n            var action = arguments.length > 2 ? setNested : getNested;\r\n\r\n            path = path ? path.split('.') : [];\r\n\r\n            return action(data, path, value);\r\n        },\r\n\r\n        /**\r\n         * Removes nested property from an object.\r\n         *\r\n         * @param {Object} data - Data source.\r\n         * @param {String} path - Path to the property e.g. 'one.two.three'\r\n         */\r\n        nestedRemove: function (data, path) {\r\n            path = path.split('.');\r\n\r\n            removeNested(data, path);\r\n        },\r\n\r\n        /**\r\n         * Flattens objects' nested properties.\r\n         *\r\n         * @param {Object} data - Object to flatten.\r\n         * @param {String} [separator='.'] - Objects' keys separator.\r\n         * @returns {Object} Flattened object.\r\n         *\r\n         * @example Example with a default separator.\r\n         *      utils.flatten({one: { two: { three: 'value'} }});\r\n         *      => { 'one.two.three': 'value' };\r\n         *\r\n         * @example Example with a custom separator.\r\n         *      utils.flatten({one: { two: { three: 'value'} }}, '=>');\r\n         *      => {'one=>two=>three': 'value'};\r\n         */\r\n        flatten: function (data, separator, parent, result) {\r\n            separator = separator || '.';\r\n            result = result || {};\r\n\r\n            _.each(data, function (node, name) {\r\n                if (parent) {\r\n                    name = parent + separator + name;\r\n                }\r\n\r\n                typeof node === 'object' ?\r\n                    this.flatten(node, separator, name, result) :\r\n                    result[name] = node;\r\n\r\n            }, this);\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Opposite operation of the 'flatten' method.\r\n         *\r\n         * @param {Object} data - Previously flattened object.\r\n         * @param {String} [separator='.'] - Keys separator.\r\n         * @returns {Object} Object with nested properties.\r\n         *\r\n         * @example Example using custom separator.\r\n         *      utils.unflatten({'one=>two': 'value'}, '=>');\r\n         *      => {\r\n         *          one: { two: 'value' }\r\n         *      };\r\n         */\r\n        unflatten: function (data, separator) {\r\n            var result = {};\r\n\r\n            separator = separator || '.';\r\n\r\n            _.each(data, function (value, nodes) {\r\n                nodes = nodes.split(separator);\r\n\r\n                setNested(result, nodes, value);\r\n            });\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Same operation as 'flatten' method,\r\n         * but returns objects' keys wrapped in '[]'.\r\n         *\r\n         * @param {Object} data - Object that should be serialized.\r\n         * @returns {Object} Serialized data.\r\n         *\r\n         * @example\r\n         *      utils.serialize({one: { two: { three: 'value'} }});\r\n         *      => { 'one[two][three]': 'value' }\r\n         */\r\n        serialize: function (data) {\r\n            var result = {};\r\n\r\n            data = this.flatten(data);\r\n\r\n            _.each(data, function (value, keys) {\r\n                keys = this.serializeName(keys);\r\n                value = _.isUndefined(value) ? '' : value;\r\n\r\n                result[keys] = value;\r\n            }, this);\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Performs deep extend of specified objects.\r\n         *\r\n         * @returns {Object|Array} Extended object.\r\n         */\r\n        extend: function () {\r\n            var args = _.toArray(arguments);\r\n\r\n            args.unshift(true);\r\n\r\n            return $.extend.apply($, args);\r\n        },\r\n\r\n        /**\r\n         * Performs a deep clone of a specified object.\r\n         *\r\n         * @param {(Object|Array)} data - Data that should be copied.\r\n         * @returns {Object|Array} Cloned object.\r\n         */\r\n        copy: function (data) {\r\n            var result = data,\r\n                isArray = Array.isArray(data),\r\n                placeholder;\r\n\r\n            if (this.isObject(data) || isArray) {\r\n                placeholder = isArray ? [] : {};\r\n                result = this.extend(placeholder, data);\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Performs a deep clone of a specified object.\r\n         * Doesn't save links to original object.\r\n         *\r\n         * @param {*} original - Object to clone\r\n         * @returns {*}\r\n         */\r\n        hardCopy: function (original) {\r\n            if (original === null || typeof original !== 'object') {\r\n                return original;\r\n            }\r\n\r\n            return JSON.parse(JSON.stringify(original));\r\n        },\r\n\r\n        /**\r\n         * Removes specified nested properties from the target object.\r\n         *\r\n         * @param {Object} target - Object whose properties should be removed.\r\n         * @param {(...String|Array|Object)} list - List that specifies properties to be removed.\r\n         * @returns {Object} Modified object.\r\n         *\r\n         * @example Basic usage\r\n         *      var obj = {a: {b: 2}, c: 'a'};\r\n         *\r\n         *      omit(obj, 'a.b');\r\n         *      => {'a.b': 2};\r\n         *      obj => {a: {}, c: 'a'};\r\n         *\r\n         * @example Various syntaxes that would return same result\r\n         *      omit(obj, ['a.b', 'c']);\r\n         *      omit(obj, 'a.b', 'c');\r\n         *      omit(obj, {'a.b': true, 'c': true});\r\n         */\r\n        omit: function (target, list) {\r\n            var removed = {},\r\n                ignored = list;\r\n\r\n            if (this.isObject(list)) {\r\n                ignored = [];\r\n\r\n                _.each(list, function (value, key) {\r\n                    if (value) {\r\n                        ignored.push(key);\r\n                    }\r\n                });\r\n            } else if (_.isString(list)) {\r\n                ignored = _.toArray(arguments).slice(1);\r\n            }\r\n\r\n            _.each(ignored, function (path) {\r\n                var value = this.nested(target, path);\r\n\r\n                if (!_.isUndefined(value)) {\r\n                    removed[path] = value;\r\n\r\n                    this.nestedRemove(target, path);\r\n                }\r\n            }, this);\r\n\r\n            return removed;\r\n        },\r\n\r\n        /**\r\n         * Checks if provided value is a plain object.\r\n         *\r\n         * @param {*} value - Value to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isObject: function (value) {\r\n            var objProto = Object.prototype;\r\n\r\n            return typeof value == 'object' ?\r\n            objProto.toString.call(value) === '[object Object]' :\r\n                false;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {*} value\r\n         * @returns {Boolean}\r\n         */\r\n        isPrimitive: function (value) {\r\n            return value === null || ~primitives.indexOf(typeof value);\r\n        },\r\n\r\n        /**\r\n         * Iterates over obj props/array elems recursively, applying action to each one\r\n         *\r\n         * @param {Object|Array} data - Data to be iterated.\r\n         * @param {Function} action - Callback to be called with each item as an argument.\r\n         * @param {Number} [maxDepth=7] - Max recursion depth.\r\n         */\r\n        forEachRecursive: function (data, action, maxDepth) {\r\n            maxDepth = typeof maxDepth === 'number' && !isNaN(maxDepth) ? maxDepth - 1 : 7;\r\n\r\n            if (!_.isFunction(action) || _.isFunction(data) || maxDepth < 0) {\r\n                return;\r\n            }\r\n\r\n            if (!_.isObject(data)) {\r\n                action(data);\r\n\r\n                return;\r\n            }\r\n\r\n            _.each(data, function (value) {\r\n                this.forEachRecursive(value, action, maxDepth);\r\n            }, this);\r\n\r\n            action(data);\r\n        },\r\n\r\n        /**\r\n         * Maps obj props/array elems recursively\r\n         *\r\n         * @param {Object|Array} data - Data to be iterated.\r\n         * @param {Function} action - Callback to transform each item.\r\n         * @param {Number} [maxDepth=7] - Max recursion depth.\r\n         *\r\n         * @returns {Object|Array}\r\n         */\r\n        mapRecursive: function (data, action, maxDepth) {\r\n            var newData;\r\n\r\n            maxDepth = typeof maxDepth === 'number' && !isNaN(maxDepth) ? maxDepth - 1 : 7;\r\n\r\n            if (!_.isFunction(action) || _.isFunction(data) || maxDepth < 0) {\r\n                return data;\r\n            }\r\n\r\n            if (!_.isObject(data)) {\r\n                return action(data);\r\n            }\r\n\r\n            if (_.isArray(data)) {\r\n                newData = _.map(data, function (item) {\r\n                    return this.mapRecursive(item, action, maxDepth);\r\n                }, this);\r\n\r\n                return action(newData);\r\n            }\r\n\r\n            newData = _.mapObject(data, function (val, key) {\r\n                if (data.hasOwnProperty(key)) {\r\n                    return this.mapRecursive(val, action, maxDepth);\r\n                }\r\n\r\n                return val;\r\n            }, this);\r\n\r\n            return action(newData);\r\n        },\r\n\r\n        /**\r\n         * Removes empty(in common sence) obj props/array elems\r\n         *\r\n         * @param {*} data - Data to be cleaned.\r\n         * @returns {*}\r\n         */\r\n        removeEmptyValues: function (data) {\r\n            if (!_.isObject(data)) {\r\n                return data;\r\n            }\r\n\r\n            if (_.isArray(data)) {\r\n                return data.filter(function (item) {\r\n                    return !this.isEmptyObj(item);\r\n                }, this);\r\n            }\r\n\r\n            return _.omit(data, this.isEmptyObj.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Checks that argument of any type is empty in common sence:\r\n         * empty string, string with spaces only, object without own props, empty array, null or undefined\r\n         *\r\n         * @param {*} val - Value to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isEmptyObj: function (val) {\r\n\r\n            return _.isObject(val) && _.isEmpty(val) ||\r\n            this.isEmpty(val) ||\r\n            val && val.trim && this.isEmpty(val.trim());\r\n        }\r\n    };\r\n});\r\n","mage/utils/strings.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    var jsonRe = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/;\r\n\r\n    return {\r\n\r\n        /**\r\n         * Attempts to convert string to one of the primitive values,\r\n         * or to parse it as a valid json object.\r\n         *\r\n         * @param {String} str - String to be processed.\r\n         * @returns {*}\r\n         */\r\n        castString: function (str) {\r\n            try {\r\n                str = str === 'true' ? true :\r\n                    str === 'false' ? false :\r\n                        str === 'null' ? null :\r\n                            +str + '' === str ? +str :\r\n                                jsonRe.test(str) ? JSON.parse(str) :\r\n                                    str;\r\n            } catch (e) {\r\n            }\r\n\r\n            return str;\r\n        },\r\n\r\n        /**\r\n         * Splits string by separator if it's possible,\r\n         * otherwise returns the incoming value.\r\n         *\r\n         * @param {(String|Array|*)} str - String to split.\r\n         * @param {String} [separator=' '] - Seperator based on which to split the string.\r\n         * @returns {Array|*} Splitted string or the incoming value.\r\n         */\r\n        stringToArray: function (str, separator) {\r\n            separator = separator || ' ';\r\n\r\n            return typeof str === 'string' ?\r\n                str.split(separator) :\r\n                str;\r\n        },\r\n\r\n        /**\r\n         * Converts the incoming string which consists\r\n         * of a specified delimiters into a format commonly used in form elements.\r\n         *\r\n         * @param {String} name - The incoming string.\r\n         * @param {String} [separator='.']\r\n         * @returns {String} Serialized string.\r\n         *\r\n         * @example\r\n         *      utils.serializeName('one.two.three');\r\n         *      => 'one[two][three]';\r\n         */\r\n        serializeName: function (name, separator) {\r\n            var result;\r\n\r\n            separator = separator || '.';\r\n            name = name.split(separator);\r\n\r\n            result = name.shift();\r\n\r\n            name.forEach(function (part) {\r\n                result += '[' + part + ']';\r\n            });\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Checks wether the incoming value is not empty,\r\n         * e.g. not 'null' or 'undefined'\r\n         *\r\n         * @param {*} value - Value to check.\r\n         * @returns {Boolean}\r\n         */\r\n        isEmpty: function (value) {\r\n            return value === '' || _.isUndefined(value) || _.isNull(value);\r\n        },\r\n\r\n        /**\r\n         * Adds 'prefix' to the 'part' value if it was provided.\r\n         *\r\n         * @param {String} prefix\r\n         * @param {String} part\r\n         * @returns {String}\r\n         */\r\n        fullPath: function (prefix, part) {\r\n            return prefix ? prefix + '.' + part : part;\r\n        },\r\n\r\n        /**\r\n         * Splits incoming string and returns its' part specified by offset.\r\n         *\r\n         * @param {String} parts\r\n         * @param {Number} [offset]\r\n         * @param {String} [delimiter=.]\r\n         * @returns {String}\r\n         */\r\n        getPart: function (parts, offset, delimiter) {\r\n            delimiter = delimiter || '.';\r\n            parts = parts.split(delimiter);\r\n            offset = this.formatOffset(parts, offset);\r\n\r\n            parts.splice(offset, 1);\r\n\r\n            return parts.join(delimiter) || '';\r\n        },\r\n\r\n        /**\r\n         * Converts nameThroughCamelCase to name-through-minus\r\n         *\r\n         * @param {String} string\r\n         * @returns {String}\r\n         */\r\n        camelCaseToMinus: function camelCaseToMinus(string) {\r\n            return ('' + string)\r\n                .split('')\r\n                .map(function (symbol, index) {\r\n                    return index ?\r\n                        symbol.toUpperCase() === symbol ?\r\n                        '-' + symbol.toLowerCase() :\r\n                            symbol :\r\n                        symbol.toLowerCase();\r\n                })\r\n                .join('');\r\n        },\r\n\r\n        /**\r\n         * Converts name-through-minus to nameThroughCamelCase\r\n         *\r\n         * @param {String} string\r\n         * @returns {String}\r\n         */\r\n        minusToCamelCase: function minusToCamelCase(string) {\r\n            return ('' + string)\r\n                .split('-')\r\n                .map(function (part, index) {\r\n                    return index ? part.charAt(0).toUpperCase() + part.slice(1) : part;\r\n                })\r\n                .join('');\r\n        }\r\n    };\r\n});\r\n","mage/utils/template.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* eslint-disable no-shadow */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mage/utils/objects',\r\n    'mage/utils/strings'\r\n], function ($, _, utils, stringUtils) {\r\n    'use strict';\r\n\r\n    var tmplSettings = _.templateSettings,\r\n        interpolate = /\\$\\{([\\s\\S]+?)\\}/g,\r\n        opener = '${',\r\n        template,\r\n        hasStringTmpls;\r\n\r\n    /**\r\n     * Identifies whether ES6 templates are supported.\r\n     */\r\n    hasStringTmpls = (function () {\r\n        var testString = 'var foo = \"bar\"; return `${ foo }` === foo';\r\n\r\n        try {\r\n            return Function(testString)();\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    })();\r\n\r\n    if (hasStringTmpls) {\r\n\r\n        /*eslint-disable no-unused-vars, no-eval*/\r\n        /**\r\n         * Evaluates template string using ES6 templates.\r\n         *\r\n         * @param {String} tmpl - Template string.\r\n         * @param {Object} $ - Data object used in a template.\r\n         * @returns {String} Compiled template.\r\n         */\r\n        template = function (tmpl, $) {\r\n            return eval('`' + tmpl + '`');\r\n        };\r\n\r\n        /*eslint-enable no-unused-vars, no-eval*/\r\n    } else {\r\n\r\n        /**\r\n         * Fallback function used when ES6 templates are not supported.\r\n         * Uses underscore templates renderer.\r\n         *\r\n         * @param {String} tmpl - Template string.\r\n         * @param {Object} data - Data object used in a template.\r\n         * @returns {String} Compiled template.\r\n         */\r\n        template = function (tmpl, data) {\r\n            var cached = tmplSettings.interpolate;\r\n\r\n            tmplSettings.interpolate = interpolate;\r\n\r\n            tmpl = _.template(tmpl, {\r\n                variable: '$'\r\n            })(data);\r\n\r\n            tmplSettings.interpolate = cached;\r\n\r\n            return tmpl;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Checks if provided value contains template syntax.\r\n     *\r\n     * @param {*} value - Value to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function isTemplate(value) {\r\n        return typeof value === 'string' && ~value.indexOf(opener);\r\n    }\r\n\r\n    /**\r\n     * Iteratively processes provided string\r\n     * until no templates syntax will be found.\r\n     *\r\n     * @param {String} tmpl - Template string.\r\n     * @param {Object} data - Data object used in a template.\r\n     * @param {Boolean} [castString=false] - Flag that indicates whether template\r\n     *      should be casted after evaluation to a value of another type or\r\n     *      that it should be leaved as a string.\r\n     * @returns {*} Compiled template.\r\n     */\r\n    function render(tmpl, data, castString) {\r\n        var last = tmpl;\r\n\r\n        while (~tmpl.indexOf(opener)) {\r\n            tmpl = template(tmpl, data);\r\n\r\n            if (tmpl === last) {\r\n                break;\r\n            }\r\n\r\n            last = tmpl;\r\n        }\r\n\r\n        return castString ?\r\n            stringUtils.castString(tmpl) :\r\n            tmpl;\r\n    }\r\n\r\n    return {\r\n\r\n        /**\r\n         * Applies provided data to the template.\r\n         *\r\n         * @param {Object|String} tmpl\r\n         * @param {Object} [data] - Data object to match with template.\r\n         * @param {Boolean} [castString=false] - Flag that indicates whether template\r\n         *      should be casted after evaluation to a value of another type or\r\n         *      that it should be leaved as a string.\r\n         * @returns {*}\r\n         *\r\n         * @example Template defined as a string.\r\n         *      var source = { foo: 'Random Stuff', bar: 'Some' };\r\n         *\r\n         *      utils.template('${ $.bar } ${ $.foo }', source);\r\n         *      => 'Some Random Stuff';\r\n         *\r\n         * @example Template defined as an object.\r\n         *      var tmpl = {\r\n         *              key: {'${ $.$data.bar }': '${ $.$data.foo }'},\r\n         *              foo: 'bar',\r\n         *              x1: 2, x2: 5,\r\n         *              delta: '${ $.x2 - $.x1 }',\r\n         *              baz: 'Upper ${ $.foo.toUpperCase() }'\r\n         *      };\r\n         *\r\n         *      utils.template(tmpl, source);\r\n         *      => {\r\n         *          key: {'Some': 'Random Stuff'},\r\n         *          foo: 'bar',\r\n         *          x1: 2, x2: 5,\r\n         *          delta: 3,\r\n         *          baz: 'Upper BAR'\r\n         *      };\r\n         */\r\n        template: function (tmpl, data, castString, dontClone) {\r\n            if (typeof tmpl === 'string') {\r\n                return render(tmpl, data, castString);\r\n            }\r\n\r\n            if (!dontClone) {\r\n                tmpl = utils.copy(tmpl);\r\n            }\r\n\r\n            tmpl.$data = data || {};\r\n\r\n            /**\r\n             * Template iterator function.\r\n             */\r\n            _.each(tmpl, function iterate(value, key, list) {\r\n                if (key === '$data') {\r\n                    return;\r\n                }\r\n\r\n                if (isTemplate(key)) {\r\n                    delete list[key];\r\n\r\n                    key = render(key, tmpl);\r\n                    list[key] = value;\r\n                }\r\n\r\n                if (isTemplate(value)) {\r\n                    list[key] = render(value, tmpl, castString);\r\n                } else if ($.isPlainObject(value) || Array.isArray(value)) {\r\n                    _.each(value, iterate);\r\n                }\r\n            });\r\n\r\n            delete tmpl.$data;\r\n\r\n            return tmpl;\r\n        }\r\n    };\r\n});\r\n","mage/utils/wrapper.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * Utility methods used to wrap and extend functions.\r\n *\r\n * @example Usage of a 'wrap' method with arguments delegation.\r\n *      var multiply = function (a, b) {\r\n *          return a * b;\r\n *      };\r\n *\r\n *      multiply = module.wrap(multiply, function (orig) {\r\n *          return 'Result is: ' + orig();\r\n *      });\r\n *\r\n *      multiply(2, 2);\r\n *      => 'Result is: 4'\r\n *\r\n * @example Usage of 'wrapSuper' method.\r\n *      var multiply = function (a, b) {\r\n *         return a * b;\r\n *      };\r\n *\r\n *      var obj = {\r\n *          multiply: module.wrapSuper(multiply, function () {\r\n *              return 'Result is: ' + this._super();\r\n *          });\r\n *      };\r\n *\r\n *      obj.multiply(2, 2);\r\n *      => 'Result is: 4'\r\n */\r\ndefine([\r\n    'underscore'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Checks if string has a '_super' substring.\r\n     */\r\n    var superReg = /\\b_super\\b/;\r\n\r\n    return {\r\n\r\n        /**\r\n         * Wraps target function with a specified wrapper, which will recieve\r\n         * reference to the original function as a first argument.\r\n         *\r\n         * @param {Function} target - Function to be wrapped.\r\n         * @param {Function} wrapper - Wrapper function.\r\n         * @returns {Function} Wrapper function.\r\n         */\r\n        wrap: function (target, wrapper) {\r\n            if (!_.isFunction(target) || !_.isFunction(wrapper)) {\r\n                return wrapper;\r\n            }\r\n\r\n            return function () {\r\n                var args    = _.toArray(arguments),\r\n                    ctx     = this,\r\n                    _super;\r\n\r\n                /**\r\n                 * Function that will be passed to the wrapper.\r\n                 * If no arguments will be passed to it, then the original\r\n                 * function will be called with an arguments of a wrapper function.\r\n                 */\r\n                _super = function () {\r\n                    var superArgs = arguments.length ? arguments : args.slice(1);\r\n\r\n                    return target.apply(ctx, superArgs);\r\n                };\r\n\r\n                args.unshift(_super);\r\n\r\n                return wrapper.apply(ctx, args);\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Wraps the incoming function to implement support of the '_super' method.\r\n         *\r\n         * @param {Function} target - Function to be wrapped.\r\n         * @param {Function} wrapper - Wrapper function.\r\n         * @returns {Function} Wrapped function.\r\n         */\r\n        wrapSuper: function (target, wrapper) {\r\n            if (!this.hasSuper(wrapper) || !_.isFunction(target)) {\r\n                return wrapper;\r\n            }\r\n\r\n            return function () {\r\n                var _super  = this._super,\r\n                    args    = arguments,\r\n                    result;\r\n\r\n                /**\r\n                 * Temporary define '_super' method which\r\n                 * contains call to the original function.\r\n                 */\r\n                this._super = function () {\r\n                    var superArgs = arguments.length ? arguments : args;\r\n\r\n                    return target.apply(this, superArgs);\r\n                };\r\n\r\n                result = wrapper.apply(this, args);\r\n\r\n                this._super = _super;\r\n\r\n                return result;\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Checks wether the incoming method contains calls of the '_super' method.\r\n         *\r\n         * @param {Function} fn - Function to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        hasSuper: function (fn) {\r\n            return _.isFunction(fn) && superReg.test(fn);\r\n        },\r\n\r\n        /**\r\n         * Extends target object with provided extenders.\r\n         * If property in target and extender objects is a function,\r\n         * then it will be wrapped using 'wrap' method.\r\n         *\r\n         * @param {Object} target - Object to be extended.\r\n         * @param {...Object} extenders - Multiple extenders objects.\r\n         * @returns {Object} Modified target object.\r\n         */\r\n        extend: function (target) {\r\n            var extenders = _.toArray(arguments).slice(1),\r\n                iterator = this._extend.bind(this, target);\r\n\r\n            extenders.forEach(iterator);\r\n\r\n            return target;\r\n        },\r\n\r\n        /**\r\n         * Same as the 'extend' method, but operates only on one extender object.\r\n         *\r\n         * @private\r\n         * @param {Object} target\r\n         * @param {Object} extender\r\n         */\r\n        _extend: function (target, extender) {\r\n            _.each(extender, function (value, key) {\r\n                target[key] = this.wrap(target[key], extender[key]);\r\n            }, this);\r\n        }\r\n    };\r\n});\r\n","mage/validation/url.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    return {\r\n\r\n        /**\r\n         * Redirects to the url if it is considered safe\r\n         *\r\n         * @param {String} path - url to be redirected to\r\n         */\r\n        redirect: function (path) {\r\n            path = this.sanitize(path);\r\n\r\n            if (this.validate(path)) {\r\n                window.location.href = path;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validates url\r\n         *\r\n         * @param {Object} path - url to be validated\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function (path) {\r\n            var hostname = window.location.hostname;\r\n\r\n            if (path.indexOf(hostname) === -1 ||\r\n                path.indexOf('javascript:') !== -1 ||\r\n                path.indexOf('vbscript:') !== -1) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Sanitize url, replacing disallowed chars\r\n         *\r\n         * @param {String} path - url to be normalized\r\n         * @returns {String}\r\n         */\r\n        sanitize: function (path) {\r\n            return path.replace('[^-A-Za-z0-9+&@#/%?=~_|!:,.;\\(\\)]', '');\r\n        }\r\n    };\r\n});\r\n","mage/validation/validation.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint jquery:true*/\r\n(function (factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define([\r\n            \"jquery\",\r\n            \"mage/validation\",\r\n            \"mage/translate\"\r\n        ], factory);\r\n    } else {\r\n        factory(jQuery);\r\n    }\r\n}(function ($) {\r\n    \"use strict\";\r\n\r\n    $.each({\r\n        'validate-grouped-qty': [\r\n            function (value, element, params) {\r\n                var result = false;\r\n                var total = 0;\r\n                $(params).find('input[data-validate*=\"validate-grouped-qty\"]').each(function (i, e) {\r\n                    var val = $(e).val();\r\n                    if (val && val.length > 0) {\r\n                        result = true;\r\n                        var valInt = parseFloat(val) || 0;\r\n                        if (valInt >= 0) {\r\n                            total += valInt;\r\n                        } else {\r\n                            result = false;\r\n                            return result;\r\n                        }\r\n                    }\r\n                });\r\n                return result && total > 0;\r\n            },\r\n            $.mage.__('Please specify the quantity of product(s).')\r\n        ],\r\n        'validate-one-checkbox-required-by-name': [\r\n            function (value, element, params) {\r\n                var checkedCount = 0;\r\n                if (element.type === 'checkbox') {\r\n                    $('[name=\"' + element.name + '\"]').each(function () {\r\n                        if ($(this).is(':checked')) {\r\n                            checkedCount += 1;\r\n                            return false;\r\n                        }\r\n                    });\r\n                }\r\n                var container = '#' + params;\r\n                if (checkedCount > 0) {\r\n                    $(container).removeClass('validation-failed');\r\n                    $(container).addClass('validation-passed');\r\n                    return true;\r\n                } else {\r\n                    $(container).addClass('validation-failed');\r\n                    $(container).removeClass('validation-passed');\r\n                    return false;\r\n                }\r\n            },\r\n            $.mage.__('Please select one of the options.')\r\n        ],\r\n        'validate-date-between': [\r\n            function (value, element, params) {\r\n                var minDate = new Date(params[0]),\r\n                    maxDate = new Date(params[1]),\r\n                    inputDate = new Date(element.value);\r\n                minDate.setHours(0);\r\n                maxDate.setHours(0);\r\n                if (inputDate >= minDate && inputDate <= maxDate) {\r\n                    return true;\r\n                }\r\n                var message = $.mage.__('Please enter a date between %min and %max.');\r\n                this.dateBetweenErrorMessage = message.replace('%min', minDate).replace('%max', maxDate);\r\n                return false;\r\n            },\r\n            function () {\r\n                return this.dateBetweenErrorMessage;\r\n            }\r\n        ],\r\n        'validate-dob': [\r\n            function (val, element, params) {\r\n                var dob = $(element).parents('.customer-dob');\r\n                $(dob).find('.' + this.settings.errorClass).removeClass(this.settings.errorClass);\r\n                var dayVal = $(dob).find(params[0]).find('input:text').val(),\r\n                    monthVal = $(dob).find(params[1]).find('input:text').val(),\r\n                    yearVal = $(dob).find(params[2]).find('input:text').val(),\r\n                    dobLength = dayVal.length + monthVal.length + yearVal.length;\r\n                if (params[3] && dobLength === 0) {\r\n                    this.dobErrorMessage = $.mage.__('This is a required field.');\r\n                    return false;\r\n                }\r\n                if (!params[3] && dobLength === 0) {\r\n                    return true;\r\n                }\r\n                var day = parseInt(dayVal, 10) || 0,\r\n                    month = parseInt(monthVal, 10) || 0,\r\n                    year = parseInt(yearVal, 10) || 0,\r\n                    curYear = (new Date()).getFullYear();\r\n                if (!day || !month || !year) {\r\n                    this.dobErrorMessage = $.mage.__('Please enter a valid full date.');\r\n                    return false;\r\n                }\r\n                if (month < 1 || month > 12) {\r\n                    this.dobErrorMessage = $.mage.__('Please enter a valid month (1-12).');\r\n                    return false;\r\n                }\r\n                if (year < 1900 || year > curYear) {\r\n                    var validYearMessage = $.mage.__('Please enter a valid year (1900-%1).');\r\n                    this.dobErrorMessage = validYearMessage.replace('%1', curYear.toString());\r\n                    return false;\r\n                }\r\n                var validateDayInMonth = new Date(year, month, 0).getDate();\r\n                if (day < 1 || day > validateDayInMonth) {\r\n                    var validDateMessage = $.mage.__('Please enter a valid day (1-%1).');\r\n                    this.dobErrorMessage = validDateMessage.replace('%1', validateDayInMonth.toString());\r\n                    return false;\r\n                }\r\n                var today = new Date(),\r\n                    dateEntered = new Date();\r\n                dateEntered.setFullYear(year, month - 1, day);\r\n                if (dateEntered > today) {\r\n                    this.dobErrorMessage = $.mage.__('Please enter a date from the past.');\r\n                    return false;\r\n                }\r\n\r\n                day = day % 10 === day ? '0' + day : day;\r\n                month = month % 10 === month ? '0' + month : month;\r\n                $(element).val(month + '/' + day + '/' + year);\r\n                return true;\r\n            },\r\n            function () {\r\n                return this.dobErrorMessage;\r\n            }\r\n        ]\r\n    }, function (i, rule) {\r\n        rule.unshift(i);\r\n        $.validator.addMethod.apply($.validator, rule);\r\n    });\r\n}));\r\n","mage/view/composite.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*jshint browser:true jquery:true*/\r\n/*global alert*/\r\ndefine(['jquery'], function($) {\r\n    return function (wrapperTag) {\r\n        wrapperTag = wrapperTag || 'div';\r\n        var renderedChildren = {};\r\n        var children = {};\r\n        return {\r\n            addChild: function (child, key) {\r\n                children[key] = child;\r\n            },\r\n\r\n            render: function (root) {\r\n                $.each(children, function (key, child) {\r\n                    var childRoot = $('<div>');\r\n                    renderedChildren[key] = child.render(childRoot);\r\n                    root.append(childRoot);\r\n                });\r\n            }\r\n        }\r\n    }\r\n});\r\n","magnifier/magnifier.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n;(function ($) {\r\n    $.fn.magnify = function (options) {\r\n        'use strict';\r\n\r\n        var magnify = new Magnify($(this), options);\r\n        /*events must be tracked here*/\r\n\r\n        /**\r\n         * Return that from _init function\r\n         *\r\n         */\r\n        return magnify;\r\n\r\n    };\r\n\r\n    function Magnify(element, options) {\r\n        var gOptions = options || {},\r\n            $box = $(element),\r\n            $thumb,\r\n            that = this,\r\n            largeWrapper = options.largeWrapper ||  \".magnifier-preview\",\r\n            $largeWrapper = $(largeWrapper);\r\n        curThumb = null,\r\n            currentOpts = {\r\n                x: 0,\r\n                y: 0,\r\n                w: 0,\r\n                h: 0,\r\n                lensW: 0,\r\n                lensH: 0,\r\n                lensBgX: 0,\r\n                lensBgY: 0,\r\n                largeW: 0,\r\n                largeH: 0,\r\n                largeL: 0,\r\n                largeT: 0,\r\n                zoom: 2,\r\n                zoomMin: 1.1,\r\n                zoomMax: 5,\r\n                mode: 'outside',\r\n                eventType: 'click',\r\n                status: 0,\r\n                zoomAttached: false,\r\n                zoomable: (gOptions.zoomable !== undefined)\r\n                    ? gOptions.zoomable\r\n                    : false,\r\n                onthumbenter: (gOptions.onthumbenter !== undefined)\r\n                    ? gOptions.onthumbenter\r\n                    : null,\r\n                onthumbmove: (gOptions.onthumbmove !== undefined)\r\n                    ? gOptions.onthumbmove\r\n                    : null,\r\n                onthumbleave: (gOptions.onthumbleave !== undefined)\r\n                    ? gOptions.onthumbleave\r\n                    : null,\r\n                onzoom: (gOptions.onzoom !== undefined)\r\n                    ? gOptions.onzoom\r\n                    : null\r\n            },\r\n            pos = {\r\n                t: 0,\r\n                l: 0,\r\n                x: 0,\r\n                y: 0\r\n            },\r\n            gId = 0,\r\n            status = 0,\r\n            curIdx = '',\r\n            curLens = null,\r\n            curLarge = null,\r\n            lensbg = (gOptions.bg !== undefined) ? gOptions.lensbg : true,\r\n            gZoom = (gOptions.zoom !== undefined)\r\n                ? gOptions.zoom\r\n                : currentOpts.zoom,\r\n            gZoomMin = (gOptions.zoomMin !== undefined)\r\n                ? gOptions.zoomMin\r\n                : currentOpts.zoomMin,\r\n            gZoomMax = (gOptions.zoomMax !== undefined)\r\n                ? gOptions.zoomMax\r\n                : currentOpts.zoomMax,\r\n            gMode = gOptions.mode || currentOpts.mode,\r\n            gEventType = gOptions.eventType || currentOpts.eventType,\r\n            data = {},\r\n            inBounds = false,\r\n            isOverThumb = false,\r\n            rate = 1,\r\n            paddingX = 0,\r\n            paddingY = 0,\r\n            enabled = true,\r\n            showWrapper = true;\r\n\r\n        var MagnifyCls = {\r\n            magnifyHidden: \"magnify-hidden\",\r\n            magnifyOpaque: \"magnify-opaque\",\r\n            magnifyFull: \"magnify-fullimage\"\r\n\r\n        };\r\n\r\n\r\n        /**\r\n         * Update Lens positon on.\r\n         *\r\n         */\r\n        that.update = function () {\r\n            updateLensOnLoad();\r\n        };\r\n\r\n        /**\r\n         * Init new Magnifier\r\n         *\r\n         */\r\n        that.init = function () {\r\n            _init($box, options);\r\n        };\r\n\r\n        function _toBoolean (str) {\r\n            if (typeof  str === 'string') {\r\n                if (str === 'true') {\r\n                    return true;\r\n                } else if (str === 'false' || '') {\r\n                    return false;\r\n                } else {\r\n                    console.warn(\"Wrong type: can't be transformed to Boolean\");\r\n                }\r\n            } else if (typeof str === 'boolean') {\r\n                return str;\r\n            }\r\n        }\r\n\r\n        function createLens(thumb) {\r\n            if ($(thumb).siblings('.magnify-lens').length) {\r\n                return false;\r\n            }\r\n            var lens = $('<div class=\"magnify-lens magnify-hidden\" data-gallery-role=\"magnifier-zoom\"></div>');\r\n            $(thumb).parent().append(lens);\r\n        }\r\n\r\n        function updateLensOnLoad(idx, thumb, large, largeWrapper) {\r\n            var lens = $box.find('.magnify-lens'),\r\n                textWrapper;\r\n\r\n            if (data[idx].status === 1) {\r\n                textWrapper = $('<div class=\"magnifier-loader-text\"></div>');\r\n                lens.className = 'magnifier-loader magnify-hidden';\r\n                textWrapper.html(\"Loading...\");\r\n                lens.html(\"\").append(textWrapper);\r\n            } else if (data[idx].status === 2) {\r\n                lens.addClass(MagnifyCls.magnifyHidden);\r\n                lens.html(\"\");\r\n                large.id = idx + '-large';\r\n                large.style.width = data[idx].largeW * rate + 'px';\r\n                large.style.height = data[idx].largeH + 'px';\r\n                large.className = 'magnifier-large magnify-hidden';\r\n\r\n                if (data[idx].mode === 'inside') {\r\n                    lens.append(large);\r\n                } else {\r\n                    largeWrapper.html(\"\").append(large);\r\n                }\r\n            }\r\n\r\n            data[idx].lensH = data[idx].lensH > $thumb.height() ? $thumb.height() : data[idx].lensH;\r\n\r\n            if (Math.round(data[idx].lensW) === 0) {\r\n                lens.css('display', 'none');\r\n            } else {\r\n                lens.css({\r\n                    width: data[idx].lensW + 1 + 'px',\r\n                    height: data[idx].lensH - 1 + 'px',\r\n                    display: ''\r\n                });\r\n            }\r\n        }\r\n\r\n        function getMousePos() {\r\n            var xPos = pos.x - currentOpts.x,\r\n                yPos = pos.y - currentOpts.y,\r\n                t,\r\n                l;\r\n\r\n            inBounds = ( xPos < 0 || yPos < 0 || xPos > currentOpts.w || yPos > currentOpts.h ) ? false : true;\r\n\r\n            l = xPos - currentOpts.lensW / 2;\r\n            t = yPos - currentOpts.lensH / 2;\r\n\r\n            if (currentOpts.mode !== 'inside') {\r\n                if (xPos < currentOpts.lensW / 2) {\r\n                    l = 0;\r\n                }\r\n\r\n                if (yPos < currentOpts.lensH / 2) {\r\n                    t = 0;\r\n                }\r\n\r\n                if (xPos - currentOpts.w + Math.ceil(currentOpts.lensW / 2) > 0) {\r\n                    l = currentOpts.w - Math.ceil(currentOpts.lensW + 2);\r\n                }\r\n\r\n                if (yPos - currentOpts.h + Math.ceil(currentOpts.lensH / 2) > 0) {\r\n                    t = currentOpts.h - Math.ceil(currentOpts.lensH);\r\n                }\r\n\r\n                pos.l = l;\r\n                pos.t = t;\r\n\r\n                currentOpts.lensBgX = pos.l;\r\n                currentOpts.lensBgY = pos.t;\r\n\r\n                if (currentOpts.mode === 'inside') {\r\n                    currentOpts.largeL = xPos * (currentOpts.zoom - (currentOpts.lensW / currentOpts.w));\r\n                    currentOpts.largeT = yPos * (currentOpts.zoom - (currentOpts.lensH / currentOpts.h));\r\n                } else {\r\n                    currentOpts.largeL = currentOpts.lensBgX * currentOpts.zoom * (currentOpts.largeWrapperW / currentOpts.w) * rate;\r\n                    currentOpts.largeT = currentOpts.lensBgY * currentOpts.zoom * (currentOpts.largeWrapperH / currentOpts.h);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n        function onThumbEnter() {\r\n            if (_toBoolean(enabled)) {\r\n                currentOpts = data[curIdx];\r\n                curLens = $box.find('.magnify-lens');\r\n\r\n                if (currentOpts.status === 2) {\r\n                    curLens.removeClass(MagnifyCls.magnifyOpaque);\r\n                    curLarge = $('#' + curIdx + '-large');\r\n                    curLarge.removeClass(MagnifyCls.magnifyHidden);\r\n                } else if (currentOpts.status === 1) {\r\n                    curLens.className = 'magnifier-loader';\r\n                }\r\n            }\r\n        }\r\n\r\n        function onThumbLeave() {\r\n            if (currentOpts.status > 0) {\r\n                var handler = currentOpts.onthumbleave;\r\n\r\n                if (handler !== null) {\r\n                    handler({\r\n                        thumb: curThumb,\r\n                        lens: curLens,\r\n                        large: curLarge,\r\n                        x: pos.x,\r\n                        y: pos.y\r\n                    });\r\n                }\r\n                if (!curLens.hasClass(MagnifyCls.magnifyHidden)) {\r\n                    curLens.addClass(MagnifyCls.magnifyHidden);\r\n\r\n                    //$curThumb.removeClass(MagnifyCls.magnifyOpaque);\r\n                    if (curLarge !== null) {\r\n                        curLarge.addClass(MagnifyCls.magnifyHidden);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function move() {\r\n            if (_toBoolean(enabled)) {\r\n                if (status !== currentOpts.status) {\r\n                    onThumbEnter();\r\n                }\r\n\r\n                if (currentOpts.status > 0) {\r\n                    curThumb.className = currentOpts.thumbCssClass + ' magnify-opaque';\r\n\r\n                    if (currentOpts.status === 1) {\r\n                        curLens.className = 'magnifier-loader';\r\n                    } else if (currentOpts.status === 2) {\r\n                        curLens.removeClass(MagnifyCls.magnifyHidden);\r\n                        curLarge.removeClass(MagnifyCls.magnifyHidden);\r\n                        curLarge.css({\r\n                            left: '-' + currentOpts.largeL + 'px',\r\n                            top: '-' + currentOpts.largeT + 'px'\r\n                        });\r\n                    }\r\n\r\n                    pos.t = pos.t <= 0 ? 0 : pos.t;\r\n                    curLens.css({\r\n                        left: pos.l + paddingX +'px',\r\n                        top: pos.t + 1 + paddingY + 'px'\r\n                    });\r\n\r\n                    if (lensbg) {\r\n                        curLens.css({\r\n                            \"background-color\": \"rgba(f,f,f,.5)\"\r\n                        });\r\n                    } else {\r\n                        curLens.get(0).style.backgroundPosition = '-' +\r\n                        currentOpts.lensBgX + 'px -' +\r\n                        currentOpts.lensBgY + 'px';\r\n                    }\r\n                    var handler = currentOpts.onthumbmove;\r\n\r\n                    if (handler !== null) {\r\n                        handler({\r\n                            thumb: curThumb,\r\n                            lens: curLens,\r\n                            large: curLarge,\r\n                            x: pos.x,\r\n                            y: pos.y\r\n                        });\r\n                    }\r\n                }\r\n\r\n                status = currentOpts.status;\r\n            }\r\n        }\r\n\r\n        function setThumbData(thumb, thumbData) {\r\n            var thumbBounds = thumb.getBoundingClientRect(),\r\n                w = 0,\r\n                h = 0;\r\n\r\n            thumbData.x = thumbBounds.left;\r\n            thumbData.y = thumbBounds.top;\r\n            thumbData.w = thumbBounds.right - thumbData.x;\r\n            thumbData.h = thumbBounds.bottom - thumbData.y;\r\n\r\n            if (thumbData.mode === 'inside') {\r\n                w = thumbData.w;\r\n                h = thumbData.h;\r\n            } else {\r\n                w = thumbData.largeWrapperW;\r\n                h = thumbData.largeWrapperH;\r\n            }\r\n\r\n            thumbData.largeW = thumbData.zoom * w;\r\n            thumbData.largeH = thumbData.zoom * h;\r\n\r\n            thumbData.lensW = (thumbData.w / thumbData.zoom) / rate;\r\n            thumbData.lensH = thumbData.h / thumbData.zoom;\r\n        }\r\n\r\n        function _init($box, options) {\r\n            var opts = {};\r\n            if (options.thumb === undefined) {\r\n                return false;\r\n            }\r\n\r\n            $thumb = $box.find(options.thumb);\r\n\r\n            if ($thumb.length) {\r\n                for (var key in options) {\r\n                    opts[key] = options[key];\r\n                }\r\n\r\n                opts.thumb = $thumb;\r\n                enabled = opts.enabled;\r\n\r\n                if(_toBoolean(enabled)) {\r\n\r\n                    $largeWrapper.show().css('display', '');\r\n                    $largeWrapper.addClass(MagnifyCls.magnifyHidden);\r\n                    set(opts);\r\n                } else {\r\n                    $largeWrapper.empty().hide();\r\n                }\r\n            }\r\n\r\n            return that;\r\n        }\r\n\r\n        function hoverEvents(thumb) {\r\n            $(thumb).on('mouseover', function (e) {\r\n\r\n                if (showWrapper) {\r\n\r\n                    if (currentOpts.status !== 0) {\r\n                        onThumbLeave();\r\n                    }\r\n                    handleEvents(e);\r\n                    isOverThumb = inBounds;\r\n                }\r\n            }).trigger('mouseover');\r\n        }\r\n\r\n        function clickEvents(thumb) {\r\n            $(thumb).on('click', function (e) {\r\n\r\n                if (showWrapper) {\r\n                    if (!isOverThumb) {\r\n                        if (currentOpts.status !== 0) {\r\n                            onThumbLeave();\r\n                        }\r\n                        handleEvents(e);\r\n                        isOverThumb = true;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        function bindEvents(eType, thumb) {\r\n            switch (eType) {\r\n                case 'hover':\r\n                    hoverEvents(thumb);\r\n                    break;\r\n                case 'click':\r\n                    clickEvents(thumb);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        function handleEvents(e) {\r\n            var src = e.target;\r\n            curIdx = src.id;\r\n            curThumb = src;\r\n\r\n            onThumbEnter(src);\r\n\r\n            setThumbData(curThumb, currentOpts);\r\n\r\n            pos.x = e.clientX;\r\n            pos.y = e.clientY;\r\n\r\n            getMousePos();\r\n            move();\r\n\r\n            var handler = currentOpts.onthumbenter;\r\n\r\n            if (handler !== null) {\r\n                handler({\r\n                    thumb: curThumb,\r\n                    lens: curLens,\r\n                    large: curLarge,\r\n                    x: pos.x,\r\n                    y: pos.y\r\n                });\r\n            }\r\n        }\r\n\r\n        function set(options) {\r\n            if (data[options.thumb.id] !== undefined) {\r\n                curThumb = options.thumb;\r\n                return false;\r\n            }\r\n\r\n            var thumbObj = new Image(),\r\n                largeObj = new Image(),\r\n                $thumb = options.thumb,\r\n                thumb = $thumb.get(0),\r\n                idx = thumb.id,\r\n                largeUrl,\r\n                largeWrapper = $(options.largeWrapper),\r\n                zoom = options.zoom || thumb.getAttribute('data-zoom') || gZoom,\r\n                zoomMin = options.zoomMin || gZoomMin,\r\n                zoomMax = options.zoomMax || gZoomMax,\r\n                mode = options.mode || thumb.getAttribute('data-mode') || gMode,\r\n                eventType = options.eventType || thumb.getAttribute('data-eventType') || gEventType,\r\n                onthumbenter = (options.onthumbenter !== undefined)\r\n                    ? options.onthumbenter\r\n                    : currentOpts.onthumbenter,\r\n                onthumbleave = (options.onthumbleave !== undefined)\r\n                    ? options.onthumbleave\r\n                    : currentOpts.onthumbleave,\r\n                onthumbmove = (options.onthumbmove !== undefined)\r\n                    ? options.onthumbmove\r\n                    : currentOpts.onthumbmove;\r\n\r\n            largeUrl = $thumb.data(\"original\") || gOptions.full || $thumb.attr('src');\r\n\r\n            if (thumb.id === '') {\r\n                idx = thumb.id = 'magnifier-item-' + gId;\r\n                gId += 1;\r\n            }\r\n\r\n            createLens(thumb, idx);\r\n\r\n            if (options.width) {\r\n                largeWrapper.width(options.width);\r\n            }\r\n            if (options.height) {\r\n                largeWrapper.height(options.height);\r\n            }\r\n            if (options.top) {\r\n                if (typeof options.top == 'function') {\r\n                    var top = options.top() + 'px';\r\n                } else {\r\n                    var top = options.top + 'px';\r\n                }\r\n\r\n                if (largeWrapper.length) {\r\n                    largeWrapper[0].style.top = top.replace(\"%px\", \"%\");\r\n                }\r\n            }\r\n            if (options.left) {\r\n                if (typeof options.left == 'function') {\r\n                    var left = options.left() + 'px';\r\n                } else {\r\n                    var left = options.left + 'px';\r\n                }\r\n\r\n                if (largeWrapper.length) {\r\n                    largeWrapper[0].style.left = left.replace(\"%px\", \"%\");\r\n                }\r\n            }\r\n\r\n            data[idx] = {\r\n                zoom: zoom,\r\n                zoomMin: zoomMin,\r\n                zoomMax: zoomMax,\r\n                mode: mode,\r\n                eventType: eventType,\r\n                thumbCssClass: thumb.className,\r\n                zoomAttached: false,\r\n                status: 0,\r\n                largeUrl: largeUrl,\r\n                largeWrapperId: mode === 'outside' ? largeWrapper.attr('id') : null,\r\n                largeWrapperW: mode === 'outside' ? largeWrapper.width() : null,\r\n                largeWrapperH: mode === 'outside' ? largeWrapper.height() : null,\r\n                onthumbenter: onthumbenter,\r\n                onthumbleave: onthumbleave,\r\n                onthumbmove: onthumbmove\r\n            };\r\n\r\n            rate = ($thumb.width() / $thumb.height()) / (data[idx].largeWrapperW / data[idx].largeWrapperH);\r\n            paddingX = ($thumb.parent().width() - $thumb.width()) / 2;\r\n            paddingY = ($thumb.parent().height() - $thumb.height()) / 2;\r\n\r\n            showWrapper = false;\r\n            $(thumbObj).on('load', function () {\r\n                data[idx].status = 1;\r\n\r\n                $(largeObj).on('load', function () {\r\n\r\n                    if ((largeObj.width > largeWrapper.width()) || (largeObj.height > largeWrapper.height())) {\r\n                        showWrapper = true;\r\n                        bindEvents(eventType, thumb);\r\n                        data[idx].status = 2;\r\n                        data[idx].zoom = largeObj.height / largeWrapper.height();\r\n                        setThumbData(thumb, data[idx]);\r\n                        updateLensOnLoad(idx, thumb, largeObj, largeWrapper);\r\n                    }\r\n                });\r\n\r\n                largeObj.src = data[idx].largeUrl;\r\n            });\r\n\r\n            thumbObj.src = thumb.src;\r\n        }\r\n\r\n        function onMousemove(e) {\r\n\r\n            pos.x = e.clientX;\r\n            pos.y = e.clientY;\r\n\r\n            getMousePos();\r\n\r\n            if (gEventType === 'hover') {\r\n                isOverThumb = inBounds;\r\n            }\r\n\r\n            if (inBounds && isOverThumb) {\r\n                $largeWrapper.removeClass(MagnifyCls.magnifyHidden);\r\n                move();\r\n            } else {\r\n                onThumbLeave();\r\n                isOverThumb = false;\r\n                $largeWrapper.addClass(MagnifyCls.magnifyHidden);\r\n            }\r\n        }\r\n\r\n        function onScroll() {\r\n\r\n            if (curThumb !== null) {\r\n                setThumbData(curThumb, currentOpts);\r\n            }\r\n        }\r\n\r\n\r\n        $(window).on('scroll', onScroll);\r\n        $(window).resize(function() {\r\n            _init($box, gOptions);\r\n        });\r\n\r\n        $(document).on('mousemove', onMousemove);\r\n        _init($box, gOptions);\r\n\r\n    }\r\n}(jQuery));\r\n","magnifier/magnify.js":"/**\r\n * Copyright \u00c2\u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'magnifier/magnifier'\r\n], function ($, _) {\r\n    'use strict';\r\n\r\n    return function (config, element) {\r\n\r\n        var isTouchEnabled = 'ontouchstart' in document.documentElement,\r\n            gallerySelector = '[data-gallery-role=\"gallery\"]',\r\n            magnifierSelector = '[data-gallery-role=\"magnifier\"]',\r\n            magnifierZoomSelector = '[data-gallery-role=\"magnifier-zoom\"]',\r\n            zoomInButtonSelector = '[data-gallery-role=\"fotorama__zoom-in\"]',\r\n            zoomOutButtonSelector = '[data-gallery-role=\"fotorama__zoom-out\"]',\r\n            fullscreenImageSelector = '[data-gallery-role=\"stage-shaft\"] [data-active=\"true\"] .fotorama__img--full',\r\n            imageDraggableClass = 'fotorama__img--draggable',\r\n            imageZoommable = 'fotorama__img--zoommable',\r\n            zoomInLoaded = 'zoom-in-loaded',\r\n            zoomOutLoaded = 'zoom-out-loaded',\r\n            zoomInDisabled = 'fotorama__zoom-in--disabled',\r\n            zoomOutDisabled = 'fotorama__zoom-out--disabled',\r\n            keyboardNavigation,\r\n            videoContainerClass = 'fotorama-video-container',\r\n            hideMagnifier,\r\n            dragFlag,\r\n            endX,\r\n            transitionEnabled,\r\n            transitionActive = false,\r\n            tapFlag = 0,\r\n            allowZoomOut = false,\r\n            allowZoomIn = true;\r\n\r\n        if (isTouchEnabled) {\r\n            $(element).on('fotorama:showend fotorama:load', function () {\r\n                $(magnifierSelector).remove();\r\n                $(magnifierZoomSelector).remove();\r\n            });\r\n        }\r\n\r\n        (function () {\r\n            var style = document.documentElement.style,\r\n                transitionEnabled = style.transition !== undefined ||\r\n                style.WebkitTransition !== undefined ||\r\n                style.MozTransition !== undefined ||\r\n                style.MsTransition !== undefined ||\r\n                style.OTransition !== undefined;\r\n        })();\r\n\r\n        /**\r\n         * Return width and height of original image\r\n         * @param src path for original image\r\n         * @returns {{rw: number, rh: number}}\r\n         */\r\n        function getImageSize(src) {\r\n            var img = new Image(),\r\n                imgSize = {\r\n                    rw: 0,\r\n                    rh: 0\r\n                };\r\n\r\n            img.src = src;\r\n            imgSize.rw = img.width;\r\n            imgSize.rh = img.height;\r\n\r\n            return imgSize;\r\n        }\r\n\r\n        /**\r\n         * Sets min-height and min-width for image to avoid transition bug\r\n         * @param $image - fullscreen image\r\n         */\r\n        function calculateMinSize($image) {\r\n\r\n            var minHeight,\r\n                minWidth,\r\n                height = $image.height(),\r\n                width = $image.width(),\r\n                parentHeight = $image.parent().height(),\r\n                parentWidth = $image.parent().width();\r\n\r\n            if (width > parentWidth || height > parentHeight) {\r\n\r\n                if (width / height < parentWidth / parentHeight) {\r\n                    minHeight = parentHeight;\r\n                    minWidth = width * (parentHeight / height);\r\n                } else {\r\n                    minWidth = parentWidth;\r\n                    minHeight = height * parentWidth / width;\r\n                }\r\n                $image.css({\r\n                    'min-width': minWidth,\r\n                    'min-height': minHeight\r\n                });\r\n            }\r\n        }\r\n\r\n        function toggleZoomable($image, flag) {\r\n            if (flag) {\r\n                $image.css({\r\n                    'min-width': $image.width(),\r\n                    'min-height': $image.height(),\r\n                    'width': $image.width(),\r\n                    'height': $image.height()\r\n                }).addClass(imageZoommable);\r\n            } else {\r\n                $image.css({\r\n                    width: '',\r\n                    height: '',\r\n                    top: '',\r\n                    left: '',\r\n                    right: '',\r\n                    bottom: ''\r\n                }).removeClass(imageZoommable);\r\n                calculateMinSize($image);\r\n            }\r\n        }\r\n\r\n        function resetVars($image) {\r\n            allowZoomIn = true;\r\n            allowZoomOut = dragFlag = transitionActive = false;\r\n            $image.hasClass(imageDraggableClass) && $image.removeClass(imageDraggableClass);\r\n            toggleZoomable($image, false);\r\n        }\r\n\r\n        /**\r\n         * Set state for zoom controls.\r\n         * If state is true, zoom controls will be visible.\r\n         * IF state is false, zoom controls will be hidden.\r\n         * @param isHide\r\n         */\r\n        function hideZoomControls(isHide) {\r\n            if (isHide) {\r\n                $(zoomInButtonSelector).addClass(zoomInDisabled);\r\n                $(zoomOutButtonSelector).addClass(zoomOutDisabled);\r\n            } else {\r\n                $(zoomInButtonSelector).removeClass(zoomInDisabled);\r\n                $(zoomOutButtonSelector).removeClass(zoomOutDisabled);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Asynchronus control visibility of zoom buttons.\r\n         * If image bigger than her wrapper. Zoom controls must visible.\r\n         * @param path - image source path\r\n         * @param $image\r\n         */\r\n        function asyncToggleZoomButtons(path, $image) {\r\n            var img = new Image();\r\n            img.onload = function () {\r\n                this.height > $image.parent().height() || this.width > $image.parent().width() ?\r\n                    hideZoomControls(false) : hideZoomControls(true);\r\n            };\r\n            img.src = path;\r\n        }\r\n\r\n        /**\r\n         * Control visibility of zoom buttons.\r\n         * Zoom controls must be invisible for video content and touch devices.\r\n         * On touch devices active pinchIn/pinchOut.\r\n         * @param $image\r\n         * @param isTouchScreen - true for touch devices\r\n         * @param isVideoActiveFrame - true for active video frame\r\n         */\r\n        function toggleZoomButtons($image, isTouchScreen, isVideoActiveFrame) {\r\n            var path = $image.attr('src');\r\n\r\n            if (path && !isTouchScreen && !isVideoActiveFrame) {\r\n                asyncToggleZoomButtons(path, $image);\r\n            } else {\r\n                hideZoomControls(true);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Handle resize event in fullscreen.\r\n         * @param $image - Fullscreen image.\r\n         * @param e - Event.\r\n         */\r\n        function resizeHandler(e, $image) {\r\n            var imageSize,\r\n                parentWidth,\r\n                parentHeight,\r\n                isImageSmall,\r\n                isImageFit;\r\n\r\n            if (!e.data.$image || !e.data.$image.length)\r\n                return;\r\n\r\n            imageSize = getImageSize($(fullscreenImageSelector)[0].src);\r\n            parentWidth = e.data.$image.parent().width();\r\n            parentHeight = e.data.$image.parent().height();\r\n            isImageSmall = parentWidth >= imageSize.rw && parentHeight >= imageSize.rh;\r\n            isImageFit = parentWidth > e.data.$image.width() && parentHeight > e.data.$image.height();\r\n\r\n            toggleZoomButtons(e.data.$image, isTouchEnabled, checkForVideo(e.data.fotorama.activeFrame.$stageFrame));\r\n            calculateMinSize(e.data.$image);\r\n\r\n            if (e.data.$image.hasClass(imageZoommable) && !allowZoomOut || isImageSmall || isImageFit) {\r\n                resetVars(e.data.$image);\r\n            }\r\n\r\n            if (!isImageSmall) {\r\n                toggleStandartNavigation();\r\n            }\r\n        }\r\n\r\n        function getTopValue($image, topProp, step, height, containerHeight) {\r\n            var top;\r\n\r\n            if (parseInt($image.css('marginTop')) || parseInt($image.css('marginLeft'))) {\r\n                top = dragFlag ? topProp - step / 4 : 0;\r\n                top = top < containerHeight - height ? containerHeight - height : top;\r\n                top = top > height - containerHeight ? height - containerHeight : top;\r\n            } else {\r\n                top = topProp + step / 2;\r\n                top = top < containerHeight - height ? containerHeight - height : top;\r\n                top = top > 0 ? 0 : top;\r\n\r\n                if (!dragFlag && step < 0) {\r\n                    top = top < (containerHeight - height) / 2 ? (containerHeight - height) / 2 : top;\r\n                }\r\n            }\r\n\r\n            return top;\r\n        }\r\n\r\n        function getLeftValue(leftProp, step, width, containerWidth) {\r\n            var left;\r\n\r\n            left = leftProp + step / 2;\r\n            left = left < containerWidth - width ? containerWidth - width : left;\r\n            left = left > 0 ? 0 : left;\r\n\r\n            if (!dragFlag && step < 0) {\r\n                left = left < (containerWidth - width) / 2 ? (containerWidth - width) / 2 : left;\r\n            }\r\n\r\n            return left;\r\n        }\r\n\r\n        function checkFullscreenImagePosition($image, dimentions, widthStep, heightStep) {\r\n            var $imageContainer,\r\n                containerWidth,\r\n                containerHeight,\r\n                settings,\r\n                top,\r\n                left,\r\n                right,\r\n                bottom,\r\n                ratio;\r\n\r\n            if ($(gallerySelector).data('fotorama').fullScreen) {\r\n                transitionActive = true;\r\n                $imageContainer = $image.parent();\r\n                containerWidth = $imageContainer.width();\r\n                containerHeight = $imageContainer.height();\r\n                top = $image.position().top;\r\n                left = $image.position().left;\r\n                ratio = $image.width() / $image.height();\r\n                dimentions.height = isNaN(dimentions.height) ? dimentions.width / ratio : dimentions.height;\r\n                dimentions.width = isNaN(dimentions.width) ? dimentions.height * ratio : dimentions.width;\r\n\r\n                top = dimentions.height >= containerHeight ?\r\n                    getTopValue($image, top, heightStep, dimentions.height, containerHeight) : 0;\r\n\r\n                left = dimentions.width >= containerWidth ?\r\n                    getLeftValue(left, widthStep, dimentions.width, containerWidth) : 0;\r\n\r\n                right = dragFlag && left < (containerWidth - dimentions.width) / 2 ? 0 : left;\r\n                bottom = dragFlag ? 0 : top;\r\n\r\n                settings = $.extend(dimentions, {\r\n                    top: top,\r\n                    bottom: bottom,\r\n                    left: left,\r\n                    right: right\r\n                });\r\n\r\n                $image.css(settings);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Toggles fotorama's keyboard and mouse/touch navigation.\r\n         */\r\n        function toggleStandartNavigation() {\r\n            var $selectable =\r\n                    $('a[href], area[href], input, select, textarea, button, iframe, object, embed, *[tabindex], *[contenteditable]')\r\n                    .not('[tabindex=-1], [disabled], :hidden'),\r\n                fotorama = $(gallerySelector).data('fotorama'),\r\n                $focus = $(':focus'),\r\n                index;\r\n\r\n            if (fotorama.fullScreen) {\r\n\r\n                $selectable.each(function (number) {\r\n\r\n                    if ($(this).is($focus)) {\r\n                        index = number;\r\n                    }\r\n                });\r\n\r\n                fotorama.setOptions({\r\n                    swipe: !allowZoomOut,\r\n                    keyboard: !allowZoomOut\r\n                });\r\n\r\n                if (_.isNumber(index)) {\r\n                    $selectable.eq(index).focus();\r\n                }\r\n            }\r\n        }\r\n\r\n        function zoomIn(e, xStep, yStep) {\r\n            var $image,\r\n                imgOriginalSize,\r\n                imageWidth,\r\n                imageHeight,\r\n                zoomWidthStep,\r\n                zoomHeightStep,\r\n                widthResult,\r\n                heightResult,\r\n                ratio,\r\n                dimentions = {};\r\n\r\n            if (allowZoomIn && (!transitionEnabled || !transitionActive) && (isTouchEnabled ||\r\n                !$(zoomInButtonSelector).hasClass(zoomInDisabled))) {\r\n                $image = $(fullscreenImageSelector);\r\n                imgOriginalSize = getImageSize($image[0].src);\r\n                imageWidth = $image.width();\r\n                imageHeight = $image.height();\r\n                ratio = imageWidth / imageHeight;\r\n                allowZoomOut = true;\r\n                toggleStandartNavigation();\r\n\r\n                if (!$image.hasClass(imageZoommable)) {\r\n                    toggleZoomable($image, true);\r\n                }\r\n\r\n                e.preventDefault();\r\n\r\n                if (imageWidth >= imageHeight) {\r\n                    zoomWidthStep = xStep || Math.ceil(imageWidth * parseFloat(config.magnifierOpts.fullscreenzoom) / 100);\r\n                    widthResult = imageWidth + zoomWidthStep;\r\n\r\n                    if (widthResult >= imgOriginalSize.rw) {\r\n                        widthResult = imgOriginalSize.rw;\r\n                        zoomWidthStep = xStep || widthResult - imageWidth;\r\n                        allowZoomIn = false;\r\n                    }\r\n                    heightResult = widthResult / ratio;\r\n                    zoomHeightStep = yStep || heightResult - imageHeight;\r\n                } else {\r\n                    zoomHeightStep = yStep || Math.ceil(imageHeight * parseFloat(config.magnifierOpts.fullscreenzoom) / 100);\r\n                    heightResult = imageHeight + zoomHeightStep;\r\n\r\n                    if (heightResult >= imgOriginalSize.rh) {\r\n                        heightResult = imgOriginalSize.rh;\r\n                        zoomHeightStep = yStep || heightResult - imageHeight;\r\n                        allowZoomIn = false;\r\n                    }\r\n                    widthResult = heightResult * ratio;\r\n                    zoomWidthStep = xStep || widthResult - imageWidth;\r\n                }\r\n\r\n                if (imageWidth >= imageHeight && imageWidth !== imgOriginalSize.rw) {\r\n                    dimentions = $.extend(dimentions, {\r\n                        width: widthResult,\r\n                        height: 'auto'\r\n                    });\r\n                    checkFullscreenImagePosition($image, dimentions, -zoomWidthStep, -zoomHeightStep);\r\n\r\n                } else if (imageWidth < imageHeight && imageHeight !== imgOriginalSize.rh) {\r\n                    dimentions = $.extend(dimentions, {\r\n                        width: 'auto',\r\n                        height: heightResult\r\n                    });\r\n                    checkFullscreenImagePosition($image, dimentions, -zoomWidthStep, -zoomHeightStep);\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function zoomOut(e, xStep, yStep) {\r\n            var $image,\r\n                widthResult,\r\n                heightResult,\r\n                dimentions,\r\n                parentWidth,\r\n                parentHeight,\r\n                imageWidth,\r\n                imageHeight,\r\n                zoomWidthStep,\r\n                zoomHeightStep,\r\n                ratio,\r\n                fitIntoParent;\r\n\r\n            if (allowZoomOut && (!transitionEnabled || !transitionActive) && (isTouchEnabled ||\r\n                !$(zoomOutButtonSelector).hasClass(zoomOutDisabled))) {\r\n                allowZoomIn = true;\r\n                $image = $(fullscreenImageSelector);\r\n                parentWidth = $image.parent().width();\r\n                parentHeight = $image.parent().height();\r\n                imageWidth = $image.width();\r\n                imageHeight = $image.height();\r\n                ratio = imageWidth / imageHeight;\r\n\r\n                e.preventDefault();\r\n\r\n                if (imageWidth >= imageHeight) {\r\n                    zoomWidthStep = xStep || Math.ceil(imageWidth * parseFloat(config.magnifierOpts.fullscreenzoom) / 100);\r\n                    widthResult = imageWidth - zoomWidthStep;\r\n                    heightResult = widthResult / ratio;\r\n                    zoomHeightStep = yStep || imageHeight - heightResult;\r\n                } else {\r\n                    zoomHeightStep = yStep || Math.ceil(imageHeight * parseFloat(config.magnifierOpts.fullscreenzoom) / 100);\r\n                    heightResult = imageHeight - zoomHeightStep;\r\n                    widthResult = heightResult * ratio;\r\n                    zoomWidthStep = xStep || imageWidth - widthResult;\r\n                }\r\n\r\n                fitIntoParent = function () {\r\n                    if (ratio > parentWidth / parentHeight) {\r\n                        widthResult = parentWidth;\r\n                        zoomWidthStep = imageWidth - widthResult;\r\n                        heightResult = widthResult / ratio;\r\n                        zoomHeightStep = imageHeight - heightResult;\r\n                        dimentions = {\r\n                            width: widthResult,\r\n                            height: 'auto'\r\n                        };\r\n                    } else {\r\n                        heightResult = parentHeight;\r\n                        zoomHeightStep = imageHeight - heightResult;\r\n                        widthResult = heightResult * ratio;\r\n                        zoomWidthStep = imageWidth - widthResult;\r\n                        dimentions = {\r\n                            width: 'auto',\r\n                            height: heightResult\r\n                        };\r\n                    }\r\n                    checkFullscreenImagePosition($image, dimentions, zoomWidthStep, zoomHeightStep);\r\n                };\r\n\r\n                if (imageWidth >= imageHeight) {\r\n                    if (widthResult > parentWidth) {\r\n                        dimentions = {\r\n                            width: widthResult,\r\n                            height: 'auto'\r\n                        };\r\n                        checkFullscreenImagePosition($image, dimentions, zoomWidthStep, zoomHeightStep);\r\n                    } else {\r\n                        if (heightResult > parentHeight) {\r\n                            dimentions = {\r\n                                width: widthResult,\r\n                                height: 'auto'\r\n                            };\r\n                            checkFullscreenImagePosition($image, dimentions, zoomWidthStep, zoomHeightStep);\r\n                        } else {\r\n                            allowZoomOut = dragFlag = false;\r\n                            toggleStandartNavigation();\r\n                            fitIntoParent();\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (heightResult > parentHeight) {\r\n                        dimentions = {\r\n                            width: 'auto',\r\n                            height: heightResult\r\n                        };\r\n                        checkFullscreenImagePosition($image, dimentions, zoomWidthStep, zoomHeightStep);\r\n                    } else {\r\n                        if (widthResult > parentWidth) {\r\n                            dimentions = {\r\n                                width: 'auto',\r\n                                height: heightResult\r\n                            };\r\n                            checkFullscreenImagePosition($image, dimentions, zoomWidthStep, zoomHeightStep);\r\n                        } else {\r\n                            allowZoomOut = dragFlag = false;\r\n                            toggleStandartNavigation();\r\n                            fitIntoParent();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Bind event on scroll on active item in fotorama\r\n         * @param e\r\n         * @param fotorama - object of fotorama\r\n         */\r\n        function mousewheel(e, fotorama, element) {\r\n            var $fotoramaStage = fotorama.activeFrame.$stageFrame,\r\n                fotoramaStage = $fotoramaStage.get(0);\r\n\r\n            function onWheel(e) {\r\n                var delta = e.deltaY || e.wheelDelta,\r\n                    ev = e || window.event;\r\n\r\n                if ($(gallerySelector).data('fotorama').fullScreen) {\r\n\r\n                    if (e.deltaY) {\r\n                        if (delta > 0) {\r\n                            zoomOut(ev);\r\n                        } else {\r\n                            zoomIn(ev);\r\n                        }\r\n                    } else {\r\n                        if (delta > 0) {\r\n                            zoomIn(ev);\r\n                        } else {\r\n                            zoomOut(ev);\r\n                        }\r\n                    }\r\n\r\n                    e.preventDefault ? e.preventDefault() : e.returnValue = false;\r\n                }\r\n            }\r\n\r\n            if (!$fotoramaStage.hasClass('magnify-wheel-loaded')) {\r\n                if (fotoramaStage && fotoramaStage.addEventListener) {\r\n                    if ('onwheel' in document) {\r\n                        fotoramaStage.addEventListener('wheel', onWheel);\r\n                    } else if ('onmousewheel' in document) {\r\n                        fotoramaStage.addEventListener('mousewheel', onWheel);\r\n                    } else {\r\n                        fotoramaStage.addEventListener('MozMousePixelScroll', onWheel);\r\n                    }\r\n                    $fotoramaStage.addClass('magnify-wheel-loaded');\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Method which makes draggable picture. Also work on touch devices.\r\n         */\r\n        function magnifierFullscreen(fotorama) {\r\n            var isDragActive = false,\r\n                startX,\r\n                startY,\r\n                imagePosX,\r\n                imagePosY,\r\n                touch,\r\n                swipeSlide,\r\n                $gallery = $(gallerySelector),\r\n                $image = $(fullscreenImageSelector, $gallery),\r\n                $imageContainer = $('[data-gallery-role=\"stage-shaft\"] [data-active=\"true\"]'),\r\n                gallery = $gallery.data('fotorama'),\r\n                pinchDimention;\r\n\r\n            swipeSlide = _.throttle(function (direction) {\r\n                $(gallerySelector).data('fotorama').show(direction);\r\n            }, 500, {\r\n                trailing: false\r\n            });\r\n\r\n            function shiftImage(dx, dy, e) {\r\n                var top = +imagePosY + dy,\r\n                    left = +imagePosX + dx,\r\n                    swipeCondition = $image.width() / 10 + 20;\r\n\r\n                dragFlag = true;\r\n\r\n                if (($image.offset().left === $imageContainer.offset().left + $imageContainer.width() - $image.width() && e.keyCode === 39) ||\r\n                    (endX - 1 < $imageContainer.offset().left + $imageContainer.width() - $image.width() && dx < 0 && \r\n                    _.isNumber(endX) &&\r\n                    (e.type === 'mousemove' || e.type === 'touchmove' || e.type === 'pointermove' || e.type === 'MSPointerMove'))) {\r\n                    endX = null;\r\n                    swipeSlide('>');\r\n                    return;\r\n                }\r\n\r\n                if (($image.offset().left === $imageContainer.offset().left && dx !== 0 && e.keyCode === 37) ||\r\n                    (endX === $imageContainer.offset().left && dx > 0 &&\r\n                    (e.type === 'mousemove' || e.type === 'touchmove' || e.type === 'pointermove' || e.type === 'MSPointerMove'))) {\r\n                    endX = null;\r\n                    swipeSlide('<');\r\n\r\n                    return;\r\n                }\r\n\r\n                if ($image.height() > $imageContainer.height()) {\r\n\r\n                    if ($imageContainer.offset().top + $imageContainer.height() > top + $image.height()) {\r\n                        top = $imageContainer.offset().top + $imageContainer.height() - $image.height();\r\n                    } else {\r\n                        top = $imageContainer.offset().top < top ? 0 : top;\r\n                    }\r\n                    $image.offset({\r\n                        'top': top\r\n                    });\r\n                    $image.css('bottom', '');\r\n                }\r\n\r\n                if ($image.width() > $imageContainer.width()) {\r\n\r\n                    if ($imageContainer.offset().left + $imageContainer.width() > left + $image.width()) {\r\n                        left = $imageContainer.offset().left + $imageContainer.width() - $image.width();\r\n                    } else {\r\n                        left = $imageContainer.offset().left < left ? $imageContainer.offset().left : left;\r\n                    }\r\n                    $image.offset({\r\n                        'left': left\r\n                    });\r\n                    $image.css('right', '');\r\n                } else if (Math.abs(dy) < 1 && allowZoomOut &&\r\n                    !(e.type === 'mousemove' || e.type === 'touchmove' || e.type === 'pointermove' || e.type === 'MSPointerMove')) {\r\n                    dx < 0 ? $(gallerySelector).data('fotorama').show('>') : $(gallerySelector).data('fotorama').show('<');\r\n                }\r\n\r\n                if ($image.width() <= $imageContainer.width() && allowZoomOut &&\r\n                    (e.type === 'mousemove' || e.type === 'touchmove' || e.type === 'pointermove' || e.type === 'MSPointerMove') && \r\n                    Math.abs(dx) > Math.abs(dy) && Math.abs(dx) > swipeCondition) {\r\n                    dx < 0 ? swipeSlide('>') : swipeSlide('<');\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Sets image size to original or fit in parent block\r\n             * @param e - event object\r\n             */\r\n            function dblClickHandler(e) {\r\n                var imgOriginalSize = getImageSize($image[0].src),\r\n                    proportions;\r\n\r\n                if (imgOriginalSize.rh < $image.parent().height() && imgOriginalSize.rw < $image.parent().width()) {\r\n                    return;\r\n                }\r\n\r\n                proportions = imgOriginalSize.rw / imgOriginalSize.rh;\r\n\r\n                if (allowZoomIn) {\r\n                    zoomIn(e, imgOriginalSize.rw - $image.width(), imgOriginalSize.rh - $image.height());\r\n                } else {\r\n                    if (proportions > $imageContainer.width() / $imageContainer.height()) {\r\n                        zoomOut(e, imgOriginalSize.rw - $imageContainer.width(), imgOriginalSize.rw / proportions);\r\n                    } else {\r\n                        zoomOut(e, imgOriginalSize.rw * proportions, imgOriginalSize.rh - $imageContainer.height());\r\n                    }\r\n                }\r\n            }\r\n\r\n            function detectDoubleTap(e) {\r\n                var now = new Date().getTime(),\r\n                    timesince = now - tapFlag;\r\n\r\n                if (timesince < 400 && timesince > 0) {\r\n                    transitionActive = false;\r\n                    tapFlag = 0;\r\n                    dblClickHandler(e);\r\n                } else {\r\n                    tapFlag = new Date().getTime();\r\n                }\r\n            }\r\n\r\n            if (isTouchEnabled) {\r\n                $image.off('tap');\r\n                $image.on('tap', function (e) {\r\n                    if (e.originalEvent.originalEvent.touches.length === 0) {\r\n                        detectDoubleTap(e);\r\n                    }\r\n                });\r\n            } else {\r\n                $image.unbind('dblclick');\r\n                $image.dblclick(dblClickHandler);\r\n            }\r\n\r\n            if (gallery.fullScreen) {\r\n                toggleZoomButtons($image, isTouchEnabled, checkForVideo(fotorama.activeFrame.$stageFrame));\r\n            }\r\n\r\n            function getDimention(event) {\r\n                return Math.sqrt(\r\n                    (event.touches[0].clientX - event.touches[1].clientX) * (event.touches[0].clientX - event.touches[1].clientX) +\r\n                    (event.touches[0].clientY - event.touches[1].clientY) * (event.touches[0].clientY - event.touches[1].clientY));\r\n            }\r\n\r\n            $image.off(isTouchEnabled ? 'touchstart' : 'pointerdown mousedown MSPointerDown');\r\n            $image.on(isTouchEnabled ? 'touchstart' : 'pointerdown mousedown MSPointerDown', function (e) {\r\n                if (e && e.originalEvent.touches && e.originalEvent.touches.length >= 2) {\r\n                    e.preventDefault();\r\n                    pinchDimention = getDimention(e.originalEvent);\r\n                    isDragActive = false;\r\n\r\n                    if ($image.hasClass(imageDraggableClass)) {\r\n                        $image.removeClass(imageDraggableClass);\r\n                    }\r\n                } else {\r\n                    if (gallery.fullScreen && (!transitionEnabled || !transitionActive)) {\r\n                        e.preventDefault();\r\n\r\n                        imagePosY = $image.offset().top;\r\n                        imagePosX = $image.offset().left;\r\n\r\n                        if (isTouchEnabled) {\r\n                            touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];\r\n                            e.clientX = touch.pageX;\r\n                            e.clientY = touch.pageY;\r\n                        }\r\n                        startX = e.clientX || e.originalEvent.clientX;\r\n                        startY = e.clientY || e.originalEvent.clientY;\r\n                        isDragActive = true;\r\n                    }\r\n                }\r\n\r\n                if ($image.offset() && ($image.width() > $imageContainer.width())) {\r\n                    endX = $image.offset().left;\r\n                }\r\n            });\r\n\r\n            $image.off(isTouchEnabled ? 'touchmove' : 'mousemove pointermove MSPointerMove');\r\n            $image.on(isTouchEnabled ? 'touchmove' : 'mousemove pointermove MSPointerMove', function (e) {\r\n                if (e && e.originalEvent.touches && e.originalEvent.touches.length >= 2) {\r\n                    e.preventDefault();\r\n                    var currentDimention = getDimention(e.originalEvent);\r\n\r\n                    if ($image.hasClass(imageDraggableClass)) {\r\n                        $image.removeClass(imageDraggableClass);\r\n                    }\r\n                    if (currentDimention < pinchDimention) {\r\n                        zoomOut(e);\r\n                        pinchDimention = currentDimention;\r\n                    } else if (currentDimention > pinchDimention) {\r\n                        zoomIn(e);\r\n                        pinchDimention = currentDimention;\r\n                    }\r\n                } else {\r\n                    var clientX,\r\n                        clientY;\r\n\r\n                    if (gallery.fullScreen && isDragActive && (!transitionEnabled || !transitionActive)) {\r\n\r\n                        if (allowZoomOut && !$image.hasClass(imageDraggableClass)) {\r\n                            $image.addClass(imageDraggableClass);\r\n                        }\r\n                        clientX = e.clientX || e.originalEvent.clientX;\r\n                        clientY = e.clientY || e.originalEvent.clientY;\r\n\r\n                        e.preventDefault();\r\n\r\n                        if (isTouchEnabled) {\r\n                            touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];\r\n                            clientX = touch.pageX;\r\n                            clientY = touch.pageY;\r\n                        }\r\n\r\n                        if (allowZoomOut) {\r\n                            shiftImage(clientX - startX, clientY - startY, e);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            $image.off('transitionend webkitTransitionEnd mozTransitionEnd msTransitionEnd ');\r\n            $image.on('transitionend webkitTransitionEnd mozTransitionEnd msTransitionEnd', function () {\r\n                transitionActive = false;\r\n            });\r\n\r\n            if (keyboardNavigation) {\r\n                $(document).unbind('keydown', keyboardNavigation);\r\n            }\r\n\r\n            /**\r\n             * Replaces original navigations with better one\r\n             * @param e - event object\r\n             */\r\n            keyboardNavigation = function (e) {\r\n                var step = 40,\r\n                    $focus = $(':focus'),\r\n                    isFullScreen = $(gallerySelector).data('fotorama').fullScreen,\r\n                    initVars = function () {\r\n                        imagePosX = $(fullscreenImageSelector, $gallery).offset().left;\r\n                        imagePosY = $(fullscreenImageSelector, $gallery).offset().top;\r\n                    };\r\n\r\n                if (($focus.attr('data-gallery-role') || !$focus.length) && allowZoomOut) {\r\n                    if (isFullScreen) {\r\n                        imagePosX = $(fullscreenImageSelector, $(gallerySelector)).offset().left;\r\n                        imagePosY = $(fullscreenImageSelector, $(gallerySelector)).offset().top;\r\n                    }\r\n\r\n                    if (e.keyCode === 39) {\r\n\r\n                        if (isFullScreen) {\r\n                            initVars();\r\n                            shiftImage(-step, 0, e);\r\n                        }\r\n                    }\r\n\r\n                    if (e.keyCode === 38) {\r\n\r\n                        if (isFullScreen) {\r\n                            initVars();\r\n                            shiftImage(0, step, e);\r\n                        }\r\n                    }\r\n\r\n                    if (e.keyCode === 37) {\r\n\r\n                        if (isFullScreen) {\r\n                            initVars();\r\n                            shiftImage(step, 0, e);\r\n                        }\r\n                    }\r\n\r\n                    if (e.keyCode === 40) {\r\n\r\n                        if (isFullScreen) {\r\n                            e.preventDefault();\r\n                            initVars();\r\n                            shiftImage(0, -step, e);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (e.keyCode === 27 && isFullScreen && allowZoomOut) {\r\n                    $(gallerySelector).data('fotorama').cancelFullScreen();\r\n                }\r\n            };\r\n\r\n            /**\r\n             * @todo keyboard navigation through Fotorama Api.\r\n             */\r\n            $(document).keydown(keyboardNavigation);\r\n\r\n            $(document).on(isTouchEnabled ? 'touchend' : 'mouseup pointerup MSPointerUp', function (e) {\r\n                if (gallery.fullScreen) {\r\n\r\n                    if ($image.offset() && $image.width() > $imageContainer.width()) {\r\n                        endX = $image.offset().left;\r\n                    }\r\n\r\n                    isDragActive = false;\r\n                    $image.removeClass(imageDraggableClass);\r\n                }\r\n            });\r\n\r\n            $(window).off('resize', resizeHandler);\r\n            $(window).on('resize', {\r\n                $image: $image,\r\n                fotorama: fotorama\r\n            }, resizeHandler);\r\n        }\r\n\r\n        /**\r\n         * Hides magnifier preview and zoom blocks.\r\n         */\r\n        hideMagnifier = function () {\r\n            $(magnifierSelector).empty().hide();\r\n            $(magnifierZoomSelector).remove();\r\n        };\r\n\r\n        /**\r\n         * Check is active frame in gallery include video content.\r\n         * If true activeFrame contain video.\r\n         * @param $stageFrame - active frame in gallery\r\n         * @returns {*|Boolean}\r\n         */\r\n        function checkForVideo($stageFrame) {\r\n            return $stageFrame.hasClass(videoContainerClass);\r\n        }\r\n\r\n        /**\r\n         * Hides magnifier on drag and while arrow click.\r\n         */\r\n        function behaveOnDrag(e, initPos) {\r\n            var pos = [e.pageX, e.pageY],\r\n                isArrow = $(e.target).data('gallery-role') === 'arrow',\r\n                isClick = initPos[0] === pos[0] && initPos[1] === pos[1],\r\n                isImg = $(e.target).parent().data('active');\r\n\r\n            if (isArrow || isImg && !isClick) {\r\n                hideMagnifier();\r\n            }\r\n        }\r\n\r\n        if (config.magnifierOpts.enabled) {\r\n            $(element).on('pointerdown mousedown MSPointerDown', function (e) {\r\n                var pos = [e.pageX, e.pageY];\r\n\r\n                $(element).on('mousemove pointermove MSPointerMove', function (ev) {\r\n                    navigator.msPointerEnabled ? hideMagnifier() : behaveOnDrag(ev, pos);\r\n                });\r\n                $(document).on('mouseup pointerup MSPointerUp', function () {\r\n                    $(element).off('mousemove pointermove MSPointerMove');\r\n                });\r\n            });\r\n        }\r\n\r\n        $.extend(config.magnifierOpts, {\r\n            zoomable: false,\r\n            thumb: '.fotorama__img',\r\n            largeWrapper: '[data-gallery-role=\"magnifier\"]',\r\n            height: config.magnifierOpts.height || function () {\r\n                return $('[data-active=\"true\"]').height();\r\n            },\r\n            width: config.magnifierOpts.width || function () {\r\n                var productMedia = $(gallerySelector).parent().parent();\r\n\r\n                return productMedia.parent().width() - productMedia.width() - 20;\r\n            },\r\n            left: config.magnifierOpts.left || function () {\r\n                return $(gallerySelector).offset().left + $(gallerySelector).width() + 20;\r\n            },\r\n            top: config.magnifierOpts.top || function () {\r\n                return $(gallerySelector).offset().top;\r\n            }\r\n        });\r\n\r\n        $(element).on('fotorama:load fotorama:showend fotorama:fullscreenexit fotorama:ready', function (e, fotorama) {\r\n            var $activeStageFrame = $(gallerySelector).data('fotorama').activeFrame.$stageFrame;\r\n\r\n            if (!$activeStageFrame.find(magnifierZoomSelector).length) {\r\n                hideMagnifier();\r\n\r\n                if (config.magnifierOpts) {\r\n                    config.magnifierOpts.large = $(gallerySelector).data('fotorama').activeFrame.img;\r\n                    config.magnifierOpts.full = fotorama.data[fotorama.activeIndex].original;\r\n                    !checkForVideo($activeStageFrame) && $($activeStageFrame).magnify(config.magnifierOpts);\r\n                }\r\n            }\r\n        });\r\n\r\n        $(element).on('gallery:loaded', function (e) {\r\n            var $prevImage;\r\n\r\n            $(element).find(gallerySelector)\r\n                .on('fotorama:ready', function (e, fotorama) {\r\n                    var $zoomIn = $(zoomInButtonSelector),\r\n                        $zoomOut = $(zoomOutButtonSelector);\r\n\r\n                    if (!$zoomIn.hasClass(zoomInLoaded)) {\r\n                        $zoomIn.on('click touchstart', zoomIn);\r\n                        $zoomIn.on('mousedown', function(e) {\r\n                            e.stopPropagation();\r\n                        });\r\n\r\n                        $zoomIn.keyup(function (e) {\r\n\r\n                            if (e.keyCode === 13) {\r\n                                zoomIn(e);\r\n                            }\r\n                        });\r\n\r\n                        $(window).keyup(function (e) {\r\n\r\n                            if (e.keyCode === 107 || fotorama.fullscreen) {\r\n                                zoomIn(e);\r\n                            }\r\n                        });\r\n\r\n                        $zoomIn.addClass(zoomInLoaded);\r\n                    }\r\n\r\n                    if (!$zoomOut.hasClass(zoomOutLoaded)) {\r\n                        $zoomOut.on('click touchstart', zoomOut);\r\n                        $zoomOut.on('mousedown', function(e) {\r\n                            e.stopPropagation();\r\n                        });\r\n\r\n                        $zoomOut.keyup(function (e) {\r\n\r\n                            if (e.keyCode === 13) {\r\n                                zoomOut(e);\r\n                            }\r\n                        });\r\n\r\n                        $(window).keyup(function (e) {\r\n\r\n                            if (e.keyCode === 109 || fotorama.fullscreen) {\r\n                                zoomOut(e);\r\n                            }\r\n                        });\r\n\r\n                        $zoomOut.addClass(zoomOutLoaded);\r\n                    }\r\n                })\r\n                .on('fotorama:fullscreenenter fotorama:showend', function (e, fotorama) {\r\n                    hideMagnifier();\r\n\r\n                    if (!$(fullscreenImageSelector).is($prevImage)) {\r\n                        resetVars($(fullscreenImageSelector));\r\n                    }\r\n                    magnifierFullscreen(fotorama);\r\n                    mousewheel(e, fotorama, element);\r\n\r\n                    if ($prevImage) {\r\n                        calculateMinSize($prevImage);\r\n\r\n                        if (!$(fullscreenImageSelector).is($prevImage)) {\r\n                            resetVars($prevImage);\r\n                        }\r\n                    }\r\n\r\n                    toggleStandartNavigation();\r\n                })\r\n                .on('fotorama:load', function (e, fotorama) {\r\n                    if ($(gallerySelector).data('fotorama').fullScreen) {\r\n                        toggleZoomButtons($(fullscreenImageSelector), isTouchEnabled,\r\n                            checkForVideo(fotorama.activeFrame.$stageFrame));\r\n                    }\r\n                    magnifierFullscreen(fotorama);\r\n                })\r\n                .on('fotorama:show', function (e, fotorama) {\r\n                    $prevImage = _.clone($(fullscreenImageSelector));\r\n                    hideMagnifier();\r\n                })\r\n                .on('fotorama:fullscreenexit', function (e, fotorama) {\r\n                    resetVars($(fullscreenImageSelector));\r\n                    hideMagnifier();\r\n                    hideZoomControls(true);\r\n                });\r\n        });\r\n\r\n        return config;\r\n    };\r\n});\r\n","requirejs/domReady.js":"/**\r\n * @license RequireJS domReady 2.0.1 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\r\n * Available via the MIT or new BSD license.\r\n * see: http://github.com/requirejs/domReady for details\r\n */\r\n/*jslint */\r\n/*global require: false, define: false, requirejs: false,\r\n  window: false, clearInterval: false, document: false,\r\n  self: false, setInterval: false */\r\n\r\n\r\ndefine(function () {\r\n    'use strict';\r\n\r\n    var isTop, testDiv, scrollIntervalId,\r\n        isBrowser = typeof window !== \"undefined\" && window.document,\r\n        isPageLoaded = !isBrowser,\r\n        doc = isBrowser ? document : null,\r\n        readyCalls = [];\r\n\r\n    function runCallbacks(callbacks) {\r\n        var i;\r\n        for (i = 0; i < callbacks.length; i += 1) {\r\n            callbacks[i](doc);\r\n        }\r\n    }\r\n\r\n    function callReady() {\r\n        var callbacks = readyCalls;\r\n\r\n        if (isPageLoaded) {\r\n            //Call the DOM ready callbacks\r\n            if (callbacks.length) {\r\n                readyCalls = [];\r\n                runCallbacks(callbacks);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the page as loaded.\r\n     */\r\n    function pageLoaded() {\r\n        if (!isPageLoaded) {\r\n            isPageLoaded = true;\r\n            if (scrollIntervalId) {\r\n                clearInterval(scrollIntervalId);\r\n            }\r\n\r\n            callReady();\r\n        }\r\n    }\r\n\r\n    if (isBrowser) {\r\n        if (document.addEventListener) {\r\n            //Standards. Hooray! Assumption here that if standards based,\r\n            //it knows about DOMContentLoaded.\r\n            document.addEventListener(\"DOMContentLoaded\", pageLoaded, false);\r\n            window.addEventListener(\"load\", pageLoaded, false);\r\n        } else if (window.attachEvent) {\r\n            window.attachEvent(\"onload\", pageLoaded);\r\n\r\n            testDiv = document.createElement('div');\r\n            try {\r\n                isTop = window.frameElement === null;\r\n            } catch (e) {}\r\n\r\n            //DOMContentLoaded approximation that uses a doScroll, as found by\r\n            //Diego Perini: http://javascript.nwbox.com/IEContentLoaded/,\r\n            //but modified by other contributors, including jdalton\r\n            if (testDiv.doScroll && isTop && window.external) {\r\n                scrollIntervalId = setInterval(function () {\r\n                    try {\r\n                        testDiv.doScroll();\r\n                        pageLoaded();\r\n                    } catch (e) {}\r\n                }, 30);\r\n            }\r\n        }\r\n\r\n        //Check if document already complete, and if so, just trigger page load\r\n        //listeners. Latest webkit browsers also use \"interactive\", and\r\n        //will fire the onDOMContentLoaded before \"interactive\" but not after\r\n        //entering \"interactive\" or \"complete\". More details:\r\n        //http://dev.w3.org/html5/spec/the-end.html#the-end\r\n        //http://stackoverflow.com/questions/3665561/document-readystate-of-interactive-vs-ondomcontentloaded\r\n        //Hmm, this is more complicated on further use, see \"firing too early\"\r\n        //bug: https://github.com/requirejs/domReady/issues/1\r\n        //so removing the || document.readyState === \"interactive\" test.\r\n        //There is still a window.onload binding that should get fired if\r\n        //DOMContentLoaded is missed.\r\n        if (document.readyState === \"complete\") {\r\n            pageLoaded();\r\n        }\r\n    }\r\n\r\n    /** START OF PUBLIC API **/\r\n\r\n    /**\r\n     * Registers a callback for DOM ready. If DOM is already ready, the\r\n     * callback is called immediately.\r\n     * @param {Function} callback\r\n     */\r\n    function domReady(callback) {\r\n        if (isPageLoaded) {\r\n            callback(doc);\r\n        } else {\r\n            readyCalls.push(callback);\r\n        }\r\n        return domReady;\r\n    }\r\n\r\n    domReady.version = '2.0.1';\r\n\r\n    /**\r\n     * Loader Plugin API method\r\n     */\r\n    domReady.load = function (name, req, onLoad, config) {\r\n        if (config.isBuild) {\r\n            onLoad(null);\r\n        } else {\r\n            domReady(onLoad);\r\n        }\r\n    };\r\n\r\n    /** END OF PUBLIC API **/\r\n\r\n    return domReady;\r\n});"}
    }
});
